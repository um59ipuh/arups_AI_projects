{"content": "Skip to content\n          (#start-building) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/index.md) \n Welcome \n Dune is a web-based platform that allows you to query public blockchain data and aggregate it into beautiful dashboards. \n \n Quickstart \n To get started with Dune in 5 minutes, see the  Quickstart  (quickstart/) . \n \n \n \n The world's blockchain data at your fingertips! \n \n Blockchains are open and transparent, but each chain is unique\u2014making it difficult to understand, ingest, and aggregate data. Dune gives you the proper tools to analyze cross-chain data for different tokens, wallets, and protocols. You can also easily share your work with the community. \n ", "url": "https://dune.com/docs/"}
{"content": "Start building \u00b6 \n Ready to start building? Once you have an  account  (https://dune.com/auth/register)  and you\u2019ve reviewed the  Quickstart  (quickstart/) , check out these essentials to start using Dune: \n \n Use the  Query Editor  (app/query-editor/)  to explore data, write queries, and gain mastery \n Make stunning  visualizations  (app/visualizations/)  with graphs, charts, and other unique options \n Create a  Dashboard  (app/dashboards/)  to embed visualizations, graphics, and text to tell compelling stories with your data \n \n ", "url": "https://dune.com/docs/#start-building"}
{"content": "Learn more \u00b6 \n If you\u2019re new to blockchain or SQL\u2014or want to go deeper on Dune concepts and best practices\u2014check out the following resources: \n \n Dune Official Getting Started Video Series  (https://www.youtube.com/watch?v=S-cctFmR828&list=PLK3b5d4iK10ext4v-GBySekaA8-GP8quD&index=1)  to learn how data flows and how to navigate the Dune app to get the most out of it \n Web3 Data & Analytics Learning Resources  (learning/)  to explore Dune 101, handy how-to tutorials, initiate your own analyses, and uncover foundational SQL and blockchain tools  \n Join our community in  Discord  (https://discord.gg/FjwGvbgDFS)  to get support through the  #\ud83d\udc25\ufe31beginners  and  #\ud83d\ude4b\ufe31query-questions  channels \n \n ", "url": "https://dune.com/docs/#learn-more"}
{"content": "Why Dune? \u00b6 \n Dune\u2014along with our massive community of users and experts\u2014provides powerful tools and analysis of all onchain data. You can find a  dashboard  (https://dune.com/browse/dashboards?q=dex&order=favorites&time_range=all)  for pretty much anything web3-related, including for EVMs like Ethereum, Polygon, Goerli, and Optimism\u2014and non-EVM chains like Solana and Bitcoin. \n Examples of real dashboards: \n \n NFT marketplaces  (https://dune.com/hildobby/NFTs) \n DEX metrics  (https://dune.com/hagaetc/dex-metrics) \n Project metrics  (https://dune.com/whale_hunter/unibot-revenue) \n DAO Accounting (Maker)  (https://dune.com/steakhouse/makerdao) \n Base Chain Metrics  (https://dune.com/optimismfnd/Optimism) \n \n ", "url": "https://dune.com/docs/#why-dune"}
{"content": "Find an expert \u00b6 \n There are many experts in the crypto community who specialize in Dune or have the necessary skills to get up to speed quickly. \n \n \n \n Find a Wizard \u00b6  (#find-a-wizard) \n A guide on how to find a skilled Dune Freelancer to work with you on your project.  \n \u2192 Find a Wizard  (resources/dune-bounties/)", "url": "https://dune.com/docs/#find-an-expert"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/api/api-reference/get-results/import-sheets.md) \n Import to Google Sheets \n Import your query results easily into a google sheet without any coding. Empower your finance, operations, and business teams to work with blockchain data in Google sheets. \n \n \n Use \"Import Data\" to import your CSV results into a google sheet using \"api_key\" as a param. (We advise against doing this any public document where your API key can be viewed and compromised.) \n =importData(\"https://api.dune.com/api/v1/query/{{query_id}}/results/csv?api_key={{api_key}}\") \n \n \n Schedule a query execution  (https://dune.com/docs/app/query-editor/query-scheduler/?h=scheduling)  to have your results regularly updated on a set schedule.", "url": "https://dune.com/docs/api/api-reference/get-results/import-sheets/"}
{"content": "Skip to content\n          (#example-request) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/api/api-reference/get-results/latest-results.md) \n Get Latest Query Results \n \n ENDPOINTS \n  (#__codelineno-0-1) GET /api/v1/query/{{query_id}}/results\n  (#__codelineno-0-2) GET /api/v1/query/{{query_id}}/results/csv\n \n \n These endpoints allow you to get the latest results of a query, regardless of the job id/run or if it is run in the app or the api. Returns the latest execution id and results of the run. You must pass parameter  query_id . The query specified must either be public or a query you have ownership of (you or a team you belong to have ownership). \n By appending \"/csv\" to the URL, you specify the return to be in CSV format. Else, results are returned in JSON format. \n \n Note on Parameters \n \n For query params, we recommend you to not have spaces for a parameter, use underscore instead like  https://api.dune.com/api/v1/query/2340912/results?params.LooksRare%20Wash%20Trading%20Filter=ON . If no query params are provided, the request will fetch the latest results regardless of parameter (not just default!) \n This endpoint does NOT trigger execution but does consume credits through datapoints \n \n \n ", "url": "https://dune.com/docs/api/api-reference/get-results/latest-results/"}
{"content": "Skip to content\n          (#example-request) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/api/api-reference/get-results/execution-results.md) \n Get Execution Results \n \n ENDPOINTS \n  (#__codelineno-0-1) GET /api/v1/execution/{{execution_id}}/results\n  (#__codelineno-0-2) GET /api/v1/execution/{{execution_id}}/results/csv\n \n \n These endpoints allow you to get the results data of an execution request. You must pass the  execution_id  obtained from making a  Execute Query ID POST  (../../execute-queries/execute-query-id/)  request. Result returns the status, metadata, and query results from a query execution. \n By appending \"/csv\" to the URL, you specify the return to be in CSV format. Else, results are returned in JSON format. \n ", "url": "https://dune.com/docs/api/api-reference/get-results/execution-results/"}
{"content": "Please wait \n This application is starting, you will be redirected once it is ready. \n If your are the application owner, check your logs for details.", "url": "https://dune.com/docs/api/api-reference/get-results/execution-status/"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/api/api-reference/get-results/index.md) \n Getting Results \n Learn how to get query results, including how to check status of an execution and how to get latest associated result.  \n \n \n Get Execution Status  (execution-status/) \n Get Execution Results  (execution-results/) \n Get Latest Query Results  (latest-results/) \n Import to Google Sheets  (import-sheets/) \n \n \n \n Tip \n \n Checking execution status is particularly relevant for you to know the size of the result before you pull it. \n If you don't need the most up to date data and just want to query for most recently refreshed results of a query, check out the  get latest results  (latest-results/)  endpoint.", "url": "https://dune.com/docs/api/api-reference/get-results/"}
{"content": "Skip to content\n          (#example-request) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/api/api-reference/execute-queries/cancel-execution.md) \n Cancel Execution \n \n ENDPOINTS \n  (#__codelineno-0-1) POST /api/v1/execution/{{execution_id}}/cancel\n \n \n This endpoint allows you to cancel an triggered execution request. You must pass the  execution_id  obtained from making a  Execute Query ID POST  (../execute-query-id/)  request. Result returns a boolean for whether the execution is successfully canceled. \n ", "url": "https://dune.com/docs/api/api-reference/execute-queries/cancel-execution/"}
{"content": "Please wait \n This application is starting, you will be redirected once it is ready. \n If your are the application owner, check your logs for details.", "url": "https://dune.com/docs/api/api-reference/execute-queries/execute-query-id/"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/api/api-reference/execute-queries/index.md) \n Executing Queries \n Learn how to execute an existing query and cancel the execution. For how to get query results (including knowing how big the result will be), please refer to  Getting Results  (../get-results/)  section. \n \n \n Execute Query via Query ID  (execute-query-id/) \n Cancel Execution  (cancel-execution/) \n \n \n \n Tip \n You can specify the  performance  level of executions (see example in  execute query id  (execute-query-id/) ).", "url": "https://dune.com/docs/api/api-reference/execute-queries/"}
{"content": "Skip to content\n          (#invalid-api-key) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/api/api-reference/errors.md) \n Error Codes \n Dune uses conventional HTTP response codes to indicate the success or failure of an API request. In general: Codes in the  2xx  range indicate success. Codes in the  4xx  range indicate an error that failed given the information provided. Codes in the  5xx  range indicate an error with Dune's servers (these are rare). \n For specific error code information, please refer to each of the endpoint itself. \n Here we list some common errors and suggest possible solution: \n ", "url": "https://dune.com/docs/api/api-reference/errors/"}
{"content": "Skip to content\n          (#header) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/api/api-reference/authentication.md) \n Authentication \n The Dune API uses API keys to authenticate requests. Your API key is used to determine the permissions of private queries you may call, as well as which account to bill for the requests, so be sure to keep them secure! \n Do not share your secret API keys in publicly accessible areas such as GitHub, client-side code, and so forth. \n ", "url": "https://dune.com/docs/api/api-reference/authentication/"}
{"content": "Skip to content\n          (#authentication) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/api/api-reference/index.md) \n API Reference \n Here are all endpoints:  \n \n ALL ENDPOINTS \n Executing Queries  (#__tabbed_1_1) Getting Results  (#__tabbed_1_2) Editing Queries (CRUD API)  (#__tabbed_1_3) Data Uploads  (#__tabbed_1_4) \n \n \n POST  /api/v1/query/{{query_id}}/execute  (execute-queries/execute-query-id/) \nPOST  /api/v1/execution/{{execution_id}}/cancel  (execute-queries/cancel-execution/) \n \n \n GET  /api/v1/execution/{{execution_id}}/status  (get-results/execution-status/) \nGET  /api/v1/execution/{{execution_id}}/results  (get-results/execution-status/) \nGET  /api/v1/execution/{{execution_id}}/results/csv  (get-results/execution-status/) \nGET  /api/v1/query/{{query_id}}/results  (get-results/execution-results/) \nGET  /api/v1/query/{{query_id}}/results/csv  (get-results/execution-results/) \n \n \n POST  /api/v1/query/  (edit-queries/create-query/) \nPATCH  /api/v1/query/{{query_id}}  (edit-queries/update-query/) \nGET  /api/v1/query/{{query_id}}  (edit-queries/get-query/) \nPOST  /api/v1/query/{{query_id}}/archive  (edit-queries/archive-query/) \nPOST  /api/v1/query/{{query_id}}/unarchive  (edit-queries/archive-query/) \nPOST  /api/v1/query/{{query_id}}/private  (edit-queries/private-query/) \nPOST  /api/v1/query/{{query_id}}/unprivate  (edit-queries/private-query/) \n \n \n POST  https://api.dune.com/api/v1/table/upload/csv  (upload-data/) \n \n \n \n \n \n \n \n Authentication \u00b6  (#authentication) \n Learn how to authenticate with our API.   \n \n \n Errors Codes \u00b6  (#errors-codes) \n Get a comprehensive overview of the different error codes you may encounter while using our API, along with their meanings and potential solutions for troubleshooting. \n \n \n Executing Queries \u00b6  (#executing-queries) \n Turn existing queries into endpoints and progmatically execute them. \n \n \n Getting Results \u00b6  (#getting-results) \n Get results of executed queries. \n \n \n Editing Queries (CRUD API) \u00b6  (#editing-queries-crud-api) \n CRUD API endpoints enables users to create, read, update, or archive queries  beyond  the Dune IDE, enabling more flexible integration of Dune API into your workflow and freeing you from UI-exclusive query editing. \n \n \n Uploading Data (Write API) \u00b6  (#uploading-data-write-api) \n Use Dune's write API to upload CSV files to a specific table in the Dune database.", "url": "https://dune.com/docs/api/api-reference/"}
{"content": "Skip to content\n          (#getting-set-up) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/api/quick-start/python/raw-walkthrough.md) \n Raw walkthrough \n ", "url": "https://dune.com/docs/api/quick-start/python/raw-walkthrough/"}
{"content": "Skip to content\n          (#python) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/api/quick-start/community-clients.md) \n Community Clients \n Our community once again comes through for the win with the below API clients. \n If you've built your own let us know about it in our  #dune-api Discord Channel  (https://discord.gg/FjwGvbgDFS) ! \n \n Disclaimer \n While we love that our community has taken the lead, these clients are not directly maintained by the Dune team. \n \n \n Note \n The community SDKs currently only contains endpoints under  Executing Queries  (../../api-reference/execute-queries/)  and  Getting Results  (../../api-reference/get-results/) .  \n \n ", "url": "https://dune.com/docs/api/quick-start/community-clients/"}
{"content": "Skip to content\n          (#want-to-just-get-it-to-quickly-work) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/api/quick-start/api-js.md) \n Javascript \n \n Warning \n This guide is not yet comprehensive. If you have questions, please reach out to our team via the # dune-api  (https://discord.com/channels/757637422384283659/1019910980634939433)  channel on Discord. \n \n Let's get started using the Dune API via JavaScript! \n We'll show you one of the several ways the API can be consumed via JavaScript, in this case using the  node-fetch  package. You can also try to use the native fetch funcionality which is available in the newest LTS version of node, node 18. We would be upgrading this guide in the near future to use the same. \n \n Prerequisites \n This Quick Start Guide assumes you have some level of familiarity with Node.js (Node), Node Package Manager (NPM) and Node Version Manager (NVM). \n \n To start, make sure you're using the current LTS version of Node.js (Node 18) and the latest version of NPM: \n ", "url": "https://dune.com/docs/api/quick-start/api-js/"}
{"content": "Skip to content\n          (#python-sdk-quickstart) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/api/quick-start/api-py.md) \n Python \n Let's get started using the Dune API via Python! \n In this example we'll be using Python3. We recommend using a virtual environment and the  pip  package manager. \n \n Prerequisites \n This Quick Start Guide assumes you have some prior experience using Python, though we aimed to make the code here easy to follow. If you have questions, please reach out to our team via the # dune-api  (https://discord.com/channels/757637422384283659/1019910980634939433)  channel on Discord. \n \n ", "url": "https://dune.com/docs/api/quick-start/api-py/"}
{"content": "Skip to content\n          (#language-specific-api-quickstart-guides) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/api/quick-start/index.md) \n API Quick Start \n ", "url": "https://dune.com/docs/api/quick-start/"}
{"content": "Skip to content\n          (#api-reference) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/api/index.md) \n API \n The Dune API simplifies your data integration worflow and turbocharges your efficiency!   \n Dune API is your solution for data infrastructure and workflow management, enabling you to create API endpoints, run queries, and manage them systematically across 12 chains and 700,000+ data tables, thereby unlocking its full potential. \n ", "url": "https://dune.com/docs/api/"}
{"content": "Skip to content\n          (#setup) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/app/alerts.md) \n Alerts \n Alerts allow you to receive notifications based on any query! \n Alerts allows users to set notifications for a scheduled query. These notifications are triggered each time the query runs. Supported delivery methods include: \n \n Email:  Multiple email addresses can be added. \n Webhooks:  Alerts can be sent to a specified callback URL, including Slack. \n \n ", "url": "https://dune.com/docs/app/alerts/"}
{"content": "Skip to content\n          (#refining-your-results) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/app/search.md) \n Search content \n Leverage Dune's powerful search functionality to find exactly what you need \n You can access Dune's search functionality everywhere in the Dune App through the search box in the top bar. If you want to refine your searches, you can click on the type of content you're interested in (e.g. Dashboards) to navigate to an extended results list: \n \n ", "url": "https://dune.com/docs/app/search/"}
{"content": "Skip to content\n          (#using-embeds-on-different-platforms) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/app/embeds.md) \n Share your work \n Create embeds to display your Dune widgets across the web! \n To save you from having to take screenshots that might not look so great but will definitely be out of date a few minutes after you take them, we've built a native embed function that works across most web platforms. \n You can generate embed links by clicking on any query title and selecting the embed function in the top right corner. \n \n Note \n The embed button works as a stand alone link and as a way to embed your live graphs into websites/apps. If a Query has no Visualizations, the link will be to the Query Results table. If you have multiple Visualizations, the link will be for whichever Visualization you've selected when you clicked the Embed button. \n \n \n ", "url": "https://dune.com/docs/app/embeds/"}
{"content": "Skip to content\n          (#querying-for-the-data-in-dune) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/app/upload-data.md) \n Upload Data \n Easily upload your own data to Dune \n This feature allows you to upload any csv file to Dune and query it like any other table in Dune. Currently, the we only supports uploading CSV files with a maximum size of 200 MB. The app will return an error if the file size exceeds this limit.  \nAdditionally, column names in the table can't start with a special character or digits. \n The files you upload will be queryable via the schema  dune.team_name.dataset_name . For example, if you upload a file called  energy_data.csv  to the team  dune  and name the dataset  energy_data , you will be able to query the data via  dune.dune.energy_data . \n You'll be able to query for your data in any query. \n  (#__codelineno-0-1) Select   *   from   dune . dune . dataset_energy_data \n \n \n \n Info \n All data uploaded is public and can be accessed by anyone.  \nPrivate data uploads are available only on the  premium plan. \n \n \n Tip \n You can also upload data via the API. Check out the  API documentation  (../../api/api-reference/upload-data/)  for more information. \n \n \n \n Click on the \"Upload Data\" button in the menu of the Dune UI. \n Select the csv file you want to upload. \n Name your table and add a description. \n Click on save to finish the upload. \n \n ", "url": "https://dune.com/docs/app/upload-data/"}
{"content": "Skip to content\n          (#wand-create) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/app/wand-llm.md) \n Wand LLM Features \n Dune is launching a beta suite of tools for writing SQL queries with the help of large language models. \n ", "url": "https://dune.com/docs/app/wand-llm/"}
{"content": "Skip to content\n          (#why-teams) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/app/teams.md) \n Work with your Team \n Dune Teams are shared workspaces for Wizards to collaborate within. \n ", "url": "https://dune.com/docs/app/teams/"}
{"content": "Skip to content\n          (#decoding-contracts) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/app/decoding-contracts.md) \n ", "url": "https://dune.com/docs/app/decoding-contracts/"}
{"content": "Skip to content\n          (#creating-a-dashboard) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/app/dashboards.md) \n Create a Dashboard \n Dashboards are where Dune's content lives and gets discovered. \n Dashboards on Dune consist of widgets. Widgets can either be Visualizations or Text. It is also possible to embed images or GIFs inside of the text widget. \n You can freely resize every widget to match the layout you want to create. \n ", "url": "https://dune.com/docs/app/dashboards/"}
{"content": "Skip to content\n          (#configuring-your-table) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/app/visualizations/tables.md) \n Formatting Tables \n Tables are the default Visualization whenever you create and run a Query. \n \n You can also make more Tables to display your data differently using the  New visualization  button and drop down menu: \n \n ", "url": "https://dune.com/docs/app/visualizations/tables/"}
{"content": "", "url": "https://dune.com/docs/app/visualizations/charts-graphs/"}
{"content": "Skip to content\n          (#charts-graphs) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/app/visualizations/index.md) \n Visualizations \n Dune offers you several way to display your data. \n \n \n \n Charts & Graphs \u00b6  (#charts-graphs) \n \n Create Charts & Graphs to visualize your data.   \n \u2192 Charts & Graphs  (charts-graphs/) \n \n \n Tables \u00b6  (#tables) \n \n Learn how to change the appearance of your tables.  \n \u2192 Tables  (tables/) \n \n \n Counters \u00b6  (#counters) \n \n Show off specific data points with counters.  \n \u2192 Counters  (counters/)", "url": "https://dune.com/docs/app/visualizations/"}
{"content": "", "url": "https://dune.com/docs/app/query-editor/version-history/"}
{"content": "Skip to content\n          (#browsing-data) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/app/query-editor/data-explorer.md) \n Finding Tables \n The left sidebar of the query editor is the Data Explorer. It allows you to search for blockchain and other data to use in your queries. \n You can learn about Dune's data tables  in the data tables section  (../../../data-tables/) . \n ", "url": "https://dune.com/docs/app/query-editor/data-explorer/"}
{"content": "Skip to content\n          (#how-to-schedule-a-query) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/app/query-editor/query-scheduler.md) \n Scheduling Queries \n Query Scheduling allows you to schedule a query to run at a specific time and frequency. \n Queries on Dune usually execute when a user triggers an  automatic or interactive execution  (./#when-does-dune-execute-queries) . This means that if you have a dashboard that is not frequently viewed, the data displayed on the dashboard may be outdated and execution of the queries will only be triggered once a user views the dashboard. Especially for dashboards that contain resource-intensive queries, this can lead to long loading times for the viewer. \n To keep your dashboard up-to-date and to ensure that your queries are executed reliably and in a timely manner, you can schedule them to run at a specific time and frequency. Scheduled queries can be run on medium and large query engines, which will require credits. Credit costs are the same as any other query execution on Dune, you will pay 10 credits for a medium tier execution and 20 credits for a large tier execution. \n ", "url": "https://dune.com/docs/app/query-editor/query-scheduler/"}
{"content": "Skip to content\n          (#freeform-parameters) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/app/query-editor/parameters.md) \n Using Parameters \n Parameters allow you to implement variables in certain parts of your Query. This is useful if you want to create a Query that you can reuse with different parameters. \n Parameters in Dune are versatile and can be used in many different ways. You can use them to: \n \n filter on a specific token \n filter on a specific token pair \n filter on a specific address \n filter on a specific date range \n filter on a specific category \n etc. \n \n Parameters can be a  single value  or a  list of values  and you can choose  one  or  multiple  values from a pre-defined list of values. This list can be manually defined or populated from a different query. \n To use parameters: \n \n choose the spot in your Query where you want to implement a parameter \n click on the add parameter button or type  {{example_parameter_name}} \n open the parameter options  \n configure your parameter's name, type, and default value \n \n Parameters can be text, numbers,a date, a manual list of values or a list of values from a different query. \n \n ", "url": "https://dune.com/docs/app/query-editor/parameters/"}
{"content": "Skip to content\n          (#query-editor) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/app/query-editor/query-window.md) \n Writing Queries \n The Query Editor is where you construct your queries. You'll probably spend most of your time here. \n \n To learn more about how to actually write queries, check out the  query documentation  (../../../query/) . \n This section of the documentation describes the UI features of the query editor. \n ", "url": "https://dune.com/docs/app/query-editor/query-window/"}
{"content": "Skip to content\n          (#writing-queries) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/app/query-editor/index.md) \n Query Editor \n Learn more about how Dune's Query Editor works: \n \n \n \n Writing Queries \u00b6  (#writing-queries) \n \n The Query Editor is where you work your Dune by inputting SQL code and running it.   \n \u2192 Writing Queries  (query-window/) \n \n \n Query Parameters \u00b6  (#query-parameters) \n \n Parameters allow you to implement variables in certain parts of your Query.   \n \u2192 Query Parameters  (parameters/) \n \n \n Finding Tables \u00b6  (#finding-tables) \n \n The Data Explorer empowers you to search for blockchain and other data to use in your queries.   \n \u2192 Finding Tables  (data-explorer/) \n \n \n Access the Version History \u00b6  (#access-the-version-history) \n \n Version History allows you to see the history of changes made to your queries.   \n \u2192 Version History  (version-history/) \n \n \n Scheduling Queries \u00b6  (#scheduling-queries) \n \n Query Scheduler allows you to reliably execute queries in a defined schedule. \n \u2192 Scheduling Queries  (query-scheduler/)", "url": "https://dune.com/docs/app/query-editor/"}
{"content": "Skip to content\n          (#query-editor) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/app/index.md) \n App Overview \n The Dune platform is your key to accessing blockchain data!   \n \n \n \n Query Editor \u00b6  (#query-editor) \n \n The Query Editor is where you can write SQL queries to explore blockchain data. This docs section describes the functional elements of the Query Editor, to learn how to write queries, see  the query section  (../query/) .   \n \u2192 Queries  (query-editor/) \n \n \n Visualizations \u00b6  (#visualizations) \n \n Visualizations make your data come to life! You can create Visualizations from any results of a query.   \n \u2192 Visualizations  (visualizations/) \n \n \n Dashboards \u00b6  (#dashboards) \n \n Dashboards are a collection of Visualizations and text that you can share with the world. You can create Dashboards out of any Visualizations you have created.   \n \u2192 Dashboards  (dashboards/) \n \n \n Decoding \u00b6  (#decoding) \n \n Decoding is a feature that allows you to submit contracts for decoding. This is useful if you want to decode events or transactions that are not decoded already.   \n \u2192 Decoding  (decoding-contracts/) \n \n \n Teams \u00b6  (#teams) \n \n Working with a team? You can create a team and invite your teammates to collaborate on queries, visualizations, and dashboards.   \n \u2192 Teams  (teams/) \n \n \n Embeds \u00b6  (#embeds) \n \n Embeds allow you to embed your Visualizations on your website, blog, twitter, or anywhere else you want to share your data.   \n \u2192 Embeds  (embeds/) \n \n \n Wand (Beta) \u00b6  (#wand-beta) \n \n Wand is a beta suite of tools for writing SQL queries with the help of large language models. \n \u2192 Wand (Beta)  (wand-llm/)", "url": "https://dune.com/docs/app/"}
{"content": "Skip to content\n          (#welcome-to-dune) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/quickstart.md) \n Quickstart \n \n \n The world's blockchain data at your fingertips! \n \n ", "url": "https://dune.com/docs/quickstart/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#5-dune) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/index.md) \n \u6b22\u8fce \n \n \n Dune \u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u533a\u5757\u94fe\u7814\u7a76\u5de5\u5177\uff0c\u914d\u5907\u4e86\u60a8\u9700\u8981\u7684\u6240\u6709\u5de5\u5177\uff0c\u4ee5\u53d1\u73b0\u3001\u63a2\u7d22\u548c\u53ef\u89c6\u5316\u5927\u91cf\u533a\u5757\u94fe\u6570\u636e\u3002 \n Dune \u662f\u60a8\u89e3\u7b54\u95ee\u9898\u7684\u5173\u952e\uff0c\u6bd4\u5982\uff1a \n \n Uniswap \u6bcf\u5929\u7ecf\u624b\u591a\u5c11\u4ea4\u6613\u91cf\uff1f  (https://dune.com/queries/3) \n \u54ea\u4e2a Dex \u6709\u6700\u9ad8\u7684\u4ea4\u6613\u91cf\uff1f  (https://dune.com/queries/1847) \n \u91cd\u8981\u7684\u7a33\u5b9a\u5e01\u4eca\u5929\u8868\u73b0\u5982\u4f55\uff1f  (https://dune.com/hagaetc/stablecoins) \n \n ", "url": "https://dune.com/docs/zh/"}
{"content": "Skip to content\n          (#counters) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/app/visualizations/counters.md) \n Create counters \n Counters give you a way to display a single number in a prominent way. \n ", "url": "https://dune.com/docs/app/visualizations/counters/"}
{"content": "Skip to content\n          (#instruction-calls) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/raw/solana/instruction-calls.md) \n ", "url": "https://dune.com/docs/data-tables/raw/solana/instruction-calls/"}
{"content": "Example Request \u00b6 \n ", "url": "https://dune.com/docs/api/api-reference/get-results/latest-results/#example-request"}
{"content": "cURL \u00b6 \n  (#__codelineno-1-1) curl -X GET \"https://api.dune.com/api/v1/query/{{query_id}}/results\" -H x-dune-api-key:{{api_key}}\n \n \n Info \n There is a default 250,000 datapoints limit to make sure you don't accidentally spend all your credits in one call. To ignore the max limit, you can add  ignore_max_datapoints_per_request=true \n  (#__codelineno-2-1) curl -X GET \"https://api.dune.com/api/v1/query/{{query_id}}/results\\?ignore_max_datapoints_per_request=true\" -H x-dune-api-key:{{api_key}}\n \n \n ", "url": "https://dune.com/docs/api/api-reference/get-results/latest-results/#curl"}
{"content": "Python \u00b6 \n  (#__codelineno-3-1) import   dotenv \n  (#__codelineno-3-2) import   os \n  (#__codelineno-3-3) import   json \n  (#__codelineno-3-4) import   requests \n  (#__codelineno-3-5) import   pandas   as   pd \n  (#__codelineno-3-6) import   time \n  (#__codelineno-3-7) \n  (#__codelineno-3-8) api_key   =   os . environ [ \"DUNE_API_KEY\" ] \n  (#__codelineno-3-9) \n  (#__codelineno-3-10) # authentiction with api key \n  (#__codelineno-3-11) headers   =   { \"x-dune-api-key\" :   api_key } \n  (#__codelineno-3-12) \n  (#__codelineno-3-13) query_id   =   1252207 \n  (#__codelineno-3-14) base_url   =   f \"https://api.dune.com/api/v1/query/ { query_id } /results\" \n  (#__codelineno-3-15) params   =   { \n  (#__codelineno-3-16)      \"params.LooksRare Wash Trading Filter\" :   \"ON\" ,   # one and only param for this query \n  (#__codelineno-3-17) } \n  (#__codelineno-3-18) result_response   =   requests . request ( \"GET\" ,   base_url ,   headers = headers ,   params = params ) \n \n You can partially fill parameters as well, say there are three parameters - if you only pass in two then the other one will use the default parameters: \n  (#__codelineno-4-1) # case 4: partial match of the existing params that were executed will work aka 200\n  (#__codelineno-4-2) query_id = 1064888\n  (#__codelineno-4-3) base_url = f\"https://api.dune.com/api/v1/query/{query_id}/results\"\n  (#__codelineno-4-4) params = {\n  (#__codelineno-4-5)     \"params.Show Today\": \"No\",\n  (#__codelineno-4-6)     \"params.Time Period\": \"day\" \n  (#__codelineno-4-7)     # there is one more param for this query \"Trailing Num Periods\" which we are not passing\n  (#__codelineno-4-8) }\n  (#__codelineno-4-9) result_response = requests.request(\"GET\", base_url, headers=headers, params=params)\n \n \n Parameter 404 Behaviors \n If a certain parameter has never been run before, i.e. putting in \"OFF\" above when only \"ON\" has been executed in app, then you will get a 404. Same thing if you try and use a parameter that doesn't exist on the query. \n \n ", "url": "https://dune.com/docs/api/api-reference/get-results/latest-results/#python"}
{"content": "Example Response \u00b6 \n  (#__codelineno-5-1) { \"execution_id\" :   \"01GXDTYMM2CKFRBEW44X5S0WZE\" , \n  (#__codelineno-5-2)   \"query_id\" :   1252207 , \n  (#__codelineno-5-3)   \"state\" :   \"QUERY_STATE_COMPLETED\" , \n  (#__codelineno-5-4)   \"submitted_at\" :   \"2023-04-07T12:27:09.314513Z\" , \n  (#__codelineno-5-5)   \"expires_at\" :   \"2025-04-06T12:27:15.749155Z\" , \n  (#__codelineno-5-6)   \"execution_started_at\" :   \"2023-04-07T12:27:09.387366Z\" , \n  (#__codelineno-5-7)   \"execution_ended_at\" :   \"2023-04-07T12:27:15.749154Z\" , \n  (#__codelineno-5-8)   \"result\" :   { \"rows\" :   [ \n  (#__codelineno-5-9)      { \"24 Hours Volume\" :   10501366.303435229 , \n  (#__codelineno-5-10)      \"7 Days Volume\" :   83500570.47565666 , \n  (#__codelineno-5-11)      \"Rank\" :   1 , \n  (#__codelineno-5-12)      \"Total Volume\" :   35184444503.17035 , \n  (#__codelineno-5-13)      \"project\" :   \"opensea\" }, \n  (#__codelineno-5-14)     { \"24 Hours Volume\" :   2905815.0342120747 , \n  (#__codelineno-5-15)      \"7 Days Volume\" :   34792342.84606525 , \n  (#__codelineno-5-16)      \"Rank\" :   2 , \n  (#__codelineno-5-17)      \"Total Volume\" :   4897580325.593282 , \n  (#__codelineno-5-18)      \"project\" :   \"x2y2\" }, \n  (#__codelineno-5-19)     { \"24 Hours Volume\" :   21859216.193396263 , \n  (#__codelineno-5-20)      \"7 Days Volume\" :   256722523.89635494 , \n  (#__codelineno-5-21)      \"Rank\" :   3 , \n  (#__codelineno-5-22)      \"Total Volume\" :   4037590713.6422567 , \n  (#__codelineno-5-23)      \"project\" :   \"blur\" } \n  (#__codelineno-5-24)      ], \n  (#__codelineno-5-25)     \"result_set_bytes\" :   1524 , \n  (#__codelineno-5-26)     \"total_row_count\" :   26 , \n  (#__codelineno-5-27)     \"datapoint_count\" :   135 , \n  (#__codelineno-5-28)     \"pending_time_millis\" :   72 , \n  (#__codelineno-5-29)     \"execution_time_millis\" :   6361 } \n  (#__codelineno-5-30) }", "url": "https://dune.com/docs/api/api-reference/get-results/latest-results/#example-response"}
{"content": "Example Request \u00b6 \n ", "url": "https://dune.com/docs/api/api-reference/get-results/execution-results/#example-request"}
{"content": "cURL \u00b6 \n  (#__codelineno-1-1) curl -X GET \"https://api.dune.com/api/v1/execution/{{execution_id}}/results\" -H x-dune-api-key:{{api_key}}\n \n \n Info \n There is a default 250,000 datapoints limit to make sure you don't accidentally spend all your credits in one call. To ignore the max limit, you can add  ignore_max_datapoints_per_request=true \n  (#__codelineno-2-1) curl -X GET \"https://api.dune.com/api/v1/execution/{{execution_id}}/results/?ignore_max_datapoints_per_request=true\" -H x-dune-api-key:{{api_key}}\n \n \n ", "url": "https://dune.com/docs/api/api-reference/get-results/execution-results/#curl"}
{"content": "Python \u00b6 \n  (#__codelineno-3-1) import   dotenv \n  (#__codelineno-3-2) import   os \n  (#__codelineno-3-3) import   json \n  (#__codelineno-3-4) import   requests \n  (#__codelineno-3-5) import   pandas   as   pd \n  (#__codelineno-3-6) import   time \n  (#__codelineno-3-7) \n  (#__codelineno-3-8) # load .env file \n  (#__codelineno-3-9) dotenv . load_dotenv ( '/Users/abc/Documents/Workspace/misc/.env' ) \n  (#__codelineno-3-10) # get API key \n  (#__codelineno-3-11) api_key   =   os . environ [ \"DUNE_API_KEY\" ] \n  (#__codelineno-3-12) # authentiction with api key \n  (#__codelineno-3-13) headers   =   { \"X-Dune-API-Key\" :   api_key } \n  (#__codelineno-3-14) \n  (#__codelineno-3-15) execution_id   =   60066 \n  (#__codelineno-3-16) base_url   =   f \"https://api.dune.com/api/v1/execution/ { execution_id } /results\" \n  (#__codelineno-3-17) result_response   =   requests . request ( \"GET\" ,   base_url ,   headers = headers ) \n \n ", "url": "https://dune.com/docs/api/api-reference/get-results/execution-results/#python"}
{"content": "Example Response \u00b6 \n ", "url": "https://dune.com/docs/api/api-reference/get-results/execution-results/#example-response"}
{"content": "JSON Format \u00b6 \n  (#__codelineno-4-1) { \n  (#__codelineno-4-2)      \"execution_id\" :   \"01GBM4W2N0NMCGPZYW8AYK4YF1\" , \n  (#__codelineno-4-3)      \"query_id\" :   980708 , \n  (#__codelineno-4-4)      \"state\" :   \"QUERY_STATE_COMPLETED\" , \n  (#__codelineno-4-5)      \"submitted_at\" :   \"2022-08-29T06:33:24.913138Z\" , \n  (#__codelineno-4-6)      \"expires_at\" :   \"2024-08-28T06:36:41.58847Z\" , \n  (#__codelineno-4-7)      \"execution_started_at\" :   \"2022-08-29T06:33:24.916543Z\" , \n  (#__codelineno-4-8)      \"execution_ended_at\" :   \"2022-08-29T06:36:41.588467Z\" , \n  (#__codelineno-4-9)      \"result\" :   { \n  (#__codelineno-4-10)          \"rows\" :   [ \n  (#__codelineno-4-11)              { \n  (#__codelineno-4-12)                  \"TableName\" :   \"eth_blocks\" , \n  (#__codelineno-4-13)                  \"ct\" :   6296 \n  (#__codelineno-4-14)              }, \n  (#__codelineno-4-15)              { \n  (#__codelineno-4-16)                  \"TableName\" :   \"eth_traces\" , \n  (#__codelineno-4-17)                  \"ct\" :   4474223 \n  (#__codelineno-4-18)              }, \n  (#__codelineno-4-19)              { \n  (#__codelineno-4-20)                  \"TableName\" :   \"eth_creation_traces\" , \n  (#__codelineno-4-21)                  \"ct\" :   10155 \n  (#__codelineno-4-22)              }, \n  (#__codelineno-4-23)              { \n  (#__codelineno-4-24)                  \"TableName\" :   \"eth_logs\" , \n  (#__codelineno-4-25)                  \"ct\" :   2137508 \n  (#__codelineno-4-26)              }, \n  (#__codelineno-4-27)              { \n  (#__codelineno-4-28)                  \"TableName\" :   \"eth_transactions\" , \n  (#__codelineno-4-29)                  \"ct\" :   1039890 \n  (#__codelineno-4-30)              }, \n  (#__codelineno-4-31)              { \n  (#__codelineno-4-32)                  \"TableName\" :   \"sol_transactions\" , \n  (#__codelineno-4-33)                  \"ct\" :   37185158 \n  (#__codelineno-4-34)              }, \n  (#__codelineno-4-35)              { \n  (#__codelineno-4-36)                  \"TableName\" :   \"bnb_transactions\" , \n  (#__codelineno-4-37)                  \"ct\" :   2942005 \n  (#__codelineno-4-38)              }, \n  (#__codelineno-4-39)              { \n  (#__codelineno-4-40)                  \"TableName\" :   \"optimism_transactions\" , \n  (#__codelineno-4-41)                  \"ct\" :   120973 \n  (#__codelineno-4-42)              } \n  (#__codelineno-4-43)          ], \n  (#__codelineno-4-44)          \"metadata\" :   { \n  (#__codelineno-4-45)              \"column_names\" :   [ \n  (#__codelineno-4-46)                  \"ct\" , \n  (#__codelineno-4-47)                  \"TableName\" \n  (#__codelineno-4-48)              ], \n  (#__codelineno-4-49)              \"result_set_bytes\" :   194 , \n  (#__codelineno-4-50)              \"total_row_count\" :   8 , \n  (#__codelineno-4-51)              \"datapoint_count\" :   16 , \n  (#__codelineno-4-52)              \"pending_time_millis\" :   8 , \n  (#__codelineno-4-53)              \"execution_time_millis\" :   24 \n  (#__codelineno-4-54)          } \n  (#__codelineno-4-55)      } \n  (#__codelineno-4-56) } \n \n \n execution_id  : The execution ID for which this API was called. \n query_id  : The ID of the Dune Query executed with this request. \n state  : The current state of the query's execution. Check our  FAQ  section to see what different status codes for  state  mean. \n submitted_at  : The timestamp at which the API for executing this query was called. \n expires_at  : The time upto which results from this query's execution shall be stored in our Database. \n execution_started_at  : The time at which query execution started for this request in our servers. \n execution_ended_at  : The time at which the query execution for this request got completed in our servers. \n result  : \n rows  : The actual rows of data being returned for this request. \n metadata  : Some properties of the queried data being returned. \n column_names  : Names of the columns in the data returned. \n result_set_bytes  : The size of the returned data. \n total_row_count  : The number of rows in the data. \n datapoint_count  : Total number of datapoints returned with this request, should equal to ( total_row_count  x number of columns). \n pending_time_millis  : The time (in milliseconds) it took to assign a slot in our server for this request. \n execution_time_millis  : The time (in milliseconds) it took for the actual execution of the query with this request. \n \n \n \n \n \n ", "url": "https://dune.com/docs/api/api-reference/get-results/execution-results/#json-format"}
{"content": "CSV Format \u00b6 \n  (#__codelineno-5-1) ct,TableName\n  (#__codelineno-5-2) 6296,eth_blocks\n  (#__codelineno-5-3) 4.474223e+06,eth_traces\n  (#__codelineno-5-4) 10155,eth_creation_traces\n  (#__codelineno-5-5) 2.137508e+06,eth_logs\n  (#__codelineno-5-6) 1.03989e+06,eth_transactions\n  (#__codelineno-5-7) 3.7185158e+07,sol_transactions\n  (#__codelineno-5-8) 2.942005e+06,bnb_transactions\n  (#__codelineno-5-9) 120973,optimism_transactions\n \n \n Tip \n \n \n In order to get the results in CSV format, append \"/csv\":  GET /api/v1/execution/{{execution_id}}/results/csv \nThe results will be returned in CSV format without additional metadata details like the JSON response. \n \n \n Additionally you can use \"api_key\" as a param to enable use cases such as importing results into a google sheet. (We advise against doing this any public document where your API key can be viewed and compromised.) \n \n \n \n \n ", "url": "https://dune.com/docs/api/api-reference/get-results/execution-results/#csv-format"}
{"content": "Reading Results Data FAQ \u00b6 \n ", "url": "https://dune.com/docs/api/api-reference/get-results/execution-results/#reading-results-data-faq"}
{"content": "Can I ingest data by getting a direct connection to the database instead? \u00b6 \n Not currently. In the interim we recommend periodically fetching from \u201cmax(latestBlockNumber) - 2\u201d to \u201clastFetchedBlockNumber\u201d in regular intervals. Fetching from 2 behind the latest block number ensures you receive full sets of data from each new request. \n ", "url": "https://dune.com/docs/api/api-reference/get-results/execution-results/#can-i-ingest-data-by-getting-a-direct-connection-to-the-database-instead"}
{"content": "Are query results data saved for faster retrieval? \u00b6 \n Yes \n ", "url": "https://dune.com/docs/api/api-reference/get-results/execution-results/#are-query-results-data-saved-for-faster-retrieval"}
{"content": "How long are the results data from an execution stored for? \u00b6 \n Currently set to 2 years but we may reduce this to something closer to 90 days in the future. This is visible on the API response on the \u201cexpires_at\u201d field in the execution status and results body. \n ", "url": "https://dune.com/docs/api/api-reference/get-results/execution-results/#how-long-are-the-results-data-from-an-execution-stored-for"}
{"content": "How much data can I retrieve in a single API result call? \u00b6 \n There is currently a 1GB limit, but there is a chance we reduce this overall or based on varying paid plan types.", "url": "https://dune.com/docs/api/api-reference/get-results/execution-results/#how-much-data-can-i-retrieve-in-a-single-api-result-call"}
{"content": "Example Request \u00b6 \n ", "url": "https://dune.com/docs/api/api-reference/execute-queries/cancel-execution/#example-request"}
{"content": "cURL \u00b6 \n  (#__codelineno-1-1) curl -X POST -H x-dune-api-key:{{api_key}} \"https://api.dune.com/api/v1/execution/{{execution_id}}/cancel\"\n \n ", "url": "https://dune.com/docs/api/api-reference/execute-queries/cancel-execution/#curl"}
{"content": "Python \u00b6 \n  (#__codelineno-2-1) import   dotenv \n  (#__codelineno-2-2) import   os \n  (#__codelineno-2-3) import   json \n  (#__codelineno-2-4) import   requests \n  (#__codelineno-2-5) import   pandas   as   pd \n  (#__codelineno-2-6) import   time \n  (#__codelineno-2-7) \n  (#__codelineno-2-8) # load .env file \n  (#__codelineno-2-9) dotenv . load_dotenv ( '/Users/abc/Documents/Workspace/misc/.env' ) \n  (#__codelineno-2-10) # get API key \n  (#__codelineno-2-11) api_key   =   os . environ [ \"DUNE_API_KEY\" ] \n  (#__codelineno-2-12) # authentiction with api key \n  (#__codelineno-2-13) headers   =   { \"X-Dune-API-Key\" :   api_key } \n  (#__codelineno-2-14) \n  (#__codelineno-2-15) query_id   =   60066 \n  (#__codelineno-2-16) base_url   =   f \"https://api.dune.com/api/v1/execution/ { query_id } /cancel\" \n  (#__codelineno-2-17) result_response   =   requests . request ( \"POST\" ,   base_url ,   headers = headers ) \n \n ", "url": "https://dune.com/docs/api/api-reference/execute-queries/cancel-execution/#python"}
{"content": "Example Return \u00b6 \n  (#__codelineno-3-1) { \n  (#__codelineno-3-2)      \"success\" :   true \n  (#__codelineno-3-3) }", "url": "https://dune.com/docs/api/api-reference/execute-queries/cancel-execution/#example-return"}
{"content": "Invalid API Key \u00b6 \n ", "url": "https://dune.com/docs/api/api-reference/errors/#invalid-api-key"}
{"content": "Response Object \u00b6 \n  (#__codelineno-0-1)  {'error': 'invalid API Key'}\n \n Checks \u00b6  (#checks) \n \n Make sure that you are passing your API key to our endpoint  in a header . See the section on  Authentication  (../authentication/)  for how to do that, and our  quick start guides  (../../quick-start/api-py/)  for specific language examples. \n If you are already passing the API key in an header, make sure that it is correctly entered. \n \n ", "url": "https://dune.com/docs/api/api-reference/errors/#response-object"}
{"content": "An Internal Error Occurred \u00b6 \n ", "url": "https://dune.com/docs/api/api-reference/errors/#an-internal-error-occurred"}
{"content": "Response Object \u00b6 \n  (#__codelineno-1-1)  {'error': 'An internal error occurred'}\n \n Checks \u00b6  (#checks_1) \n \n If you are using one of our GET endpoints, ensure that the  query_id  you have entered is correct. \n If you are using one of our POST endpoints, ensure that the  execution_id  you obtained from your GET endpoint has been correctly passed on to your POST endpoint. \n \n In cases when things do not work as expected, please reach out to us on the  #dune-api Discord channel  (https://discord.com/channels/757637422384283659/1019910980634939433)  and we'll help out when you're stuck!", "url": "https://dune.com/docs/api/api-reference/errors/#response-object_1"}
{"content": "Header \u00b6 \n Authentication with the API can be performed by adding an \u201cx-dune-api-key\u201d property to the request header. \n Here's one example of doing this with an Execute POST API request: \n  (#__codelineno-0-1) curl -X POST -H x-dune-api-key:{{api_key}} \"https://api.dune.com/api/v1/query/{{query_id}}/execute\"\n \n ", "url": "https://dune.com/docs/api/api-reference/authentication/#header"}
{"content": "Query Parameter \u00b6 \n Authentication with the API can also be performed by adding an  api_key  query paramater. \n Here's one example of doing this with an Execute POST API request: \n  (#__codelineno-1-1) curl -X POST \"https://api.dune.com/api/v1/query/{{query_id}}/execute?api_key={{api_key}}\"", "url": "https://dune.com/docs/api/api-reference/authentication/#query-parameter"}
{"content": "Getting Set Up \u00b6 \n We'll primarily be working with the  requests  library to access the API, so let's install it: \n  (#__codelineno-0-1) pip   install   requests\n \n We'll also use  pandas  to load the data returned from APIs into a neat DataFrame (table), and  jupyter notebooks  to have a nice interactive interface to do all of this. \n So let us install these as well: \n  (#__codelineno-1-1) pip   install   pandas\n  (#__codelineno-1-2) pip   install   jupyter   notebook\n \n We recommend following rest of the Quick Start in a jupyter notebook. You can start the interface with this simple command: \n  (#__codelineno-2-1) jupyter   notebook\n \n ", "url": "https://dune.com/docs/api/quick-start/python/raw-walkthrough/#getting-set-up"}
{"content": "Import the necessary libraries \u00b6 \n  (#__codelineno-3-1) from   requests   import   get ,   post \n  (#__codelineno-3-2) import   pandas   as   pd \n \n ", "url": "https://dune.com/docs/api/quick-start/python/raw-walkthrough/#import-the-necessary-libraries"}
{"content": "API Keys \u00b6 \n Any call you make to the Dune API will require you to pass your API key with your call's header: \n  (#__codelineno-4-1) API_KEY   =   \"YOUR_API_KEY\" \n  (#__codelineno-4-2) HEADER   =   { \"x-dune-api-key\"   :   API_KEY } \n \n ", "url": "https://dune.com/docs/api/quick-start/python/raw-walkthrough/#api-keys"}
{"content": "Simplifying URL generation \u00b6 \n Though not a necessary step, using this function will make it easier to generate URLs for different API endpoints: \n  (#__codelineno-5-1) BASE_URL   =   \"https://api.dune.com/api/v1/\" \n  (#__codelineno-5-2) \n  (#__codelineno-5-3) def   make_api_url ( module ,   action ,   ID ): \n  (#__codelineno-5-4)      \"\"\" \n  (#__codelineno-5-5)     We shall use this function to generate a URL to call the API. \n  (#__codelineno-5-6)     \"\"\" \n  (#__codelineno-5-7) \n  (#__codelineno-5-8)      url   =   BASE_URL   +   module   +   \"/\"   +   ID   +   \"/\"   +   action \n  (#__codelineno-5-9) \n  (#__codelineno-5-10)      return   url \n \n ", "url": "https://dune.com/docs/api/quick-start/python/raw-walkthrough/#simplifying-url-generation"}
{"content": "Wrapping API endpoints in functions \u00b6 \n The Dune API currently has four primary end points as documented in the  API Reference  (../../../api-reference/authentication/)  section. We are going to wrap these up in neat functions which will make using the Dune API as easy as a flick of the \ud83e\ude84: \n  (#__codelineno-6-1) def   execute_query ( query_id ,   engine = \"medium\" ): \n  (#__codelineno-6-2)      \"\"\" \n  (#__codelineno-6-3)     Takes in the query ID and engine size. \n  (#__codelineno-6-4)     Specifying the engine size will change how quickly your query runs.  \n  (#__codelineno-6-5)     The default is \"medium\" which spends 10 credits, while \"large\" spends 20 credits. \n  (#__codelineno-6-6)     Calls the API to execute the query. \n  (#__codelineno-6-7)     Returns the execution ID of the instance which is executing the query. \n  (#__codelineno-6-8)     \"\"\" \n  (#__codelineno-6-9) \n  (#__codelineno-6-10)      url   =   make_api_url ( \"query\" ,   \"execute\" ,   query_id ) \n  (#__codelineno-6-11)      params   =   { \n  (#__codelineno-6-12)          \"performance\" :   engine , \n  (#__codelineno-6-13)      } \n  (#__codelineno-6-14)      response   =   post ( url ,   headers = HEADER ,   params = params ) \n  (#__codelineno-6-15)      execution_id   =   response . json ()[ 'execution_id' ] \n  (#__codelineno-6-16) \n  (#__codelineno-6-17)      return   execution_id \n  (#__codelineno-6-18) \n  (#__codelineno-6-19) \n  (#__codelineno-6-20) def   get_query_status ( execution_id ): \n  (#__codelineno-6-21)      \"\"\" \n  (#__codelineno-6-22)     Takes in an execution ID. \n  (#__codelineno-6-23)     Fetches the status of query execution using the API \n  (#__codelineno-6-24)     Returns the status response object \n  (#__codelineno-6-25)     \"\"\" \n  (#__codelineno-6-26) \n  (#__codelineno-6-27)      url   =   make_api_url ( \"execution\" ,   \"status\" ,   execution_id ) \n  (#__codelineno-6-28)      response   =   get ( url ,   headers = HEADER ) \n  (#__codelineno-6-29) \n  (#__codelineno-6-30)      return   response \n  (#__codelineno-6-31) \n  (#__codelineno-6-32) \n  (#__codelineno-6-33) def   get_query_results ( execution_id ): \n  (#__codelineno-6-34)      \"\"\" \n  (#__codelineno-6-35)     Takes in an execution ID. \n  (#__codelineno-6-36)     Fetches the results returned from the query using the API \n  (#__codelineno-6-37)     Returns the results response object \n  (#__codelineno-6-38)     \"\"\" \n  (#__codelineno-6-39) \n  (#__codelineno-6-40)      url   =   make_api_url ( \"execution\" ,   \"results\" ,   execution_id ) \n  (#__codelineno-6-41)      response   =   get ( url ,   headers = HEADER ) \n  (#__codelineno-6-42) \n  (#__codelineno-6-43)      return   response \n  (#__codelineno-6-44) \n  (#__codelineno-6-45) \n  (#__codelineno-6-46) def   cancel_query_execution ( execution_id ): \n  (#__codelineno-6-47)      \"\"\" \n  (#__codelineno-6-48)     Takes in an execution ID. \n  (#__codelineno-6-49)     Cancels the ongoing execution of the query. \n  (#__codelineno-6-50)     Returns the response object. \n  (#__codelineno-6-51)     \"\"\" \n  (#__codelineno-6-52) \n  (#__codelineno-6-53)      url   =   make_api_url ( \"execution\" ,   \"cancel\" ,   execution_id ) \n  (#__codelineno-6-54)      response   =   get ( url ,   headers = HEADER ) \n  (#__codelineno-6-55) \n  (#__codelineno-6-56)      return   response \n \n ", "url": "https://dune.com/docs/api/quick-start/python/raw-walkthrough/#wrapping-api-endpoints-in-functions"}
{"content": "Using the Dune API \u00b6 \n ", "url": "https://dune.com/docs/api/quick-start/python/raw-walkthrough/#using-the-dune-api"}
{"content": "Execute a Query \u00b6 \n To  Execute a Query  (../../../api-reference/execute-queries/execute-query-id/) , you can pass any  query_id  from Dune that you want to fetch data from, then pass it to the  execute_query  function. \n Function Call \u00b6  (#function-call) \n  (#__codelineno-7-1) execution_id   =   execute_query ( \"1258228\" , \"large\" ) \n \n Output \u00b6  (#output) \n This function returns an  execution_id  which will look something like the sample output shown here: \n  (#__codelineno-8-1) '01GCQKPC4QZ6Q8645C3JC4WBT1' \n \n This execution ID is the required input for rest of the API functions. \n ", "url": "https://dune.com/docs/api/quick-start/python/raw-walkthrough/#execute-a-query"}
{"content": "Get Query Execution Status \u00b6 \n To get the  Query Execution Status  (../../../api-reference/get-results/execution-status/) , take the  execution_id  that was returned from the  execute_query  function in the previous section, then pass it to  get_query_status  function as shown here: \n Function Call \u00b6  (#function-call_1) \n  (#__codelineno-9-1) response   =   get_query_status ( execution_id ) \n \n Output \u00b6  (#output_1) \n The  response  object returned by this function will look something like the example shown here: \n  (#__codelineno-10-1) { 'execu t io n _id' :   ' 01 GCQKPC 4 QZ 6 Q 8645 C 3 JC 4 WBT 1 ' , \n  (#__codelineno-10-2)   'query_id' :   1258228 , \n  (#__codelineno-10-3)   's tate ' :   'QUERY_STATE_COMPLETED' , \n  (#__codelineno-10-4)   'submi tte d_a t ' :   ' 2022-09-12 T 01 : 05 : 51.781328 Z' , \n  (#__codelineno-10-5)   'expires_a t ' :   ' 2024-09-11 T 01 : 05 : 51.82013 Z' , \n  (#__codelineno-10-6)   'execu t io n _s tarte d_a t ' :   ' 2022-09-12 T 01 : 05 : 51.806752 Z' , \n  (#__codelineno-10-7)   'execu t io n _e n ded_a t ' :   ' 2022-09-12 T 01 : 05 : 51.820127 Z' , \n  (#__codelineno-10-8)   'resul t _me ta da ta ' :   { 'colum n _ na mes' :   [ 'block_ t ime' , \n  (#__codelineno-10-9)     ' t oke n _a_symbol' , \n  (#__codelineno-10-10)     ' t oke n _b_symbol' , \n  (#__codelineno-10-11)     ' t oke n _a_amou nt ' , \n  (#__codelineno-10-12)     ' t oke n _b_amou nt ' , \n  (#__codelineno-10-13)     'projec t ' , \n  (#__codelineno-10-14)     'versio n ' , \n  (#__codelineno-10-15)     'ca te gory' , \n  (#__codelineno-10-16)     ' tra der_a' , \n  (#__codelineno-10-17)     ' tra der_b' , \n  (#__codelineno-10-18)     ' t oke n _a_amou nt _raw' , \n  (#__codelineno-10-19)     ' t oke n _b_amou nt _raw' , \n  (#__codelineno-10-20)     'usd_amou nt ' , \n  (#__codelineno-10-21)     ' t oke n _a_address' , \n  (#__codelineno-10-22)     ' t oke n _b_address' , \n  (#__codelineno-10-23)     'excha n ge_co ntra c t _address' , \n  (#__codelineno-10-24)     ' t x_hash' , \n  (#__codelineno-10-25)     ' t x_ fr om' , \n  (#__codelineno-10-26)     ' t x_ t o' , \n  (#__codelineno-10-27)     ' tra ce_address' , \n  (#__codelineno-10-28)     'ev t _i n dex' , \n  (#__codelineno-10-29)     ' tra de_id' ], \n  (#__codelineno-10-30)    'resul t _se t _by tes ' :   5048 , \n  (#__codelineno-10-31)    ' t o tal _row_cou nt ' :   10 , \n  (#__codelineno-10-32)    'da ta poi nt _cou nt ' :   220 , \n  (#__codelineno-10-33)    'pe n di n g_ t ime_millis' :   25 , \n  (#__codelineno-10-34)    'execu t io n _ t ime_millis' :   13 }} \n \n In most cases, you will primarily be concerned with accessing the  state  property in this JSON object, which in this case is  QUERY_STATE_COMPLETED . \n ", "url": "https://dune.com/docs/api/quick-start/python/raw-walkthrough/#get-query-execution-status"}
{"content": "Get Query Results \u00b6 \n Finally, let's load the results from the now-completed execution of our Query. \n Function Call \u00b6  (#function-call_2) \n  (#__codelineno-11-1) response   =   get_query_results ( execution_id ) \n \n Lets wrap the data received from this JSON  response  object up into a neat pandas Dataframe. \n  (#__codelineno-12-1) data   =   pd . DataFrame ( response . json ()[ 'result' ][ 'rows' ]) \n \n Output \u00b6  (#output_2) \n If everything worked smoothly, you should see your data in the  data  variable returned by this function: \n  (#__codelineno-13-1) 0     2021 - 05 - 14 T15 : 17 : 39 + 00 : 00     DEX   191  \\ xf82d8ec196fb0d56c6b82a8b1870f09502a49f88    Uniswap  \\ xa2b4c0af19cc16a6cfacce81f192b024d625817d    7.819632e+11      781963170639542600000     KISHU    \\ xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2    ...   WETH      []    1    \\ x75e29a7676717b99da65c6faad2e7644d00e2053    None     \\ x75e29a7676717b99da65c6faad2e7644d00e2053   \\ x6bc05c2bc156a60c1cacfc379540ad00b7280796613b ...    \\ x7a250d5630b4cf539739df2c5dacb4c659f2488d    10387.825000      2 \n  (#__codelineno-13-2) 1     2022 - 04 - 06 T07 : 01 : 37 + 00 : 00     DEX   11   \\ x6591c4bcd6d7a1eb4e537da8b78676c1576ba244    Uniswap  \\ xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48    1.007936e+04      10079361085   USDC     \\ x0391d2021f89dc339f60fff84546ea23e337750f    ...   BOND      []    1    \\ x0000006daea1723962647b7e189d311d757fb793    None     \\ x0000495194ec698fcf89ccf8abb445daf01db497   \\ x8b962e59ca9f1d91e465a7af289b4b4c9c7c64c6d30d ...    \\ x0000006daea1723962647b7e189d311d757fb793    10093.794730      2 \n  (#__codelineno-13-3) 2     2022 - 04 - 06 T07 : 10 : 12 + 00 : 00     DEX   438  \\ xa25b34d2ec38e338bde108c8c4040be88945d024    Uniswap  \\ xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2    1.015798e-01      101579832516438100    WETH     \\ x8020734a29ee290fb81992874bd1de01a16c4204    ...   None      []    1    \\ x68b3465833fb72a70ecdf485e0e4c7bd8665fc45    None     \\ xaac6fb32fd0a7a51768bddd4ac2f643445bd01af   \\ x8bbaff042cea60af88fac791c4d20f84ed7d21601c41 ...    \\ x68b3465833fb72a70ecdf485e0e4c7bd8665fc45    342.732387    2 \n  (#__codelineno-13-4) 3     2022 - 04 - 06 T07 : 10 : 12 + 00 : 00     DEX   339  \\ x8ef79d6c328c25da633559c20c75f638a4863462    Uniswap  \\ xa71d0588eaf47f12b13cf8ec750430d21df04974    1.058343e+09      1058343424775444053499052032.0    QOM  \\ xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2    ...   WETH      []    1    \\ x7540000cab63979795c7d4b326cadbb00ed24a04    None     \\ x7540000cab63979795c7d4b326cadbb00ed24a04   \\ x8bea318de386a65ac1c0c88f13e39654c3d4ec53a412 ...    \\ x68b3465833fb72a70ecdf485e0e4c7bd8665fc45    263.520686    2 \n  (#__codelineno-13-5) 4     2022 - 04 - 06 T07 : 15 : 58 + 00 : 00     DEX   149  \\ x9c84f58bb51fabd18698efe95f5bab4f33e96e8f    Uniswap  \\ xb620be8a1949aa9532e6a3510132864ef9bc3f82    NaN   21168910617154070511616.0     None     \\ xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2    ...   WETH      []    1    \\ xdf29ee8f6d1b407808eb0270f5b128dc28303684    None     \\ xdf29ee8f6d1b407808eb0270f5b128dc28303684   \\ x8bf5a55a772b3c3423ee628bd459655a1d7bd09a5c69 ...    \\ xdef171fe48cf0115b1d80b88dc8eab59176fee57    675.194000    2 \n  (#__codelineno-13-6) 5     2022 - 04 - 06 T07 : 03 : 20 + 00 : 00     DEX   266  \\ x847e0b52589c9e6fa2dcc42b8ffb34ec924d4cf8    Uniswap  \\ xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2    8.903535e-04      890353516515079   WETH     \\ x9cf77be84214beb066f26a4ea1c38ddcc2afbcf7    ...   None      []    1    \\ x7a250d5630b4cf539739df2c5dacb4c659f2488d    None     \\ xf2d229cc832661de2aa56249c5b7991006868522   \\ x8c00c8c20b1f3f1b447c579165c2759c688981dbc408 ...    \\ x1b2cf79d0a3622f25fbe10e968b3b25a348e008b    3.004792      2 \n  (#__codelineno-13-7) 6     2021 - 05 - 17 T16 : 04 : 09 + 00 : 00     DEX   88   \\ x0d4a11d5eeaac28ec3f61d100daf4d40471f1852    Uniswap  \\ xdac17f958d2ee523a2206206994597c13d831ec7    1.003227e+02      100322742     USDT     \\ xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2    ...   WETH      []    1    \\ x773dd321873fe70553acc295b1b49a104d968cc8    None     \\ x7af55e2ab6e74f338d674537958ad236d17ab3ac   \\ x6bc07c4f53719ad8d1a0f5f99d2db3699fa9dce888e3 ...    \\ x8df6084e3b84a65ab9dd2325b5422e5debd8944a    100.372301    2 \n  (#__codelineno-13-8) 7     2022 - 04 - 06 T07 : 24 : 39 + 00 : 00     DEX   219  \\ xaa51ea59c985a92ce881517a8896931d4a86e9e3    Uniswap  \\ xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2    3.214029e-01      321402936315917950    WETH     \\ x4846b0cce69121e4d25b6efe7738eaf27bca7e7f    ...   None      []    1    \\ x7a250d5630b4cf539739df2c5dacb4c659f2488d    None     \\ xa053dbafba05e307a7bddede09c7feb235dc34b1   \\ x8c86abc9c4eaff2b8de48351360781bc153cd16fa108 ...    \\ x68b3465833fb72a70ecdf485e0e4c7bd8665fc45    1084.606349   2 \n  (#__codelineno-13-9) 8     2021 - 05 - 17 T16 : 04 : 09 + 00 : 00     DEX   91   \\ x773dd321873fe70553acc295b1b49a104d968cc8    Uniswap  \\ x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce    6.477303e+06      6477302710423104532774912.0   SHIB     \\ xdac17f958d2ee523a2206206994597c13d831ec7    ...   USDT      []    1    \\ x8df6084e3b84a65ab9dd2325b5422e5debd8944a    None     \\ x7af55e2ab6e74f338d674537958ad236d17ab3ac   \\ x6bc07c4f53719ad8d1a0f5f99d2db3699fa9dce888e3 ...    \\ x8df6084e3b84a65ab9dd2325b5422e5debd8944a    103.636843    2 \n  (#__codelineno-13-10) 9     2022 - 04 - 06 T07 : 24 : 39 + 00 : 00     DEX   234  \\ xaa51ea59c985a92ce881517a8896931d4a86e9e3    Uniswap  \\ xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2    1.127058e-01      112705776325968480    WETH     \\ x4846b0cce69121e4d25b6efe7738eaf27bca7e7f    ...   None      []    1    \\ x68b3465833fb72a70ecdf485e0e4c7bd8665fc45    None     \\ xa053dbafba05e307a7bddede09c7feb235dc34b1   \\ x8c86abc9c4eaff2b8de48351360781bc153cd16fa108 ...    \\ x68b3465833fb72a70ecdf485e0e4c7bd8665fc45    380.336913    2 \n \n So you now have data from your Dune query. \n In a table. \n In Python.  \n \ud83e\uddd9\ud83e\ude84 \n ", "url": "https://dune.com/docs/api/quick-start/python/raw-walkthrough/#get-query-results"}
{"content": "Cancel Query Execution \u00b6 \n Some queries can take a long time to execute (minutes). \n Depending on your workflow, you may want to interrupt execution at times. Here's how to do that: \n  (#__codelineno-14-1) response   =   cancel_query_execution ( execution_id ) \n \n When you have a running Query and call this function, you'll get a response object returned to you confirming the cancellation of query execution. \n ", "url": "https://dune.com/docs/api/quick-start/python/raw-walkthrough/#cancel-query-execution"}
{"content": "Parameterized Queries \u00b6 \n Only one step changes when you are working with parameterized queries - you need to pass query parameters to the execution endpoint of our API. There is no change to working with rest of the endpoints after this step. \n So let's define a function  execute_query_with_params  to call the execute endpoint for parameterized queries: \n  (#__codelineno-15-1) def   execute_query_with_params ( query_id ,   param_dict ): \n  (#__codelineno-15-2)      \"\"\" \n  (#__codelineno-15-3)     Takes in the query ID. And a dictionary containing parameter values. \n  (#__codelineno-15-4)     Calls the API to execute the query. \n  (#__codelineno-15-5)     Returns the execution ID of the instance which is executing the query. \n  (#__codelineno-15-6)     \"\"\" \n  (#__codelineno-15-7) \n  (#__codelineno-15-8)      url   =   make_api_url ( \"query\" ,   \"execute\" ,   query_id ) \n  (#__codelineno-15-9)      response   =   post ( url ,   headers = HEADER ,   json = { \"query_parameters\"   :   param_dict }) \n  (#__codelineno-15-10)      execution_id   =   response . json ()[ 'execution_id' ] \n  (#__codelineno-15-11) \n  (#__codelineno-15-12)      return   execution_id \n \n Create a Dictionary of parameters \u00b6  (#create-a-dictionary-of-parameters) \n For our example, we're creating a dictionary with just one key, the  wallet_address , for use in a query that returns the total amount spent on gas from a given  wallet_address : \n  (#__codelineno-16-1) parameters   =   { \"wallet_address\"   :   \"0xb10f35351ff21bb81dc02d4fd901ac5ae34e8dc4\" } \n \n Pass the parameters dictionary to the execution endpoint \u00b6  (#pass-the-parameters-dictionary-to-the-execution-endpoint) \n Now let's make use of the function that we just defined to achieve this: \n  (#__codelineno-17-1) execution_id   =   execute_query_with_params ( \"638435\" ,   parameters ) \n \n And that is it! \n Once you get the  execution_id  from this POST endpoint, you can use it with all the GET endpoints of the API, just like you would with a simple query without parameters. \n \n Complete-code \n The complete code for this tutorial is available on  this link  (https://github.com/SusmeetJain/dune_api_python) .", "url": "https://dune.com/docs/api/quick-start/python/raw-walkthrough/#parameterized-queries"}
{"content": "Python \u00b6 \n Built by  @bh2smith  (https://dune.com/bh2smith) , Dune team member  @msf  (https://dune.com/msf)  and  Cow Protocol  (https://dune.com/cowprotocol) 's team, you can find this client on  PyPi  (https://pypi.org/project/dune-client/) . \n Get started quickly with a simple pip install command: \n  (#__codelineno-0-1) pip install dune-client\n \n And if you want to learn more about how it's built and works, check out the client's  GitHub page here  (https://github.com/duneanalytics/dune-client) . \n ", "url": "https://dune.com/docs/api/quick-start/community-clients/#python"}
{"content": "Typescript \u00b6 \n @bh2smith  (https://dune.com/bh2smith)  also built a  Node.js client you can find here  (https://www.npmjs.com/package/@cowprotocol/ts-dune-client) . \n Install it like this: \n  (#__codelineno-1-1) yarn add @cowprotocol/ts-dune-client\n \n ", "url": "https://dune.com/docs/api/quick-start/community-clients/#typescript"}
{"content": "GoLang \u00b6 \n Dune team member  @theedgeofrage  (https://dune.com/theedgeofrage)  built  a Go client you can find on GitHub here  (https://github.com/duneanalytics/duneapi-client-go/) . \n There's also more advanced documentation here  (https://pkg.go.dev/github.com/duneanalytics/duneapi-client-go) . \n ", "url": "https://dune.com/docs/api/quick-start/community-clients/#golang"}
{"content": "Ruby \u00b6 \n @shellandbull  (https://github.com/shellandbull)  built the Ruby client, available in  RubyGems  (https://rubygems.org/gems/dune) \n To install add the following line to your  Gemfile \n  (#__codelineno-2-1) gem   \"dune\" \n \n Then run  $ bundle install  from your terminal \n ", "url": "https://dune.com/docs/api/quick-start/community-clients/#ruby"}
{"content": "Rust \u00b6 \n @bh2smith  (https://dune.com/bh2smith)  also built a rust client available on  docs.rs here  (https://docs.rs/duners/latest/duners/) . To install run \n  (#__codelineno-3-1) cargo   add   duners", "url": "https://dune.com/docs/api/quick-start/community-clients/#rust"}
{"content": "Want to just get it to quickly work? \u00b6 \n Use the  cowprotocol Dune client  (https://www.npmjs.com/package/@cowprotocol/ts-dune-client)  in Typescript to get started: \n  (#__codelineno-0-1) import { QueryParameter, DuneClient } from \"@cowprotocol/ts-dune-client\";\n  (#__codelineno-0-2) const { DUNE_API_KEY } = process.env;\n  (#__codelineno-0-3) \n  (#__codelineno-0-4) const client = new DuneClient(DUNE_API_KEY ?? \"\");\n  (#__codelineno-0-5) const queryID = 1215383;\n  (#__codelineno-0-6) const parameters = [\n  (#__codelineno-0-7)   QueryParameter.text(\"TextField\", \"Plain Text\"),\n  (#__codelineno-0-8)   QueryParameter.number(\"NumberField\", 3.1415926535),\n  (#__codelineno-0-9)   QueryParameter.date(\"DateField\", \"2022-05-04 00:00:00\"),\n  (#__codelineno-0-10)   QueryParameter.enum(\"ListField\", \"Option 1\"),\n  (#__codelineno-0-11) ];\n  (#__codelineno-0-12) \n  (#__codelineno-0-13) client\n  (#__codelineno-0-14)   .refresh(queryID, parameters)\n  (#__codelineno-0-15)   .then((executionResult) => console.log(executionResult.result?.rows));\n \n Or check out the longer guide to go more low level. \n ", "url": "https://dune.com/docs/api/quick-start/api-js/#want-to-just-get-it-to-quickly-work"}
{"content": "Getting Set Up \u00b6 \n  (#__codelineno-1-1) nvm use --lts\n  (#__codelineno-1-2) npm install latest\n \n Then install the node-fetch package: \n  (#__codelineno-2-1) npm install node-fetch\n \n Next, create a project directory and initiate an ESMcompatible Node project: \n  (#__codelineno-3-1) mkdir dune_api_js\n  (#__codelineno-3-2) cd dune_api_js\n  (#__codelineno-3-3) npm init esm --yes\n \n This will initiate a project for you which will include a  package.json  file. Open this file and add the following line to it: \n  (#__codelineno-4-1) \"type\" :   \"module\" \n \n ", "url": "https://dune.com/docs/api/quick-start/api-js/#getting-set-up"}
{"content": "Example Dune API Script \u00b6 \n For the example here, we have used a simple example Query that fetches a small set of data, this query has the query_id ,  1258228 . \n Replace  YOUR_API_KEY  with your Dune API key in the following code, then add it to the  main.js  file in your project: \n  (#__codelineno-5-1) import   {   Headers   }   from   'node-fetch' ; \n  (#__codelineno-5-2) import   fetch   from   'node-fetch' ; \n  (#__codelineno-5-3) \n  (#__codelineno-5-4) // Add the API key to an header object \n  (#__codelineno-5-5) const   meta   =   { \n  (#__codelineno-5-6)      \"x-dune-api-key\" :   \"YOUR_API_KEY\" \n  (#__codelineno-5-7) }; \n  (#__codelineno-5-8) const   header   =   new   Headers ( meta ); \n  (#__codelineno-5-9) \n  (#__codelineno-5-10) //  Call the Dune API \n  (#__codelineno-5-11) const   response   =   await   fetch ( 'https://api.dune.com/api/v1/query/1258228/execute' ,   { \n  (#__codelineno-5-12)      method :   'POST' , \n  (#__codelineno-5-13)      headers :   header \n  (#__codelineno-5-14) }); \n  (#__codelineno-5-15) const   body   =   await   response . text (); \n  (#__codelineno-5-16) \n  (#__codelineno-5-17) // Log the returned response \n  (#__codelineno-5-18) console . log ( body ); \n \n ", "url": "https://dune.com/docs/api/quick-start/api-js/#example-dune-api-script"}
{"content": "Example Dune API Script for a Parameterized Query \u00b6 \n If you are working with a parameterized query, use the script in this section instead of the previous one. For the example here, we have used a simple query that takes in a wallet address as a parameter. This query has the  query_id ,  1258228 . And we pass an example address as a value to the  wallet_address  parameter. \n Replace  YOUR_API_KEY  with your Dune API key in the following code, then add it to the  main.js  file in your project: \n  (#__codelineno-6-1) import   {   Headers   }   from   'node-fetch' ; \n  (#__codelineno-6-2) import   fetch   from   'node-fetch' ; \n  (#__codelineno-6-3) \n  (#__codelineno-6-4) // Add the API key to an header object \n  (#__codelineno-6-5) const   meta   =   { \n  (#__codelineno-6-6)      \"x-dune-api-key\" :   \"YOUR_API_KEY\" \n  (#__codelineno-6-7) }; \n  (#__codelineno-6-8) const   header   =   new   Headers ( meta ); \n  (#__codelineno-6-9) \n  (#__codelineno-6-10) // Add parameters we would pass to the query \n  (#__codelineno-6-11) var   params   =   {   \"query_parameters\"   :   {   \"wallet_address\" :   \"0xb10f35351ff21bb81dc02d4fd901ac5ae34e8dc4\"   }}; \n  (#__codelineno-6-12) var   body   =   JSON . stringify ( params ); \n  (#__codelineno-6-13) \n  (#__codelineno-6-14) //  Call the Dune API \n  (#__codelineno-6-15) const   response   =   await   fetch ( 'https://api.dune.com/api/v1/query/638435/execute' ,   { \n  (#__codelineno-6-16)      method :   'POST' , \n  (#__codelineno-6-17)      headers :   header , \n  (#__codelineno-6-18)      body :   body   // This is where we pass the parameters \n  (#__codelineno-6-19) }); \n  (#__codelineno-6-20) const   response_object   =   await   response . text (); \n  (#__codelineno-6-21) \n  (#__codelineno-6-22) // Log the returned response \n  (#__codelineno-6-23) console . log ( response_object ); \n \n ", "url": "https://dune.com/docs/api/quick-start/api-js/#example-dune-api-script-for-a-parameterized-query"}
{"content": "Running the Script \u00b6 \n You can now run your script from the command line. \n  (#__codelineno-7-1) node main.js\n \nYou should see a response being returned.\n You can also edit the Query URL to fetch data from any other Queries you'd like! \ud83e\ude84\nIf it is a parameterized query, you would need to accordingly update the parameters as well. \n Please note that the code here only calls the API end point that starts the execution of the query. To fetch the data generated from the execution of this query, you would need to call other API endpoints. See the  API Reference  (../../api-reference/authentication/)  section to learn more about various endpoints the Dune API currently offers. \n \n Link \n You can also find some code from this tutorial in this  Github Repository  (https://github.com/SusmeetJain/dune_api_js) .", "url": "https://dune.com/docs/api/quick-start/api-js/#running-the-script"}
{"content": "Python SDK - Quickstart \u00b6 \n The following code demo \n ", "url": "https://dune.com/docs/api/quick-start/api-py/#python-sdk-quickstart"}
{"content": "Install & Setup \u00b6 \n  (#__codelineno-0-1) pip   install   dune-client\n \n Export your  DUNE_API_KEY  or place it in a  .env  file like so: \n  (#__codelineno-1-1) # Required\n  (#__codelineno-1-2) DUNE_API_KEY=\n  (#__codelineno-1-3) \n  (#__codelineno-1-4) # Optional (defaults provided here)\n  (#__codelineno-1-5) DUNE_API_BASE_URL=https://api.dune.com\n  (#__codelineno-1-6) DUNE_API_REQUEST_TIMEOUT=10\n \n and  source .env . \n run_query \u00b6  (#run_query) \n This is a combination of  execute_query  which waits for completion, followed by  get_execution_results \n  (#__codelineno-2-1) from   dune_client.types   import   QueryParameter \n  (#__codelineno-2-2) from   dune_client.client   import   DuneClient \n  (#__codelineno-2-3) from   dune_client.query   import   QueryBase \n  (#__codelineno-2-4) \n  (#__codelineno-2-5) query   =   QueryBase ( \n  (#__codelineno-2-6)      name = \"Sample Query\" , \n  (#__codelineno-2-7)      query_id = 1215383 , \n  (#__codelineno-2-8)      params = [ \n  (#__codelineno-2-9)          QueryParameter . text_type ( name = \"TextField\" ,   value = \"Word\" ), \n  (#__codelineno-2-10)          QueryParameter . number_type ( name = \"NumberField\" ,   value = 3.1415926535 ), \n  (#__codelineno-2-11)          QueryParameter . date_type ( name = \"DateField\" ,   value = \"2022-05-04 00:00:00\" ), \n  (#__codelineno-2-12)          QueryParameter . enum_type ( name = \"EnumField\" ,   value = \"Option 1\" ), \n  (#__codelineno-2-13)      ], \n  (#__codelineno-2-14) ) \n  (#__codelineno-2-15) print ( \"Results available at\" ,   query . url ()) \n  (#__codelineno-2-16) \n  (#__codelineno-2-17) dune   =   DuneClient . from_env () \n  (#__codelineno-2-18) results   =   dune . run_query ( query ) \n  (#__codelineno-2-19) \n  (#__codelineno-2-20) # or as CSV \n  (#__codelineno-2-21) # results_csv = dune.run_query_csv(query) \n  (#__codelineno-2-22) \n  (#__codelineno-2-23) # or as Pandas Dataframe \n  (#__codelineno-2-24) # results_df = dune.run_query_dataframe(query) \n \n run_sql \u00b6  (#run_sql) \n Create and run your query entirely from your IDE! The run query method is a hybrid of (create, execute, get_results and optionally archive after).  \n  (#__codelineno-3-1) from   dune_client.types   import   QueryParameter \n  (#__codelineno-3-2) from   dune_client.client   import   DuneClient \n  (#__codelineno-3-3) \n  (#__codelineno-3-4) expensive_transactions   =   \"\"\" \n  (#__codelineno-3-5)     SELECT block_time, hash, \n  (#__codelineno-3-6)     FROM {{Blockchain}}.transactions \n  (#__codelineno-3-7)     ORDER BY CAST(gas_used as uint256) * CAST(gas_price AS uint256) DESC \n  (#__codelineno-3-8)     LIMIT {{N}}\"\"\" \n  (#__codelineno-3-9) \n  (#__codelineno-3-10) client   =   DuneClient . from_env () \n  (#__codelineno-3-11) results   =   client . run_sql ( \n  (#__codelineno-3-12)      query_sql = expensive_transactions ,  \n  (#__codelineno-3-13)      params = [ \n  (#__codelineno-3-14)          QueryParameter . text_type ( \"Blockchain\" ,   \"ethereum\" ),  \n  (#__codelineno-3-15)          QueryParameter . number_type ( \"N\" ,   10 ) \n  (#__codelineno-3-16)      ]) \n \n ", "url": "https://dune.com/docs/api/quick-start/api-py/#install-setup"}
{"content": "Further Examples \u00b6 \n There  client project repo  (https://github.com/duneanalytics/dune-client)  contains extensive  end-to-end testing  (https://github.com/duneanalytics/dune-client/blob/main/tests/e2e/test_client.py)  of all available API routes. \n ", "url": "https://dune.com/docs/api/quick-start/api-py/#further-examples"}
{"content": "API Breakdown \u00b6 \n The  DuneClient  is composed of  \n \n ExecutionAPI  (https://github.com/duneanalytics/dune-client/blob/05787719526a441e39baf6252adf531bf941cd98/dune_client/api/execution.py#L24-L27)  for query execution and result fetching functions. \n \n Details \n  (#__codelineno-4-1) def   execute_query ( \n  (#__codelineno-4-2)      self ,   query :   QueryBase ,   performance :   Optional [ str ]   =   None \n  (#__codelineno-4-3) )   ->   ExecutionResponse : \n  (#__codelineno-4-4)      \"\"\"Post's to Dune API for execute `query`\"\"\" \n  (#__codelineno-4-5) \n  (#__codelineno-4-6) def   cancel_execution ( self ,   job_id :   str )   ->   bool : \n  (#__codelineno-4-7)      \"\"\"POST Execution Cancellation to Dune API for `job_id` (aka `execution_id`)\"\"\" \n  (#__codelineno-4-8) \n  (#__codelineno-4-9) def   get_execution_status ( self ,   job_id :   str )   ->   ExecutionStatusResponse : \n  (#__codelineno-4-10)      \"\"\"GET status from Dune API for `job_id` (aka `execution_id`)\"\"\" \n  (#__codelineno-4-11) \n  (#__codelineno-4-12) def   get_execution_results ( self ,   job_id :   str )   ->   ResultsResponse : \n  (#__codelineno-4-13)      \"\"\"GET results from Dune API for `job_id` (aka `execution_id`)\"\"\" \n  (#__codelineno-4-14) \n  (#__codelineno-4-15) def   get_execution_results_csv ( self ,   job_id :   str )   ->   ExecutionResultCSV : \n  (#__codelineno-4-16)      \"\"\" \n  (#__codelineno-4-17)     GET results in CSV format from Dune API for `job_id` (aka `execution_id`) \n  (#__codelineno-4-18) \n  (#__codelineno-4-19)     this API only returns the raw data in CSV format, it is faster & lighterweight \n  (#__codelineno-4-20)     use this method for large results where you want lower CPU and memory overhead \n  (#__codelineno-4-21)     if you need metadata information use get_results() or get_status() \n  (#__codelineno-4-22)     \"\"\" \n  (#__codelineno-4-23) \n  (#__codelineno-4-24) def   get_results_dataframe ( self ,   job_id :   str )   ->   Any : \n  (#__codelineno-4-25)      \"\"\" \n  (#__codelineno-4-26)     Get query results as a pandas dataframe (requires manual installation of pandas) \n  (#__codelineno-4-27)     \"\"\" \n \n \n \n QueryAPI  (https://github.com/duneanalytics/dune-client/blob/05787719526a441e39baf6252adf531bf941cd98/dune_client/api/query.py#L16-L20)  for CRUD Operations (available with premium subscription only). \n \n QueryAPI Details \n  (#__codelineno-5-1) def   create_query ( \n  (#__codelineno-5-2)      self , \n  (#__codelineno-5-3)      name :   str , \n  (#__codelineno-5-4)      query_sql :   str , \n  (#__codelineno-5-5)      params :   Optional [ list [ QueryParameter ]]   =   None , \n  (#__codelineno-5-6)      is_private :   bool   =   False , \n  (#__codelineno-5-7) )   ->   DuneQuery : \n  (#__codelineno-5-8)      \"\"\" \n  (#__codelineno-5-9)     Creates Dune Query by ID \n  (#__codelineno-5-10)     https://dune.com/docs/api/api-reference/edit-queries/create-query/ \n  (#__codelineno-5-11)     \"\"\" \n  (#__codelineno-5-12) \n  (#__codelineno-5-13) def   get_query ( self ,   query_id :   int )   ->   DuneQuery : \n  (#__codelineno-5-14)      \"\"\" \n  (#__codelineno-5-15)     Retrieves Dune Query by ID \n  (#__codelineno-5-16)     https://dune.com/docs/api/api-reference/edit-queries/get-query/ \n  (#__codelineno-5-17)     \"\"\" \n  (#__codelineno-5-18) \n  (#__codelineno-5-19) def   update_query ( \n  (#__codelineno-5-20)      self , \n  (#__codelineno-5-21)      query_id :   int , \n  (#__codelineno-5-22)      name :   Optional [ str ]   =   None , \n  (#__codelineno-5-23)      query_sql :   Optional [ str ]   =   None , \n  (#__codelineno-5-24)      params :   Optional [ list [ QueryParameter ]]   =   None , \n  (#__codelineno-5-25)      description :   Optional [ str ]   =   None , \n  (#__codelineno-5-26)      tags :   Optional [ list [ str ]]   =   None , \n  (#__codelineno-5-27) )   ->   int : \n  (#__codelineno-5-28)      \"\"\" \n  (#__codelineno-5-29)     Updates Dune Query by ID \n  (#__codelineno-5-30)     https://dune.com/docs/api/api-reference/edit-queries/update-query \n  (#__codelineno-5-31) \n  (#__codelineno-5-32)     The request body should contain all fields that need to be updated. \n  (#__codelineno-5-33)     Any omitted fields will be left untouched. \n  (#__codelineno-5-34)     If the tags or parameters are provided as an empty array, \n  (#__codelineno-5-35)     they will be deleted from the query. \n  (#__codelineno-5-36)     \"\"\" \n  (#__codelineno-5-37) \n  (#__codelineno-5-38) def   archive_query ( self ,   query_id :   int )   ->   bool : \n  (#__codelineno-5-39)      \"\"\" \n  (#__codelineno-5-40)     https://dune.com/docs/api/api-reference/edit-queries/archive-query \n  (#__codelineno-5-41)     returns resulting value of Query.is_archived \n  (#__codelineno-5-42)     \"\"\" \n  (#__codelineno-5-43) \n  (#__codelineno-5-44) def   unarchive_query ( self ,   query_id :   int )   ->   bool : \n  (#__codelineno-5-45)      \"\"\" \n  (#__codelineno-5-46)     https://dune.com/docs/api/api-reference/edit-queries/archive-query \n  (#__codelineno-5-47)     returns resulting value of Query.is_archived \n  (#__codelineno-5-48)     \"\"\" \n  (#__codelineno-5-49) \n  (#__codelineno-5-50) def   make_private ( self ,   query_id :   int )   ->   None : \n  (#__codelineno-5-51)      \"\"\" \n  (#__codelineno-5-52)     https://dune.com/docs/api/api-reference/edit-queries/private-query \n  (#__codelineno-5-53)     \"\"\" \n  (#__codelineno-5-54) \n  (#__codelineno-5-55) def   make_public ( self ,   query_id :   int )   ->   None : \n  (#__codelineno-5-56)      \"\"\" \n  (#__codelineno-5-57)     https://dune.com/docs/api/api-reference/edit-queries/private-query \n  (#__codelineno-5-58)     \"\"\" \n \n \n \n ExtensionAPI  (https://github.com/duneanalytics/dune-client/blob/05787719526a441e39baf6252adf531bf941cd98/dune_client/api/extensions.py#L30-L34)  provides high-level helper methods as compositions of functionality from the  ExecutionAPI  and  QueryAPI  classes. \n \n ExtensionAPI Details \n  (#__codelineno-6-1) def   run_query ( \n  (#__codelineno-6-2)      self , \n  (#__codelineno-6-3)      query :   QueryBase , \n  (#__codelineno-6-4)      ping_frequency :   int   =   5 , \n  (#__codelineno-6-5)      performance :   Optional [ str ]   =   None , \n  (#__codelineno-6-6) )   ->   ResultsResponse : \n  (#__codelineno-6-7)      \"\"\" \n  (#__codelineno-6-8)     Executes a Dune `query`, waits until execution completes, \n  (#__codelineno-6-9)     fetches and returns the results. \n  (#__codelineno-6-10)     Sleeps `ping_frequency` seconds between each status request. \n  (#__codelineno-6-11)     \"\"\" \n  (#__codelineno-6-12) \n  (#__codelineno-6-13) def   run_query_csv ( \n  (#__codelineno-6-14)      self , \n  (#__codelineno-6-15)      query :   QueryBase , \n  (#__codelineno-6-16)      ping_frequency :   int   =   5 , \n  (#__codelineno-6-17)      performance :   Optional [ str ]   =   None , \n  (#__codelineno-6-18) )   ->   ExecutionResultCSV : \n  (#__codelineno-6-19)      \"\"\" \n  (#__codelineno-6-20)     Executes a Dune query, waits till execution completes, \n  (#__codelineno-6-21)     fetches and the results in CSV format \n  (#__codelineno-6-22)     (use it load the data directly in pandas.from_csv() or similar frameworks) \n  (#__codelineno-6-23)     \"\"\" \n  (#__codelineno-6-24) \n  (#__codelineno-6-25) def   run_query_dataframe ( \n  (#__codelineno-6-26)      self , \n  (#__codelineno-6-27)      query :   QueryBase , \n  (#__codelineno-6-28)      ping_frequency :   int   =   5 , \n  (#__codelineno-6-29)      performance :   Optional [ str ]   =   None , \n  (#__codelineno-6-30) )   ->   Any : \n  (#__codelineno-6-31)      \"\"\" \n  (#__codelineno-6-32)     Execute a Dune Query, waits till execution completes, \n  (#__codelineno-6-33)     fetched and returns the result as a Pandas DataFrame \n  (#__codelineno-6-34) \n  (#__codelineno-6-35)     This is a convenience method that uses run_query_csv() + pandas.read_csv() underneath \n  (#__codelineno-6-36)     \"\"\" \n  (#__codelineno-6-37) \n  (#__codelineno-6-38) def   get_latest_result ( \n  (#__codelineno-6-39)      self , \n  (#__codelineno-6-40)      query :   Union [ QueryBase ,   str ,   int ], \n  (#__codelineno-6-41)      max_age_hours :   int   =   THREE_MONTHS_IN_HOURS , \n  (#__codelineno-6-42) )   ->   ResultsResponse : \n  (#__codelineno-6-43)      \"\"\" \n  (#__codelineno-6-44)     GET the latest results for a query_id without re-executing the query \n  (#__codelineno-6-45)     (doesn't use execution credits) \n  (#__codelineno-6-46) \n  (#__codelineno-6-47)     :param query: :class:`Query` object OR query id as string or int \n  (#__codelineno-6-48)     :param max_age_hours: re-executes the query if result is older than max_age_hours \n  (#__codelineno-6-49)         https://dune.com/docs/api/api-reference/get-results/latest-results \n  (#__codelineno-6-50)     \"\"\" \n  (#__codelineno-6-51) \n  (#__codelineno-6-52) def   download_csv ( self ,   query :   Union [ QueryBase ,   str ,   int ])   ->   ExecutionResultCSV : \n  (#__codelineno-6-53)      \"\"\" \n  (#__codelineno-6-54)     Almost like an alias for `get_latest_result` but for the csv endpoint. \n  (#__codelineno-6-55)     https://dune.com/docs/api/api-reference/get-results/latest-results \n  (#__codelineno-6-56)     \"\"\" \n  (#__codelineno-6-57) \n  (#__codelineno-6-58) ############################################################################ \n  (#__codelineno-6-59) # Below features use APIs that are only available on paid subscription plans \n  (#__codelineno-6-60) ############################################################################ \n  (#__codelineno-6-61) \n  (#__codelineno-6-62) ############### \n  (#__codelineno-6-63) # Plus Features \n  (#__codelineno-6-64) ############### \n  (#__codelineno-6-65) \n  (#__codelineno-6-66) def   upload_csv ( self ,   table_name :   str ,   data :   str ,   description :   str   =   \"\" )   ->   bool : \n  (#__codelineno-6-67)      \"\"\" \n  (#__codelineno-6-68)     https://dune.com/docs/api/api-reference/upload-data/?h=data+upload#endpoint \n  (#__codelineno-6-69)     The write API allows you to upload any .csv file into Dune. The only limitations are: \n  (#__codelineno-6-70) \n  (#__codelineno-6-71)     - File has to be < 200 MB \n  (#__codelineno-6-72)     - Column names in the table can't start with a special character or digits. \n  (#__codelineno-6-73)     \"\"\" \n  (#__codelineno-6-74) \n  (#__codelineno-6-75) ################## \n  (#__codelineno-6-76) # Premium Features \n  (#__codelineno-6-77) ################## \n  (#__codelineno-6-78) \n  (#__codelineno-6-79) def   run_sql ( \n  (#__codelineno-6-80)      self , \n  (#__codelineno-6-81)      query_sql :   str , \n  (#__codelineno-6-82)      params :   Optional [ list [ QueryParameter ]]   =   None , \n  (#__codelineno-6-83)      is_private :   bool   =   True , \n  (#__codelineno-6-84)      archive_after :   bool   =   True , \n  (#__codelineno-6-85) )   ->   ResultsResponse : \n  (#__codelineno-6-86)      \"\"\" \n  (#__codelineno-6-87)     Allows user to provide execute raw_sql via the CRUD interface \n  (#__codelineno-6-88)     - create, run, get results with optional archive/delete. \n  (#__codelineno-6-89)     - Query is by default made private and archived after execution. \n  (#__codelineno-6-90)     Requires premium subscription! \n  (#__codelineno-6-91)     \"\"\" \n \n \n ", "url": "https://dune.com/docs/api/quick-start/api-py/#api-breakdown"}
{"content": "Raw Requests \u00b6 \n If you want to understand the details or proceed without the client library, then check out the full walkthrough using HTTP requests  here  (../python/raw-walkthrough/) .", "url": "https://dune.com/docs/api/quick-start/api-py/#raw-requests"}
{"content": "Language Specific API Quickstart Guides \u00b6 \n Get started with our API in a few lines of code using these quick start guides: \n \n \n Python  (api-py/) \n Javascript  (api-js/) \n \n \n You should check out our  community API clients (sdks)  (community-clients/)  as well. \n For building a simple data ingestion pipeline, see  using Python and Celery  (https://adamparrish.xyz/downstream-data-extract-transform-load) . \n ", "url": "https://dune.com/docs/api/quick-start/#language-specific-api-quickstart-guides"}
{"content": "API-ready Queries \u00b6 \n Here we have four queries, you can use the query ID from the URL in any of the  API guides  (./) . Or, you can fork the query and change it however you like - then use that new query ID in the API. \n Get the ERC20 balances for a given address \n The query ID is  1616880  (https://dune.com/queries/1616880) . \n \n \n \n Parameters \n Description \n Valid Choices \n \n \n \n \n address \n The address that you would like to get balances for \n must be a valid EVM address \n \n \n blocknumber \n The cutoff block for checking balances \n 0 if you want most recent block, otherwise any blocknumber that has been processed will work (~3 minute/15 block delay) \n \n \n chain \n The EVM chain you'd like to check balances for \n ethereum ,  polygon ,  bnb ,  optimism ,  arbitrum ,  avalanche_c ,  gnosis \n \n \n dust \n Keep or remove dust tokens (worth less than $0.01) \n keep  or  remove \n \n \n \n Output columns \n \n \n \n Output Column \n Description \n \n \n \n \n symbol \n the token symbol, if we have it \n \n \n notional_value \n the notional amount of tokens held, rounded 5 decimals \n \n \n total_value \n the $USD value of tokens held, rounded 3 decimals \n \n \n token_price \n the $USD price of the token \n \n \n \n Get all the holders and their balances for a given ERC20 address \n The query ID is  1618116  (https://dune.com/queries/1618116) . \n \n \n \n Parameters \n Description \n Valid Choices \n \n \n \n \n address \n The ERC20 token address you would like to get holders of \n must be a valid EVM address \n \n \n blocknumber \n The cutoff block for checking balances \n 0 if you want most recent block, otherwise any blocknumber that has been processed will work (~3 minute/15 block delay) \n \n \n chain \n The EVM chain you'd like to check balances for \n ethereum ,  polygon ,  bnb ,  optimism ,  arbitrum ,  avalanche_c ,  gnosis \n \n \n \n Output columns \n \n \n \n Output Column \n Description \n \n \n \n \n holder \n the address of the holder \n \n \n holder_ens \n the ens of the holder address, if any \n \n \n notional_value \n the notional amount of tokens held, rounded 5 decimals \n \n \n total_value \n the $USD value of tokens held, rounded 3 decimals \n \n \n token_price \n the $USD price of the token \n \n \n \n Get the NFT balances for a given address \n The query ID is  1617158  (https://dune.com/queries/1617158) . \n \n \n \n Parameters \n Description \n Valid Choices \n \n \n \n \n address \n The address that you would like to get balances for \n must be a valid EVM address \n \n \n blocknumber \n The cutoff block for checking balances \n 0 if you want most recent block, otherwise any blocknumber that has been processed will work (~3 minute/15 block delay) \n \n \n chain \n The EVM chain you'd like to check balances for \n ethereum ,  polygon ,  bnb ,  optimism ,  arbitrum ,  avalanche_c ,  gnosis \n \n \n \n Output columns \n \n \n \n Output Column \n Description \n \n \n \n \n symbol \n the symbol of the NFT, if we have it \n \n \n name \n the name of the NFT, if we have it \n \n \n category \n the category of the NFT, if we have it \n \n \n token_id \n the token_id of the NFT \n \n \n contract_address \n the contract_address of the NFT \n \n \n acquired_how \n was it  minted  or  transfered/bought \n \n \n acquired_on_block_number \n the block_number that the NFT was received on \n \n \n \n Get all the holders and their balances for a given NFT address \n The query ID is  1618122  (https://dune.com/queries/1618122) . \n \n \n \n Parameters \n Description \n Valid Choices \n \n \n \n \n address \n The NFT address that you would like to holders of \n must be a valid EVM address \n \n \n blocknumber \n The cutoff block for checking balances \n 0 if you want most recent block, otherwise any blocknumber that has been processed will work (~3 minute/15 block delay) \n \n \n chain \n The EVM chain you'd like to check balances for \n ethereum ,  polygon ,  bnb ,  optimism ,  arbitrum ,  avalanche_c ,  gnosis \n \n \n \n Output columns \n \n \n \n Output Column \n Description \n \n \n \n \n holder \n the address of the holder \n \n \n holder_ens \n the ens of the holder address, if any \n \n \n tokens_held \n how many NFTs from this contract is held \n \n \n token_ids \n an array of all the token ids held", "url": "https://dune.com/docs/api/quick-start/#api-ready-queries"}
{"content": "API Reference \u00b6 \n \n Endpoints \n Full documentation of API endpoints  here  (api-reference/) . \n \n We can largely bucket Dune API features into these categories:  \n \n Executing queries  - execute any query, and retrieving results from that execution (or latest results from any execution) \n Editing queries  ( CRUD  [Create, Retrieve, Update, Delete/Archive] API)  \n Uploading Data  - right now you can upload CSV files to the API. This is append only. \n \n ", "url": "https://dune.com/docs/api/#api-reference"}
{"content": "Obtaining an API Key \u00b6 \n All plans on our new  credit-based pricing system  (https://dune.com/pricing)  come bundled with API access.\nYou'll have seperate API keys for your  individual accounts  (https://dune.com/settings/api)  and  team accounts  (https://dune.com/settings/teams) . \n ", "url": "https://dune.com/docs/api/#obtaining-an-api-key"}
{"content": "API Quickstart Guides \u00b6 \n \n Note \n The quickstart and developer SDKs currently only contains endpoints under  Executing Queries  (api-reference/execute-queries/)  and  Getting Results  (api-reference/get-results/) . We will be adding info regarding newer endpoints under  Editing Queries  (api-reference/edit-queries/)  soon. \n \n Get started with our API in a few lines of code using these quick start guides: \n \n \n Python  (quick-start/api-py/) \n Javascript  (quick-start/api-js/) \n \n \n You should check out our  developer API clients (sdks)  (quick-start/community-clients/)  as well. \n For building a simple data ingestion pipeline, see  using Python and Celery  (https://adamparrish.xyz/downstream-data-extract-transform-load) . \n If you aren't sure what queries to start with, check out the  API-ready query list  (quick-start/) . \n ", "url": "https://dune.com/docs/api/#api-quickstart-guides"}
{"content": "API Pricing \u00b6 \n Pricing for API is charged along two dimensions. \n \n \n \n Dimension \n Credits Charged \n Relevant API endpoints \n \n \n \n \n Executions \n 10 credits per medium query engine executions (Default) 20 credits per large query engine executions \n Execute Query \n \n \n Datapoints \n 1 credit per 1,000 datapoints \n Execution Results Latest Query Results \n \n \n \n A datapoint applies to query results after the query is run, and can in most cases be thought of  rows * columns  with an additional limit of 100 avg bytes per cell in a set of results. This can be expressed as: \n  (#__codelineno-0-1) Credits = Datapoints/1000 = max(rows*columns, ceil(totalbytes/100))/1000\n \nMore details can be found on our  FAQ page  (https://dune.com/docs/api/faq/#faq-billing-pricing) .\n ", "url": "https://dune.com/docs/api/#api-pricing"}
{"content": "Additional Info \u00b6 \n \ud83d\udcad If you have any questions or feedback, please reach out to our # dune-api  (https://discord.com/channels/757637422384283659/1019910980634939433)  Discord channel or  api-feedback@dune.com  (mailto:api-feedback@dune.com) ! \n \ud83d\udca1 Have an idea for additional Dune API features? Please  submit them here  (https://feedback.dune.com/) ! We value your input and are regularly implementing improvements based on user feedback.", "url": "https://dune.com/docs/api/#additional-info"}
{"content": "Setup \u00b6 \n ", "url": "https://dune.com/docs/app/alerts/#setup"}
{"content": "Accessing Alerts \u00b6 \n \n To use Alerts, follow these steps: \n \n Open a saved query that you own. \n Click the \"Schedule\" button. \n Configure the query schedule. \n Activate the Alerts option. \n Configure the alert delivery method. \n Save the schedule. \n Every time the query runs, the alert will be triggered.  \n \n ", "url": "https://dune.com/docs/app/alerts/#accessing-alerts"}
{"content": "Alert Timing \u00b6 \n Alerts are triggered after query execution. Delays may occur due to factors like query complexity or system queues. Note that retry mechanisms for failed deliveries are not yet implemented.  \n \n Warning \n Alerts are not recommended for time-sensitive or critical applications at this stage. \n \n ", "url": "https://dune.com/docs/app/alerts/#alert-timing"}
{"content": "Alert Content \u00b6 \n ", "url": "https://dune.com/docs/app/alerts/#alert-content"}
{"content": "Email Alerts \u00b6 \n Email alerts include screenshots of the visualizations you have defined. If you have defined no visualizations, we include a screenshot of the query results by default. Here's an example: \n \n If you have defined a visualization, we will include it instead of the table, like this: \n \n If your query contains multiple visualizations, or table visualizations (outside the default \"Query results\" table), they will all be included, such as here: \n \n ", "url": "https://dune.com/docs/app/alerts/#email-alerts"}
{"content": "Webhook Alerts \u00b6 \n Webhook alerts adhere to the following schema: \n  (#__codelineno-0-1) { \n  (#__codelineno-0-2)    message :   string , \n  (#__codelineno-0-3)    query_result :   { \n  (#__codelineno-0-4)      execution_id :   string ; \n  (#__codelineno-0-5)      query_id :   number ; \n  (#__codelineno-0-6)      state :   string ; \n  (#__codelineno-0-7)      submitted_at :   string ; \n  (#__codelineno-0-8)      expires_at :   string ; \n  (#__codelineno-0-9)      execution_started_at :   string ; \n  (#__codelineno-0-10)      execution_ended_at :   string ; \n  (#__codelineno-0-11)      result :   { \n  (#__codelineno-0-12)        data_uri :   string ; \n  (#__codelineno-0-13)        metadata :   { \n  (#__codelineno-0-14)          column_names :   string []; \n  (#__codelineno-0-15)          result_set_bytes :   number ; \n  (#__codelineno-0-16)          total_row_count :   number ; \n  (#__codelineno-0-17)          datapoint_count :   number ; \n  (#__codelineno-0-18)          pending_time_millis :   number ; \n  (#__codelineno-0-19)          execution_time_millis :   number ; \n  (#__codelineno-0-20)        }; \n  (#__codelineno-0-21)      }; \n  (#__codelineno-0-22)    }, \n  (#__codelineno-0-23)    visualizations :   [ \n  (#__codelineno-0-24)      { \n  (#__codelineno-0-25)        title :   string ; \n  (#__codelineno-0-26)        image_url :   string ; \n  (#__codelineno-0-27)      } \n  (#__codelineno-0-28)    ] \n  (#__codelineno-0-29) } \n \n Here is an example corresponding to the last email example shared earlier: \n  (#__codelineno-1-1) {\n  (#__codelineno-1-2)   \"message\": \"Query ETH SMA alert was submitted for execution at Wed, 13 Dec 2023 13:42:40 GMT by your query schedule and it was successfully executed with a non empty result.\\nYou can check its latest result here: https://dune.com/queries/3137182?utm_source=webhook&utm_campaign=alerts\",\n  (#__codelineno-1-3)   \"query_result\": {\n  (#__codelineno-1-4)     \"execution_id\": \"01HHHPMKG6NBY0B04A36TS3AQH\",\n  (#__codelineno-1-5)     \"query_id\": 3137182,\n  (#__codelineno-1-6)     \"state\": \"QUERY_STATE_COMPLETED\",\n  (#__codelineno-1-7)     \"submitted_at\": \"2023-12-13T13:42:40Z\",\n  (#__codelineno-1-8)     \"expires_at\": \"2024-03-12T13:42:48Z\",\n  (#__codelineno-1-9)     \"execution_started_at\": \"2023-12-13T13:42:40Z\",\n  (#__codelineno-1-10)     \"execution_ended_at\": \"2023-12-13T13:42:48Z\",\n  (#__codelineno-1-11)     \"result\": {\n  (#__codelineno-1-12)       \"data_uri\": \"https://api.dune.com/api/v1/execution/01HHHPMKG6NBY0B04A36TS3AQH/results\",\n  (#__codelineno-1-13)       \"metadata\": {\n  (#__codelineno-1-14)         \"column_names\": [\n  (#__codelineno-1-15)           \"day\",\n  (#__codelineno-1-16)           \"avg_price\",\n  (#__codelineno-1-17)           \"sma_20\",\n  (#__codelineno-1-18)           \"sma_50\",\n  (#__codelineno-1-19)           \"sma_100\",\n  (#__codelineno-1-20)           \"sma_200\"\n  (#__codelineno-1-21)         ],\n  (#__codelineno-1-22)         \"result_set_bytes\": 10710,\n  (#__codelineno-1-23)         \"total_row_count\": 91,\n  (#__codelineno-1-24)         \"datapoint_count\": 546,\n  (#__codelineno-1-25)         \"pending_time_millis\": 13,\n  (#__codelineno-1-26)         \"execution_time_millis\": 8038\n  (#__codelineno-1-27)       }\n  (#__codelineno-1-28)     }\n  (#__codelineno-1-29)   },\n  (#__codelineno-1-30)   \"visualizations\": [\n  (#__codelineno-1-31)     {\n  (#__codelineno-1-32)       \"title\": \"SMA\",\n  (#__codelineno-1-33)       \"image_url\": \"https://prod-dune-media.s3.eu-west-1.amazonaws.com/screenshots/3137182/01HHHPMKG6NBY0B04A36TS3AQH/5232261.png\"\n  (#__codelineno-1-34)     },\n  (#__codelineno-1-35)     {\n  (#__codelineno-1-36)       \"title\": \"Counter\",\n  (#__codelineno-1-37)       \"image_url\": \"https://prod-dune-media.s3.eu-west-1.amazonaws.com/screenshots/3137182/01HHHPMKG6NBY0B04A36TS3AQH/5451006.png\"\n  (#__codelineno-1-38)     },\n  (#__codelineno-1-39)     {\n  (#__codelineno-1-40)       \"title\": \"Last days of data\",\n  (#__codelineno-1-41)       \"image_url\": \"https://prod-dune-media.s3.eu-west-1.amazonaws.com/screenshots/3137182/01HHHPMKG6NBY0B04A36TS3AQH/5451008.png\"\n  (#__codelineno-1-42)     }\n  (#__codelineno-1-43)   ]\n  (#__codelineno-1-44) }\n \n Validation of the webhook format can be done at  Webhook.site  (https://webhook.site/) . You can easily test it out by triggering manual deliveries by clicking the Manual trigger link below the URL field. \n ", "url": "https://dune.com/docs/app/alerts/#webhook-alerts"}
{"content": "Integration with Third-Party Apps \u00b6 \n ", "url": "https://dune.com/docs/app/alerts/#integration-with-third-party-apps"}
{"content": "Slack Support \u00b6 \n The webhook alert type supports posting directly to Slack. Users should: \n \n Create a  Slack app  (https://api.slack.com/apps)  and activate \"Incoming Webhooks.\" \n Paste the Slack hook URL into the Alert configuration.  \n The help text below the field should indicate that a Slack URL has been detected: \n \n \n Once saved, you will start receiving messages on Slack. Here is an example of how it looks: \n \n ", "url": "https://dune.com/docs/app/alerts/#slack-support"}
{"content": "Zapier Integration \u00b6 \n Zapier  (https://zapier.com/)  is a third party solution that supports building integrations betwen different software solutions without writing any code. With it you can build advanced workflows that relay data between Dune and your favorite work tools. \n We currently offer an experimental  Zapier app  (https://zapier.com/developer/public-invite/194504/2174c6b998748b657f28dab4097f3e80/)  to support connecting Dune with thousands of other tools via Zapier.  \n To set it up, follow these steps: \n \n Accept the invite to use our private Zapier app via  this link  (https://zapier.com/developer/public-invite/194504/2174c6b998748b657f28dab4097f3e80/) . \n Create a new zap, with a  Webhook trigger  (https://zapier.com/apps/webhook/integrations) . \n Copy the webhook URL provided by Zapier's Webhook trigger, and paste it in the Dune webhook URL field. \n Now, on Zapier you can click Test to test that the webhook works. \n Trigger a manual hook request from the Alerts configuration form to test it out, and it should show up on Zapier. \n If you want to relay screenshots to other tools, the screenshots will be in the payload. \n If you want to relay query results, the Dune Zapier App includes an action to fetch a query's latest results by query id, which will allow you to easily fetch query results. \n \n \n \n This is where you can trigger manual hook deliveries: \n \n Your setup on Zapier should look something like this: \n \n ", "url": "https://dune.com/docs/app/alerts/#zapier-integration"}
{"content": "Known Issues and Solutions \u00b6 \n \n \n Manual Alert Triggering:  Currently, manual triggering is only available for webhooks. \n \n We're planning to add it to Email and Slack. In the meantime, you can set your query on a 15-minute schedule for quicker testing. \n \n \n \n No results in webhook:  Instead of including query results in the callback, the webhook payload includes a URL to fetch the query's results in case you need to action on them. \n \n We do not include datapoints in the hook callback in order to prevent unwanted credit spend on data exports. \n We're open to feedback on changing this behavior. If you have thoughts, let us know. \n \n \n \n ", "url": "https://dune.com/docs/app/alerts/#known-issues-and-solutions"}
{"content": "Feedback \u00b6 \n Feedback can be provided through the Alerts Beta Telegram channel. \n Join the channel  (https://t.me/+bt5J1QlJ3_FhMDU0) \n ", "url": "https://dune.com/docs/app/alerts/#feedback"}
{"content": "Acknowledgement \u00b6 \n Thank you to everyone that participated in our beta testing program. Your feedback has been essential for improving this feature.", "url": "https://dune.com/docs/app/alerts/#acknowledgement"}
{"content": "Refining your results \u00b6 \n Alternatively, you can head over to the  Discover page  (https://dune.com/browse/dashboards)  where you will find the extended results page, with additonal filters to apply, such as ranking by trending, favorites or recently created. You will find your search input which you can edit alongside these filters to refine your search on the sidebar next to the results list: \n \n You can edit your input and the results will immediately update to reflect. You can also rank by: \n \n Favorites, which combined with the time filter reflects the number of favorites received over that time period. This is useful to capture recently popular content. \n Trending, which is an internal metric of content popularity over the short term, across 3 different time windows. \n New, which ranks by the content's \"created at\" timestamp. \n \n ", "url": "https://dune.com/docs/app/search/#refining-your-results"}
{"content": "Advanced Search \u00b6 \n You can apply advanced filters to your search, in any of Dune's search fields (in the top bar or in the sidebar in Discover). \n For example, you can search for  nft tags:nft,opensea,looksrare author:hildobby,denze,rantum,cryptuschrist,sealaunch  or  tags:usdc,usdt,dai -tags:ust  for more relevant and precise results. \n These are the filters we currently support: \n \n \n \n Filter \n Description \n Example \n \n \n \n \n title \n Search by title. Wrap your value in double quotes if your input has spaces. \n title:usdc  or  title:\"dex tracker\" \n \n \n tags \n Search by tag or tags. \n tags:usdc \n \n \n author \n Search by author. \n author:dune \n \n \n description \n Only applicable to Queries, find matches in the description. \n description:usdc \n \n \n created_before \n Only include matches created before or at a given date. \n created_before:2023-01-30 \n \n \n created_after \n Only include matches created after or at a given date. \n created_after:2023-01-30 \n \n \n updated_before \n Only include matches updated before or at a given date. \n updated_before:2023-01-30 \n \n \n updated_after \n Only include matches updated before or at a given date. \n updated_after:2023-01-30 \n \n \n \n Notes: \n \n You can combine multiple filters together with arbitrary text.  \n You can also combine multiple values by separating them with a comma ( , ) such as  stablecoins tags:usdc,usdt . \n You can wrap your input in double quotes ( \" ) for terms that have spaces, such as  title:\"layer zero\" . \n You can also exclude results by prefixing it with a minus sign ( - ) (e.g.  -tags:ethereum ). \n \n \n Note \n Advanced Search is currently only supported for Dashboards and Queries. \n \n ", "url": "https://dune.com/docs/app/search/#advanced-search"}
{"content": "Code search \u00b6 \n For queries, you can tick the  Search code  box to find relevant queries whose SQL code matches your input. Use it to find examples of queries that query a specific table, namespace or queries using a particular kind of SQL operation or syntax.", "url": "https://dune.com/docs/app/search/#code-search"}
{"content": "Using Embeds on different platforms \u00b6 \n Here are a few examples of how you can use Dune embeds on different platforms. \n ", "url": "https://dune.com/docs/app/embeds/#using-embeds-on-different-platforms"}
{"content": "Twitter \u00b6 \n Twitter renders and updates Dune Visualizations automatically! \n Simply paste your embed link and let the magic happen. \n \n ", "url": "https://dune.com/docs/app/embeds/#twitter"}
{"content": "Discord \u00b6 \n Dune embeds work very well in Discord, simply drop the embed link in the chat and the corresponding Visualization will be displayed. \n This also lends itself very well to programming a bot to return the corresponding charts on command. \n \n ", "url": "https://dune.com/docs/app/embeds/#discord"}
{"content": "Web Pages \u00b6 \n You can use Dune's embed links to add live Visualizations to any web page using an  iframe \n Here is a code snippet example:\n  (#__codelineno-0-1) < iframe   src = \"[your-query's-embed-link]\"   height = \"500\"   width = \"500\"   title = \"[name-of-your-query]\" ></ iframe > `\n \nA great showcase for this is the  cryptoart.io  (https://cryptoart.io/data)  website.\n ", "url": "https://dune.com/docs/app/embeds/#web-pages"}
{"content": "Mirror.xyz \u00b6 \n Dune Visualizations can easily be embedded into articles on mirror.xyz. Simply generate an embed link and postfix it with  ?display=iframe \n  (#__codelineno-1-1) https://dune.com/embeds/208941/391702/34ee3319-1cac-40e1-a08d-160bd93693cc?display=iframe`\n \n ", "url": "https://dune.com/docs/app/embeds/#mirrorxyz"}
{"content": "Known Issues \u00b6 \n Unfortunately, embeds do not work in a couple of fairly popular web platforms, including: \n \n Substack \n Medium \n GitBook \n \n ", "url": "https://dune.com/docs/app/embeds/#known-issues"}
{"content": "Creating Embeds with Parameters \u00b6 \n Embed links also work with parameterized Queries, but it is a bit tricky to get them to work: \n The embed link you generate won't include the necessary parameters yet, even if you ran the query with them. \n We are working on automating this, but for now you'll need to manually prefix the parameter link with the parameters: \n link?[name_of_parameter_1]=[xxxx]&?[name_of_parameter_2]=[yyyy]&[...] \n Here is a working example:\n  (#__codelineno-2-1) https://dune.com/embeds/118220/238460/aa002dd3-f9e2-4d63-86c8-b765569306c6NFT?address=0xff9c1b15b16263c61d017ee9f65c50e4ae0113d7&rolling_n_trades=500", "url": "https://dune.com/docs/app/embeds/#creating-embeds-with-parameters"}
{"content": "Querying for the data in Dune \u00b6 \n Once the data has been uploaded, you can explore it in the my data section in the data explorer:  \n \n You can query for your data in any query. \n  (#__codelineno-2-1) Select   *   from   dune . dune . dataset_energy_data \n \n To check whether the datatypes are correctly inferred, you can check the table details in the  data explorer  (../query-editor/data-explorer/) . \n ", "url": "https://dune.com/docs/app/upload-data/#querying-for-the-data-in-dune"}
{"content": "Updating data \u00b6 \n Currently there is no way to update the data of an already existing .csv file. \n However, you can use the \"query a query\" feature to query multiple .csv files at once. \n For example: \n  (#__codelineno-3-1) --query_2441513 \n  (#__codelineno-3-2) \n  (#__codelineno-3-3) Select   *   from   dune . dune . dataset_energy_data_1 \n  (#__codelineno-3-4) \n  (#__codelineno-3-5) UNION   ALL \n  (#__codelineno-3-6) \n  (#__codelineno-3-7) Select   *   from   dune . dune . dataset_energy_data_2 \n  (#__codelineno-3-8) \n  (#__codelineno-3-9) -- add more as it becomes relevant \n \n In your main query, you could then simply refer to this query. \n  (#__codelineno-4-1) Select   *   from   ethereum . transactions   t \n  (#__codelineno-4-2) left   join   query_2441513   q   on   q . address   =   t . \"from\" \n \n ", "url": "https://dune.com/docs/app/upload-data/#updating-data"}
{"content": "Private data \u00b6 \n If you don't want to share your data with the world, you can also upload private data. Private data is only visible to you and your team members. \n To upload private data,  you need to be on the premium plan . If you are on the premium plan, you can upload private data by toggling the \"make table private\" switch in the upload data modal. \n You can also change the privacy settings of a dataset after it has been uploaded. To do so, go to settings -> data page and click on the three dots next to the dataset you want to change the privacy settings for. Then click on \"make table private\" to make the table private or \"make table public\" to make it public.  \n ", "url": "https://dune.com/docs/app/upload-data/#private-data"}
{"content": "Deleting data \u00b6 \n You can delete your data via your settings page. \n \n \n Click on the \"settings\" button in the menu of the Dune UI. \n Click on \"data\". \n Find the dataset you want to delete. \n Click on the three dots to open the options for the dataset. \n Click on \"delete dataset\". \n confirm the deletion. \n The dataset is now deleted. \n \n ", "url": "https://dune.com/docs/app/upload-data/#deleting-data"}
{"content": "Large Amounts of Data \u00b6 \n If you want to share valuable off-chain data on Dune with your community, we are happy to discuss custom arrangements. Please reach indicate your interest via this  form  (https://bit.ly/dune-data-integration) . \n This is only applicable for datasets with positive externalities for the Dune community. Examples include: \n \n Farcaster  (../../data-tables/community/neynar/farcaster/) \n Reservoir  (../../data-tables/community/reservoir/) \n Flashbots  (../../data-tables/community/flashbots/)", "url": "https://dune.com/docs/app/upload-data/#large-amounts-of-data"}
{"content": "Wand Create \u00b6 \n The Wand Create feature allows you to automatically generate SQL queries from natural language questions. It utilizes a suite of Dune-specific few-shot examples and automatically fetches table schemas to include in the prompt. (You must to explicitly include the relevant tables in your natural language question to include table schemas.)  \n This feature simplifies the process of writing getting started writing a SQL query, especially for users who may not be familiar with the database structure. Your mileage may vary depending on the complexity of your question and how well the underlying tables are suited to answering it. We recommend using this feature as a starting point and then refining the query using the Wand Edit feature.  \n You can find this feature in the query editor and click the wand logo in the top right corner to open the Wand bar. An empty query page should open in Create mode and you can toggle between Create and Edit modes using the buttons in the top right corner of the query editor.\n \n ", "url": "https://dune.com/docs/app/wand-llm/#wand-create"}
{"content": "Wand Edit \u00b6 \n The Wand Edit feature allows you to edit an existing SQL query based on a natural language question. Similar to query generation, any additional tables required should be explicitly included in the natural language edit request to make use of schemas. This feature simplifies the process of refining and fine-tuning SQL queries generated by the system or existing queries in your application. \n You can find this feature in the query editor and click the wand logo in the top right corner to open the Wand bar. An non-empty query page should open in Edit mode and you can toggle between Create and Edit modes using the buttons in the top right corner of the query editor. \n \n Below are some examples of use cases for the Wand Edit feature: \n Adding statistics to a query \u00b6  (#adding-statistics-to-a-query) \n Add the remaining components of a five point summary. \n Original query:\n  (#__codelineno-0-1)      SELECT   \n  (#__codelineno-0-2)          date_trunc ( \\ 'day\\' ,   block_time )   AS   time \n  (#__codelineno-0-3)          ,   ( PERCENTILE_CONT ( 0 . 5 )   WITHIN   GROUP   ( ORDER   BY   gas_price )) / 1 e9    AS   median_gas \n  (#__codelineno-0-4)          ,   COUNT ( * )   AS   daily_tx \n  (#__codelineno-0-5)      FROM   ethereum . transactions \n  (#__codelineno-0-6)      GROUP   BY   time \n \n Edited query:\n  (#__codelineno-1-1) SELECT   \n  (#__codelineno-1-2)      date_trunc ( 'day' ,   block_time )   AS   time \n  (#__codelineno-1-3)      ,   MIN ( gas_price ) / 1 e9   AS   min_gas \n  (#__codelineno-1-4)      ,   ( PERCENTILE_CONT ( 0 . 25 )   WITHIN   GROUP   ( ORDER   BY   gas_price )) / 1 e9   AS   lower_quartile_gas \n  (#__codelineno-1-5)      ,   ( PERCENTILE_CONT ( 0 . 5 )   WITHIN   GROUP   ( ORDER   BY   gas_price )) / 1 e9    AS   median_gas \n  (#__codelineno-1-6)      ,   ( PERCENTILE_CONT ( 0 . 75 )   WITHIN   GROUP   ( ORDER   BY   gas_price )) / 1 e9   AS   upper_quartile_gas \n  (#__codelineno-1-7)      ,   MAX ( gas_price ) / 1 e9   AS   max_gas \n  (#__codelineno-1-8)      ,   COUNT ( * )   AS   daily_tx \n  (#__codelineno-1-9) FROM   ethereum . transactions \n  (#__codelineno-1-10) GROUP   BY   time \n \n Adding a join to a query \u00b6  (#adding-a-join-to-a-query) \n Join nft.wash_trades to nft.trades to get the percentage of sellers who have been involved in wash trading. \n Original query:\n  (#__codelineno-2-1) SELECT    date_trunc ( 'day' ,   block_time )   as   day ,   COUNT ( distinct   seller )   as   sellers \n  (#__codelineno-2-2) FROM   nft . trades \n  (#__codelineno-2-3) WHERE   project   =   'blur' \n  (#__codelineno-2-4) GROUP   BY   1 \n \n Edited query:\n  (#__codelineno-3-1) SELECT    \n  (#__codelineno-3-2)      date_trunc ( 'day' ,   t . block_time )   as   day ,   \n  (#__codelineno-3-3)      COUNT ( distinct   t . seller )   as   sellers ,   \n  (#__codelineno-3-4)      COUNT ( distinct   wt . seller )   as   wash_traders ,   \n  (#__codelineno-3-5)      ( COUNT ( distinct   wt . seller )   *   100 . 0   /   COUNT ( distinct   t . seller ))   as   wash_traders_percentage \n  (#__codelineno-3-6) FROM   \n  (#__codelineno-3-7)      nft . trades   t \n  (#__codelineno-3-8) LEFT   JOIN   \n  (#__codelineno-3-9)      nft . wash_trades   wt   ON   t . seller   =   wt . seller \n  (#__codelineno-3-10) WHERE   \n  (#__codelineno-3-11)      t . project   =   'blur' \n  (#__codelineno-3-12) GROUP   BY   \n  (#__codelineno-3-13)      1 \n \n Reformat Output \u00b6  (#reformat-output) \n Return monthly volume with each year from 2023 to 2019 as a separate column \n Original query:\n  (#__codelineno-4-1) SELECT \n  (#__codelineno-4-2)   DATE_TRUNC ( 'month' ,   block_time ), \n  (#__codelineno-4-3)   SUM ( CAST ( amount_usd   AS   DOUBLE ))   AS   usd_volume \n  (#__codelineno-4-4) FROM \n  (#__codelineno-4-5)   dex . trades   AS   t \n  (#__codelineno-4-6) WHERE \n  (#__codelineno-4-7) block_time   >   CAST ( '2019-01-01'   AS   TIMESTAMP ) \n  (#__codelineno-4-8) GROUP   BY \n  (#__codelineno-4-9)   1 \n \n Edited query:\n  (#__codelineno-5-1) SELECT \n  (#__codelineno-5-2)    DATE_TRUNC ( 'month' ,   block_time )   AS   month , \n  (#__codelineno-5-3)    SUM ( CASE   WHEN   EXTRACT ( YEAR   FROM   block_time )   =   2019   THEN   CAST ( amount_usd   AS   DOUBLE )   ELSE   0   END )   AS   usd_volume_2019 , \n  (#__codelineno-5-4)    SUM ( CASE   WHEN   EXTRACT ( YEAR   FROM   block_time )   =   2020   THEN   CAST ( amount_usd   AS   DOUBLE )   ELSE   0   END )   AS   usd_volume_2020 , \n  (#__codelineno-5-5)    SUM ( CASE   WHEN   EXTRACT ( YEAR   FROM   block_time )   =   2021   THEN   CAST ( amount_usd   AS   DOUBLE )   ELSE   0   END )   AS   usd_volume_2021 , \n  (#__codelineno-5-6)    SUM ( CASE   WHEN   EXTRACT ( YEAR   FROM   block_time )   =   2022   THEN   CAST ( amount_usd   AS   DOUBLE )   ELSE   0   END )   AS   usd_volume_2022 , \n  (#__codelineno-5-7)    SUM ( CASE   WHEN   EXTRACT ( YEAR   FROM   block_time )   =   2023   THEN   CAST ( amount_usd   AS   DOUBLE )   ELSE   0   END )   AS   usd_volume_2023 \n  (#__codelineno-5-8) FROM \n  (#__codelineno-5-9)    dex . trades   AS   t \n  (#__codelineno-5-10) WHERE \n  (#__codelineno-5-11)   block_time   >=   CAST ( '2019-01-01'   AS   TIMESTAMP ) \n  (#__codelineno-5-12) GROUP   BY \n  (#__codelineno-5-13)    1 \n \n Adding a CTE \u00b6  (#adding-a-cte) \n Add a CTE to calculate the number of mints with nft.mints by day and then return the average number of mints per day and join it to the existing query \n Original query:\n  (#__codelineno-6-1) select \n  (#__codelineno-6-2)   date_trunc ( 'day' ,   block_time )   as   dt \n  (#__codelineno-6-3)   , count ( hash )   as   num_transactions \n  (#__codelineno-6-4)   , count ( distinct   \"from\" )   as   users \n  (#__codelineno-6-5)   , sum ( gas_used )   as   gas_used \n  (#__codelineno-6-6)   , avg ( gas_used )   as   avg_gas_used \n  (#__codelineno-6-7)   , avg ( gas_price ) / 1 e9   as   avg_gas_price \n  (#__codelineno-6-8) from   ethereum . transactions \n  (#__codelineno-6-9) where \n  (#__codelineno-6-10)   success \n  (#__codelineno-6-11)   and   block_time   >=   cast ( '2022-01-01'   as   date ) \n  (#__codelineno-6-12)   and   date_trunc ( 'day' ,   block_time )   <   date_trunc ( 'day' ,   current_timestamp ) \n  (#__codelineno-6-13) group   by   1 \n \n Updated query:\n  (#__codelineno-7-1) WITH   daily_mints   AS   ( \n  (#__codelineno-7-2)      SELECT   \n  (#__codelineno-7-3)          date_trunc ( 'day' ,   block_time )   as   dt , \n  (#__codelineno-7-4)          count ( * )   as   num_mints \n  (#__codelineno-7-5)      FROM   nft . mints \n  (#__codelineno-7-6)      WHERE   \n  (#__codelineno-7-7)          block_time   >=   cast ( '2022-01-01'   as   date )   \n  (#__codelineno-7-8)          and   date_trunc ( 'day' ,   block_time )   <   date_trunc ( 'day' ,   current_timestamp ) \n  (#__codelineno-7-9)      GROUP   BY   1 \n  (#__codelineno-7-10) ) \n  (#__codelineno-7-11) \n  (#__codelineno-7-12) SELECT   \n  (#__codelineno-7-13)      et . dt , \n  (#__codelineno-7-14)      et . num_transactions , \n  (#__codelineno-7-15)      et . users , \n  (#__codelineno-7-16)      et . gas_used , \n  (#__codelineno-7-17)      et . avg_gas_used , \n  (#__codelineno-7-18)      et . avg_gas_price , \n  (#__codelineno-7-19)      dm . num_mints , \n  (#__codelineno-7-20)      avg ( dm . num_mints )   over   ()   as   avg_daily_mints \n  (#__codelineno-7-21) FROM   ( \n  (#__codelineno-7-22)      SELECT   \n  (#__codelineno-7-23)          date_trunc ( 'day' ,   block_time )   as   dt , \n  (#__codelineno-7-24)          count ( hash )   as   num_transactions , \n  (#__codelineno-7-25)          count ( distinct   \"from\" )   as   users , \n  (#__codelineno-7-26)          sum ( gas_used )   as   gas_used , \n  (#__codelineno-7-27)          avg ( gas_used )   as   avg_gas_used , \n  (#__codelineno-7-28)          avg ( gas_price ) / 1 e9   as   avg_gas_price \n  (#__codelineno-7-29)      FROM   ethereum . transactions \n  (#__codelineno-7-30)      WHERE   \n  (#__codelineno-7-31)          success \n  (#__codelineno-7-32)          and   block_time   >=   cast ( '2022-01-01'   as   date )   \n  (#__codelineno-7-33)          and   date_trunc ( 'day' ,   block_time )   <   date_trunc ( 'day' ,   current_timestamp ) \n  (#__codelineno-7-34)      GROUP   BY   1 \n  (#__codelineno-7-35) )   et \n  (#__codelineno-7-36) LEFT   JOIN   daily_mints   dm   ON   et . dt   =   dm . dt \n \n ", "url": "https://dune.com/docs/app/wand-llm/#wand-edit"}
{"content": "Wand Debug \u00b6 \n The Wand Debug feature helps fix SQL queries that have syntax errors. When an executed query encounters a syntax error, the Fix Query button should appear in the results/visualization panel. Clicking this button collect your query and the error message and send it to the Wand Debug feature. The Wand Debug feature will then attempt to fix the query and return the fixed query to you. If the Wand Debug feature is unable to fix the query, it will return the updated query with message indicating it is not fully debugged. The query submitted for debugging will be saved in your query history, so you can also recover it. \n You can find this feature in the results/visualization panel if you've executed a query that failed on a syntax error.", "url": "https://dune.com/docs/app/wand-llm/#wand-debug"}
{"content": "Why Teams? \u00b6 \n Creating a Team has several benefits: \n \n Collaborate on the same content.  Teams make it easy for multiple Wizards to work on shared Queries and Dashboards. \n Shared access to paid features.  All Team members can spend credits and access paid features like private Queries and Dashboards. \n A new Team profile.  Showcase all of your Team\u2019s work in one place. \n User roles.  Onboard Team members as viewers, editors or admins. \n \n ", "url": "https://dune.com/docs/app/teams/#why-teams"}
{"content": "Creating a Team \u00b6 \n Head over to  Settings > Teams  (https://dune.com/settings/teams)  to create your Team. \n ", "url": "https://dune.com/docs/app/teams/#creating-a-team"}
{"content": "Adding users \u00b6 \n You can invite other Dune Wizards to join your Team in the People section of your Team\u2019s Settings page. When you invite someone you'll need to input their Dune Username. \n You'll also need to assign them one of the following  Roles : \n \n \ud83d\udc40  Viewer:  can see the Team\u2019s content through My Creations and will be listed as a Team member in the Team page. Can also spend credits. \n \u270f\ufe0f  Editor:  in addition to the above, they can create and edit Queries under the Team\u2019s domain. \n \u2699\ufe0f  Admin:  in addition to the above, they can manage the Team and its content. \n \n \n Info \n When you invite a Wizard to join your team we'll email them a link to join. They can also directly go to  Settings > Teams  (https://dune.com/settings/teams)  and accept their invite there. \n \n ", "url": "https://dune.com/docs/app/teams/#adding-users"}
{"content": "Team content \u00b6 \n Team Queries and Dashboards are created the same way they are for individual accounts. The context you are in determines whether you are creating content for your personal account or for your Team. You can always change the ownership of a Query or Dashboard in their Settings page. \n \n \n Warning \n Once you transfer content to a Team, you will only be able to transfer it out of the Team if you are an Admin. If you accidentally transfer content to a Team you will have to ask the Team's Admin to transfer it back to you. \n \n ", "url": "https://dune.com/docs/app/teams/#team-content"}
{"content": "Switching Contexts \u00b6 \n Once you are member of a team, you can switch between your personal context and your Team context. Accordingly, the \"my creations\" page will show your personal creations or your team's creations.  \nAdditionally, all queries and dashboards created in the team context will be owned by the team and not by you personally. \n \n \n \n The context predicates which credit balance you are spending from. If you are in your personal context, you will spend your personal credits. If you are in your Team's context, you will spend your Team's credits. \nYou can spend the credits of your team on any content, regardless of whether it is owned by your personal account, your team or another Wizard.  \n You can edit the content of your team, regardless of whether you are in the personal or team context.\nIn the  Version History  (../query-editor/version-history/)  edits you make will be attributed to your personal account, even if you are in your Team's context. \n ", "url": "https://dune.com/docs/app/teams/#switching-contexts"}
{"content": "FAQ \u00b6 \n \n Can I have private content? \n Private dashboards and queries are available for the team or personal account they are in. \n \n \n How do I edit my role? \n You have to ask one of your team admins. If you're an admin, you will still have to ask another admin or upgrade someone else to the admin role. That's to ensure every team always has at least an admin. \n \n \n Can I remove people from my Team? \n Yes, you can remove people from your Team in the People section of your Team\u2019s Settings page. \n \n \n Can I transfer content to another Team? \n Yes, you can transfer content to another Team in the Settings page of the Query or Dashboard you want to transfer. \n \n \n Can I transfer content to another Wizard? \n Yes, you can transfer content to another Wizard in the Settings page of the Query or Dashboard you want to transfer.\nThis will only work if the other Wizard is a member of your Team. If they are not, you will have to invite them to your Team first. \n \n \n Can I transfer content to my personal account? \n Yes, you can transfer content to your personal account in the Settings page of the Query or Dashboard you want to transfer. \n \n I have feedback, how do I reach out? \n Come join our  #general-feedback Discord channel  (https://discord.com/channels/757637422384283659/1012706316755664926)  and we'll be glad to help \ud83d\ude47\u200d\u2642\ufe0f", "url": "https://dune.com/docs/app/teams/#faq"}
{"content": "Decoding Contracts \u00b6 \n Dune\u2019s extensive catalog of decoded smart contracts are driven by our Wizards. Our decoding process empowers our community to submit the data and build the tables that they\u2019d like to query on Dune! \n But what does decoding mean? Blockchain transaction data starts as bytecode, a low level programming language that can be read by machines. Using the ABI (Application Binary Interface) that is personal to each contract, we translate that bytecode into query-able data tables. \n ", "url": "https://dune.com/docs/app/decoding-contracts/#decoding-contracts"}
{"content": "A. The Lifecycle of Decoding \u00b6 \n ", "url": "https://dune.com/docs/app/decoding-contracts/#a-the-lifecycle-of-decoding"}
{"content": "Step 1: Submission \u00b6 \n Our decoding process begins with our  contract submission page  (https://dune.com/docs/app/decoding-contracts/) . \n \n To successfully submit a contract, you will need four pieces of information: \n \n Blockchain : The name of the origin blockchain of the contract \n Contract Address : The address associated with contract \n Project Name : The name of the project that the contract originates from (ex. Tether)  \n Contract Name : The name of the smart contract as given by the Project (ex. USDT) \n ABI : Unique to each smart contract. Further details can be found  here  (https://docs.soliditylang.org/en/latest/abi-spec.html) . Note that for contracts that are verified by a chain's explorer we will attempt to auto-fetch the ABI. Otherwise the ABI will need to be entered manually.          \n \n In most cases, the contract name will be pulled directly from a blockchain scanner. We recommend using the name provided. If the name is not automatically provided, please follow our naming conventions to assure the contract is properly assimilated into Dune\u2019s database. \n When do you need Advanced Options? \u00b6  (#when-do-you-need-advanced-options) \n Are there several instances of this contract? \n Contract \u201cinstances\u201d are essentially contracts that are on the same chain and have the same bytecode (and therefore the same ABI). If you toggle instances to \u201cYes\u201d, Dune can decode all instances without multiple submissions.  \n Is it created by a factory contract? \n A factory contract is essentially a smart contract that creates other smart contracts. If there are multiple contract instances, there is a chance that it is due to a factory contract. If you toggle this question to \u201cyes\u201d, Dune can decode all contracts created by the same factory that use the same ABI, and store them in the same table (ex., pools from Uniswap V3).  \n Other Special Contracts \u00b6  (#other-special-contracts) \n Other special smart contracts can be decoded as well, following these conventions:  \n Proxy contract: Submit using the proxy address but the ABI of the implementation \n Diamond proxy contracts: Submit all the facets using just the same name for the project and contract and upload all the relevant ABIs. This can be done with one ABI representing all facets or separate ABIs for each facet. \n \n Where can I find this information? \n Contract addresses can usually be found in a project\u2019s docs. Once you have the contract address, you can use a blockchain explorer to get the rest of the information. Most blockchain explorers have everything you need! \n \n \n What to know about Re-submissions \n Given the popularity of some smart contracts, re-submissions happen. If the contract you are trying to submit already exists, an error like the following will pop up.\n \n There are some circumstances under which a contract can be resubmitted, like if the contract needs to be renamed. In that case, you can click  \u201cProceed to Resubmit\u201d  and follow the steps to submit the contract as normal with one caveat: at the end of the submission process, you will be asked to explain why you want to resubmit the contract. Give as much detail as possible to avoid the resubmission being rejected!  \n \n ", "url": "https://dune.com/docs/app/decoding-contracts/#step-1-submission"}
{"content": "Step 2: Decoding \u00b6 \n Once the contract has been approved for decoding, you will receive a notification in your email. While the table itself may be visible after approval, it may be empty. No reason to worry! Note that it takes around 6 hours from the time the contract has been approved to be fully decoded and incorporated into the Dune database.  \n At any point you can check the status of your submitted contract under \"Contracts\" in your settings.  \n ", "url": "https://dune.com/docs/app/decoding-contracts/#step-2-decoding"}
{"content": "Step 3: Finding Your Decoded Contract \u00b6 \n One quick tip to find and begin querying your decoded table is to use Dune's Explorer. When beginning a new query, the Explorer is located to the left side of the Query Editor. From there, follow simple steps: \n \n Drop the contract address of your decoded contract in the search bar \n Pull up the specific function or event you are looking for \n use the  >>  button to immediately populate that table in your Query Editor.  \n \n \n Then it\u2019s all ready for you to query. Let the data flow!  \n ", "url": "https://dune.com/docs/app/decoding-contracts/#step-3-finding-your-decoded-contract"}
{"content": "B. Frequently Asked Questions \u00b6 \n \n On which chains does this work? \n Any contracts created on blockchains that Dune has integrated. To check which blockchains we currently have available, see our section on  Tables and Chains  (../../) . \n \n \n How do I figure out if my contract has been decoded? \n There are two main ways to find out if your contract has been decoded.  \n First: Account Settings \n Information on submitted contracts can be found in your account settings under \u201cContracts\u201d. The status of the contract will reflect one of the following:  \n \n Pending \n Approved/Rejected* \n \n Note that once a contract has been approved, it takes around 6 hours for the data to be fully decoded and populated into our database. \n *If the contract is rejected, hover your mouse over the status to see the reason for the rejection.  \n Second: Our  Contract Decoding Dashboard  (https://dune.com/dune/is-my-contract-decoded-yet-v2) \n \n Built by our decoding team, this dashboard gives you information on the status of any submitted contract. Input the contract address in the box at the top of the dashboard and if the contract has been decoded, the contract information will populate the box along with where it is located in the Dune database.  \n \n \n I see data on Dune but it doesn\u2019t match or is missing what I expected to see. \n Unfortunately, Dune only has access to contract data in circumstances that the contract performed an event that left a trace. Our recommendation is to check out the {blockchain}.traces table to see what information is available for a particular contract. \n Alternatively, some contracts are upgradeable (ie., the smart contract code can be modified). In this case we may not have all of the ABIs. ABIs can be checked in the ABI column of the {blockchain}.contracts tables. A contract can always be resubmitted with missing ABIs so we can update our data.  \n \n \n How do I submit contract information manually? \n \n Note \n If the contract being manually submitted is a Proxy contract, we recommend you to move on to the next section. \n \n Although we try to fetch contract information such as the ABI, sometimes this information might not be available through our sources. \n In those instances, you will need to manually input the contract's name and its ABI. \n If the contract has been verified by the chain's block explorer, you should be able to find this information there. \n \n \n How do I submit a proxy contract? \n In order to properly decode transactions for contracts that fit the  Proxy pattern  (https://blog.openzeppelin.com/proxy-patterns/) , Dune needs to map the Proxy contract's address with the implementation contract's ABI. \n We avoid monitoring the implementation contract's address because its logic is accessed in transactions via the  DelegateCall  function  (https://medium.com/coinmonks/delegatecall-calling-another-contract-function-in-solidity-b579f804178c) . \n If we did monitor the implementation contract's address directly, we would miss out on any event logs in its logic since these are actually fired by the caller (the Proxy in this case) when calling a function through  DelegateCall . \n \n Warning \n \n When submitting Proxy-patterned contracts to Dune, you should input the Proxy contract's address and, if you have it, the Implementation contract's ABI. If the Proxy has a new implementation upgraded that you wish to decode, use the same project name + contract name and select  'NO'  for several instances! \n \n When you submit the Proxy contract's address, we'll attempt to fetch the proxy's contract name and the implementation address it's pointing towards to source the Implementation contract's ABI. \n If we can't find the Implementation contract's ABI, you'll need to find it using the relevant chain's blockchain explorer and input it manually. \n \n \n How do I submit Diamond Proxy contracts? \n Similar to vanilla Proxy contracts,  EIP-2535  (https://eips.ethereum.org/EIPS/eip-2535)  contracts can be supported by passing in the address of the Diamond Proxy as well as  a single ABI representing the totality of all the facets interfaces . \n \n \n My submission got rejected, why? \n The most common reason that your submission got rejected is because it has already been decoded! You can make use of  this dashboard  (https://dune.com/dune/is-my-contract-decoded-yet-v2)  to check whether the contract have been decoded. \n Enter the contract that you wish to decode and hit enter to run: \n \n Viewing results: \n \n If you see results after running the query, that means the contract is already decoded! You'll be able to find the decoded tables under 'Decoded Projects' in the data explorer. \n In the interest of data quality, we reject duplicative, incorrect or low quality submissions. To avoid rejection, be sure to submit accurate contract information! Submissions can be rejected for a number of reasons, including not following the naming conventions, not providing clear data at submission, etc. The particular reason for a contract submission being rejected can be found in account settings under \u201cContracts\u201d by hovering the mouse over the \u201cRejected\u201d status.  \n \n \n Why am I missing historical data for my contract? \n It may take  up to six hours  from the time of contract approval for the contract to be fully decoded along with its historical data. If you still can't see the data after this period, please reach out to us through our  #decoding Discord channel  (https://discord.com/channels/757637422384283659/850326962152538122) . \n \n \n I'm waiting for my data to fully decode. What can I do in the meantime? \n Need some data urgently but the contract have yet to be fully decoded? You can refer to these queries that utilizes the logs table to get the events: \n \n Querying Synthetix's PerpsTracking Event  (https://dune.com/queries/2743182) \n Querying USDT's AddedBlackList Event  (https://dune.com/queries/3250843) \n \n \n ", "url": "https://dune.com/docs/app/decoding-contracts/#b-frequently-asked-questions"}
{"content": "Additional Questions? \u00b6 \n Head over to the  #decoding Discord channel  (https://discord.com/channels/757637422384283659/850326962152538122)  and we'll be happy to help!", "url": "https://dune.com/docs/app/decoding-contracts/#additional-questions"}
{"content": "Creating a Dashboard \u00b6 \n \n To create a dashboard on Dune: \n \n Use the create menu and pick \"New Dashboard\" \n Give your Dashboard a name \n Click on \"Save and Open\" \n You are now inside of your Dashboard \n Enter the edit mode by clicking on the \"Edit\" button in the top right corner \n Add widgets by clicking on the \"Add Widget\" button in the top right corner \n Pick the widget you want to add \n You can now resize the widget by dragging the bottom right corner \n You can also move the widget by dragging it around \n Click on the \"Save\" button in the top right corner to save your changes \n \n The initial name that you give to your Dashboard will also be the URL slug. You can't change the URL slug afterwards, so be mindful of the name you choose. Changing the Dashboard's display name is always possible though. \n ", "url": "https://dune.com/docs/app/dashboards/#creating-a-dashboard"}
{"content": "Add Widgets from the Query Editor \u00b6 \n You can add widgets directly from the Query Editor. \n \n \n Navigate to the query Editor \n Pick the Visualization you want to add to your Dashboard \n Click on the \"Add to Dashboard\" button \n Choose the Dashboard you want to add the Visualization to \n The Visualization is now added to your Dashboard \n \n The widget will be added to the bottom of your Dashboard. You can move it around and resize it as you like. \n ", "url": "https://dune.com/docs/app/dashboards/#add-widgets-from-the-query-editor"}
{"content": "Adding Text Widget \u00b6 \n You can add text widgets to your dashboard. \n Text widgets support a subset of Markdown. You can manipulate text and embed images and GIFs. \n ", "url": "https://dune.com/docs/app/dashboards/#adding-text-widget"}
{"content": "Embedding Images and GIFs \u00b6 \n Text boxes can also be used to embed images or GIFs into your Dashboard. \n The Syntax for embedding images is: \n  (#__codelineno-0-1) ![ alt text ]( image url )\n \n Since you can't store images locally on our servers, you need to upload your images somewhere else or find the raw file somewhere on the internet. \n In practice this might look like this: \n  (#__codelineno-1-1) ![ text ]( https://pbs.twimg.com/media/FEWVLQwWUAQcqLY?format=jpg&name=medium )\n \n You can resize the image by simply resizing the widget it is contained in. \n You can combine images and text in one widget. \n ", "url": "https://dune.com/docs/app/dashboards/#embedding-images-and-gifs"}
{"content": "Keeping your Dashboard up to date \u00b6 \n Dashboards on Dune are not updated automatically. You can refresh your Dashboard by clicking on the \"Run\" button in the top right corner. \n \n Alternatively, you can schedule your Dashboard to be refreshed in regular intervals.  \n \n To schedule a dashboard: \n \n Click on the \"clock\" icon in the top right corner \n Select the frequency you want your Dashboard to be refreshed \n Select the execution tier you want to use \n Click on \"Save\" \n \n You can also schedule individual queries to be refreshed. This is useful if you have a Dashboard with many queries and only want to refresh a few of them. Learn more about scheduling queries  here  (../query-editor/query-scheduler/) . \n ", "url": "https://dune.com/docs/app/dashboards/#keeping-your-dashboard-up-to-date"}
{"content": "Sharing your Dashboard \u00b6 \n You can share your public Dashboard by simply sharing the URL. For private dashboards, viewers need to be part of the same team as the team that owns the Dashboard. Alternatively, you can also share your Dashboard with individual users via the \"Share\" button in the top right corner.", "url": "https://dune.com/docs/app/dashboards/#sharing-your-dashboard"}
{"content": "Configuring your Table \u00b6 \n \n Table options \u00b6  (#table-options) \n Title \n The Title appears at the top of your Table. \n Leaving default value ( Table ) or making this blank makes your Table title the same as your Query's title/name. \n Adding any other value to this field will add that value first, followed by your Query Name: \n \n Note: the default value for \"Query Results\" is treated like an added value. \n \"Column [x]:\" options \u00b6  (#column-x-options) \n You can configure the following options for each column in your Table \n Title  (#__tabbed_1_1) Align  (#__tabbed_1_2) Format  (#__tabbed_1_3) Hide Column  (#__tabbed_1_4) \n \n \n The Title appears at the top of your Table. \n Leaving this blank makes your column title the same as its Dune database name. \n \n \n This changes the text alignment for the column data and title. \n \n \n Allows you to adjust the numerical format of your data following the  X/Y-axis Tick and Label formats here  (../charts-graphs/#xy-axis-tick-and-label-formats) . \n \n \n Hides this column from your table. \n \n \n \n \n Numerical Column options \u00b6  (#numerical-column-options) \n Columns that return numerical data have these additional options: \n Type  (#__tabbed_2_1) Colored Values  (#__tabbed_2_2) \n \n \n \n Normal  simply displays the column's numerical data. \n Progress bar  shows the column's numerical data with a progress bar visual that is \"full\" for the column's highest value and \"nearly empty\" for the column's lowest value, with the rest of the data ranging in between: \n \n \n \n \n Check these boxes to color  Positive Values Green  and  Negative Values Red .", "url": "https://dune.com/docs/app/visualizations/tables/#configuring-your-table"}
{"content": "Browsing data \u00b6 \n Here is a simple example of how to use the Data Explorer to find the data you need: \n \n Click on one of the categories in the left sidebar to see the tables available in that category. \n Filter the tables through the dropdowns in the top right corner. \n Check out the table preview to see what data is available in that table. \n Click on the arrow next to the table name to include it in your query. \n \n \n ", "url": "https://dune.com/docs/app/query-editor/data-explorer/#browsing-data"}
{"content": "Finding specific tables \u00b6 \n You can also search for specific tables in the Data Explorer.    \n \n Choose the \"decoded projects\" category. \n Type the projects name in the search bar. \n Choose the project you want to explore. \n Type the smart contract name in the search bar. \n Choose the smart contract you want to explore. \n \n \n ", "url": "https://dune.com/docs/app/query-editor/data-explorer/#finding-specific-tables"}
{"content": "Finding a smart contract by address \u00b6 \n Unfortunately, the Data Explorer does not allow you to search for a smart contract by address. However, you can use  this dashboard  (https://dune.com/dune/is-my-contract-decoded-yet-v2)  to find the smart contract's name by address. If it doesn't show up, you can submit it for decoding  here  (https://dune.com/decoding) . \n \n ", "url": "https://dune.com/docs/app/query-editor/data-explorer/#finding-a-smart-contract-by-address"}
{"content": "Blockchain Icons \u00b6 \n Some data sets will have multiple blockchain icons - meaning data from each of those blockchains is available within that data set! \n \n \n \n Icon \n Description \n \n \n \n \n \n Ethereum blockchain Raw Data, Decoded Project, or Spell \n \n \n \n Gnosis Chain Raw Data, Decoded Project, or Spell \n \n \n \n Polygon blockchain Raw Data, Decoded Project, or Spell \n \n \n \n Optimism blockchain Raw Data, Decoded Project, or Spell \n \n \n \n Optimism (legacy) blockchain Raw Data, Decoded Project, or Spell \n \n \n \n BNB Chain Raw Data, Decoded Project, or Spell \n \n \n \n Solana blockchain Raw Data, Decoded Project, or Spell \n \n \n \n Arbitrum blockchain Raw Data, Decoded Project, or Spell \n \n \n \n Avalanche C-Chain Raw Data, Decoded Project, or Spell \n \n \n \n Ethereum Goerli Testnet Raw Data, Decoded Project, or Spell \n \n \n \n Fantom Raw Data, Decoded Project, or Spell \n \n \n \n ", "url": "https://dune.com/docs/app/query-editor/data-explorer/#blockchain-icons"}
{"content": "Dataset Icons \u00b6 \n \n \n \n Icon \n Description \n \n \n \n \n \n Data Table (Raw Data, Spell, or smart contract Event or Function) \n \n \n \n Decoded Project (protocol or protocol version eg \"opensea\" or \"aave_v2\") \n \n \n \n Spell set (eg cow_protocol contains \"batches\" and \"solvers\" Spells) \n \n \n \n Community Data Set \n \n \n \n ", "url": "https://dune.com/docs/app/query-editor/data-explorer/#dataset-icons"}
{"content": "Dataset Labels \u00b6 \n \n \n \n Label \n Description \n \n \n \n \n project \n A Spell set for a specific project eg  aave \n \n \n sector \n A Spell set for a sector eg  dex \n \n \n event \n A smart contract event dataset \n \n \n function \n A smart contract function dataset", "url": "https://dune.com/docs/app/query-editor/data-explorer/#dataset-labels"}
{"content": "How to Schedule a Query \u00b6 \n \n \n Start by clicking the scheduler (clock) icon located at the bottom of the query editor, to the left of the \"Run\" button \n A dialog will prompt you to set a refresh schedule and an execution tier. Please note that scheduled queries can only be run on medium and large query engines, which will require credits. \n The dialog will display an estimated monthly credit consumption for this query scheduling, along with a monthly quota. These values will adjust based on the frequency and execution tier you select. \n Save the schedule \n Your query will execute once to start the schedule, and then will execute according to the schedule you set. \n \n \n Warning \n \n Query scheduling is currently not available for queries with parameters. \n The query schedule is removed when the queries are archived or when the ownership changes (e.g., when a query is migrated). \n There are no notifications available for scheduled query failures as of now. Rest assured, these failures do not result in any charges to your account. \n \n \n Adjusting or Cancelling a Query Schedule \u00b6  (#adjusting-or-cancelling-a-query-schedule) \n If you need to modify or cancel a query schedule, click on the scheduler icon to open the scheduling dialog. Make changes as needed or click \"Stop\" to cancel the schedule. \n \n ", "url": "https://dune.com/docs/app/query-editor/query-scheduler/#how-to-schedule-a-query"}
{"content": "Scheduling entire dashboards \u00b6 \n Instead of scheduling individual queries, you can also schedule entire dashboards. Learn more about scheduling dashboards  here  (../../dashboards/#keeping-your-dashboard-up-to-date) .", "url": "https://dune.com/docs/app/query-editor/query-scheduler/#scheduling-entire-dashboards"}
{"content": "Freeform parameters \u00b6 \n Freeform parameters are useful if you want your users to be able to input any text, number or date value. An example of this would be a parameter that allows users to input an address, a token, or a date.  \nThe system will automatically detect the type of the value and insert it into the query as the correct type. You can also manually adjust the type within the query by using the  cast  function. \n \n For example: \n  (#__codelineno-0-1) -- freeform varbinary parameter \n  (#__codelineno-0-2) Select   *   from   ethereum . transactions \n  (#__codelineno-0-3) where   \"from\"   =   {{ address_parameter }} \n \n  (#__codelineno-1-1) -- freeform number parameter \n  (#__codelineno-1-2) Select   *   from   dex . trades \n  (#__codelineno-1-3) where   amount_usd   >   {{ usd_amount_parameter }} \n \n  (#__codelineno-2-1) -- freeform date parameter \n  (#__codelineno-2-2) Select   *   from   dex . trades \n  (#__codelineno-2-3) where   evt_block_time   between   cast ( '{{start_date_parameter}}'   as   timestamp )   and   cast ( '{{end_date_parameter}}'   as   timestamp ) \n \n ", "url": "https://dune.com/docs/app/query-editor/parameters/#freeform-parameters"}
{"content": "List parameters \u00b6 \n List parameters are useful if you want your users to be able to choose  one  or  multiple values  from a pre-defined list of values. This list can be manually defined or populated from a different query.\nExamples of this include parameters that allows users to choose from a list of tokens or a list of token pairs. \n \n  (#__codelineno-3-1) --- list parameter allowing single value \n  (#__codelineno-3-2) Select   *   from   dex . trades \n  (#__codelineno-3-3) where   token_pair   =   ( {{ token_pair_parameter }} ) \n \n or \n  (#__codelineno-4-1) --- list parameter allowing with multiple values \n  (#__codelineno-4-2) Select   *   from   dex . trades \n  (#__codelineno-4-3) where   token   in   ( Select   token   from   unnest ( split ( '{{token_list_parameter}}' , ',' ))   as   c ( token )) \n \n \n multiple values \n If you want to allow multiple values, you need to adjust your query for this. Use the  unnest  and  split  functions to turn the columns into useable values.\nBy default, the values will be inserted into the query as individual columns. \n Example :  \nA list of 3 selected values in a parameter called  example_parameter_name  will be inserted into the query like this:\n  (#__codelineno-5-1) Select   {{ example_parameter_name }}   \n  (#__codelineno-5-2) /* returns  \n  (#__codelineno-5-3) | column1   | column2   | column3   | \n  (#__codelineno-5-4) | --------- | --------- | --------- | \n  (#__codelineno-5-5) | WETH-USDC | WBTC-USDC | DAI-USDC  | \n  (#__codelineno-5-6) */ \n \n Most of the time, you'll want to use the values in a  where in  clause. To do this, you need to use the  unnest  and  split  functions to turn the columns into useable values. \n For example: \n  (#__codelineno-6-1) Select   *   from   dex . trades \n  (#__codelineno-6-2) where   token_pair   in   ( Select   pair   from   unnest ( split ( '{{example_parameter_name}}' , ',' ))   as   c ( pair )) \n \n \n Manual list \u00b6  (#manual-list) \n When you manually define a list of values, the list can be text values, numbers, dates or even varbinary values. The system attemtps to detect the type of the list values, but sometimes you might have to manually adjust the type within the query by using the  cast  function. \n A very common example of using a manual list is setting the \"time granularity\" of a dashboard/query. \n  (#__codelineno-7-1) Select   \n  (#__codelineno-7-2)      date_trunc ( '{{time_granularity_parameter}}' ,   evt_block_time )   as   time ,   \n  (#__codelineno-7-3)      sum ( amount_usd )   as   amount_usd \n  (#__codelineno-7-4) from   dex . trades \n  (#__codelineno-7-5) group   by   1 \n  (#__codelineno-7-6) /* parameter options: \n  (#__codelineno-7-7)     - default value: day \n  (#__codelineno-7-8)     - list values: day, week, month \n  (#__codelineno-7-9) */ \n \n List from query results \u00b6  (#list-from-query-results) \n You can use the results of a query as the list of values for a parameter. Doing this allows you to build dynamic dashboards that allow users to choose from a list of values that is populated by a different query. You can choose any query by its query_id and any column by its name. The column data type will be transferred to the parameter. \n \n \n Query results \n The query that you use to populate the list of values does not update automatically. You need to trigger a refresh of the query results to update the list of values. This can happen by either manually refreshing the query results or by setting up a  query schedule  (../query-scheduler/) . \n \n This feature can be used in all kinds of ways, but here are a few examples: \n \n to choose from a list of tokens \n to choose from a list of token pairs \n to choose from a list of addresses or labels \n to single out specific products or categories \n \n All of these examples could be solved with a manual list, but using a query to populate the list of values allows you to build dynamic dashboards that update automatically. It also can simply make it easier to manage a list of values that is shared between multiple queries. \n Example 1:   \n You can use a distinct query on dex.trades to populate a list of all projects currently in dex.trades. This list can then be used in multiple queries. \n  (#__codelineno-8-1) Select   distinct   project   from   dex . trades \n \n link to dashboard  (https://dune.com/dune/query-result-parameter-showcase) \n Example 2: \n Filter on all available perpeptual futures available on synthetix. The master query for this is query_3256054. We can use this query to populate a list of all available perps: \n  (#__codelineno-9-1) --query 3256054 constructs the daily open interest for all synthetix perps \n  (#__codelineno-9-2) Select   \n  (#__codelineno-9-3)      distinct   perp_name   \n  (#__codelineno-9-4) from   query_3256054   \n  (#__codelineno-9-5) order   by   perp_name \n \n We can then use this list of perps in query_3256054 to make filtering on a specific perp possible:\n  (#__codelineno-10-1) ... \n  (#__codelineno-10-2) and   perp_name   in   ( Select   perp_name   from   unnest ( split ( '{{perp_name}}' , ',' ))   as   b ( perp_name )) \n \n link to query  (https://dune.com/queries/3256054/) \n ", "url": "https://dune.com/docs/app/query-editor/parameters/#list-parameters"}
{"content": "Parameters in query descriptions \u00b6 \n You can use parameters in the description of a query. This feature is useful to effortlessly report on the current value of a parameter. For example, you can use this to report on the current value of a parameter that is used in a dashboard. \n \n To use a parameter in a query description: \n \n open your query settings \n add the parameter to the query description by using the  {{example_parameter_name}}  syntax \n save your query settings \n your query description will now show the current value of the parameter \n \n ", "url": "https://dune.com/docs/app/query-editor/parameters/#parameters-in-query-descriptions"}
{"content": "Parameters in dashboards \u00b6 \n If you want to use the same parameter between different queries on a dashboard, make sure to use exactly the same settings for the parameter in each query. The parameter will then be shared between the queries and only turn up once in the dashboard's parameter menu. Exactly the same settings means: \n \n the parameter name is the same \n the parameter type is the same \n the parameter default value is the same \n the parameter list of values is the same \n the query id and column name for a list of values from a query is the same", "url": "https://dune.com/docs/app/query-editor/parameters/#parameters-in-dashboards"}
{"content": "Query editor \u00b6 \n The Query editor is pretty straightforward. It's a text editor where you can write SQL code. \n The editor has a few features that make your life easier: \n \n Autocomplete  (#autocomplete) \n Run selection  (#run-selection) \n Explain Query  (#explain-query) \n \n ", "url": "https://dune.com/docs/app/query-editor/query-window/#query-editor"}
{"content": "Autocomplete \u00b6 \n The autocomplete feature will bring up DuneSQL keywords, as well as tables and aliases you've already included in your Query.\nYou can always bring up the autocomplete menu by pressing  ctrl/cmd + space . \n Turn it on/off in the settings. \n ", "url": "https://dune.com/docs/app/query-editor/query-window/#autocomplete"}
{"content": "Run selection \u00b6 \n To save yourself time while testing and debugging your Queries, you can run just a part of your Query. \n To do this, highlight a part of your Query. You'll then see the  Run  button turn into a  Run selection  button. \n \n ", "url": "https://dune.com/docs/app/query-editor/query-window/#run-selection"}
{"content": "Explain Query \u00b6 \n The explain query feature utilizes ChatGPT4 to explain your query in plain English. It's a great way to get a quick overview of what your query does. \n Simply click the explain query button to see a GPT4 generated explanation of the query. \n \n ", "url": "https://dune.com/docs/app/query-editor/query-window/#explain-query"}
{"content": "Shortcuts \u00b6 \n Here are a handful of shortcuts to make crafting Queries easier: \n \n \n \n Shortcut \n Action \n \n \n \n \n ctrl + enter \n execute the Query \n \n \n ctrl + # or / \n comments out the selected code \n \n \n ctrl + space \n brings up a list of keywords \n \n \n crtl + z \n undoes your last changes \n \n \n ctrl + y \n redoes your last changes \n \n \n ctrl + f \n search for keywords \n \n \n ctrl + h \n search and replace keywords \n \n \n \n These shortcuts work on US/UK Keyboards and might vary based on the language setting on your device. \n ", "url": "https://dune.com/docs/app/query-editor/query-window/#shortcuts"}
{"content": "Query results \u00b6 \n The Query results are displayed in a table below the Query editor. \n You can sort the results by clicking on the column headers. Click once to sort ascending, click again to sort descending.\nResults are paginated, so you can click through the pages to see more results. Each page shows 25 results. \n You can full text search the results by using the search bar below the results table. \n You can format the results according to the rules laid out in the  tables section  (../../visualizations/tables/)  of the documentation.", "url": "https://dune.com/docs/app/query-editor/query-window/#query-results"}
{"content": "Welcome to Dune \u00b6 \n This guide will help you get started on Dune in five minutes. We'll walk you through how to: \n \n Query blockchain data \n Create a visualization \n Present your data \n \n Dune has many more features, but these are the basics you'll need to get started. If you're looking for more advanced guides, check out the  Analytics Guidelines  (../learning/)  and  Data Tables  (../data-tables/)  sections. \n Prerequisites:   \n- You'll need to have a Dune account to follow along. If you don't have one, you can  sign up here  (https://dune.com/auth/register) . \n- We also recommend you have a basic understanding of SQL and Blockchain concepts. \n ", "url": "https://dune.com/docs/quickstart/#welcome-to-dune"}
{"content": "1. Query blockchain data \u00b6 \n To query for blockchain data on Dune you'll need to: \n \n Create a new query \n Write some SQL \n Run the query \n Name and save the query \n \n  (#__codelineno-0-1) --Query to get Ethereum's unique daily active users and passive users  in 2023 \n  (#__codelineno-0-2) \n  (#__codelineno-0-3) SELECT    \n  (#__codelineno-0-4) --truncate time to day \n  (#__codelineno-0-5) date_trunc ( 'day' ,   block_time )   AS   time , \n  (#__codelineno-0-6) -- count distinct addresses that sent a transactions \n  (#__codelineno-0-7) COUNT ( distinct   \"from\" )   AS   users , \n  (#__codelineno-0-8) -- count distinct addresses that received a transaction \n  (#__codelineno-0-9) COUNT ( distinct   \"to\" )   AS   receiving_addresses \n  (#__codelineno-0-10) FROM   ethereum . transactions \n  (#__codelineno-0-11) WHERE   block_time   >   DATE   '2023-01-01' \n  (#__codelineno-0-12) GROUP   BY   1 \n \n Direct link to query here.  (https://dune.com/queries/2335378)   \n \n ", "url": "https://dune.com/docs/quickstart/#1-query-blockchain-data"}
{"content": "2. Create a visualization \u00b6 \n To create a visualization you'll need to: \n \n Create a new visualization \n Select the type of visualization you want to create \n Choose the data source for the x and y axis \n adjust the visualization settings \n \n In our example below, we'll create a line chart to visualize the number of unique daily active users and passive users on Ethereum in 2023. Additionally, we format the axis label and tick label to  0a to make the numbers more readable. \n \n ", "url": "https://dune.com/docs/quickstart/#2-create-a-visualization"}
{"content": "3. Present your data \u00b6 \n To present your data you'll need to: \n \n Create a new dashboard \n Add a visualization to the dashboard \n Adjust the layout of the dashboard \n Name and save the dashboard \n \n \n ", "url": "https://dune.com/docs/quickstart/#3-present-your-data"}
{"content": "Recap \u00b6 \n Congratulations, you've just queried blockchain data, created a visualization, and presented your data on Dune! \n You can now share your dashboard with the world. \n We'll take care of updating this dashboard whenever somebody looks at it, so you don't have to worry about keeping it up to date. \n ", "url": "https://dune.com/docs/quickstart/#recap"}
{"content": "Next steps \u00b6 \n Check out these resources to learn more about Dune: \n \n \n Dune Official Getting Started Video Series  (https://www.youtube.com/watch?v=S-cctFmR828&list=PLK3b5d4iK10ext4v-GBySekaA8-GP8quD&index=1)  to learn how the data flows and how to navigate the Dune app to create queries, visualizations, and dashboards.  \n \n \n Weekly Web3 SQL problems  (https://daodatadesign.notion.site/Web3-SQL-Weekly-0bababb5e59a412bb73594c512db8cc1)  to learn wizard tips and tricks in byte-sized bits. Covers things like token balances, protocol integrations, product metrics, and much more. \n \n \n All Ethereum and SQL Basics  (https://web3datadegens.substack.com/p/a-basic-wizard-guide-to-dune-sql)  to learn all the basic SQL concepts and Ethereum tables you'll need in your analysis. \n \n \n For pure SQL practice, try going through the \"easy\" problems  on hackerrank  (https://www.hackerrank.com/domains/sql) . \n \n \n Join the community and learn together  in Discord  (https://discord.com/invite/ErrzwBz)  by participating in the  #\ud83d\udc25\ufe31beginners  and  #\ud83d\ude4b\ufe31query-questions  channels \n And when you feel ready to do advanced analysis, check out the  next guide  (../learning/)", "url": "https://dune.com/docs/quickstart/#next-steps"}
{"content": "5 \u5206\u949f Dune \u7b80\u4ecb \u26a1 \u00b6 \n \n ", "url": "https://dune.com/docs/zh/#5-dune"}
{"content": "\u6570\u636e\u662f\u5982\u4f55\u6d41\u901a\u7684 \u00b6 \n \n \u516c\u5171\u533a\u5757\u94fe\u662f \u516c\u5f00\u4e14\u514d\u8d39  (https://dune.com/blog/revolution-not-quarterly) \u7684\uff0c\u6240\u4ee5\u4ece\u4e2d\u83b7\u53d6\u6570\u636e\u5e94\u8be5\u4e0d\u96be\u5bf9\u5427\uff1f \n \u662f\u4e5f\u4e0d\u662f\u3002 \n \u4e0e\u4ece\u4f20\u7edf\u4f01\u4e1a\u83b7\u5f97\u5b64\u7acb\u7684\u6570\u636e\u76f8\u6bd4\uff0c\u6bd4\u5982\uff0c\u5206\u6790\u56fd\u9645\u8fd0\u8f93\u901f\u5ea6\u5982\u4f55\u5f71\u54cd\u6d88\u8d39\u8005\u5bf9\u6700\u65b0\u5df4\u9ece\u65f6\u88c5\u7684\u9700\u6c42\u2026\u2026 \n \u662f\u7684\uff0c\u67e5\u770b\u548c\u5206\u6790\u533a\u5757\u94fe\u6570\u636e\u662f \"\u66f4\u5bb9\u6613\"\u3002 \n \u4f46\u662f\uff0c\u5728 Dune \u7684\u7528\u8bed\u91cc\u6301\u7eed\u5730\u6709\u65b0\u4e1c\u897f\u3002\u8ba9\u6211\u4eec\u6253\u5f00\u5b83\u770b\u4e00\u770b\uff0c\u4ee5\u66f4\u597d\u5730\u4e86\u89e3\u50cf\u4ee5\u592a\u574a\u8fd9\u6837\u7684\u516c\u5171\u533a\u5757\u94fe\u4e0a\u7684\u72b6\u6001\u53d8\u5316\u5982\u4f55\u8f6c\u5316\u4e3a\u60a8\u67e5\u8be2\u7684\u6570\u636e\uff0c\u4ee5\u5efa\u7acb\u56fe\u8868\u548c\u56fe\u5f62\u3002 \n ", "url": "https://dune.com/docs/zh/#_1"}
{"content": "   1. \u5728\u4e00\u6761\u94fe\u4e0a\u6dfb\u52a0\u4e00\u4e2a\u533a\u5757 \u00b6 \n \u867d\u7136\u6280\u672f\u7ec6\u8282\u5404\u4e0d\u76f8\u540c\uff0c\u4f46\u6bcf\u4e2a\u533a\u5757\u94fe\u7684\u6838\u5fc3\uff0c\u90fd\u4f1a\u63d0\u51fa\u4e00\u7ec4\u4ea4\u6613\uff0c\u8fbe\u6210\u4e00\u81f4\uff0c\u7136\u540e\u9644\u52a0\u5230\u5305\u542b\u5148\u524d\u786e\u5b9a\u7684\u4ea4\u6613\u7684\u533a\u5757\u94fe\u7684\u672b\u7aef\u3002 \n \u6709\u5404\u79cd \u5171\u8bc6\u673a\u5236  (https://crypto.com/university/consensus-mechanisms-in-blockchain) \uff0c\u786e\u5b9a\u54ea\u4e2a\u533a\u5757\u662f\u4e0b\u4e00\u4e2a\u533a\u5757\u7684\u65b9\u6cd5\uff0c\u4f46\u4e00\u65e6\u8fbe\u6210\u5171\u8bc6\uff0c\u5173\u4e8e\u6700\u65b0\u533a\u5757\u7684\u4fe1\u606f\u5c31\u4f1a\u5728\u533a\u5757\u94fe\u7684\u7f51\u7edc\u4e2d\u5e7f\u64ad\uff0c\u8ba9\u5176\u53c2\u4e0e\u8005\uff08\u201c\u8282\u70b9\u201d\uff09\u77e5\u9053\u8fd9\u4e2a\u65b0\u533a\u5757\u5e76\u5c06\u5176\u52a0\u5165\u4ed6\u4eec\u7684\u8bb0\u5f55\u3002 \n \u8bf7\u770b\u8fd9\u4e2a\u8d85\u68d2\u7684\u533a\u5757\u94fe 101 \u6f14\u793a  (https://andersbrownworth.com/blockchain/) \uff0c\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u533a\u5757\u94fe\u673a\u5236\u7684\u7ec6\u8282\uff01 \n ", "url": "https://dune.com/docs/zh/#1"}
{"content": " 2. \u8282\u70b9\u63d0\u4f9b\u8005\u5c06\u6570\u636e\u4f20\u8f93\u7ed9 Dune \u00b6 \n \u4e3a\u4e86\u63a5\u6536\u8fd9\u4e2a\u201c\u65b0\u533a\u5757\u521b\u5efa\u201d\u7684\u4fe1\u606f\uff0c\u6709\u4eba\u5fc5\u987b\u8fd0\u884c\u4e00\u4e2a \u533a\u5757\u94fe\u8282\u70b9  (https://www.alchemy.com/overviews/what-is-an-ethereum-node)  \u2014\u2014 \u4e00\u4e2a\u8fd0\u884c\u201c\u5ba2\u6237\u7aef\u201d\u8f6f\u4ef6\u7684\u8ba1\u7b97\u673a\uff0c\u5c06\u4ed6\u4eec\u8fde\u63a5\u5230\u533a\u5757\u94fe\u7684\u7f51\u7edc\uff0c\u5141\u8bb8\u4ed6\u4eec\u5728\u5176\u4ed6\u8282\u70b9\u4e4b\u95f4\u6765\u56de\u53d1\u9001\u4fe1\u606f\uff0c\u5e76\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u9a8c\u8bc1\u4ea4\u6613\u548c\u5b58\u50a8\u6570\u636e\u3002 \n \u53ea\u8981\u6709\u4e00\u70b9\u6280\u672f\u8bc0\u7a8d\uff0c\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u8fd0\u884c\u4e00\u4e2a\u8282\u70b9\u2014\u2014\u8fd9\u662f\u4f7f\u533a\u5757\u94fe  \u516c\u5171  \u7684\u4e00\u4e2a\u91cd\u8981\u90e8\u5206\uff01 \n \u56e0\u4e3a\u51e0\u4e4e\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u8fd0\u884c\u4e00\u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u7cfb\u7edf\u4e2d\u6709\u5f88\u591a\u7684\u900f\u660e\u5ea6\uff0c\u4ee5\u4fdd\u6301\u53c2\u4e0e\u8005\u7684\u8bda\u5b9e\u3002 \n \u8fd9\u79cd\u900f\u660e\u5ea6\u4e5f\u4f7f\u5176\u6709\u53ef\u80fd\u901a\u8fc7\u5141\u8bb8\u6570\u636e\u5206\u6790\u5e08\u8bbf\u95ee\u201c\u6b63\u5728\u53d1\u751f\u7684\u4e8b\u60c5\u201d\u7684\u5b8c\u6574\u753b\u9762\u6765\u5229\u7528\u8702\u5de2\u5f0f\u601d\u7ef4\uff0c\u5e76\u505a\u4ed6\u4eec\u60f3\u8981\u7684\u4efb\u4f55\u7c7b\u578b\u7684\u5206\u6790\u3002 \n \u4e0d\u9700\u8981\u4e3a\u8bbf\u95ee\u539f\u59cb\u6570\u636e\u800c\u6323\u624e\u3002 \n \u4e3a\u4e86\u5e2e\u52a9\u50cf Dune \u8fd9\u6837\u7684\u9879\u76ee\u89c4\u6a21\u5316\u8fd0\u4f5c\uff0c \u8282\u70b9\u63d0\u4f9b\u8005  (https://www.alchemy.com/overviews/blockchain-node-providers) \u5efa\u7acb\u548c\u8fd0\u8425\u8282\u70b9\u57fa\u7840\u8bbe\u65bd\uff0c\u6355\u83b7\u533a\u5757\u94fe\u6570\u636e\uff0c\u5e76\u901a\u8fc7\u5e94\u7528\u7f16\u7a0b\u63a5\u53e3\uff08API\uff09\u4f7f\u5176\u80fd\u591f\u88ab\u6211\u4eec\u8bbf\u95ee\u3002 \n \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u4e13\u6ce8\u4e8e\u521b\u9020\u6700\u4f73\u7684\u6570\u636e\u8bbf\u95ee\u4f53\u9a8c\uff0c\u800c\u8282\u70b9\u4f9b\u5e94\u5546\u53ef\u4ee5\u4e13\u6ce8\u4e8e\u5c3d\u53ef\u80fd\u6709\u6548\u5730\u8fd0\u884c\u8282\u70b9\u3002 \n ", "url": "https://dune.com/docs/zh/#2-dune"}
{"content": " 3. Dune \u5c06\u539f\u59cb\u6570\u636e\u6dfb\u52a0\u5230 SQL \u6570\u636e\u8868 \u00b6 \n \u6211\u4eec\u7684\u8282\u70b9\u4f9b\u5e94\u5546\u5c06\u533a\u5757\u94fe\u4ea4\u6613\u6570\u636e\u4f5c\u4e3a\u54c8\u5e0c\u5b57\u8282\u7801\u53d1\u9001\u7ed9\u6211\u4eec\uff08\u4f8b\u5982\uff0c\u4ee5\u592a\u574a\u6570\u636e\u662f\u4f7f\u7528  keccak256 \u7b97\u6cd5  (https://medium.com/0xcode/hashing-functions-in-solidity-using-keccak256-70779ea55bb0) \u8fdb\u884c\u54c8\u5e0c\u7684\u3002\uff09 \n Dune \u6570\u636e\u5f15\u64ce\u63a5\u6536\u8fd9\u4e2a\u5b57\u8282\u7801\u5e76\u5c06\u5176\u63d0\u53d6\u4e3a\u4e00\u7ec4\u6211\u4eec\u79f0\u4e4b\u4e3a\u201c \u539f\u59cb\u6570\u636e  (https://dune.com/docs/tables/v2/raw/) \u201d\u7684\u8868\u3002 \n \u8fd9\u4e9b\u53ef\u80fd\u56e0\u94fe\u800c\u5f02\uff0c\u4f46\u4f5c\u4e3a\u4f8b\u5b50\uff0c\u5927\u591a\u6570\u57fa\u4e8e \u4ee5\u592a\u574a\u865a\u62df\u673a\uff08EVM\uff09  (https://dune.com/docs/tables/v2/raw/ethereum-mainnet/creation-traces/) \u7684\u94fe\u5305\u62ec\uff1a \n \n [chain].blocks  (https://dune.com/docs/tables/v2/raw/ethereum-mainnet/blocks/)  - \u9644\u52a0\u5230\u94fe\u4e0a\u7684\u4ea4\u6613\u7ec4 \n [chain].creation_traces  (https://dune.com/docs/tables/v2/raw/ethereum-mainnet/creation-traces/)  - \u5305\u542b create  traces  (https://medium.com/coinmonks/ethereum-data-evm-traces-simplified-5e297e4f40a4)  \u7684\u4ea4\u6613 \uff08\u6709\u65f6\u5b83\u4eec\u4f1a\u5728\u5185\u90e8\u4ea4\u6613\u91cc\uff09 \n [chain].logs  (https://dune.com/docs/tables/v2/raw/ethereum-mainnet/event-logs/)  - \u667a\u80fd\u5408\u7ea6\u521b\u5efa\u7684 \u4e8b\u4ef6\u65e5\u5fd7  (https://medium.com/mycrypto/understanding-event-logs-on-the-ethereum-blockchain-f4ae7ba50378) \n [chain].traces  (https://dune.com/docs/tables/v2/raw/ethereum-mainnet/traces/)  - \u4e00\u4e2a\u533a\u5757\u4e2d\u7684\u4ea4\u6613\u4ea7\u751f\u7684 \u8ffd\u8e2a\u6570\u636e  (https://medium.com/coinmonks/ethereum-data-evm-traces-simplified-5e297e4f40a4) \n [chain].transactions  (https://dune.com/docs/tables/v2/raw/ethereum-mainnet/transactions/)  - \u4ece\u4e00\u4e2a\u5730\u5740\u53d1\u9001\u5230\u53e6\u4e00\u4e2a\u5730\u5740\u7684\u7ecf\u8fc7\u52a0\u5bc6\u7b7e\u540d\u7684\u6307\u4ee4 \n \n \u8fd9\u4e9b\u8868\u4e2d\u7684\u6570\u636e\u662f\u4eba\u7c7b\u53ef\u8bfb\u7684\uff08\u800c\u5b57\u8282\u7801\u4e0d\u662f\uff09\uff0c\u4f46\u5b83\u4eec\u9700\u8981\u5e7f\u6cdb\u7684\u533a\u5757\u94fe\u77e5\u8bc6\u6765\u7406\u89e3\u3002 \n \u8fd9\u79cd\u539f\u59cb\u6570\u636e\u4e5f\u53ef\u80fd\u9700\u8981\u66f4\u591a\u7684\u5de5\u4f5c\u6765\u5904\u7406\u6210\u6709\u8da3\u7684\u89c1\u89e3\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 Dune  \u89e3\u6790  (https://dune.com/docs/tables/decoded/) \u8fd9\u79cd\u6570\u636e\u3002 \n ", "url": "https://dune.com/docs/zh/#3-dune-sql"}
{"content": " 4. Dune \u89e3\u6790\u539f\u59cb\u6570\u636e \u00b6 \n \u539f\u59cb  .log  \u6570\u636e\u8868\u8fd4\u56de\u7684\u6570\u636e\u50cf\u8fd9\u6837\uff1a \n \n \n \n Field \n Data \n \n \n \n \n tx_hash \n 0x2bb7c8283b782355875fa37d05e4bd962519ea294678a3dcf2fdffbbd0761bc5 \n \n \n topic1 \n 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef \n \n \n topic2 \n 0x00000000000000000000000075e89d5979e4f6fba9f97c104c2f0afb3f1dcb88 \n \n \n topic3 \n 0x00000000000000000000000087d9da48db6e1f925cb67d3b7d2a292846c24cf7 \n \n \n data \n 0x00000000000000000000000000000000000000000000001a894d51f85cb08000 \n \n \n \n \u8fd9\u79cd\u5f62\u5f0f\u7684\u6570\u636e\u7684\u5206\u6790\u76f8\u5f53\u6709\u9650\u3002 \n \u4e3a\u4e86\u5c06\u8fd9\u4e9b\u6570\u636e\u8f6c\u5316\u4e3a\u66f4\u53ef\u7528\u7684\u5f62\u5f0f\uff0c \u5deb\u5e08\u5728\u6b64\u63d0\u4ea4\u667a\u80fd\u5408\u7ea6\u8fdb\u884c\u89e3\u6790  (https://dune.com/contracts/new) \u3002 \n \u5f53\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u65f6\uff0c\u6211\u4eec\u4f7f\u7528\u667a\u80fd\u5408\u7ea6\u7684 \u5e94\u7528\u4e8c\u8fdb\u5236\u63a5\u53e3\uff08ABI\uff09  (https://www.alchemy.com/overviews/what-is-an-abi-of-a-smart-contract-examples-and-usage) \uff0c\u8fd9\u7c7b\u4f3c\u4e8e Web 2.0 \u7684 API\uff0c\u4ee5\u4e86\u89e3\u4e0e\u5408\u7ea6\u4e92\u52a8\u7684\u4ea4\u6613\u5185\u90e8\u53d1\u751f\u4e86\u4ec0\u4e48\u3002 \n \u7136\u540e\u6211\u4eec\u521b\u5efa \u5df2\u89e3\u6790\u8868  (https://dune.com/docs/tables/decoded/) \uff0c\u8fd9\u6837\u505a\u5206\u6790\u8d77\u6765\u5c31\u5bb9\u6613\u591a\u4e86\u3002 \n \u4f8b\u5982\uff0c\u4e0a\u8ff0\u4ea4\u6613\uff0c\u4e00\u65e6\u88ab\u89e3\u6790\uff0c\u770b\u8d77\u6765\u662f\u8fd9\u6837\u7684\uff1a \n \n \n \n Field \n Data \n \n \n \n \n evt_tx_hash \n 0x2bb7c8283b782355875fa37d05e4bd962519ea294678a3dcf2fdffbbd0761bc5 \n \n \n \"from\" \n 0x75e89d5979e4f6fba9f97c104c2f0afb3f1dcb88 \n \n \n \"to\" \n 0x87d9da48db6e1f925cb67d3b7d2a292846c24cf7 \n \n \n value \n 489509000000000000000 \n \n \n \n ", "url": "https://dune.com/docs/zh/#4-dune"}
{"content": " 5. Dune \u793e\u533a\u5728\u65bd\u6cd5 \u00b6 \n \u5728\u6211\u4eec\u5f88\u68d2\u7684\u793e\u533a\u5deb\u5e08\u7684\u5e2e\u52a9\u4e0b\uff0cDune \u4e0d\u4ec5\u4ec5\u662f\u7528 \u9b54\u6cd5  (https://dune.com/docs/tables/spells/) \u5bf9\u6570\u636e\u8fdb\u884c\u89e3\u7801\u3002 \n \u9b54\u6cd5\u662f\u7531 Dune \u548c\u6211\u4eec\u7684\u793e\u533a\u5efa\u7acb\u548c\u7ef4\u62a4\u7684\u81ea\u5b9a\u4e49\u8868\u683c\uff0c\u5b83\u4f7f\u6211\u4eec\u80fd\u591f\u4ee5\u5c3d\u53ef\u80fd\u5c11\u7684\u6469\u64e6\u8f7b\u677e\u5730\u6c47\u603b\u5927\u91cf\u7684\u6570\u636e\u3002 \n \u4f8b\u5982\uff0c\u6700\u53d7\u6b22\u8fce\u7684\u9b54\u6cd5\u4e4b\u4e00\uff0c nft.trades  (https://dune.com/spellbook#!/model/model.spellbook.nft_trades) \uff0c\u4f7f\u63a2\u7d22\u548c\u8f6c\u6362\u8de8\u534f\u8bae\u548c\u8de8\u533a\u5757\u94fe\u7684 NFT \u4ea4\u6613\u6570\u636e\u53d8\u5f97\u5f88\u5bb9\u6613\uff0c\u800c\u4e0d\u5fc5\u81ea\u5df1\u4ece Solana \u7684 Magic Eden\uff0c\u4ee5\u592a\u574a\u7684 LooksRare \u7b49\u7f16\u8bd1\u4ea4\u6613\u3002 \n ", "url": "https://dune.com/docs/zh/#5-dune_1"}
{"content": " 6. Dune \u5deb\u5e08\u521b\u5efa\u9b54\u6cd5 \u00b6 \n \u4ece\u8fd9\u4e9b\u6570\u636e\u4e2d\uff0c\u5deb\u5e08\u4f7f\u7528 SQL\uff08\u4e00\u79cd\u5e7f\u6cdb\u4f7f\u7528\u7684\u8bed\u8a00\uff0c\u7528\u4e8e\u5b58\u50a8\u3001\u64cd\u4f5c\u548c\u68c0\u7d22\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\uff09\u521b\u5efa \u67e5\u8be2  (getting-started/queries/) \u3002  \n \u4ece\u8fd9\u4e9b\u67e5\u8be2\u4e2d\uff0c\u4ed6\u4eec\u521b\u5efa\u6211\u4eec\u90fd\u77e5\u9053\u5e76\u559c\u7231\u7684 \u53ef\u89c6\u5316\u5185\u5bb9  (getting-started/visualizations/) \u548c \u6570\u636e\u770b\u677f  (getting-started/dashboards/) \uff01 \n \u4f8b\u5982  @rchen8  (https://dune.com/rchen8)  \u7684 OpenSea \u65e5\u4ea4\u6613\u91cf\uff1a \n \n ", "url": "https://dune.com/docs/zh/#6-dune"}
{"content": "\u548c dune.com \u4e00\u8d77\u5236\u4f5c \ud83e\ude84 \u00b6 \n Dune.com \u662f\u5efa\u7acb\u5728 Dune \u6570\u636e\u5e73\u53f0\u4e4b\u4e0a\u7684\u7b2c\u4e00\u4e2a\u6740\u624b\u7ea7\u5e94\u7528\uff0c\u65e8\u5728\u8ba9\u4efb\u4f55\u81f3\u5c11\u6709\u4e00\u70b9 SQL\u3001\u4ee5\u592a\u574a\u865a\u62df\u673a\u548c\u5546\u4e1a\u77e5\u8bc6\u7684\u4eba\u5c3d\u53ef\u80fd\u5bb9\u6613\u5730\u4ee5\u6709\u8da3\u7684\u65b9\u5f0f\u5206\u6790\u533a\u5757\u94fe\u6570\u636e\u3002 \n Dune.com \u5e94\u7528\u7a0b\u5e8f\u7684\u57fa\u672c\u6784\u6210\u90e8\u5206\u662f\uff1a \n \n \u6570\u636e\u770b\u677f\uff1a \u4e00\u7ec4\u5305\u542b\u53ef\u89c6\u5316\u548c\u6587\u672c\u7684\u5c0f\u90e8\u4ef6\uff0c\u8bb2\u8ff0\u4e86\u4e00\u4e2a\u5173\u4e8e\u7279\u5b9a\u533a\u5757\u94fe\u6570\u636e\u7ec4\u7684\u6545\u4e8b\u3002 \n \u53ef\u89c6\u5316\uff1a \u56fe\u8868\u548c\u56fe\u5f62\uff0c\u5c06\u96be\u4ee5\u7406\u89e3\u7684\u6570\u636e\u8868\u5f62\u5f0f\u7684\u6570\u636e\u53d8\u6210\u66f4\u5bb9\u6613\u7406\u89e3\u7684\u89c6\u89c9\u5f62\u5f0f\u3002 \n \u67e5\u8be2\uff1a \u4eceDune\u7684\u6570\u636e\u5e93\u4e2d\u63d0\u53d6\u6570\u636e\u7684\u547d\u4ee4\uff0c\u4ee5\u4fbf\u901a\u8fc7\u6570\u636e\u8868\u548c\u53ef\u89c6\u5316\u663e\u793a\u5728 Dune \u770b\u677f\u4e2d\u3002 \n \n \u4f5c\u4e3a\u4e00\u540d Dune.com \u7684\u8bbf\u95ee\u8005\uff0c\u60a8\u4f1a\u770b\u5230\u5305\u542b\u6587\u672c\u3001\u6570\u636e\u8868\u548c\u53ef\u89c6\u5316\u90e8\u4ef6\u7684\u770b\u677f\uff0c\u8fd9\u4e9b\u90e8\u4ef6\u662f\u7531\u67e5\u8be2\u7ec4\u5efa\u7684\u3002 \n \u4f5c\u4e3a\u4e00\u540d Dune \u5deb\u5e08\uff08\u5373\u6bd4\u201c\u533a\u5757\u94fe\u5206\u6790\u5e08\u201d\u66f4\u9177\u7684\u79f0\u547c\uff09\uff0c\u60a8\u5c06\u521b\u5efa\u81ea\u5b9a\u4e49\u67e5\u8be2\u6765\u83b7\u53d6\u6570\u636e\uff0c\u5c06\u8fd9\u4e9b\u67e5\u8be2\u7684\u7ed3\u679c\u53ef\u89c6\u5316\uff0c\u7136\u540e\u7528\u60a8\u7684\u6570\u636e\u901a\u8fc7\u770b\u677f\u8bb2\u8ff0\u6545\u4e8b\u3002 \n ", "url": "https://dune.com/docs/zh/#dunecom"}
{"content": "\u67e5\u8be2 \u00b6 \n Dune \u5c06\u533a\u5757\u94fe\u6570\u636e\u6c47\u603b\u5230\u4e00\u4e2a\u53ef\u4ee5\u8f7b\u677e\u67e5\u8be2\u7684 SQL \u6570\u636e\u5e93\u4e2d\u3002 \n \u67e5\u8be2  (getting-started/queries/) \u662f\u7528\u6765\u6307\u5b9a\u5728\u6211\u4eec\u7684\u6570\u636e\u5e93\u4e2d\u627e\u5230\u533a\u5757\u94fe\u7684\u54ea\u4e9b\u6570\u636e\u5e76\u8fd4\u56de\u3002 \n \u4e5f\u8bb8\u60a8\u60f3\u77e5\u9053  \u4eca\u5929\u53d1\u751f\u7684\u6240\u6709 Dex \u4ea4\u6613 \uff0c\u6216\u8005  \u4eca\u5e74\u94f8\u9020\u7684\u7a33\u5b9a\u5e01\u7684\u603b\u4ef7\u503c \u3002\u4e0d\u7ba1\u662f\u4ec0\u4e48\u95ee\u9898\uff0c\u63a2\u7d22\u7b54\u6848\u90fd\u8981\u4ece Dune \u67e5\u8be2\u5f00\u59cb\uff01 \n \u67e5\u8be2\u8fd4\u56de\u6570\u636e\u7684\u884c\u548c\u5217\uff08\u5c31\u50cf\u4f20\u7edf\u7684 SQL \u67e5\u8be2\uff09\uff0c\u7136\u540e\u53ef\u4ee5\u7528\u6765\u521b\u5efa\u53ef\u89c6\u5316\u5f62\u5f0f\uff0c\u5e76\u5728\u770b\u677f\u4e0a\u5c55\u793a\u3002 \n \n \u533a\u5757\u94fe\u5206\u6790\u5e08\uff08\u5373 \u5deb\u5e08 \u5373\u60a8\uff01\uff09\u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5f00\u59cb\u8fd0\u884c\u67e5\u8be2\uff1a \n \n \u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 Dune  \u9b54\u6cd5  (reference/tables/spells/) ) \u6765\u67e5\u8be2\u5e38\u7528\u7684\u6570\u636e\u8868\u683c\u3002\u4e00\u4e9b\u6d41\u884c\u7684\u9b54\u6cd5\u5305\u62ec  dex.trades ,  lending.borrow \uff0c\u548c  stablecoin.transfer \u3002 \n \u67e5\u8be2\u539f\u59cb\u4ee5\u592a\u574a\u6570\u636e\uff0c\u5982\u533a\u5757\u3001\u65e5\u5fd7\u548c\u4ea4\u6613\u3002 \n \u4e5f\u53ef\u4ee5\u67e5\u8be2\u4e2d\u5fc3\u5316\u4ea4\u6613\u6240\u7684\u6570\u636e\u3002\u5982\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528  prices.usd  \u6765\u5feb\u901f\u8fd4\u56de\u51e0\u4e4e\u6240\u6709\u52a0\u5bc6\u8d44\u4ea7\u7684\u4ef7\u683c\u3002 \n \n ", "url": "https://dune.com/docs/zh/#_2"}
{"content": "\u53ef\u89c6\u5316 \u00b6 \n \u4ee5\u8868\u683c\u5f62\u5f0f\u5448\u73b0\u7684\u6570\u636e\uff08\u884c\u548c\u5217\uff09\u53ef\u80fd\u96be\u4ee5\u9605\u8bfb\u3002 \u53ef\u89c6\u5316  (getting-started/visualizations/)  \u5c06\u67e5\u8be2\u7684\u7ed3\u679c\u4ee5\u4e00\u79cd\u6e05\u6670\u3001\u7cbe\u786e\u548c  \u53ef\u89c6\u5316  \u7684\u65b9\u5f0f\u5448\u73b0\u51fa\u6765\u3002 \n \u901a\u8fc7 Dune \u53ef\u89c6\u5316\uff0c\u60a8\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5f00\u59cb\u7528\u60a8\u7684\u6570\u636e\u8bb2\u8ff0\u4e00\u4e2a\u6545\u4e8b\uff0c\u901a\u8fc7\u8fd9\u6837\u7684\u8f6c\u6362\uff1a \n \n \u53d8\u6210\u8fd9\u6837\uff1a \n \n \u53ef\u89c6\u5316\u7684\u67f1\u72b6\u56fe\u4f7f\u4eba\u6e05\u695a\u5730\u770b\u5230\uff0c4\u670819\u65e5\u7684\u8f6c\u79fb\u603b\u4ef7\u503c\u6700\u9ad8\uff0c\u4ee5\u5e2e\u52a9\u60a8\u548c\u5176\u4ed6\u4eba\u770b\u5230\u4e00\u6bb5\u65f6\u95f4\u5185\u7684\u8d8b\u52bf\u3002 \n Dune \u63d0\u4f9b\u4e86\u5404\u79cd\u53ef\u89c6\u5316\uff0c\u60a8\u53ef\u4ee5\u7528\u5b83\u6765\u76f4\u89c2\u5730\u5c55\u793a\u6570\u636e\uff0c\u5305\u62ec\uff1a \n \n \u67f1\u72b6\u56fe \n \u533a\u57df\u56fe \n \u6563\u70b9\u56fe \n \u7ebf\u72b6\u56fe \n \u997c\u72b6\u56fe \n \u8ba1\u6570\u5668 \n \u6570\u636e\u8868 \n \n ", "url": "https://dune.com/docs/zh/#_3"}
{"content": "\u6570\u636e\u770b\u677f \u00b6 \n \u4f7f\u7528\u7cbe\u5fc3\u7b56\u5212\u7684\u53ef\u89c6\u5316\u5185\u5bb9\uff0c\u806a\u660e\u7684\u533a\u5757\u94fe\u5206\u6790\u5e08\uff08\u5deb\u5e08\uff01\uff09\u53ef\u4ee5\u901a\u8fc7  Dune \u6570\u636e\u770b\u677f  (getting-started/dashboards/) \u8bb2\u8ff0\u4e0d\u540c\u6570\u636e\u96c6\u5408\u7684\u6545\u4e8b\u3002 \n \u4f8b\u5982\uff0c\u5728\u4e0b\u9762\u770b\u677f\u4e2d\uff0c @hagaetc  (https://dune.com/hagaetc)  \u521b\u5efa\u7684  Dex Metrics  (https://dune.com/hagaetc/dex-metrics) \uff0c\u5728\u9876\u90e8\u53ef\u4ee5\u6e05\u695a\u5730\u770b\u5230 \"DEX\"\uff08\u53bb\u4e2d\u5fc3\u5316\u4ea4\u6613\u6240\uff09\u4f5c\u4e3a\u4e00\u4e2a\u7c7b\u522b\u6b63\u5728\u589e\u957f\u3002\u5728\u4e0b\u9762\uff0c\u8bbf\u95ee\u8005\u53ef\u4ee5\u770b\u5230\u54ea\u4e9b DEX \u5728\u4ea4\u6613\u91cf\u4e0a\u6700\u53d7\u6b22\u8fce\uff0c\u6700\u540e\u8fd8\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a\u5806\u53e0\u7684\u67f1\u72b6\u56fe\uff0c\u663e\u793a\u968f\u65f6\u95f4\u7684\u53d8\u5316\u3002 \n \u4ec5\u4ec5\u901a\u8fc7\u67e5\u770b\u8fd9\u4e2a\u5355\u4e00\u7684\u770b\u677f\uff0c\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u6e05\u695a\u5730\u4e86\u89e3\u6574\u4e2a DEX \u5e02\u573a\u7684\u60c5\u51b5\u3002 \n \n ", "url": "https://dune.com/docs/zh/#_4"}
{"content": "\u5982\u4f55\u6d4f\u89c8\u8fd9\u4e9b\u6587\u4ef6 \u00b6 \n \u6211\u4eec\u5df2\u7ecf\u5efa\u7acb\u4e86\u8fd9\u4e9b\u6587\u6863\u6765\u56de\u7b54\u60a8\u6240\u6709\u7684\u95ee\u9898\uff0c\u5305\u62ec who, what, when, where, why\uff0c\u4ee5\u53ca\u5982\u4f55\u5904\u7406\u4efb\u4f55/\u6240\u6709 Dune \u7684 \u95ee\u9898\uff01 \n \u4e0b\u9762\u662f\u6bcf\u4e2a\u90e8\u5206\u7684\u7b80\u8981\u4ecb\u7ecd\uff1a \n \n \u5165\u95e8  (getting-started/)  \u662f\u60a8\u4e86\u89e3\u65b9\u5411\u5e76\u5b66\u4e60\u5982\u4f55\u4f7f\u7528 Dune \u7684\u677f\u5757\uff01 \n \u53c2\u8003  (reference/)  \u662f\u60a8\u53ef\u4ee5\u5f97\u5230 \"\u8c01\u3001\u4ec0\u4e48\u3001\u54ea\u91cc \"\u95ee\u9898\u7684\u7b54\u6848\uff0c\u5e76\u627e\u5230\u6211\u4eec\u6536\u96c6\u7684\u4e00\u4e9b\u8865\u5145\u8d44\u6599\u7684\u5730\u65b9\u3002 \n \u9b54\u6cd5\u4e66  (spellbook/)  \u662f\u60a8\u53ef\u4ee5\u627e\u5230\u521b\u5efa\u548c\u4f7f\u7528\u9b54\u6cd5\u6240\u9700\u7684\u4e00\u5207\u7684\u5730\u65b9\u3002 \n API  (api/)  \u662f\u60a8\u53ef\u4ee5\u627e\u5230\u5c06\u6211\u4eec\u7684 API \u96c6\u6210\u5230\u60a8\u7684\u9879\u76ee\u4e2d\u6240\u9700\u8981\u7684\u4e00\u5207\u7684\u5730\u65b9\u3002 \n \n \u5982\u679c\u60a8\u8feb\u4e0d\u53ca\u5f85\u5730\u60f3\u7528\u60a8\u7684\u9b54\u6756\u5f00\u59cb\u5de5\u4f5c\uff0c\u8bf7\u8df3\u5230\u6211\u4eec\u7684 \u67e5\u8be2\u5feb\u901f\u5165\u95e8  (getting-started/query-quick-start/) \u7684\u6f14\u7ec3\u4e2d\uff0c\u8fd9\u5c06\u5e2e\u52a9\u60a8\u5efa\u7acb\u60a8\u7684\u7b2c\u4e00\u4e2a Dune \u67e5\u8be2! \n ", "url": "https://dune.com/docs/zh/#_5"}
{"content": "Dune \u662f\u4e00\u4e2a\u793e\u533a\u7684\u52aa\u529b \u00b6 \n \u5728 Dune.com \u4e0a\uff0c\u6240\u6709\u7684\u67e5\u8be2\u548c\u6570\u636e\u96c6\u9ed8\u8ba4\u90fd\u662f\u516c\u5f00\u7684\uff08\u5982\u679c\u60a8\u9700\u8981\u5bf9\u60a8\u7684\u67e5\u8be2\u8fdb\u884c\u4fdd\u5bc6\uff0c\u6211\u4eec\u7684  Pro \u7248\u672c  (https://dune.com/pricing)  \u53ef\u4ee5\u6ee1\u8db3\u60a8\u7684\u8981\u6c42\uff09\u3002 \n \u8fd9\u4f7f\u5f97\u60a8\uff0c\u5deb\u5e08\uff0c\u53ef\u4ee5\u8f7b\u800c\u6613\u4e3e\u5730\u5206\u53c9\u548c\u6df7\u5408\u7ec4\u5efa\u5176\u4ed6\u521b\u9020\u8005\u7684\u67e5\u8be2\uff0c\u4ee5\u5efa\u7acb\u5728\u4ed6\u4eec\u7684\u77e5\u8bc6\u548c\u6d1e\u5bdf\u529b\u4e4b\u4e0a\u3002 \n \u53cd\u8fc7\u6765\u8bf4\uff0c\u60a8\u521b\u5efa\u7684\u6bcf\u4e00\u4e2a\u65b0\u67e5\u8be2\uff0c\u90fd\u4f1a\u5e2e\u52a9\u5176\u4ed6\u4eba\u901a\u8fc7 Dune \u5b66\u4e60\u5173\u4e8e\u533a\u5757\u94fe\u548c\u52a0\u5bc6\u8d44\u4ea7\u7684\u65b0\u77e5\u8bc6\u3002 \n \u8fd9\u79cd\u79ef\u6781\u7684\u53cd\u9988\u5faa\u73af\u662f Dune \u793e\u533a\u5982\u4f55\u901a\u8fc7\u4e0d\u65ad\u589e\u957f\u7684\u67e5\u8be2\uff0c\u8ba9\u6211\u4eec\u5927\u5bb6\u5b66\u4e60\u66f4\u591a\u7684\u4e1c\u897f\u800c\u5171\u540c\u6210\u529f\u7684\uff01 \n \u52a0\u5165\u6211\u4eec\u7684 \u793e\u533a Discord  (https://discord.gg/BJBHFR6sdy) \uff0c\u4ece\u6211\u4eec\u7684\u56e2\u961f\u548c\u793e\u533a\u83b7\u5f97\u4e16\u754c\u7ea7\u7684\u652f\u6301\u3002 \n \u67e5\u770b\u6211\u4eec\u7684 \u6d3b\u52a8\u65e5\u5386  (reference/events/) \uff0c\u52a0\u5165\u6709\u8da3\u7684 \u73b0\u573a\u6d3b\u52a8 \u3002 \n \u5982\u679c\u60a8\u6709\u4efb\u4f55\u53cd\u9988\uff0c\u65e0\u8bba\u662f\u529f\u80fd\u8981\u6c42\u8fd8\u662f\u9519\u8bef\u62a5\u544a\uff0c\u8bf7 \u5728\u6b64  (https://feedback.dune.com) \u63d0\u4ea4\u3002", "url": "https://dune.com/docs/zh/#dune"}
{"content": "Counters \u00b6 \n Counters are a great way to provide your audience with immediate \"on a glance\" stats. \n \n ", "url": "https://dune.com/docs/app/visualizations/counters/#counters"}
{"content": "Configuring your Counter \u00b6 \n \n Counter options \u00b6  (#counter-options) \n In this section you can define what kind of data the counter should display: \n Title  (#__tabbed_1_1) Column  (#__tabbed_1_2) Row  (#__tabbed_1_3) \n \n \n \n The Title will appear in all instances of this graph prominently at the top \n If left blank the Query name will be the only thing that is left standing \n \n \n \n \n In this field you can define which column the counter should show. \n \n \n \n \n This field can be used to define which row of the underlying data table you want displayed e.g. row 1 \n Usually this requires you to sort or limit your Query results in order for row 1 to show the wanted results. \n \n \n \n \n \n Formatting \u00b6  (#formatting) \n This section is where you can adjust how your numerical data is displayed. \n Prefix  (#__tabbed_2_1) Suffix  (#__tabbed_2_2) Label  (#__tabbed_2_3) Decimals  (#__tabbed_2_4) \n \n \n \n This field allows you to define a prefix for your counter value. \n e.g.:  $ ,  \u20ac ,  \u039e ,  \u0e3f \n \n \n \n \n This field allows you to define a suffix for your counter value. \n \n \n \n \n This field allows you to define a label for your counter value. \n The label will appear beneath the counter value as text. \n \n \n \n \n In this field you can choose how many decimals you want displayed for your counter", "url": "https://dune.com/docs/app/visualizations/counters/#configuring-your-counter"}
{"content": "Instruction Calls \u00b6 \n This is an unnested table of  solana.transactions  (../transactions/) . There can be multiple instructions in a transaction, so having an exploded view here will make it a little easier to work with the data.  This table mainly exists as the base for  Solana decoded tables  (../../../decoded/solana/idl-tables/)  though, which you should be using instead. \n Here is the schema: \n \n \n \n Column Name \n Data Type \n Description \n \n \n \n \n block_slot \n bigint \n This block\u2019s slot index in the ledger \n \n \n block_date \n date \n Event date \n \n \n block_time \n timestamp(3) with time zone \n Event time \n \n \n block_hash \n varchar \n The hash of this block, base-58 encoded \n \n \n index \n integer \n the order of the instruction in the original instructions of the transaction \n \n \n tx_index \n integer \n Index into the block\u2019s transactions \n \n \n outer_instruction_index \n integer \n Index of the instruction in  instructions . Starts from 1 \n \n \n inner_instruction_index \n integer \n Index of the instruction in  inner_instructions . Starts from 1 \n \n \n outer_executing_account \n varchar \n The account key of the program that executed this instruction at the outer level \n \n \n inner_executing_account \n varchar \n The account key of the program that executed this instruction at the inner level (sometimes null) \n \n \n executing_account \n varchar \n coalesce of the inner_executing_account and outer_executing_account. The account key of the program that executed this instruction \n \n \n data \n varbinary \n Program input data in a base-58 string \n \n \n is_inner \n boolean \n marks if a row is an inner instruction or not \n \n \n account_arguments \n array(varchar) \n Ordered list of accounts to pass to the program \n \n \n inner_instructions \n array(row(data varchar, executing_account varchar, account_arguments array(varchar))) \n see breakout below \n \n \n tx_signer \n varchar \n The address that initiates the transaction and pays the transaction fee \n \n \n tx_id \n varchar \n the first signature in the transaction \n \n \n tx_success \n boolean \n The transaction was valid and thus committed. \n \n \n log_messages \n array \n The log messages emitted by the transaction \n \n \n \n inner_instructions \n \n \n \n Field \n Data type \n Description \n \n \n \n \n account_arguments \n array<string> \n Ordered list of accounts to pass to the program \n \n \n data \n string \n Program input data in a base-58 string \n \n \n executing_account \n string \n The account key of the program that executed this instruction.", "url": "https://dune.com/docs/data-tables/raw/solana/instruction-calls/#instruction-calls"}
{"content": "Skip to content\n          (#blocks) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/raw/solana/blocks.md) \n ", "url": "https://dune.com/docs/data-tables/raw/solana/blocks/"}
{"content": "Blocks \u00b6 \n ", "url": "https://dune.com/docs/data-tables/raw/solana/blocks/#blocks"}
{"content": "Solana.blocks \u00b6 \n This table contains the block data within Solana\u2019s blockchain. It can be used to identify block activity and transaction changes over time. \n \n \n \n \n Column Name \n Data Type \n Description \n \n \n \n \n hash \n string \n string The hash of this block, base-58 encoded \n \n \n height \n bigint \n The number of blocks beneath this block \n \n \n slot \n bigint \n This block\u2019s slot index in the ledger \n \n \n time \n timestamp \n The (estimated) time this block was produced \n \n \n date \n date \n Used to partition by \n \n \n parent_slot \n bigint \n The slot index of this block's parent \n \n \n previous_block___hash \n string \n The hash of this block's parent, base-58 encoded \n \n \n total_transactions \n bigint \n The total number of transactions in this block \n \n \n successful_transactions \n bigint \n The number of successful transactions in this block \n \n \n failed_transactions \n bigint \n The number of failed transactions in this block \n \n \n \n Solana Query examples can be found here:  Solana blocks over time  (https://dune.xyz/queries/389979)  and  Transactions per day  (https://dune.xyz/queries/390045)", "url": "https://dune.com/docs/data-tables/raw/solana/blocks/#solanablocks"}
{"content": "Skip to content\n          (#how-to-get-support) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/resources/support-feedback.md) \n Support & Feedback \n ", "url": "https://dune.com/docs/resources/support-feedback/"}
{"content": "How to Get Support \u00b6 \n If you can't seem to find the help you're looking for, here's the best way to get it: \n ", "url": "https://dune.com/docs/resources/support-feedback/#how-to-get-support"}
{"content": "1. Try searching using the Search bar above \u00b6 \n We know you probably did that already but just in case \n ", "url": "https://dune.com/docs/resources/support-feedback/#1-try-searching-using-the-search-bar-above"}
{"content": "2. Discord! \u00b6 \n We have a very active community of Dune Wizards in our Discord. If you're not already a member, you can join by clicking the button below: \n Join Discord  (https://discord.gg/FjwGvbgDFS) \n ", "url": "https://dune.com/docs/resources/support-feedback/#2-discord"}
{"content": "How to Leave Feedback \u00b6 \n For general Dune app feedback,  leave a suggestion on our Canny board here  (https://feedback.dune.com/) . \n If you're working with any of our public repositories (e.g. Spellbook), you can also open a Github issue. \n For Docs feedback fixes or additions, click the pencil icon to the right of the page title and open a GitHub issue or submit a pull request: \n \n ", "url": "https://dune.com/docs/resources/support-feedback/#how-to-leave-feedback"}
{"content": "Account issues \u00b6 \n For any issues related to your account, billing or any other administrative problems, please send an email to  support@dune.com  (mailto:support@dune.com) . \n ", "url": "https://dune.com/docs/resources/support-feedback/#account-issues"}
{"content": "Billing FAQs \u00b6 \n I upgraded from a Plus to Premium plan but why was I charged the full price? \u00b6  (#i-upgraded-from-a-plus-to-premium-plan-but-why-was-i-charged-the-full-price) \n When you upgrade from a Plus to a Premium plan, the full price of the Premium plan is charged, and the pro-rated credit from your Plus plan is calculated and will be applied towards the  next  invoice.  \n For example, suppose you switch from Plus to Premium on July 15th, having initially subscribed to the Plus plan on July 1st. You'll be charged the full Premium price on July 15th and your Premium service will commence from that date. At the same time, we calculate and store a credit corresponding to the unused portion of your Plus plan. This credit will be applied to your next invoice (in this case, August 15th), reducing the overall charge for your Premium plan.", "url": "https://dune.com/docs/resources/support-feedback/#billing-faqs"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/ethereum-mainnet/traces.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/ethereum-mainnet/traces/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/ethereum-mainnet/event-logs.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/ethereum-mainnet/event-logs/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/ethereum-mainnet/blocks.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/ethereum-mainnet/blocks/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#ethereum-mainnet) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/ethereum-mainnet/index.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/ethereum-mainnet/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/bnb-chain-bsc/transactions.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/bnb-chain-bsc/transactions/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/bnb-chain-bsc/traces.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/bnb-chain-bsc/traces/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/bnb-chain-bsc/event-logs.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/bnb-chain-bsc/event-logs/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/bnb-chain-bsc/blocks.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/bnb-chain-bsc/blocks/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#bnb-chain-bsc) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/bnb-chain-bsc/index.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/bnb-chain-bsc/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/community/index.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/community/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#erc721) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/spells/special-tables/erc721.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/spells/special-tables/erc721/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#erc20) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/spells/special-tables/erc20.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/spells/special-tables/erc20/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#erc1155) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/spells/special-tables/erc1155.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/spells/special-tables/erc1155/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/spells/special-tables/index.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/spells/special-tables/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#nfttrades) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/spells/nft.trading.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/spells/nft.trading/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/decoded/event-logs.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/decoded/event-logs/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/decoded/call-tables.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/decoded/call-tables/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/solana/vote-transactions.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/solana/vote-transactions/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/solana/transactions.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/solana/transactions/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/solana/rewards.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/solana/rewards/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/solana/changelog.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/solana/changelog/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/solana/blocks.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/solana/blocks/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/solana/account-activity.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/solana/account-activity/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#solana) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/solana/index.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/solana/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/polygon/transactions.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/polygon/transactions/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/polygon/traces.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/polygon/traces/"}
{"content": "\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/ethereum-mainnet/traces/#_1"}
{"content": "ethereum.traces \u00b6 \n \u4ea4\u6613\uff08Transactions\uff09\u53ef\u4ee5\u89e6\u53d1\u4fee\u6539\u4ee5\u592a\u574a\u865a\u62df\u673a\u5185\u90e8\u72b6\u6001\u7684\u66f4\u5c0f\u7684\u539f\u5b50\u64cd\u4f5c\u3002\u6709\u5173\u8fd9\u4e9b\u64cd\u4f5c\u6267\u884c\u7684\u4fe1\u606f\u4f1a\u88ab\u8bb0\u5f55\u4e0b\u6765\uff0c\u5e76\u4e14\u53ef\u4ee5\u5b58\u50a8\u4e3aEVM\u6267\u884c\u5185\u90e8\u5408\u7ea6\uff0c\u6216\u8005\u53ea\u662f\u4e00\u4e2a_\u5185\u90e8\u5408\u7ea6_\u3002\u5728Etherscan\u4e2d\uff0c\u8fd9\u4e9b\u88ab\u79f0\u4e3a\u201c\u5185\u90e8\u4ea4\u6613\u201d\u3002 \n \u70b9\u51fb \u8fd9\u91cc  (https://medium.com/chainalysis/ethereum-traces-not-transactions-3f0533d26aa) \u9605\u8bfb\u66f4\u591a\u4fe1\u606f\u3002 \n \n \n \n \u5b57\u6bb5\u540d\u79f0 \n \u6570\u636e\u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n block_time \n timestamptz \n \u5305\u542b\u6b64\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u7684\u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n tx_success \n boolean \n \u6307\u793a\u4ea4\u6613\u662f\u5426\u6210\u529f\u7684\u771f/\u5047\u503c \n \n \n success \n boolean \n \u6307\u793a\u5f53\u524d\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u64cd\u4f5c\u662f\u5426\u6210\u529f\u7684\u771f/\u5047\u503c \n \n \n block_hash \n string \n \u5f53\u524d\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n block_number \n int8 \n \u533a\u5757\u94fe\u7684\u957f\u5ea6\uff08\u4ee5\u533a\u5757\u6570\u4e3a\u5355\u4f4d\uff09 \n \n \n tx_hash \n string \n \u53d1\u51fa\u6b64\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u7684\u4ea4\u6613\u7684\u54c8\u5e0c\u503c \n \n \n from \n string \n \u53d1\u9001\u8005\u7684\u5730\u5740 \n \n \n to \n string \n \u63a5\u6536\u8005\u7684\u5730\u5740\u3002\u5f53\u5b83\u662f\u4e00\u4e2a\u5408\u7ea6\u521b\u5efa\u4ea4\u6613\u65f6\uff0c\u5176\u503c\u4e3a Null \n \n \n value \n numeric \n \u672c\u6b21\u4ea4\u6613\u4e2d\u53d1\u9001\u7684\u4ee5\u592a\u5e01\u6570\u91cf\uff0c\u4ee5 wei \u8868\u793a \n \n \n gas \n numeric \n \u968f\u6d88\u606f\u8c03\u7528\u53d1\u9001\u7684\u71c3\u6599\u6570\u91cf \n \n \n gas_used \n numeric \n \u6d88\u606f\u8c03\u7528\u6d88\u8017\u7684\u71c3\u6599\u6570\u91cf\uff0c\u4ee5 wei \u8868\u793a \n \n \n tx_index \n numeric \n \u5f52\u5c5e\u7684\u4ea4\u6613\u5728\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e \n \n \n trace_address \n array \n \u5f53\u524d\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u5728\u8c03\u7528\u56fe\u68ee\u6797\u4e2d\u7684\u5730\u5740\u3002\u4f8b\u5982\uff0c[0, 2, 1] \u662f [0, 2, 1, 0] \u7684\u7236\u7ea7 \n \n \n sub_traces \n numeric \n \u5b50\u7ea7\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u7684\u6570\u91cf \n \n \n type \n text \n \u53ef\u4ee5\u662f reward \uff0c create \uff0c call \u6216\u8005 suicide \u3002\u63cf\u8ff0\u5728\u6b64\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u4e2d\u4f7f\u7528\u7684\u64cd\u4f5c\u7c7b\u578b\u3002 \n \n \n address \n string \n \u5f53\u7c7b\u578b\u662f suicide \u6216\u8005 create \u65f6\u4fdd\u5b58\u8c03\u7528\u7684\u5408\u7ea6\u5730\u5740 \n \n \n code \n string \n \u90e8\u7f72\u65b0\u5408\u7ea6\u7684\u5b57\u8282\u7801\uff0c\u4ec5\u5728\u8c03\u7528\u7c7b\u578b\u4e3a create \u65f6\u5305\u542b\u6570\u636e\u3002 \n \n \n call_type \n string \n \u53ef\u4ee5\u662f staticcall \uff0c delegatecall \u6216\u8005 call \u3002 \u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u8003 \u8fd9\u91cc  (https://medium.com/coinmonks/delegatecall-calling-another-contract-function-in-solidity-b579f804178c) \u3002 \n \n \n input \n string \n \u8c03\u7528\u53e6\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6\u7684\u5b57\u8282\u7801 \n \n \n output \n string \n \u88ab\u8c03\u7528\u667a\u80fd\u5408\u7ea6\u53d1\u9001\u56de\u6765\u7684\u5b57\u8282\u7801\u54cd\u5e94 \n \n \n refund_address \n string \n \u4ec5\u5728 type \u662f suicide \u65f6\u5305\u542b\u6570\u636e\u3002\u6307\u5b9a\u5c06\u672a\u652f\u51fa\u7684\u4ee5\u592a\u5e01\u4f59\u989d\u53d1\u9001\u5230\u54ea\u91cc\u3002 \n \n \n \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/ethereum-mainnet/traces/#ethereumtraces"}
{"content": "\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u6d88\u8017\u7684\u71c3\u6599 \u00b6 \n ethereum.traces\u8868\u4e2d\u7684 gas_used \u5b57\u6bb5\u6709\u70b9\u96be\u4ee5\u7406\u89e3\uff0c\u6240\u4ee5\u8fd9\u91cc\u6709\u4e00\u4e9b\u63d0\u793a\uff1a \n \n \u5185\u90e8\u5408\u7ea6\u8c03\u7528\u7684 gas_used \u5c06\u59cb\u7ec8\u5305\u62ec\u5408\u7ea6\u8c03\u7528\u672c\u8eab\u4ee5\u53ca\u5176\u6240\u6709\u5b50\u7ea7\u5408\u7ea6\u8c03\u7528\u6240\u6d88\u8017\u7684\u71c3\u6599\u3002 \n \u521d\u59cb\u8c03\u7528\u7684 gas_used \u5c06\u4e0d\u5305\u542b\u53d1\u8d77\u8c03\u7528\u65f6\u5df2\u53d1\u751f\u7684\u71c3\u6599\u6d88\u8017\u3002 \n \u60a8\u9700\u8981\u5c06\u201c21000\u4e2a\u71c3\u6599\u5355\u4f4d + \u53d1\u9001\u96f6\u5b50\u8282\u53ca\u53d1\u9001\u975e\u96f6\u5b57\u8282\u7684\u71c3\u6599\u6210\u672c\u201d\u6dfb\u52a0\u5230\u9876\u90e8\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u7684 gas_used \u503c\u4e0a\uff0c\u4ee5\u5f97\u5230\u201c\u771f\u5b9e\u201d\u7684 gas_used \u503c\u3002 \n \u6709\u5173\u6b64\u5185\u5bb9\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u6b64 stackexchange\u6761\u76ee  (https://ethereum.stackexchange.com/questions/31443/what-do-the-response-values-of-a-parity-trace-transaction-call-actually-repres) \n \u5728Dune\u4e2d\u6267\u884c\u6b64\u64cd\u4f5c\u7684\u67e5\u8be2\u793a\u4f8b\uff1a https://dune.com/queries/895857  (https://dune.com/queries/895857)", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/ethereum-mainnet/traces/#_2"}
{"content": "\u4e8b\u4ef6\u65e5\u5fd7\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/ethereum-mainnet/event-logs/#_1"}
{"content": "ethereum.logs \u00b6 \n \u6b64\u8868\u5b58\u50a8\u4e86\u667a\u80fd\u5408\u7ea6\u751f\u6210\u7684\u6240\u6709\u4e8b\u4ef6\u65e5\u5fd7\u3002\u5b83\u5bf9\u4e8e\u67e5\u8be2\u5c1a\u672a\u88ab\u89e3\u7801\u6216\u8005\u7531\u4e8e\u4ee3\u7801\u975e\u5f00\u6e90\u800c\u65e0\u6cd5\u89e3\u7801\u7684\u5408\u7ea6\u5f88\u6709\u7528\u3002 \n \u4e8b\u4ef6\u65e5\u5fd7\uff08Logs\uff09\u662f\u4e00\u79cd\u5728EVM\u533a\u5757\u94fe\u4e0a\u5b58\u50a8\u5c11\u91cf\u6570\u636e\u4ece\u800c\u53ea\u6d88\u8017\u5c11\u91cf\u71c3\u6599\u7684\u4f18\u96c5\u65b9\u5f0f\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u4e8b\u4ef6\u65e5\u5fd7\u6709\u52a9\u4e8e\u8ba9\u5176\u4ed6\u4eba\u4e0d\u5fc5\u5355\u72ec\u67e5\u8be2\u5177\u4f53\u7684\u5408\u7ea6\u4ee3\u7801\u5c31\u80fd\u77e5\u9053\u53d1\u751f\u4e86\u4ec0\u4e48\u4e8b\u60c5\u3002 \n \u6709\u5173\u6b64\u4e3b\u9898\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u9605\u8bfb \u672c\u6587  (https://medium.com/mycrypto/understanding-event-logs-on-the-ethereum-blockchain-f4ae7ba50378) \u3002 \n \u6ce8\u610f\uff1a\u6211\u4eec\u7684\u4e3b\u9898\u7d22\u5f15\u662f\u4ece1\u5f00\u59cb\u8ba1\u6570\u7684\uff0c\u6240\u4ee5 topic0 \u663e\u793a\u4e3a topic1 \uff0c topic1 \u663e\u793a\u4e3a topic2 \uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \n \n \n \n \u5b57\u6bb5\u540d\u79f0 \n \u6570\u636e\u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n block_hash \n string \n \u5f53\u524d\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n block_number \n int8 \n \u533a\u5757\u94fe\u7684\u957f\u5ea6\uff08\u4ee5\u533a\u5757\u6570\u4e3a\u5355\u4f4d\uff09 \n \n \n block_time \n timestamptz \n \u5305\u542b\u6b64\u4e8b\u4ef6\u65e5\u5fd7\u7684\u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n contract_address \n string \n \u53d1\u51fa\u5f53\u524d\u4e8b\u4ef6\u65e5\u5fd7\u7684\u5408\u7ea6\u5730\u5740 \n \n \n topic1 \n string \n \u4e8b\u4ef6\u58f0\u660e\u5b57\u7b26\u4e32\u5e73\u5c55\u540e\u7684keccak256\u54c8\u5e0c\u503c \n \n \n topic2 \n string \n \u4e8b\u4ef6\u7684\u7d22\u5f15\u4e3b\u98981 \n \n \n topic3 \n string \n \u4e8b\u4ef6\u7684\u7d22\u5f15\u4e3b\u98982 \n \n \n topic4 \n string \n \u4e8b\u4ef6\u7684\u7d22\u5f15\u4e3b\u98983 \n \n \n data \n string \n \u5305\u542b\u6709\u5173\u4e8b\u4ef6\u7684\u66f4\u591a\u4fe1\u606f\u7684\u672a\u7d22\u5f15\u6570\u636e \n \n \n tx_hash \n string \n \u4ea7\u751f\u6b64\u4e8b\u4ef6\u65e5\u5fd7\u7684\u4ea4\u6613\u7684\u54c8\u5e0c\u503c \n \n \n index \n numeric \n \u4e8b\u4ef6\u65e5\u5fd7\u5728\u88ab\u8bb0\u5f55\u7684\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e\uff08\u6309\u6267\u884c\u987a\u5e8f\u6392\u5e8f\u7684\u7d2f\u8ba1\u65e5\u5fd7\u6570\u91cf\uff09 \n \n \n tx_index \n numeric \n \u4e8b\u4ef6\u65e5\u5fd7\u5f52\u5c5e\u7684\u4ea4\u6613\u5728\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e\uff08\u6309\u6267\u884c\u987a\u5e8f\u6392\u5e8f\u7684\u7d2f\u8ba1\u4ea4\u6613\u6570\u91cf\uff09", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/ethereum-mainnet/event-logs/#ethereumlogs"}
{"content": "\u533a\u5757\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/ethereum-mainnet/blocks/#_1"}
{"content": "ethereum.blocks \u00b6 \n \u533a\u5757\u662f\u533a\u5757\u94fe\u548c\u6c47\u603b\uff08rollups\uff09\u7684\u6784\u5efa\u7ec4\u4ef6\u3002\u4e00\u4e2a\u533a\u5757\u5305\u542b\u5c06\u9010\u6e10\u6539\u53d8EVM\u7cfb\u7edf\u72b6\u6001\u7684\u591a\u4e2a\u4ea4\u6613\u3002\u533a\u5757\u5185\u7684\u4ea4\u6613\u53ea\u80fd\u4e00\u4e2a\u63a5\u4e00\u4e2a\u5730\u6267\u884c\uff0c\u4e0d\u80fd\u5e76\u884c\u6267\u884c\u3002 \n \n \n \n \u5b57\u6bb5\u540d\u79f0 \n \u6570\u636e\u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n time \n timestamptz \n \u5f53\u524d\u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n number \n numeric \n \u533a\u5757\u94fe\u7684\u957f\u5ea6\uff08\u4ee5\u533a\u5757\u6570\u4e3a\u5355\u4f4d\uff09 \n \n \n hash \n string \n \u5f53\u524d\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n parent hash \n string \n \u524d\u4e00\u4e2a\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n gas_limit \n numeric \n \u5f53\u524d\u533a\u5757\u7684\u71c3\u6599\u9650\u5236 \n \n \n gas_used \n numeric \n \u5f53\u524d\u533a\u5757\u6d88\u8017\u7684\u71c3\u6599\u6570\u91cf \n \n \n miner \n string \n \u77ff\u5de5\u7684\u5730\u5740 \n \n \n difficulty \n numeric \n \u96be\u5ea6\u503c\uff0c\u5373\u5f00\u91c7\u5f53\u524d\u533a\u5757\u6240\u9700\u7684\u52aa\u529b \n \n \n total_difficulty \n numeric \n \u533a\u5757\u94fe\u5230\u5f53\u524d\u533a\u5757\u4e3a\u6b62\u7684\u603b\u96be\u5ea6\u503c \n \n \n nonce \n string \n \u533a\u5757\u968f\u673a\u6570\uff0c\u7528\u4e8e\u5c55\u793a\u6316\u77ff\u8fc7\u7a0b\u4e2d\u7684\u5de5\u4f5c\u91cf\u8bc1\u660e \n \n \n size \n numeric \n \u533a\u5757\u7684\u5927\u5c0f\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\uff0c\u53d7\u672c\u533a\u5757\u71c3\u6599\u9650\u5236\u7684\u7ea6\u675f \n \n \n base_fee_per_gas \n numeric \n \u5f53\u524d\u533a\u5757\u7684\u57fa\u672c\u71c3\u6599\u8d39\u7528\uff08\u7531 EIP1559  (https://eips.ethereum.org/EIPS/eip-1559) \uff09\u5f15\u5165", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/ethereum-mainnet/blocks/#ethereumblocks"}
{"content": "\u4ee5\u592a\u574a\u4e3b\u7f51\uff08Ethereum Mainnet\uff09 \u00b6 \n \u4ee5\u592a\u574a\u4e8e2015\u5e74\u9996\u6b21\u63a8\u51fa\uff0c\u662f\u6700\u65e9\u521b\u65b0\u548c\u5b9e\u65bd\u4ee5\u592a\u574a\u865a\u62df\u673a\uff08EVM\uff09\u7684\u533a\u5757\u94fe\u3002\u65f6\u81f3\u4eca\u65e5\uff0c\u4ee5\u592a\u574a\u4ecd\u7136\u662f\u4e00\u4e2a\u201c\u771f\u6b63\u7684\u201d\u53bb\u4e2d\u5fc3\u5316\u5e73\u53f0\uff0c\u4e16\u754c\u5404\u5730\u7684\u8bb8\u591a\u8282\u70b9\u8fd0\u8425\u5546\u90fd\u5728\u4fdd\u62a4\u5b83\u7684\u5b89\u5168\u8fd0\u884c\u3002\u4ee5\u592a\u574a\u7531\u904d\u5e03\u4e16\u754c\u5404\u5730\u7684\u72ec\u7acb\u5f00\u53d1\u8005\u5171\u540c\u7ef4\u62a4\u548c\u5f00\u53d1\u3002 \n \u81ea2015\u5e74\u6210\u7acb\u4ee5\u6765\uff0c\u4ee5\u592a\u574a\u7ecf\u5386\u4e86\u4e00\u7cfb\u5217\u66f4\u65b0\u3002 \n \u89e3\u91ca\u4ee5\u592a\u574a\u7684\u5386\u53f2\u3001\u8def\u7ebf\u56fe\u548c\u6280\u672f\u7ec6\u8282\u8d85\u51fa\u4e86\u672c\u6587\u6863\u7684\u8303\u56f4\uff0c\u56e0\u6b64\u6211\u4eec\u9f13\u52b1\u60a8\u9605\u8bfb Ethereum.org  (https://ethereum.org/en/developers/docs) \u4e0a\u7684\u6587\u6863\u3002 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/ethereum-mainnet/#ethereum-mainnet"}
{"content": "\u539f\u59cb\u6570\u636e\u8868 \u00b6 \n \n \n \u533a\u5757\u8868\uff08Blocks\uff09  (blocks/) \n \u4ea4\u6613\u8868\uff08Transactions\uff09  (transactions/) \n \u4e8b\u4ef6\u65e5\u5fd7\u8868\uff08Logs\uff09  (event-logs/) \n \u5185\u90e8\u5408\u7ea6\u8c03\u7528\u8868\uff08Traces\uff09  (traces/)", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/ethereum-mainnet/#_1"}
{"content": "\u4ea4\u6613\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/bnb-chain-bsc/transactions/#_1"}
{"content": "bnb.transactions \u00b6 \n \u4ea4\u6613\u662f\u6765\u81ea\u8d26\u6237\u7684\u52a0\u5bc6\u7b7e\u540d\u6307\u4ee4\u3002\u5e10\u6237\u901a\u8fc7\u53d1\u8d77\u4ea4\u6613\u6765\u66f4\u65b0\u4ee5\u592a\u574a\u7f51\u7edc\u7684\u72b6\u6001\u3002\u4ea4\u6613\u59cb\u7ec8\u6765\u81ea\u5916\u90e8\u62e5\u6709\u7684\u8d26\u6237\uff0c\u667a\u80fd\u5408\u7ea6\u65e0\u6cd5\u53d1\u8d77\u4ea4\u6613\u3002 \n \u4ea4\u6613\u9700\u8981\u5e7f\u64ad\u5230\u6574\u4e2a\u7f51\u7edc\u3002\u4efb\u4f55\u8282\u70b9\u90fd\u53ef\u4ee5\u5e7f\u64ad\u5728EVM\u4e0a\u5373\u5c06\u6267\u884c\u4ea4\u6613\u7684\u8bf7\u6c42\uff1b\u5e7f\u64ad\u53d1\u9001\u540e\uff0c\u77ff\u5de5\u5c06\u6267\u884c\u4ea4\u6613\u5e76\u5c06\u7ed3\u679c\u72b6\u6001\u66f4\u6539\u4f20\u64ad\u5230\u7f51\u7edc\u7684\u5176\u4f59\u90e8\u5206\u3002 \n \u70b9\u51fb \u8fd9\u91cc  (https://ethereum.org/en/developers/docs/transactions) \u5728\u4ee5\u592a\u574a\u5b98\u65b9\u6587\u6863\u4e2d\u9605\u8bfb\u66f4\u591a\u4fe1\u606f\u3002 \n \n \n \n \u5b57\u6bb5\u540d\u79f0 \n \u6570\u636e\u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n block_time \n timestamptz \n \u5305\u542b\u6b64\u4ea4\u6613\u7684\u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n nonce \n numeric \n \u53d1\u8d77\u4ea4\u6613\u7684\u94b1\u5305\u7684\u552f\u4e00\u503c\u4ea4\u6613\u968f\u673a\u6570 \n \n \n index \n numeric \n \u5f53\u524d\u4ea4\u6613\u5728\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e \n \n \n success \n boolean \n \u663e\u793a\u4ea4\u6613\u662f\u5426\u6210\u529f\u7684\u771f/\u5047\u503c \n \n \n from \n string \n \u53d1\u9001\u8005\u7684\u5730\u5740 \n \n \n to \n string \n \u63a5\u6536\u8005\u7684\u5730\u5740\u3002\u5f53\u662f\u5408\u7ea6\u521b\u5efa\u4ea4\u6613\u65f6\u503c\u4e3a NULL \n \n \n value \n numeric \n \u5728\u6b64\u4ea4\u6613\u4e2d\u53d1\u9001\u7684\u4ee5 jager \u4e3a\u5355\u4f4d\u7684\u4ee5\u592a\u5e01\u6570\u91cf\u3002\u8bf7\u6ce8\u610f\uff0cerc20\u4ee3\u5e01\u4e0d\u4f1a\u51fa\u73b0\u5728\u8fd9\u91cc\u3002 \n \n \n block_number \n int8 \n \u533a\u5757\u94fe\u7684\u957f\u5ea6\uff08\u4ee5\u533a\u5757\u6570\u4e3a\u5355\u4f4d\uff09 \n \n \n block_hash \n string \n \u5f53\u524d\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n gas_limit \n numeric \n \u4ee5 jager \u8868\u793a\u7684\u71c3\u6599\u9650\u5236 \n \n \n gas_price \n numeric \n \u4ee5 jager \u8868\u793a\u7684\u71c3\u6599\u4ef7\u683c \n \n \n gas_used \n numeric \n \u4ee5 jager \u8868\u793a\u7684\u5f53\u524d\u4ea4\u6613\u6d88\u8017\u7684\u71c3\u6599\u6570\u91cf \n \n \n data \n string \n \u53ef\u4ee5\u662f\u7a7a\u503c\u3001\u5341\u516d\u8fdb\u5236\u7f16\u7801\u7684\u6d88\u606f\u6216\u667a\u80fd\u5408\u7ea6\u8c03\u7528\u6307\u4ee4 \n \n \n hash \n string \n \u4ea4\u6613\u7684\u54c8\u5e0c\u503c \n \n \n type \n text \n \u7531\u4e8eBNB\u94fe\u4e0a\u6ca1\u6709eip1559\uff0c\u56e0\u6b64\u603b\u662f legacy \n \n \n access_list \n jsonb \n n/a \n \n \n max_fee_per_gas \n numeric \n n/a \n \n \n max_priority_fee_per_gas \n numeric \n n/a \n \n \n priority_fee_per_gas \n numeric \n n/a \n \n \n \n **** \u8bf7\u81ea\u884c\u67e5\u770b\u67e5\u8be2\u793a\u4f8b  (https://dune.xyz/queries/38964) ****", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/bnb-chain-bsc/transactions/#bnbtransactions"}
{"content": "\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/bnb-chain-bsc/traces/#_1"}
{"content": "bnb.traces \u00b6 \n \u4ea4\u6613\uff08Transactions\uff09\u53ef\u4ee5\u89e6\u53d1\u4fee\u6539\u4ee5\u592a\u574a\u865a\u62df\u673a\u5185\u90e8\u72b6\u6001\u7684\u66f4\u5c0f\u7684\u539f\u5b50\u64cd\u4f5c\u3002\u6709\u5173\u8fd9\u4e9b\u64cd\u4f5c\u6267\u884c\u7684\u4fe1\u606f\u4f1a\u88ab\u8bb0\u5f55\u4e0b\u6765\uff0c\u5e76\u4e14\u53ef\u4ee5\u5b58\u50a8\u4e3aEVM\u6267\u884c\u5185\u90e8\u5408\u7ea6\uff0c\u6216\u8005\u53ea\u662f\u4e00\u4e2a_\u5185\u90e8\u5408\u7ea6_\u3002\u5728Etherscan\u4e2d\uff0c\u8fd9\u4e9b\u88ab\u79f0\u4e3a\u201c\u5185\u90e8\u4ea4\u6613\u201d\u3002 \n \u70b9\u51fb \u8fd9\u91cc  (https://medium.com/chainalysis/ethereum-traces-not-transactions-3f0533d26aa) \u9605\u8bfb\u66f4\u591a\u4fe1\u606f\u3002 \n \n \n \n \u5b57\u6bb5\u540d\u79f0 \n \u6570\u636e\u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n block_time \n timestamptz \n \u5305\u542b\u6b64\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u7684\u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n tx_success \n boolean \n \u6307\u793a\u4ea4\u6613\u662f\u5426\u6210\u529f\u7684\u771f/\u5047\u503c \n \n \n success \n boolean \n \u6307\u793a\u5f53\u524d\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u64cd\u4f5c\u662f\u5426\u6210\u529f\u7684\u771f/\u5047\u503c \n \n \n block_hash \n string \n \u5f53\u524d\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n block_number \n int8 \n \u533a\u5757\u94fe\u7684\u957f\u5ea6\uff08\u4ee5\u533a\u5757\u6570\u4e3a\u5355\u4f4d\uff09 \n \n \n tx_hash \n string \n \u53d1\u51fa\u6b64\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u7684\u4ea4\u6613\u7684\u54c8\u5e0c\u503c \n \n \n from \n string \n \u53d1\u9001\u8005\u7684\u5730\u5740 \n \n \n to \n string \n \u63a5\u6536\u8005\u7684\u5730\u5740\u3002\u5f53\u5b83\u662f\u4e00\u4e2a\u5408\u7ea6\u521b\u5efa\u4ea4\u6613\u65f6\uff0c\u5176\u503c\u4e3a Null \n \n \n value \n numeric \n \u672c\u6b21\u4ea4\u6613\u4e2d\u53d1\u9001\u7684BNB\u6570\u91cf\uff0c\u4ee5 jager \u8868\u793a \n \n \n gas \n numeric \n \u968f\u6d88\u606f\u8c03\u7528\u53d1\u9001\u7684\u71c3\u6599\u6570\u91cf \n \n \n gas_used \n numeric \n \u6d88\u606f\u8c03\u7528\u6d88\u8017\u7684\u71c3\u6599\u6570\u91cf\uff0c\u4ee5 jager \u8868\u793a \n \n \n tx_index \n numeric \n \u5f52\u5c5e\u7684\u4ea4\u6613\u5728\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e \n \n \n trace_address \n array \n \u5f53\u524d\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u5728\u8c03\u7528\u56fe\u68ee\u6797\u4e2d\u7684\u5730\u5740\u3002\u4f8b\u5982\uff0c[0, 2, 1] \u662f [0, 2, 1, 0] \u7684\u7236\u7ea7 \n \n \n sub_traces \n numeric \n \u5b50\u7ea7\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u7684\u6570\u91cf \n \n \n type \n text \n \u53ef\u4ee5\u662f reward \uff0c create \uff0c call \u6216\u8005 suicide \u3002\u63cf\u8ff0\u5728\u6b64\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u4e2d\u4f7f\u7528\u7684\u64cd\u4f5c\u7c7b\u578b\u3002 \n \n \n address \n string \n \u5f53\u7c7b\u578b\u662f suicide \u6216\u8005 create \u65f6\u4fdd\u5b58\u8c03\u7528\u7684\u5408\u7ea6\u5730\u5740 \n \n \n code \n string \n \u90e8\u7f72\u65b0\u5408\u7ea6\u7684\u5b57\u8282\u7801\uff0c\u4ec5\u5728\u8c03\u7528\u7c7b\u578b\u4e3a create \u65f6\u5305\u542b\u6570\u636e\u3002 \n \n \n call_type \n string \n \u53ef\u4ee5\u662f staticcall \uff0c delegatecall \u6216\u8005 call \u3002 \u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u8003 \u8fd9\u91cc  (https://medium.com/coinmonks/delegatecall-calling-another-contract-function-in-solidity-b579f804178c) \u3002 \n \n \n input \n string \n \u8c03\u7528\u53e6\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6\u7684\u5b57\u8282\u7801 \n \n \n output \n string \n \u88ab\u8c03\u7528\u667a\u80fd\u5408\u7ea6\u53d1\u9001\u56de\u6765\u7684\u5b57\u8282\u7801\u54cd\u5e94 \n \n \n refund_address \n string \n \u4ec5\u5728 type \u662f suicide \u65f6\u5305\u542b\u6570\u636e\u3002\u6307\u5b9a\u5c06\u672a\u652f\u51fa\u7684BNB\u4f59\u989d\u53d1\u9001\u5230\u54ea\u91cc\u3002 \n \n \n \n **** \u8bf7\u81ea\u884c\u67e5\u770b\u67e5\u8be2\u793a\u4f8b  (https://dune.xyz/queries/38730) **** \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/bnb-chain-bsc/traces/#bnbtraces"}
{"content": "\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u6d88\u8017\u7684\u71c3\u6599 \u00b6 \n bnb.traces\u8868\u4e2d\u7684 gas_used \u5b57\u6bb5\u6709\u70b9\u96be\u4ee5\u7406\u89e3\uff0c\u6240\u4ee5\u8fd9\u91cc\u6709\u4e00\u4e9b\u63d0\u793a\uff1a \n \n \u5185\u90e8\u5408\u7ea6\u8c03\u7528\u7684 gas_used \u5c06\u59cb\u7ec8\u5305\u62ec\u5408\u7ea6\u8c03\u7528\u672c\u8eab\u4ee5\u53ca\u5176\u6240\u6709\u5b50\u7ea7\u5408\u7ea6\u8c03\u7528\u6240\u6d88\u8017\u7684\u71c3\u6599\u3002 \n \u521d\u59cb\u8c03\u7528\u7684 gas_used \u5c06\u4e0d\u5305\u542b\u53d1\u8d77\u8c03\u7528\u65f6\u5df2\u53d1\u751f\u7684\u71c3\u6599\u6d88\u8017\u3002 \n \u60a8\u9700\u8981\u5c06\u201c21000\u4e2a\u71c3\u6599\u5355\u4f4d + \u53d1\u9001\u96f6\u5b50\u8282\u53ca\u53d1\u9001\u975e\u96f6\u5b57\u8282\u7684\u71c3\u6599\u6210\u672c\u201d\u6dfb\u52a0\u5230\u9876\u90e8\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u7684 gas_used \u503c\u4e0a\uff0c\u4ee5\u5f97\u5230\u201c\u771f\u5b9e\u201d\u7684 gas_used \u503c\u3002 \n \u6709\u5173\u6b64\u5185\u5bb9\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u6b64 stackexchange\u6761\u76ee  (https://ethereum.stackexchange.com/questions/31443/what-do-the-response-values-of-a-parity-trace-transaction-call-actually-repres) \n \u5728Dune\u4e2d\u6267\u884c\u6b64\u64cd\u4f5c\u7684\u67e5\u8be2\u793a\u4f8b\uff1a https://dune.com/queries/895857  (https://dune.com/queries/895857)", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/bnb-chain-bsc/traces/#_2"}
{"content": "\u4e8b\u4ef6\u65e5\u5fd7\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/bnb-chain-bsc/event-logs/#_1"}
{"content": "bnb.logs \u00b6 \n \u6b64\u8868\u5b58\u50a8\u4e86\u667a\u80fd\u5408\u7ea6\u751f\u6210\u7684\u6240\u6709\u4e8b\u4ef6\u65e5\u5fd7\u3002\u5b83\u5bf9\u4e8e\u67e5\u8be2\u5c1a\u672a\u88ab\u89e3\u7801\u6216\u8005\u7531\u4e8e\u4ee3\u7801\u975e\u5f00\u6e90\u800c\u65e0\u6cd5\u89e3\u7801\u7684\u5408\u7ea6\u5f88\u6709\u7528\u3002 \n \u4e8b\u4ef6\u65e5\u5fd7\uff08Logs\uff09\u662f\u4e00\u79cd\u5728EVM\u533a\u5757\u94fe\u4e0a\u5b58\u50a8\u5c11\u91cf\u6570\u636e\u4ece\u800c\u53ea\u6d88\u8017\u5c11\u91cf\u71c3\u6599\u7684\u4f18\u96c5\u65b9\u5f0f\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u4e8b\u4ef6\u65e5\u5fd7\u6709\u52a9\u4e8e\u8ba9\u5176\u4ed6\u4eba\u4e0d\u5fc5\u5355\u72ec\u67e5\u8be2\u5177\u4f53\u7684\u5408\u7ea6\u4ee3\u7801\u5c31\u80fd\u77e5\u9053\u53d1\u751f\u4e86\u4ec0\u4e48\u4e8b\u60c5\u3002 \n \u6709\u5173\u6b64\u4e3b\u9898\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u9605\u8bfb \u672c\u6587  (https://medium.com/mycrypto/understanding-event-logs-on-the-ethereum-blockchain-f4ae7ba50378) \u3002 \n \u6ce8\u610f\uff1a\u6211\u4eec\u7684\u4e3b\u9898\u7d22\u5f15\u662f\u4ece1\u5f00\u59cb\u8ba1\u6570\u7684\uff0c\u6240\u4ee5 topic0 \u663e\u793a\u4e3a topic1 \uff0c topic1 \u663e\u793a\u4e3a topic2 \uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \n \n \n \n \u5b57\u6bb5\u540d\u79f0 \n \u6570\u636e\u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n block_hash \n string \n \u5f53\u524d\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n block_number \n int8 \n \u533a\u5757\u94fe\u7684\u957f\u5ea6\uff08\u4ee5\u533a\u5757\u6570\u4e3a\u5355\u4f4d\uff09 \n \n \n block_time \n timestamptz \n \u5305\u542b\u6b64\u4e8b\u4ef6\u65e5\u5fd7\u7684\u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n contract_address \n string \n \u53d1\u51fa\u5f53\u524d\u4e8b\u4ef6\u65e5\u5fd7\u7684\u5408\u7ea6\u5730\u5740 \n \n \n topic1 \n string \n \u4e8b\u4ef6\u58f0\u660e\u5b57\u7b26\u4e32\u5e73\u5c55\u540e\u7684keccak256\u54c8\u5e0c\u503c \n \n \n topic2 \n string \n \u4e8b\u4ef6\u7684\u7d22\u5f15\u4e3b\u98981 \n \n \n topic3 \n string \n \u4e8b\u4ef6\u7684\u7d22\u5f15\u4e3b\u98982 \n \n \n topic4 \n string \n \u4e8b\u4ef6\u7684\u7d22\u5f15\u4e3b\u98983 \n \n \n data \n string \n \u5305\u542b\u6709\u5173\u4e8b\u4ef6\u7684\u66f4\u591a\u4fe1\u606f\u7684\u672a\u7d22\u5f15\u6570\u636e \n \n \n tx_hash \n string \n \u4ea7\u751f\u6b64\u4e8b\u4ef6\u65e5\u5fd7\u7684\u4ea4\u6613\u7684\u54c8\u5e0c\u503c \n \n \n index \n numeric \n \u4e8b\u4ef6\u65e5\u5fd7\u5728\u88ab\u8bb0\u5f55\u7684\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e\uff08\u6309\u6267\u884c\u987a\u5e8f\u6392\u5e8f\u7684\u7d2f\u8ba1\u65e5\u5fd7\u6570\u91cf\uff09 \n \n \n tx_index \n numeric \n \u4e8b\u4ef6\u65e5\u5fd7\u5f52\u5c5e\u7684\u4ea4\u6613\u5728\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e\uff08\u6309\u6267\u884c\u987a\u5e8f\u6392\u5e8f\u7684\u7d2f\u8ba1\u4ea4\u6613\u6570\u91cf\uff09", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/bnb-chain-bsc/event-logs/#bnblogs"}
{"content": "\u533a\u5757\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/bnb-chain-bsc/blocks/#_1"}
{"content": "bnb.blocks \u00b6 \n \u533a\u5757\u662f\u533a\u5757\u94fe\u548c\u6c47\u603b\uff08rollups\uff09\u7684\u6784\u5efa\u7ec4\u4ef6\u3002\u4e00\u4e2a\u533a\u5757\u5305\u542b\u5c06\u9010\u6e10\u6539\u53d8EVM\u7cfb\u7edf\u72b6\u6001\u7684\u591a\u4e2a\u4ea4\u6613\u3002\u533a\u5757\u5185\u7684\u4ea4\u6613\u53ea\u80fd\u4e00\u4e2a\u63a5\u4e00\u4e2a\u5730\u6267\u884c\uff0c\u4e0d\u80fd\u5e76\u884c\u6267\u884c\u3002 \n \n \n \n \u5b57\u6bb5\u540d\u79f0 \n \u6570\u636e\u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n time \n timestamptz \n \u5f53\u524d\u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n number \n numeric \n \u533a\u5757\u94fe\u7684\u957f\u5ea6\uff08\u4ee5\u533a\u5757\u6570\u4e3a\u5355\u4f4d\uff09 \n \n \n hash \n string \n \u5f53\u524d\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n parent hash \n string \n \u524d\u4e00\u4e2a\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n gas_limit \n numeric \n \u5f53\u524d\u533a\u5757\u7684\u71c3\u6599\u9650\u5236 \n \n \n gas_used \n numeric \n \u5f53\u524d\u533a\u5757\u6d88\u8017\u7684\u71c3\u6599\u6570\u91cf \n \n \n miner \n string \n \u77ff\u5de5\u7684\u5730\u5740 \n \n \n difficulty \n numeric \n \u96be\u5ea6\u503c\uff0c\u5373\u5f00\u91c7\u5f53\u524d\u533a\u5757\u6240\u9700\u7684\u52aa\u529b \n \n \n total_difficulty \n numeric \n \u533a\u5757\u94fe\u5230\u5f53\u524d\u533a\u5757\u4e3a\u6b62\u7684\u603b\u96be\u5ea6\u503c \n \n \n nonce \n string \n \u533a\u5757\u968f\u673a\u6570\uff0c\u7528\u4e8e\u5c55\u793a\u6316\u77ff\u8fc7\u7a0b\u4e2d\u7684\u5de5\u4f5c\u91cf\u8bc1\u660e \n \n \n size \n numeric \n \u533a\u5757\u7684\u5927\u5c0f\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\uff0c\u53d7\u672c\u533a\u5757\u71c3\u6599\u9650\u5236\u7684\u7ea6\u675f \n \n \n base_fee_per_gas \n numeric \n N/A", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/bnb-chain-bsc/blocks/#bnbblocks"}
{"content": "BNB Chain (BSC) \u00b6 \n BNB\u94fe\uff08\u539f\u5e01\u5b89\u667a\u80fd\u94fe\uff0cBSC\uff09\u662f\u4ee5\u592a\u574a\u865a\u62df\u673a\u7684\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u7531\u6765\u81ea\u6d41\u884c\u7684\u52a0\u5bc6\u4ea4\u6613\u6240[Binance]\uff08https://binance.com\uff09\u7684\u56e2\u961f\u6784\u5efa\u548c\u7ef4\u62a4\u3002BNB\u94fe\u9075\u5faa\u4ee5\u592a\u574a\u4e3b\u7f51\u7684\u5927\u90e8\u5206\u89c4\u5219\uff0c\u4f46\u5c1a\u672a\u5b9e\u73b0 EIP1559\u3002\u76f8\u53cd\uff0c\u5b83\u4f9d\u8d56 BEP-95  (https://github.com/bnb-chain/BEPs/blob/master/BEP95.md) \u6765\u71c3\u70e7\u5e73\u53f0\u4f7f\u7528\u671f\u95f4\u6240\u4ea7\u751f\u7684\u8d39\u7528\u3002\u6b64\u5916\uff0c\u6bcf\u4e2a\u533a\u5757\u7684\u71c3\u6599\u9650\u5236\u8bbe\u7f6e\u4e3a100 mio\uff0c\u4ece\u800c\u53ef\u4ee5\u5728\u7ed9\u5b9a\u533a\u5757\u4e2d\u5904\u7406\u66f4\u591a\u4ea4\u6613\u3002\u4ea4\u6613\u8d39\u7528\u4ee5 \u800c \u4e0d \u662f \u800c \u4e0d \u662f B N B \u800c \u4e0d \u662f ETH\u652f\u4ed8\u3002 \n \u60a8\u53ef\u4ee5\u5728 \u8fd9\u4efd\u6587\u6863  (https://docs.bnbchain.org/docs/bnbIntro) \u4e2d\u9605\u8bfb\u6709\u5173BNB\u94fe\u7684\u66f4\u591a\u4fe1\u606f\u3002 \n \u8fd9\u610f\u5473\u7740\u5728Dune\u4e0a\u9664\u4e86\u4fdd\u5b58EIP1559\u4ea4\u6613\u7684\u71c3\u6599\u6570\u636e\u7684\u5b57\u6bb5\u4fdd\u6301\u7a7a\u767d\u5916\uff0c\u5176\u4ed6\u7684\u4e00\u5207\u90fd\u76f8\u540c\u3002 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/bnb-chain-bsc/#bnb-chain-bsc"}
{"content": "\u539f\u59cb\u6570\u636e\u8868 \u00b6 \n \n \n \u533a\u5757\u8868\uff08Blocks\uff09  (blocks/) \n \u4ea4\u6613\u8868\uff08Transactions\uff09  (transactions/) \n \u4e8b\u4ef6\u65e5\u5fd7\u8868\uff08Logs\uff09  (event-logs/) \n \u5185\u90e8\u5408\u7ea6\u8c03\u7528\u8868\uff08Traces\uff09  (traces/)", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/bnb-chain-bsc/#_1"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/polygon/event-logs.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/polygon/event-logs/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/spellbook/getting-started/index.md) \n \u9b54\u6cd5\u4e66\u5165\u95e8 \n Spellbook \u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u5728 Dune \u7684\u6570\u636e\u5e73\u53f0\u4e0a\u8fd0\u884c\u7684 DBT \u9879\u76ee\u3002 \n \u5728\u9ad8\u6c34\u5e73\u4e0a\uff0c\u60a8\u9700\u8981\u5728\u672c\u5730\u8bbe\u7f6e\u6211\u4eec\u7684 DBT \u9879\u76ee\uff0c\u7528 Jinja-templated \u7684 SQL \u7814\u53d1\u4e00\u4e2a\u9b54\u6cd5\uff0c\u5e76\u8ba9\u5b83\u5728\u6211\u4eec\u7684\u6570\u636e\u5e73\u53f0\u4e0a\u8fd0\u884c\u3002 \n \u9996\u5148\uff0c\u514b\u9686 \u9b54\u6cd5\u4e66  (https://github.com/duneanalytics/spellbook/) \u8d44\u6e90\u5e93\uff0c\u5e76\u6309\u7167 README \u8bbe\u7f6e\u60a8\u7684\u672c\u5730\u5f00\u53d1\u73af\u5883\u3002 \n \u51b3\u5b9a\u60a8\u8981\u89e3\u51b3\u4ec0\u4e48\u95ee\u9898\u3002\u601d\u8003\u4e00\u4e0b \u6570\u636e\u6a21\u578b  (data-modelling/) \u3002 \n \u5199\u4e0b\u60a8\u7684\u9b54\u6cd5\u3002\u81f3\u5c11\uff0c\u60a8\u5c06\u9700\u8981\uff1a \n \n \u5f15\u7528\u60a8\u7684 \u6570\u636e\u6e90  (data-sources/) \uff0c\u5305\u62ec\u6d4b\u8bd5\u548c\u65b0\u9c9c\u5ea6\u68c0\u67e5 \n \u4e3a\u60a8\u7684\u9b54\u6cd5\u5b9a\u4e49\u4e00\u4e2a\u5355\u5143 \u6d4b\u8bd5  (tests/) \n \u7528 Jinja templating \u7684 SQL select \u8bed\u53e5 \u5199\u4e0b\u60a8\u7684\u9b54\u6cd5  (spells/) \n \u5728\u5355\u72ec\u7684\u4e00\u4e2a YAML \u6587\u4ef6\u4e2d\u5199\u4e0b\u4e00\u4e2a\u67b6\u6784 \n \n \u8981\u4e86\u89e3\u66f4\u591a\u5173\u4e8e DBT \u7684\u6240\u6709\u529f\u80fd\uff0c\u8bf7\u770b\u4ed6\u4eec\u7684 \u6587\u6863  (https://docs.getdbt.com/docs/introduction) \u3002\u6211\u4eec\u5df2\u7ecf\u5199\u4e86\u4e00\u4e9b\u6307\u5357 \u4f8b\u5b50  (../examples/) \uff0c\u7528\u4e8e\u521b\u5efa ERC20 \u7684\u9b54\u6cd5\u3002 \n \n Tip \n \u5728\u60a8\u8fdb\u884c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528  dbt compile  \u6765\u751f\u6210\u4e00\u4e2a SQL \u8bed\u53e5\uff0c\u5e76\u5728 dune.com \u7684\u67e5\u8be2\u7f16\u8f91\u5668\u4e2d\u5bf9\u5176\u8fdb\u884c\u9a8c\u8bc1\u3002 \n \n \u4e00\u65e6\u60a8\u5bf9\u60a8\u7684\u9b54\u6cd5\u611f\u5230\u6ee1\u610f\uff0c\u60a8\u5c31\u53ef\u4ee5 \u63d0\u4ea4\u7ed9 Dune  (submissions/) \uff1a \n \n \u5206\u53c9\u9b54\u6cd5\u4e66\u8d44\u6e90\u5e93\u5e76\u63d0\u4ea4\u4e00\u4e2a pull request \n \u6807\u8bb0 duneanalytics/data-experience\uff0c\u5e76\u5199\u4e0b\u60a8\u7684\u9b54\u6cd5\u7684\u7b80\u77ed\u63cf\u8ff0 \n \u60a8\u7684 PR \u5c06\u89e6\u53d1\u5728\u6682\u5b58\u6570\u636e\u5e93\u4e2d\u521b\u5efa\u60a8\u7684\u9b54\u6cd5\uff0c\u5e76\u8fd0\u884c\u6d4b\u8bd5 \n \u5982\u679c\u4e00\u5207\u987a\u5229\uff0cDune \u5c06\u5408\u5e76\u60a8\u7684\u4fee\u6539\uff0c\u5e76\u5c06\u5176\u90e8\u7f72\u5230\u751f\u4ea7\u4e2d \n \n \u4e4b\u540e\uff0c\u60a8\u7684\u9b54\u6cd5\u5c06\u4f1a\u5728 dune.com \u91cc\u9762\u7684 \"Spells\"\uff08\u9b54\u6cd5\uff09\u91cc\u53ef\u89c1\u3002LFG\uff01 \n ", "url": "https://dune.com/docs/zh/spellbook/getting-started/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/spellbook/spellbook-model-docs.md) \n Spellbook model docs \n \u9b54\u6cd5\u4e66\u914d\u6709\u4e13\u95e8\u7684 dbt \u6587\u6863\uff0c\u4ee5\u5e2e\u52a9\u60a8\u6d4f\u89c8\u5176\u4e2d\u7684\u6570\u636e! \u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\u5b83\uff1a \n \n \n \u9b54\u6cd5\u4e66\u6a21\u578b\u6587\u6863  (https://dune.com/spellbook) \n \n \n \u8fd9\u4e9b\u5185\u5bb9\u548c  V2\u7684\u8868\u6570\u636e\u6587\u6863  (../../tables/v2/raw/) \u5f88\u7c7b\u4f3c\uff0c\u4e0d\u8fc7\u6709\u4e00\u4e9b\u7279\u6b8a\u7684\u529f\u80fd\u3002 \n \n Warning \n \n \u8fd9\u4e9b\u9b54\u6cd5\u4e66\u6587\u6863\u548c\u9b54\u6cd5\u4e66\u6570\u636e\u6e56\uff08lake\uff09\u662f\u4e00\u9879\u6b63\u5728\u8fdb\u884c\u7684\u5de5\u4f5c\u3002\u5982\u679c\u60a8\u65e0\u6cd5\u627e\u5230\u4e00\u4e2a\u7279\u5b9a\u7684 V2 \u8868/\u5217\uff0c\u5b83\u5f88\u53ef\u80fd\u8fd8\u6ca1\u6709\u51c6\u5907\u597d\u5728\u9b54\u6cd5\u4e66\u4e2d\u4f7f\u7528\u3002\u5982\u679c\u60a8\u627e\u5230\u4e86\u5b83\uff0c\u4f46\u5b83\u5728\u9b54\u6cd5\u4e66\u6a21\u578b\u6587\u6863\u4e2d\u8fd8\u6ca1\u6709\u5b8c\u6574\u7684\u6807\u7b7e\uff0c\u8bf7\u67e5\u770b\u6211\u4eec\u7684  V2 \u6570\u636e\u8868\u6587\u6863  (../../tables/v2/raw/) \u3002\u5982\u679c\u60a8\u4ecd\u7136\u6709\u95ee\u9898\uff0c\u8bf7\u5728  #data-tables Discord \u9891\u9053  (https://discord.com/channels/757637422384283659/757893948428517376) \u63d0\u51fa\u6765\u3002 \n \n ", "url": "https://dune.com/docs/zh/spellbook/spellbook-model-docs/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/spellbook/index.md) \n \u9b54\u6cd5\u4e66 \n \u9b54\u6cd5\u4e66  (http://github.com/duneanalytics/spellbook) \uff08Spellbook\uff09\u662f\u4e00\u4e2a\u7531 Dune \u793e\u533a\u5171\u540c\u5efa\u8bbe\u7684\u6570\u636e\u8f6c\u6362\u5c42\u3002 \n \u9b54\u6cd5\uff08Spell\uff09\u53ef\u4ee5\u7528\u6765\u6784\u5efa\u9ad8\u7ea7\u62bd\u8c61\u8868\u683c\uff0c\u9b54\u6cd5\u53ef\u4ee5\u7528\u6765\u67e5\u8be2\u8bf8\u5982 NFT \u4ea4\u6613\u8868\u7b49\u5e38\u7528\u6982\u5ff5\u6570\u636e\u3002\u60a8\u53ef\u4ee5\u7528 SQL \u6765\u7f16\u5199\u9b54\u6cd5\uff0c\u5e76\u4f7f\u7528  Jinja2  (https://jinja.palletsprojects.com/) \uff08\u4e00\u79cd Python \u6a21\u677f\u8bed\u8a00\uff09\u8fdb\u884c\u5305\u88c5\u3002 \n \u9b54\u6cd5\u4e66\u9879\u76ee\u53ef\u81ea\u52a8\u6784\u5efa\u5e76\u7ef4\u62a4\u8fd9\u4e9b\u8868\u683c\uff0c\u4e14\u5bf9\u5176\u6570\u636e\u8d28\u91cf\u8fdb\u884c\u68c0\u6d4b\u3002 \u6211\u4eec\u793e\u533a\u4e2d\u7684\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u8d21\u732e\u9b54\u6cd5\u4e66\u4e2d\u7684\u9b54\u6cd5\uff0c\u65e0\u8bba\u662f\u6dfb\u52a0\u65b0\u7684\u4ea4\u6613\u6570\u636e\u67e5\u8be2\u6216\u662f\u7f16\u5199\u5168\u65b0\u7684\u9b54\u6cd5\u3002 \n \n Note \n \u9b54\u6cd5\u4e66\u76ee\u524d\u4ec5\u5728\u6211\u4eec\u7684 Dune V2 \u5f15\u64ce\u4e0a\u53ef\u7528\u3002\u6709\u5173 Dune V1 \u5f15\u64ce\u4e2d\u7684\u6570\u636e\u62bd\u8c61\uff0c\u8bf7\u53c2\u9605 \u6570\u636e\u62bd\u8c61  (../reference/tables/v1/abstractions/) \u3002 \n \n ", "url": "https://dune.com/docs/zh/spellbook/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/press-kit.md) \n ", "url": "https://dune.com/docs/zh/reference/press-kit/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#wizard-content) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/recommended-reading.md) \n \u63a8\u8350\u9605\u8bfb\u8d44\u6599 \n Here are a few reading resources to help you in your web3 data analytics journey! \n Have a resource you think we should include?  Propose your changes here  (https://github.com/duneanalytics/docs/edit/master/docs/resources/recommended-reading.md) ! \n ", "url": "https://dune.com/docs/zh/reference/recommended-reading/"}
{"content": "\u793e\u533a\u8868 \u00b6 \n \u867d\u7136\u533a\u5757\u94fe\u6570\u94fe\u4e0a\u636e\u5f88\u9177\uff0c\u6211\u4eec\u4e5f\u5728\u5c3d\u6700\u5927\u52aa\u529b\u53bb\u5904\u7406\u3001\u89c4\u8303\u548c\u4f7f\u7528\u8fd9\u4e9b\u6570\u636e\uff0c\u4f46\u6709\u65f6\u4e5f\u9700\u8981\u4e00\u70b9\u94fe\u4e0b\u6570\u636e\u6216\u62d3\u5c55\u7684\u94fe\u4e0a\u6570\u636e\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5f00\u59cb\u4e0e\u7279\u5b9a\u7684\u7ec4\u7ec7\u5408\u4f5c\uff0c\u5c06\u5176\u6570\u636e\u76f4\u63a5\u63a5\u5165Dune\u3002 \n \u6211\u4eec\u4ecd\u5728\u63a8\u8fdb\u8fd9\u9879\u57fa\u7840\u8bbe\u65bd\u5de5\u4f5c\uff0c\u76ee\u524d\u8fd8\u4e0d\u80fd\u652f\u6301\u975e\u5e38\u591a\u7684\u6570\u636e\u96c6\u3002 \n \n \n Flashbots  (flashbots/) \n Reservoir  (reservoir/)", "url": "https://dune.com/docs/zh/reference/tables/v2/community/#_1"}
{"content": "ERC721 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/spells/special-tables/erc721/#erc721"}
{"content": "ERC721\u5b9a\u4e49 \u00b6 \n ERC721\u4ee3\u5e01\u6807\u51c6\u662f\u7528\u4e8e\u6240\u6709EVM\u533a\u5757\u94fe\u4e0a\u7684\u975e\u540c\u8d28\u5316\u8d44\u4ea7\u7684\u4ee3\u5e01\u6807\u51c6\u3002ERC721\u53ef\u4ee5\u4ee3\u8868\u6570\u5b57\u827a\u672f\u3001\u623f\u5c4b\u5951\u7ea6\u3001\u4fdd\u9669\u5355\uff0c\u751a\u81f3\u662funiswap V3\u6d41\u52a8\u6027\u5934\u5bf8\u3002\u6240\u6709\u8fd9\u4e9b\u4e8b\u7269\u7684\u5171\u540c\u5c5e\u6027\u662f\u5b83\u4eec\u662f\u975e\u540c\u8d28\u5316\u7684\uff0c\u56e0\u6b64\u4e5f\u662f\u72ec\u4e00\u65e0\u4e8c\u7684\u3002 \n ERC721\u4ee3\u5e01\u5c06  contract_address  \u548c  tokenId  \u7684\u4f5c\u4e3a\u552f\u4e00\u6807\u8bc6\u3002 \n \u6bcf\u4e2a\u667a\u80fd\u5408\u7ea6\u4e2d\u540c\u4e00\u4e2a\u201ctokenId\u201d\u53ea\u80fd\u51fa\u73b01\u6b21\u3002\u8be5\u63a5\u53e3\u7684\u4e00\u4e2a\u53ef\u9009\u529f\u80fd\u662f\u201ctokenURI\u201d\u5c5e\u6027\uff0c\u8fd9\u91cc\u8fb9\u5b58\u50a8\u4e86\u8be5\u667a\u80fd\u5408\u7ea6\u4e2d\u201ctokenId\u201d\u76f8\u5173\u7684\u591a\u5a92\u4f53\u5185\u5bb9\u3002 \u8fd9\u4e3b\u8981\u662f\u6307\u5411\u53bb\u4e2d\u5fc3\u5316\u5b58\u50a8\u89e3\u51b3\u65b9\u6848\u7684\u94fe\u63a5\uff0c\u4f8b\u5982  ifps  (https://ipfs.io) \u3002 \n \u56e0\u4e3a\u4e5f\u662f\u53d7\u4e86ERC20\u4ee3\u5e01\u6807\u51c6\u7684\u5f71\u54cd\uff0cERC721\u6807\u51c6\u4e2d\u4e5f\u5305\u542b\u8bb8\u591a\u4e0e\u4e4b\u7c7b\u4f3c\u7684\u529f\u80fd\uff0c\u4f46\u7531\u4e8e\u589e\u52a0\u4e86  tokenId  \u7684\u590d\u6742\u6027\uff0c\u5b83\u4e5f\u786e\u5b9e\u6269\u5c55\u4e86\u5176\u4ed6\u529f\u80fd ****\u3002 \n Methods \n  (#__codelineno-0-1)      function   balanceOf ( address   _owner )   external   view   returns   ( uint256 );   \n  (#__codelineno-0-2)      /* \u8fd4\u56de\u6240\u6709\u8005\u5730\u5740\u5305\u542b\u7684\u4ee3\u5e01\u6570\u91cf */ \n  (#__codelineno-0-3)      function   ownerOf ( uint256   _tokenId )   external   view   returns   ( address ); \n  (#__codelineno-0-4)      /* \u8fd4\u56deNFT\u7684\u6301\u6709\u8005,\u901a\u8fc7tokenId\u552f\u4e00\u6807\u8bc6*/ \n  (#__codelineno-0-5)      function   safeTransferFrom ( address   _from ,   address   _to ,   uint256   _tokenId )   external   payable ; \n  (#__codelineno-0-6)      /* \u5c06\u67d0\u4e2a\u4ee3\u5e01\u4ece\u53d1\u9001\u65b9\u8f6c\u79fb\u5230\u63a5\u6536\u65b9 */ \n  (#__codelineno-0-7)      function   transferFrom ( address   _from ,   address   _to ,   uint256   _tokenId )   external   payable ; \n  (#__codelineno-0-8)      /* \u5c06\u67d0\u4e2a\u4ee3\u5e01\u4ece\u53d1\u9001\u65b9\u8f6c\u79fb\u5230\u63a5\u6536\u65b9*/ \n  (#__codelineno-0-9)      function   approve ( address   _approved ,   uint256   _tokenId )   external   payable ; \n  (#__codelineno-0-10)      /* \u7528\u4e8e\u6279\u51c6\u67d0\u4e2a\u5730\u5740\u8f6c\u79fb\u4e00\u4e2a\u7279\u5b9a\u7684tokenID */ \n  (#__codelineno-0-11)      function   setApprovalForAll ( address   _operator ,   bool   _approved )   external ; \n  (#__codelineno-0-12)      /* \u7528\u4e8e\u6279\u51c6\u67d0\u4e2a\u5730\u5740\u8f6c\u79fb\u4efb\u610f\u7684tokenID */ \n  (#__codelineno-0-13)      function   getApproved ( uint256   _tokenId )   external   view   returns   ( address ); \n  (#__codelineno-0-14)      /* \u8fd4\u56de\u5f53\u524d\u80fd\u591f\u8f6c\u79fb\u6b64Token\u7684\u5730\u5740\u3002\u4e00\u6b21\u53ea\u80fd\u6fc0\u6d3b\u4e00\u4e2a*/ \n  (#__codelineno-0-15)      function   isApprovedForAll ( address   _owner ,   address   _operator )   external   view   returns   ( bool ); \n  (#__codelineno-0-16)      /* \u8fd4\u56de\u6267\u884c\u65b9\u662f\u5426\u5f97\u5230\u76f8\u5173\u4ee3\u5e01\u6240\u6709\u4eba\u7684\u8ba4\u53ef */ \n \n Events \n  (#__codelineno-1-1)   event   Transfer ( address   _from ,   address   _to ,   uint256   _tokenId ); \n  (#__codelineno-1-2)   /* Token\u6210\u529f\u8f6c\u79fb\u7684\u65f6\u5019\u53d1\u51fa\uff0c\u6bcf\u6b21\u53ea\u5305\u542b1\u4e2a\u5355\u4f4d*/ \n  (#__codelineno-1-3)   event   Approval ( address   _owner ,   address   _approved ,   uint256   _tokenId ); \n  (#__codelineno-1-4)   /* \u5728\u6267\u884c\u65b9\u6279\u51c6\u7279\u5b9aTokenId\u7684\u65f6\u5019\u53d1\u51fa */ \n  (#__codelineno-1-5)   event   ApprovalForAll ( address   indexed   _owner ,   address   indexed   _operator ,   bool   _approved ); \n  (#__codelineno-1-6)   /* \u5728\u6267\u884c\u65b9\u6279\u51c6\u6240\u6709TokenId\u7684\u65f6\u5019\u53d1\u51fa */ \n \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/spells/special-tables/erc721/#erc721_1"}
{"content": "Tables in Dune \u00b6 \n \u5728Dune\u4e2d\uff0c\u6211\u4eec\u5c06\u6240\u6709\u6765\u81ea\u667a\u80fd\u5408\u7ea6\u7684\u6240\u6709 erc721 \u8f6c\u79fb\u4e8b\u4ef6\u89e3\u7801\u5230  erc721_blockchain.ERC721_evt_Transfer  \u8868\u4e2d\u3002 \n erc721_blockchain.ERC721 _evt_Transfer \u00b6  (#erc721_blockchainerc721_evt_transfer) \n \u8fd9\u662f\u5728ERC721\u667a\u80fd\u5408\u7ea6\u4e2d\u6210\u529f\u8f6c\u79fb\u4ee3\u5e01\u65f6\u53d1\u51fa\u7684\u4e8b\u4ef6\u3002\u5b83\u53ef\u4ee5\u901a\u8fc7  safeTransferFrom  \u6216  transferFrom  \u51fd\u6570\u89e6\u53d1\u3002 \n \n \n \n from \n string \n the sender of the  ERC721  token \n \n \n \n \n to \n string \n ERC721 \u4ee3\u5e01\u7684\u63a5\u53d7\u8005 \n \n \n tokenID \n numeric \n NFT\u7684Token ID \n \n \n contract_address \n string \n ERC721 \u4ee3\u5e01\u7684\u667a\u80fd\u5408\u7ea6\u5730\u5740 \n \n \n evt_tx_hash \n string \n \u5305\u542b\u8fd9\u4e2a\u8f6c\u79fb\u4ee3\u5e01\u4e8b\u4ef6log\u7684transaction\u54c8\u5e0c \n \n \n evt_index \n numeric \n \u5728\u533a\u5757\u65e5\u5fd7\u7d22\u5f15\u4e2d\u7684\u4f4d\u7f6e (\u6309\u7167\u6267\u884c\u987a\u5e8f\u7d2f\u52a0) \n \n \n evt_block_time \n timestamptz \n \u5305\u542b\u8fd9\u4e2a\u65e5\u5fd7\u7684\u533a\u5757\u88ab\u6316\u51fa\u7684\u65f6\u95f4 \n \n \n evt_block_number \n int8 \n \u5305\u542b\u8fd9\u4e2a\u65e5\u5fd7\u7684\u533a\u5757\u7684\u533a\u5757\u9ad8\u5ea6 \n \n \n \n erc721_blockchain.ERC721_evt_Approval \u00b6  (#erc721_blockchainerc721_evt_approval) \n \u8fd9\u662f\u5728\u6210\u529f\u8c03\u7528  approve  \u51fd\u6570\u65f6\u89e6\u53d1\u7684\u4e8b\u4ef6\u3002 \n \n \n \n owner \n string \n the address which gives permission to move this token \n \n \n \n \n approved \n string \n \u53ef\u4ee5\u8f6c\u79fb\u8fd9\u4e2a tokenId \u7684\u88ab\u6388\u6743\u65b9\u7684\u5730\u5740 \n \n \n tokenId \n numeric \n ERC721 \u4ee3\u5e01\u7684  tokenId \n \n \n contract_address \n string \n ERC721 \u4ee3\u5e01\u7684\u667a\u80fd\u5408\u7ea6\u5730\u5740 \n \n \n evt_tx_hash \n string \n \u5305\u542b\u8fd9\u4e2a\u8f6c\u79fb\u4ee3\u5e01\u4e8b\u4ef6log\u7684transaction\u54c8\u5e0c \n \n \n evt_index \n bigint \n \u5728\u533a\u5757\u65e5\u5fd7\u7d22\u5f15\u4e2d\u7684\u4f4d\u7f6e (\u6309\u7167\u6267\u884c\u987a\u5e8f\u7d2f\u52a0 \n \n \n evt_block_time \n timestamp with time zone \n \u5305\u542b\u8fd9\u4e2a\u65e5\u5fd7\u7684\u533a\u5757\u88ab\u6316\u51fa\u7684\u65f6\u95f4 \n \n \n evt_block_number \n bigint \n \u5305\u542b\u8fd9\u4e2a\u65e5\u5fd7\u7684\u533a\u5757\u7684\u533a\u5757\u9ad8\u5ea6", "url": "https://dune.com/docs/zh/reference/tables/v2/spells/special-tables/erc721/#tables-in-dune"}
{"content": "ERC20 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/spells/special-tables/erc20/#erc20"}
{"content": "ERC20\u5b9a\u4e49 \u00b6 \n ERC20\u6807\u51c6\u662f\u7528\u4e8e\u6240\u6709EVM\u533a\u5757\u94fe\u4e0a\u7684\u540c\u8d28\u5316\u4ee3\u5e01\u7684\u4ee3\u5e01\u6807\u51c6\u3002ERC20\u53ef\u4ee5\u4ee3\u8868\u4efb\u4f55\u4e1c\u897f\uff0c\u4ece\u795e\u5947\u7684\u4e92\u8054\u7f51\u79ef\u5206\u5230\u7f8e\u5143\u518d\u5230\u9ec4\u91d1\u4ee3\u5e01\u3002 \n ERC-20\u6807\u51c6\u7531Fabian Vogelsteller\u4e8e2015\u5e7411\u6708\u63d0\u51fa\uff0c\u5b83\u4ee3\u8868\u4e86\u7b2c\u4e00\u4e2a\u5728\u667a\u80fd\u5408\u7ea6\u4e2d\u5b9e\u73b0\u4ee3\u5e01API\u7684\u4ee3\u5e01\u6807\u51c6\u3002\u8fd9\u79cd\u667a\u80fd\u5408\u7ea6\u7684\u6807\u51c6\u5316\u89e3\u51b3\u4e86\u4e0e\u533a\u5757\u94fe\u4e0a\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u7684\u4e92\u64cd\u4f5c\u6027\u95ee\u9898\u3002 \u7531\u4e8e\u6240\u6709\u4ee3\u5e01\u5171\u4eab\u76f8\u540c\u7684\u63a5\u53e3\uff0c\u5176\u4ed6\u667a\u80fd\u5408\u7ea6\u53ef\u4ee5\u8f7b\u677e\u5730\u4e0e\u5b83\u4eec\u4ea4\u4e92\u3002 \n \u5305\u542bERC-20\u4ee3\u5e01\u6807\u51c6\u7684\u667a\u80fd\u5408\u7ea6\u4e0d\u4ec5\u9650\u4e8e\u5177\u6709\u8fd9\u4e9b\u529f\u80fd\uff0c\u8fd8\u9700\u8981\u5305\u542b\u8fd9\u4e9b\u529f\u80fd\u624d\u80fd\u5728\u6807\u51c6\u8303\u56f4\u5185\u3002 \n \u60f3\u8981\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\uff0c\u53ef\u4ee5\u67e5\u770b  initial proposal  (https://eips.ethereum.org/EIPS/eip-20)  \u6216\u8005  ethereum.org documentation  (https://ethereum.org/en/developers/docs/standards/tokens/erc-20) . \n \u8bf7\u6ce8\u610f\uff0c\u5e01\u5b89\u667a\u80fd\u94fe\u9009\u62e9\u5c06ERC\u91cd\u547d\u540d\u4e3aBEP\uff0c\u4ece\u8868\u540d\u4e2d\u5c31\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a\u53d8\u5316\u3002 \n \u65b9\u6cd5 \n  (#__codelineno-0-1) function   name ()   public   view   returns   ( string )   \n  (#__codelineno-0-2) /* \u8fd4\u56deToken\u7684\u5168\u79f0 */ \n  (#__codelineno-0-3) function   symbol ()   public   view   returns   ( string )   \n  (#__codelineno-0-4) /* \u8fd4\u56deToken\u7684ticker*/ \n  (#__codelineno-0-5) function   decimals ()   public   view   returns   ( uint8 )   \n  (#__codelineno-0-6) /* \u8fd4\u56deToken\u7684\u7cbe\u5ea6 */ \n  (#__codelineno-0-7) function   totalSupply ()   public   view   returns   ( uint256 )   \n  (#__codelineno-0-8) /* \u8fd4\u56deToken\u5f53\u524d\u7684\u5faa\u73af\u4f9b\u5e94\u91cf */ \n  (#__codelineno-0-9) function   balanceOf ( address   _owner )   public   view   returns   ( uint256   balance )   \n  (#__codelineno-0-10) /* \u8fd4\u56de\u6307\u5b9a\u5730\u5740\u7684\u4f59\u989d */   \n  (#__codelineno-0-11) function   transfer ( address   _to ,   uint256   _value )   public   returns   ( bool   success )   \n  (#__codelineno-0-12) /* \u5c06\u6307\u5b9a\u6570\u91cf\u7684\u4ee3\u5e01\u8f6c\u79fb\u5230\u6307\u5b9a\u5730\u5740*/   \n  (#__codelineno-0-13) function   transferFrom ( address   _from ,   address   _to ,   uint256   _value )   public   returns   ( bool   success )   \n  (#__codelineno-0-14) /* \u5982\u679c\u5b58\u5728\u5f53\u9664\u53d1\u9001\u8005\u63a5\u53d7\u8005\u4e4b\u5916\u7684\u7b2c\u4e09\u4e2a\u5730\u5740\u6709\u6743\u9650\u5b8c\u6210\u8f6c\u8d26\uff0c\u8fd9\u4e2a\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528\u6b64\u65b9\u6cd5*/ \n  (#__codelineno-0-15) function   approve ( address   _spender ,   uint256   _value )   public   returns   ( bool   success )   \n  (#__codelineno-0-16) /* \u7528\u4e8e\u6388\u6743\u82b1\u8d39\u4ee3\u5e01\u7684\u6570\u91cf*/ \n  (#__codelineno-0-17) function   allowance ( address   _owner ,   address   _spender )   public   view   returns   ( uint256   remaining ) \n  (#__codelineno-0-18) /* \u8fd4\u56de\u5f53\u524d\u4ee3\u5e01\u6d88\u8017\u8005\u53ef\u4f7f\u7528\u7684\u5269\u4f59\u4ee3\u5e01\u6570\u91cf\uff08_value\uff09*/ \n \n \u4e8b\u4ef6 \n  (#__codelineno-1-1) event   Transfer ( address   indexed   _from ,   address   indexed   _to ,   uint256   _value ) \n  (#__codelineno-1-2) /* \u5728\u6210\u529f\u8f6c\u51fa\u4ee3\u5e01\u65f6\u53d1\u51fa*/ \n  (#__codelineno-1-3) event   Approval ( address   indexed   _owner ,   address   indexed   _spender ,   uint256   _value ) \n  (#__codelineno-1-4) /* \u5728\u7ed9\u67d0\u4e2a\u5730\u5740\u6210\u529f\u6388\u6743\u4e00\u5b9a\u6570\u91cf\u4ee3\u5e01\u7684\u65f6\u5019\u53d1\u51fa*/ \n \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/spells/special-tables/erc20/#erc20_1"}
{"content": "Dune\u4e0a\u7684\u8868 \u00b6 \n \u5728Dune\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528ERC20\u4ee3\u5e01\u6807\u51c6\u7684\u6240\u6709\u667a\u80fd\u5408\u7ea6\u4e2d\u7684\u6240\u6709\u4f20\u8f93\u4e8b\u4ef6\u89e3\u7801\u5230  erc20_blockchain.ERC20_evt_Transfer  \u8868\u4e2d\u3002\n\u6b64\u5916\uff0c\u6211\u4eec\u5c06\u6240\u6709Token\u6388\u6743\u4e8b\u4ef6\u89e3\u6790\u5230  erc20_blockchain.ERC20_evt_Approval  \u8868\u4e2d\u3002 \n erc20_blockchain.ERC20_evt_Transfer \u00b6  (#erc20_blockchainerc20_evt_transfer) \n \u8fd9\u662f\u5728ERC20\u667a\u80fd\u5408\u7ea6\u4e2d\u6210\u529f\u8f6c\u79fb\u4ee3\u5e01\u65f6\u53d1\u51fa\u7684\u4e8b\u4ef6\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528  transfer  \u6216  transferFrom  \u51fd\u6570\u6765\u89e6\u53d1\u3002 \n \n \n \n from \n string \n ERC20 \u4ee3\u5e01\u7684\u53d1\u9001\u8005 \n \n \n \n \n to \n string \n ERC20 \u4ee3\u5e01\u7684\u63a5\u6536\u8005 \n \n \n value \n numeric \n \u53d1\u9001\u7684\u201cERC20\u201d\u4ee3\u5e01\u6570\u91cf\u3002 \u8bf7\u6ce8\u610f\uff0c\u60a8\u5fc5\u987b\u5c06\u5176\u9664\u4ee5\u201cERC20\u201d\u4ee3\u5e01\u7684\u76f8\u5173\u7684\u7cbe\u5ea6\uff0c\u624d\u80fd\u5f97\u5230\u8be5\u4ee3\u5e01\u7684\u5e38\u7528\u9762\u989d\u3002 \n \n \n contract_address \n string \n ERC20 \u4ee3\u5e01\u7684\u667a\u80fd\u5408\u7ea6\u5730\u5740 \n \n \n evt_tx_hash \n string \n \u5305\u542b\u8fd9\u4e2a\u8f6c\u79fb\u4ee3\u5e01\u4e8b\u4ef6log\u7684transaction\u54c8\u5e0c \n \n \n evt_index \n numeric \n \u5728\u533a\u5757\u65e5\u5fd7\u7d22\u5f15\u4e2d\u7684\u4f4d\u7f6e (\u6309\u7167\u6267\u884c\u987a\u5e8f\u7d2f\u52a0) \n \n \n evt_block_time \n timestamptz \n \u5305\u542b\u8fd9\u4e2a\u65e5\u5fd7\u7684\u533a\u5757\u88ab\u6316\u51fa\u7684\u65f6\u95f4 \n \n \n evt_block_number \n int8 \n \u5305\u542b\u8fd9\u4e2a\u65e5\u5fd7\u7684\u533a\u5757\u7684\u533a\u5757\u9ad8\u5ea6 \n \n \n \n erc20_blockchain.ERC20_evt_Approval \n ERC20\u4ee3\u5e01\u53ef\u4ee5\u88ab\u5176\u4ed6\u667a\u80fd\u5408\u7ea6\u8f6c\u79fb\u3002 \u7528\u6237\u9700\u8981\u9996\u5148\u8c03\u7528  approve  \u51fd\u6570\uff0c\u6765\u6279\u51c6\u7c7b\u4f3c\u7684\u64cd\u4f5c\u3002\u4e8b\u52a1\u6210\u529f\u6267\u884c\u540e\u5c06\u53d1\u51fa Approval  \u4e8b\u4ef6\u3002 \n \n \n \n owner \n string \n the address giving the approval \n \n \n \n \n spender \n string \n \u88ab\u6279\u51c6\u8f6c\u79fb\u4ee3\u5e01\u7684\u5730\u5740 \n \n \n value \n numeric \n \u652f\u51fa\u9650\u989d \n \n \n contract_address \n string \n \u53ef\u88ab\u8f6c\u79fb\u7684ERC20\u4ee3\u5e01\u5730\u5740 \n \n \n evt_tx_hash \n string \n \u5305\u542b\u8fd9\u4e2a\u8f6c\u79fb\u4ee3\u5e01\u4e8b\u4ef6log\u7684transaction\u54c8\u5e0c \n \n \n evt_index \n bigint \n \u5728\u533a\u5757\u65e5\u5fd7\u7d22\u5f15\u4e2d\u7684\u4f4d\u7f6e (\u6309\u7167\u6267\u884c\u987a\u5e8f\u7d2f\u52a0) \n \n \n evt_block_time \n timestamp with time zone \n \u5305\u542b\u8fd9\u4e2a\u65e5\u5fd7\u7684\u533a\u5757\u88ab\u6316\u51fa\u7684\u65f6\u95f4 \n \n \n evt_block_number \n bigint \n \u5305\u542b\u8fd9\u4e2a\u65e5\u5fd7\u7684\u533a\u5757\u7684\u533a\u5757\u9ad8\u5ea6", "url": "https://dune.com/docs/zh/reference/tables/v2/spells/special-tables/erc20/#dune"}
{"content": "ERC1155 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/spells/special-tables/erc1155/#erc1155"}
{"content": "ERC1155 \u5b9a\u4e49 \u00b6 \n ERC1155\u6807\u51c6\u662f\u4e00\u4e2a\u591a\u4ee3\u5e01\u6807\u51c6\u3002\u5b83\u53ef\u4ee5\u5305\u62ec\u540c\u8d28\u5316\u548c\u975e\u540c\u8d28\u5316\u4ee3\u5e01\u7684\u4efb\u610f\u7ec4\u5408\uff0c\u56e0\u6b64ERC1155\u53ef\u88ab\u7528\u4e8e\u5e7f\u6cdb\u7684\u4f7f\u7528\u573a\u666f\u3002\u76ee\u524d\uff0cERC1155\u667a\u80fd\u5408\u7ea6\u6700\u5e38\u89c1\u7684\u4f7f\u7528\u573a\u666f\u662f\u6e38\u620f\u4e2d\u7684\u7269\u54c1\u548c\u8d27\u5e01\u3001\u6570\u5b57\u6536\u85cf\u54c1\u3001\u827a\u672f\u54c1\u548c\u4f1a\u5458\u901a\u884c\u8bc1\u3002\u56e0\u4e3a\u4ed6\u4eec\u5c06ERC20\u548cERC721\u4ee3\u5e01\u7684\u6240\u6709\u5c5e\u6027\u96c6\u4e2d\u5728\u4e86\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6\uff0c\u56e0\u6b64\u5b83\u4eec\u786e\u5b9e\u53ef\u4ee5\u5728\u975e\u5e38\u591a\u7684\u573a\u666f\u4e2d\u4f7f\u7528\u3002\u5bf9\u4e8e\u67d0\u4e2a\u9879\u76ee\u4e2d\u53ef\u80fd\u5b58\u5728\u7684\u6240\u6709\u7c7b\u578b\u7684\u4ee3\u5e01\u7684\u573a\u666f\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528\u5355\u4e2a\u667a\u80fd\u5408\u7ea6\uff0c\u8fd9\u4f1a\u5f88\u5927\u7a0b\u5ea6\u4e0a\u8282\u7701\u4f7f\u7528\u65f6\u7684gas\u4ee5\u53ca\u90e8\u7f72\u65f6\u7684\u590d\u6742\u5ea6\u3002 \n ERC1155 \u667a\u80fd\u5408\u7ea6\u4e2d\u7684\u6bcf\u4e2a id \u90fd\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u4ee3\u5e01 value \u3002\u5047\u8bbe\u4e00\u4e2a\u975e\u540c\u8d28\u5316\u4ee3\u5e01\u62e5\u6709\u7684\u4ef7\u503c\u662f  value 1 \uff0c\u540c\u8d28\u5316\u7684\u4ee3\u5e01\u62e5\u6709\u4ef7\u503c\u53ef\u4ee5\u662f  value > 1 \u3002 \u6240\u6709ERC1155\u4ee3\u5e01\u90fd\u662f\u4e0d\u540c\u7684\uff0c\u5e76\u4e14\u6ca1\u6709 ERC20\u4ee3\u5e01\u7684 decimal \u5c5e\u6027\u3002\u4f46\u662f\u5b9e\u9645\u7684\u4f7f\u7528\u8fc7\u7a0b\u4e2d\uff0c\u8fd9\u79cd decimal \u5c5e\u6027\u7f3a\u5931\u7684\u95ee\u9898\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5728\u60a8\u5904\u7406\u4ee3\u5e01\u7684\u524d\u7aef\u66f4\u6b63\u3002 \n \u5982\u9700\u66f4\u591a\u9605\u8bfb\uff0c\u8bf7\u67e5\u770b proposal for the standard  (https://eips.ethereum.org/EIPS/eip-1155) \u3001 ethereum.org \u6587\u6863  (https://ethereum.org/en/developers/docs/standards/tokens/erc-1155)  \u6216  open Zeppelin docs  (https://docs.openzeppelin.com/contracts/3.x/erc1155) \u3002 \n \u65b9\u6cd5 \n  (#__codelineno-0-1) function   safeTransferFrom ( address   _from ,   address   _to ,   uint256   _id ,   uint256   _value ,   bytes   calldata   _data )   external ; \n  (#__codelineno-0-2) /* transfers a quantity(_value) of a specific token type(_id) from an address(_from) to a receiver(_to)*/ \n  (#__codelineno-0-3) function   safeBatchTransferFrom ( address   _from ,   address   _to ,   uint256 []   calldata   _ids ,   uint256 []   calldata   _values ,   bytes   calldata   _data )   external ; \n  (#__codelineno-0-4) /* transfers multiple token types in different quantities as specified in the _ids and _values arrays. Can only have one sender and one receiver.*/ \n  (#__codelineno-0-5) function   balanceOf ( address   _owner ,   uint256   _id )   external   view   returns   ( uint256 ); \n  (#__codelineno-0-6) /* returns the quantity of tokens for a specific token type for a specific owner */ \n  (#__codelineno-0-7) function   balanceOfBatch ( address []   calldata   _owners ,   uint256 []   calldata   _ids )   external   view   returns   ( uint256 []   memory );     \n  (#__codelineno-0-8) /*returns the balance of mutiple owners and multiple token types */ \n  (#__codelineno-0-9) function   setApprovalForAll ( address   _operator ,   bool   _approved )   external ; \n  (#__codelineno-0-10) /* sets the approval for a certain operator for all token types(Ids) */    \n  (#__codelineno-0-11) function   isApprovedForAll ( address   _owner ,   address   _operator )   external   view   returns   ( bool ); \n  (#__codelineno-0-12) /* returns whether a operator is approved for all */ \n  (#__codelineno-0-13) function   uri ( uint256   _id )   external   view   returns   ( string   memory ); \n  (#__codelineno-0-14) /* returns the uri of the specified id \n \n \u4e8b\u4ef6 \n  (#__codelineno-1-1) event   TransferSingle ( address   indexed   _operator ,   address   indexed   _from ,   address   indexed   _to ,   uint256   _id ,   uint256   _value ); \n  (#__codelineno-1-2) /* gets emitted after a successful safeTransferFrom call */ \n  (#__codelineno-1-3) event   TransferBatch ( address   indexed   _operator ,   address   indexed   _from ,   address   indexed   _to ,   uint256 []   _ids ,   uint256 []   _values ); \n  (#__codelineno-1-4) /* gets emitted after a successful safeBtachTransferFrom call */   \n  (#__codelineno-1-5) event   ApprovalForAll ( address   indexed   _owner ,   address   indexed   _operator ,   bool   _approved ); \n  (#__codelineno-1-6) /* gets emitted after a successful setApprovalForAll call */ \n  (#__codelineno-1-7) event   URI ( string   _value ,   uint256   indexed   _id ); \n  (#__codelineno-1-8) /* gets emmitted when the URI gets changed \n \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/spells/special-tables/erc1155/#erc1155_1"}
{"content": "Dune\u4e0a\u7684\u8868 \u00b6 \n \u6211\u4eec\u5c06\u6240\u6709 ERC1155 \u5408\u7ea6\u7684\u6240\u6709\u4e8b\u4ef6\u89e3\u7801\u5230\u76f8\u5e94\u7684\u4e8b\u4ef6\u8868\u4e2d\u3002 \n erc1155_blockchain.ERC1155_evt_Transfer_Single \u00b6  (#erc1155_blockchainerc1155_evt_transfer_single) \n \u5f53\u4f7f\u7528  safeTransferFrom  \u51fd\u6570\u8f6c\u79fb\u4e00\u4e2a erc1155 \u5408\u7ea6\u4e2d\u7684\u5355\u4e00\u7c7b\u578b\u7684\u4ee3\u5e01\u65f6\uff0c\u4f1a\u89e6\u53d1\u6b64\u4e8b\u4ef6\u3002 \n \n \n \n operator \n string \n \u83b7\u51c6\u8fdb\u884c\u8f6c\u8d26\u5e76\u53d1\u8d77\u672c\u6b21\u4ea4\u6613\u7684\u8d26\u6237/\u5408\u7ea6\u5730\u5740 \n \n \n \n \n from \n string \n ERC1155  \u4ee3\u5e01\u7684\u53d1\u9001\u8005 \n \n \n to \n string \n ERC1155  \u4ee3\u5e01\u7684\u63a5\u6536\u8005 \n \n \n id \n numeric \n \u6b64\u7c7b\u4ee3\u5e01\u7684 ID \u5c5e\u6027 \n \n \n value \n numeric \n \u5411\u7279\u5b9a id \u8f6c\u79fb\u7684\u4ee3\u5e01\u6570\u91cf \n \n \n contract_address \n string \n \u6b64 ERC1155 \u667a\u80fd\u5408\u7ea6\u7684\u5408\u7ea6\u5730\u5740 \n \n \n evt_tx_hash \n string \n \u4e8b\u4ef6\u7684\u4ea4\u6613\u54c8\u5e0c \n \n \n evt_index \n bigint \n \u533a\u5757\u4e2d\u7684\u65e5\u5fd7\u7d22\u5f15\u4f4d\u7f6e \n \n \n evt_block_time \n timestamp with time zone \n \u5305\u542b\u6b64\u4e8b\u4ef6\u65e5\u5fd7\u7684\u533a\u5757\u88ab\u6316\u51fa\u7684\u65f6\u95f4 \n \n \n evt_block_number \n bigint \n \u533a\u5757\u9ad8\u5ea6 \n \n \n \n erc1155_blockchain.ERC1155_evt_TransferBatch \u00b6  (#erc1155_blockchainerc1155_evt_transferbatch) \n \u5f53\u4f7f\u7528  safeBatchTransferFrom  \u51fd\u6570\u8f6c\u79fb\u4e00\u4e2a erc1155 \u5408\u7ea6\u4e2d\u7684\u591a\u79cd\u7c7b\u578b\u7684\u4ee3\u5e01\u65f6\u4f1a\u89e6\u53d1\u6b64\u4e8b\u4ef6\u3002 \n \n \n \n operator \n string \n \u83b7\u51c6\u8fdb\u884c\u8f6c\u8d26\u5e76\u53d1\u8d77\u672c\u6b21\u4ea4\u6613\u7684\u8d26\u6237/\u5408\u7ea6\u5730\u5740 transaction \n \n \n \n \n from \n string \n ERC1155  \u4ee3\u5e01\u7684\u53d1\u9001\u8005 \n \n \n to \n string \n ERC1155  \u4ee3\u5e01\u7684\u63a5\u6536\u8005 \n \n \n id \n ARRAY \n \u88ab\u8f6c\u8d26Token\u7684  ID  \u5c5e\u6027\u7684\u4e00\u4e2a\u6570\u7ec4 \n \n \n value \n ARRAY \n \u88ab\u8f6c\u8d26Token\u7684  Value  \u5c5e\u6027\u7684\u4e00\u4e2a\u6570\u7ec4 \n \n \n contract_address \n string \n \u6b64  ERC1155  \u667a\u80fd\u5408\u7ea6\u7684\u5408\u7ea6\u5730\u5740 \n \n \n evt_tx_hash \n string \n \u8f6c\u8d26\u7684\u4ea4\u6613\u54c8\u5e0c \n \n \n evt_index \n bigint \n \u533a\u5757\u4e2d\u7684\u65e5\u5fd7\u7d22\u5f15\u4f4d\u7f6e \n \n \n evt_block_time \n timestamp with time zone \n \u5305\u542b\u6b64\u4e8b\u4ef6\u65e5\u5fd7\u7684\u533a\u5757\u88ab\u6316\u51fa\u7684\u65f6\u95f4 \n \n \n evt_block_number \n bigint \n \u533a\u5757\u9ad8\u5ea6 \n \n \n \n erc1155_blockchain. ERC1155_evt_URI \u00b6  (#erc1155_blockchainerc1155_evt_uri) \n \u5f53\u4ee3\u5e01\u7c7b\u578b\u7684 URI \u53d1\u751f\u66f4\u6539\u65f6\u51fa\u6b64\u4e8b\u4ef6\u4f1a\u88ab\u89e6\u53d1\u3002\u53ea\u8981\u7b26\u5408\u8981\u6c42\uff0c\u8fd9\u884c\u4e3a\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a\u51fd\u6570\u6765\u5b8c\u6210\uff0c \n \n \n \n value \n text \n the new URI \n \n \n \n \n id \n numeric \n \u5df2\u7ecf\u88ab\u6539\u53d8\u7684\u4ee3\u5e01 URI \u7684id \n \n \n contract_address \n string \n \u6b64ERC1155 \u667a\u80fd\u5408\u7ea6\u7684\u5730\u5740 \n \n \n evt_tx_hash \n string \n \u8f6c\u8d26\u7684\u4ea4\u6613\u54c8\u5e0c \n \n \n evt_index \n bigint \n \u533a\u5757\u4e2d\u7684\u65e5\u5fd7\u7d22\u5f15\u4f4d\u7f6e \n \n \n evt_block_time \n timestamp with time zone \n \u5305\u542b\u6b64\u4e8b\u4ef6\u65e5\u5fd7\u7684\u533a\u5757\u88ab\u6316\u51fa\u7684\u65f6\u95f4 \n \n \n evt_block_number \n bigint \n \u533a\u5757\u9ad8\u5ea6", "url": "https://dune.com/docs/zh/reference/tables/v2/spells/special-tables/erc1155/#dune"}
{"content": "\u4ee3\u5e01\u6807\u51c6 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/spells/special-tables/#_1"}
{"content": "\u63a5\u53e3 \u00b6 \n \u6bcf\u5f53\u6211\u4eec\u5bf9\u88ab\u89e6\u53d1\u7684\u4e8b\u4ef6\u65e5\u5fd7\u7684\u5b50\u96c6\u611f\u5174\u8da3\u7684\u65f6\u5019(\u65e0\u8bba\u662f\u54ea\u4e2a\u539f\u59cb\u5408\u7ea6)\uff0cDune\u90fd\u4f1a\u4f7f\u7528interface-decoding\u53bb\u5904\u7406\u3002\u5178\u578b\u7684\u7684\u4f8b\u5b50\u5305\u62ec ERC20 \u3001 ERC721 \u548c ERC1155 \u7684\u8f6c\u8d26\u4e8b\u4ef6\u3002 \u6b64\u65b9\u6cd5\u88ab\u4fdd\u7559\u4e0b\u6765\u7528\u4e8e\u7279\u6b8a\u60c5\u51b5\u3002 \u8fd9\u4e9b\u8868\u53ef\u4ee5\u8f7b\u677e\u8ddf\u8e2a\u6d41\u5165\u548c\u6d41\u51fa\u5408\u7ea6\u4ee5\u53ca\u94b1\u5305\u7684\u540c\u8d28\u5316\u4ee5\u53ca\u975e\u540c\u8d28\u5316\u4ee3\u5e01\u5e76\u5728Dune\u4e2d\u88ab\u5e7f\u6cdb\u4f7f\u7528\u3002 \n \u60a8\u53ef\u4ee5\u5728\u6b64\u5904\u9605\u8bfb\u6709\u5173\u5404\u4e2a\u4ee3\u7b14\u6807\u51c6\u548c\u8868\u7684\u66f4\u591a\u4fe1\u606f\uff1a \n \n \n ERC-20  (erc20/) \n ERC-721  (erc721/) \n ERC-1155  (erc1155/)", "url": "https://dune.com/docs/zh/reference/tables/v2/spells/special-tables/#_2"}
{"content": "nft.trades \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/spells/nft.trading/#nfttrades"}
{"content": "\u4e00\u4e2a\u65b9\u4fbf\u7684\u67e5\u8be2NFT\u6570\u636e\u7684\u65b9\u6cd5 \u00b6 \n nft.trades  \u65e8\u5728\u8ba9Dune Analytics\u4e0a\u7684\u6bcf\u4e2a\u4eba\u90fd\u80fd\u8f7b\u677e\u83b7\u53d6\u5230NFT\u7684\u4ea4\u6613\u6570\u636e\u3002\u8be5\u8868\u5c06\u4e0d\u540c\u6570\u636e\u5e73\u53f0\u4e4b\u95f4\u7684\u6570\u636e\u805a\u5408\u548c\u6807\u51c6\u5316\u5e76\u5728\u4e00\u5f20\u8868\u4e2d\u63d0\u4f9b\u8f85\u52a9\u4fe1\u606f\u548c\u5143\u6570\u636e\u3002 \n \u5b83\u662f\u4e00\u4e2a\u975e\u5e38\u68d2\u7684\u6570\u636e\u96c6\uff0c\u901a\u8fc7\u5b83\u53bb\u67e5\u8be2\u5728\u4efb\u4f55\u4e0eNFT\u76f8\u5173\u7684\u4ea4\u6613\u6570\u636e(\u8986\u76d6\u5168\u5e73\u53f0)\u4f1a\u53d8\u5f97\u975e\u5e38\u5bb9\u6613. \n \u60a8\u53ef\u4ee5\u5728\u6211\u4eec\u7684  Spellbook \u6587\u6863  (https://spellbook-docs.dune.com/#!/model/model.spellbook.nft_trades)  \u4e0a\u627e\u5230 nft.trades \u7684\u89c4\u8303\u3002", "url": "https://dune.com/docs/zh/reference/tables/v2/spells/nft.trading/#nft"}
{"content": "\u4e8b\u4ef6\u65e5\u5fd7 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/decoded/event-logs/#_1"}
{"content": "\u4e8b\u4ef6\u65e5\u5fd7 \u00b6 \n \u5f53\u67d0\u4e9b\u9884\u5148\u5b9a\u4e49\u7684\u64cd\u4f5c\u5b8c\u6210\u65f6\uff0c\u667a\u80fd\u5408\u7ea6\u4f1a\u4ea7\u751f \u4e8b\u4ef6\u65e5\u5fd7 \u3002\u8fd9\u4e9b\u65e5\u5fd7\u7684\u4ea7\u51fa\u7ed3\u6784\u662f\u7531\u667a\u80fd\u5408\u7ea6\u7684\u5f00\u53d1\u8005\u9884\u5148\u5b9a\u4e49\u7684\uff0c\u65e5\u5fd7\u7684\u5185\u5bb9\u662f\u5728\u4ea4\u6613\u8fc7\u7a0b\u4e2d\u52a8\u6001\u751f\u6210\u7684\u3002 \n \u65e5\u5fd7\u5bf9\u4e8e\u76d1\u63a7\u3001\u8b66\u62a5\u548c\u65e5\u5e38\u8ddf\u8e2a\u667a\u80fd\u5408\u7ea6\u5185\u90e8\u53d1\u751f\u7684\u4e8b\u60c5\u5f88\u6709\u7528\u3002\u4f5c\u4e3a\u6570\u636e\u5206\u6790\u5e08\uff0c\u65e5\u5fd7\u662f\u60a8\u6700\u597d\u7684\u670b\u53cb\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e3a\u60a8\u63d0\u4f9b\u4e86\u7528\u4e8e\u4e8b\u540e\u5206\u6790\u7684\u53ef\u9760\u7684\u6570\u636e\u3002\u5982\u679c\u60a8\u60f3\u67e5\u770b\u67d0\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6\u53ef\u4ee5\u4ea7\u751f\u54ea\u4e9b\u65e5\u5fd7\uff0c\u60a8\u53ea\u9700\u5728\u667a\u80fd\u5408\u7ea6\u7684\u6e90\u4ee3\u7801\u4e2d\u641c\u7d22\u5173\u952e\u5b57  emit  \u5373\u53ef\u3002 \n \u6211\u4eec\u4f1a\u5c06\u667a\u80fd\u5408\u7ea6\u6240\u6709\u4e8b\u4ef6\u7684\u65e5\u5fd7\u89e3\u7801\u4e3a\u4ee5\u5165\u4e0b\u65b9\u5f0f\u547d\u540d\u7684\u8868\uff1a projectname_blockchain.contractName_evt_eventName  \u3002 \n \u8ba9\u6211\u4eec\u56de\u5230  uniswap v3 factory  (https://etherscan.io/address/0x1f98431c8ad98523631ae4a59f267346ea31f984#code) \u7684\u4ee3\u7801\u4e0a\u4e0b\u6587\u4e2d\uff0c\u53bb\u5bfb\u627e\u5728\u521b\u5efa\u65b0\u6c60\u5b50\u7684\u65f6\u5019\u6240\u89e6\u53d1\u7684\u4e8b\u4ef6\u3002\u8be5\u4e8b\u4ef6\u88ab\u79f0\u4e3a  PoolCreated  \uff0c\u6bcf\u6b21\u6709\u4eba\u901a\u8fc7\u8c03\u7528  createPool  \u51fd\u6570\u6210\u529f\u90e8\u7f72\u65b0\u7684 Uniswap V3 \u6c60\u5b50\u7684\u65f6\u5019\u90fd\u4f1a\u89e6\u53d1\u8be5\u4e8b\u4ef6\u3002\u8be5\u4e8b\u4ef6\u5c06\u5f88\u5bb9\u6613\u5730\u4e3a\u6211\u4eec\u63d0\u4f9b\u65b0\u591a\u4fe1\u606f\uff0c\u4f8b\u5982\u6c60\u5b50\u4e2d\u662f\u662f\u4ec0\u4e48\u4ee3\u5e01\u3001\u6c60\u5b50\u7684\u8d39\u7387\u7b49\u7ea7\u4ee5\u53catick spacing\u7b49\u3002\u5728 Etherscan \u4e2d\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee  Log \u9009\u9879\u5361  (https://etherscan.io/tx/0xdeb368592f3de0f2840754bce61d2c3f29cdb3407c63c699052e68a854c71eaa#eventlog)  \u8f7b\u677e\u5730\u627e\u5230\u4e8b\u4ef6\u7684\u65e5\u5fd7\u3002\u5728Dune\u4e2d\uff0c\u8fd9\u79cd\u7279\u5b9a\u7684\u4e8b\u4ef6\u5c06\u88ab\u5b58\u50a8\u5728\u8868  uniswap_v3_ethereum.Factory_evt_PoolCreated  (https://dune.com/queries/757381)  \u4e2d\u3002 \n \u591a\u4e2a\u5b9e\u4f8b \n \u5982\u679c\u5408\u7ea6\u6709\u591a\u4e2a\u5b9e\u4f8b\uff0c\u6211\u4eec\u5c06\u5728\u540c\u4e00\u5f20\u8868\u4e2d\u6536\u96c6\u6b64\u667a\u80fd\u5408\u7ea6\u6240\u6709\u5b9e\u4f8b\u7684\u6240\u6709\u4e8b\u4ef6\u65e5\u5fd7\u3002 \u4f8b\u5982\uff0c\u6240\u6709 uniswap v3 \u6c60\u5b50\u7684  swap  \u4e8b\u4ef6\uff08\u4ee5\u592a\u574a\u4e0a\u7684\uff09\u90fd\u5b58\u50a8\u5728\u8868  uniswap_v3_ethereum.Pair_evt_Swap  (https://dune.com/queries/742037) \u4e2d\u3002 contract_address  \u5217\u8868\u660e\u4e86\u662f\u54ea\u4e2a\u667a\u80fd\u5408\u7ea6\u89e6\u53d1\u4e86\u6b64\u4e8b\u4ef6\u3002 \n \u5ef6\u4f38\u9605\u8bfb: \n \u4e86\u89e3\u4ee5\u592a\u574a\u4e0a\u7684\u4e8b\u4ef6\u65e5\u5fd7  (https://medium.com/mycrypto/understanding-event-logs-on-the-ethereum-blockchain-f4ae7ba50378) \n \u5173\u4e8e\u4ee5\u592a\u574a\u4e0a\u7684\u4e8b\u4ef6\u548c\u65e5\u5fd7\u60a8\u60f3\u77e5\u9053\u7684\u4e00\u5207  (https://medium.com/linum-labs/everything-you-ever-wanted-to-know-about-events-and-logs-on-ethereum%20-fec84ea7d0a5)", "url": "https://dune.com/docs/zh/reference/tables/v2/decoded/event-logs/#_2"}
{"content": "\u8c03\u7528\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/decoded/call-tables/#_1"}
{"content": "\u5bf9\u667a\u80fd\u5408\u7ea6\u7684\u8c03\u7528\u4ee5\u53ca\u53d1\u8d77\u7684\u4ea4\u6613 \u00b6 \n \u667a\u80fd\u5408\u7ea6\u901a\u5e38\u5177\u6709\u53ef\u7531\u5916\u90e8\u8d26\u6237(EOA)\u6216\u5176\u4ed6\u667a\u80fd\u5408\u7ea6\u8c03\u7528\u7684\u51fd\u6570\u3002\u51fd\u6570\u53ef\u4ee5\u6709\u4efb\u4f55\u529f\u80fd\uff0c\u4ece\u7b80\u5355\u7684\u72b6\u6001\u8bfb\u53d6\u3001\u8fd4\u56de\u5230\u66f4\u6539\u591a\u4e2a\u72b6\u6001\u548c\u8c03\u7528\u5176\u4ed6\u667a\u80fd\u5408\u7ea6\u7684\u6d88\u606f\u3002 \n \u5728Dune\u4e0a\uff0c\u6211\u4eec\u5728\u76f8\u5e94\u7684\u8868\u4e2d\u89e3\u6790\u5bf9\u667a\u80fd\u5408\u7ea6\u8fdb\u884c\u7684\u6240\u6709\u6d88\u606f\u8c03\u7528\u548c\u4ea4\u6613\u3002\u8fd9\u4e9b\u8868\u88ab\u76f8\u5e94\u5730\u547d\u540d\u4e3a  projectname_blockchain.contractName_call_functionName  \u3002 \n \u8fd9\u53ef\u4ee5\u5728\u5355\u4e2a\u667a\u80fd\u5408\u7ea6\u7ea7\u522b\uff08\u5982 uniswap v3 factory\uff09\u6216\u4e00\u7c7b\u5408\u7ea6\uff08\u5982 uniswap v3 pairs\uff09\u4e0a\u5b8c\u6210\u3002 \n \u4f8b\u5982\uff0c\u5f53\u6211\u4eec\u901a\u8fc7  uniswap v3 factory  (https://etherscan.io/address/0x1f98431c8ad98523631ae4a59f267346ea31f984#code)  \u5408\u7ea6\u4e2d\u7684\u51fd\u6570  createPool  \uff08\u5728\u4ee5\u592a\u574a\u4e0a\uff09\u521b\u5efa uniswap v3 \u6c60\u5b50\u7684\u65f6\u5019\uff0cDune \u5c06\u5728\u8868    uniswap_v3_ethereum.Factory_call_createPool  (https://dune.com/queries/735856)  \u4e2d\u8bb0\u5f55\u8be5\u4ea4\u6613\u3002\u65e0\u8bba\u662f\u5916\u90e8\u8d26\u6237 (EOA) \u901a\u8fc7\u4ea4\u6613\u8fd8\u662f\u667a\u80fd\u5408\u7ea6\u901a\u8fc7\u6d88\u606f\u8c03\u7528\uff0c\u8fd9\u4e9b\u884c\u4e3a\u90fd\u4f1a\u88ab\u8bb0\u5f55\u3002 \n \u591a\u4e2a\u5b9e\u4f8b \n \u5bf9\u4e8e\u5b58\u5728\u591a\u4e2a\u5b9e\u4f8b\u7684\u667a\u80fd\u5408\u7ea6\uff0c\u5bf9\u8be5\u667a\u80fd\u5408\u7ea6\u6240\u6709\u5b9e\u4f8b\u7684\u6240\u6709\u8c03\u7528\u90fd\u4f1a\u88ab\u6211\u4eec\u89e3\u7801\u5230\u4e00\u5f20\u8868\u4e2d\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6709\u4ea4\u6613\u8c03\u7528\u4e86  uniswap v3 pairs  (https://etherscan.io/address/0x8f8ef111b67c04eb1641f5ff19ee54cda062f163#writeContract)  \u8fd9\u4e2a\u667a\u80fd\u5408\u7ea6\u4efb\u4f55\u5b9e\u4f8b\u7684  swap  \u51fd\u6570\uff0c\u6211\u4eec\u5c06\u5728   uniswap_v3_ethereum.Pair_call_swap  \u8868\u4e2d\u8bb0\u5f55\u6b64\u6570\u636e \u3002 \n \u5e38\u89c1\u7684\u8bef\u533a \n \u5982\u679c\u6709\u4eba\u901a\u8fc7  web3.js  (https://web3js.readthedocs.io)  \u3001 web3.py  (https://web3py.readthedocs.io/en/stable)  \u6216\u8005\u5176\u4ed6\u6240\u6709\u65b9\u5f0f\u5728\uff08\u672c\u5730\uff09\u8c03\u7528  pure  ,  read  ,\u6216\u8005  constant  \u51fd\u6570\uff0c\u8fd9\u5c06\u4e0d\u4f1a\u5728\u533a\u5757\u94fe\u4e0a\u5e7f\u64ad\u6216\u4efb\u4f55\u5185\u5bb9\uff0c\u56e0\u6b64\u8fd9\u4e9b\u884c\u4e3a\u4e5f\u4e0d\u4f1a\u88ab\u8bb0\u5f55\u5728Dune\u4e2d\u3002 \n \u7b80\u800c\u8a00\u4e4b\uff1a \u5b58\u50a8\u5728\u667a\u80fd\u5408\u7ea6\u5185\u5b58\u4e2d\u7684\u72b6\u6001\u6570\u636e\u5728Dune\u4e0a\u83b7\u53d6\u4e0d\u5230\uff01 \n \u4e00\u4e2a\u6b63\u9762\u7684\u4f8b\u5b50\u662f  erc20 \u4ee3\u5e01\u5408\u7ea6 Uni  (https://etherscan.io/token/0x1f9840a85d5af5bf1d1762f925bdaddc4201f984#readContract)  \u7684\u51fd\u6570  decimals  \uff0c\u5b83\u662f\u4e00\u4e2a  constant  \u72b6\u6001\u53d8\u91cf\uff0c\u901a\u8fc7\u81ea\u52a8\u751f\u6210\u7684\u201c getter \u51fd\u6570  (https://docs.soliditylang.org/en/v0.7.4/contracts.html#getter-functions) \u201d\u53ef\u4ee5\u8bbf\u95ee\u3002\u5982\u679c\u667a\u80fd\u5408\u7ea6\u5728\u4ea4\u6613\u4e2d\u8c03\u7528\u6b64\u51fd\u6570\uff0c\u5219\u6b64\u6d88\u606f\u8c03\u7528\u5c06\u8bb0\u5f55\u5728Dune\u7684\u8868 uniswap.\"UNI_call_decimals\"  (https://dune.com/queries/741354) \u4e2d\u3002 \n \u8fd9\u4e0e\u4f7f\u7528 web3.py/web3.js \u5728\u672c\u5730\u8c03\u7528\u6b64\u51fd\u6570\u6216\u4f7f\u7528Etherscan\u524d\u7aef\u8bbf\u95ee\u6b64\u72b6\u6001\u7684\u60c5\u51b5\u5f62\u6210\u5bf9\u6bd4\uff0c\u8fd9\u4e9b\u672c\u5730\u8c03\u7528\u4e0d\u4f1a\u8bb0\u5f55\u5728Dune\u4e2d\u3002 \n \u8fdb\u4e00\u6b65\u9605\u8bfb\uff1a   \n \u4ea4\u6613\u548c\u8c03\u7528\u6709\u4ec0\u4e48\u533a\u522b\uff1f  (https://ethereum.stackexchange.com/questions/765/what-is-the-difference-between-a-transaction-and-a-call) \n Soliditylang.org \u6587\u6863  (https://docs.soliditylang.org/en/v0.8.13/contracts.html#function-visibility)", "url": "https://dune.com/docs/zh/reference/tables/v2/decoded/call-tables/#_2"}
{"content": "\u6295\u7968\u4ea4\u6613\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/solana/vote-transactions/#_1"}
{"content": "Solana.vote_transactions \u00b6 \n \u6b64\u8868\u5305\u542b\u9a8c\u8bc1\u8005\u63d0\u4ea4\u7684\u7528\u4e8e\u5bf9\u533a\u5757\u8fdb\u884c\u6295\u7968\u7684\u5168\u90e8\u6295\u7968\u4ea4\u6613\u3002\u5b83\u53ef\u4ee5\u4e0e\u4e0a\u9762\u7684\u975e\u6295\u7968\u4ea4\u6613\u8868\u7ed3\u5408\u8d77\u6765\uff0c\u4ee5\u83b7\u5f97\u6240\u6709\u4ea4\u6613\u7684\u5b8c\u6574\u7ec6\u5206\u3002\u5b83\u4e0e\u4e3b\u4ea4\u6613\u8868\u5177\u6709\u76f8\u540c\u7684\u67b6\u6784\u3002 \n \u6b64\u5904\u63d0\u4f9b\u4e86\u4e00\u4e2a\u793a\u4f8b\u67e5\u8be2\uff1a Solana\u8fc7\u53bb30\u5929\u7684\u4ea4\u6613  (https://dune.xyz/queries/389976/743760) \n \n \n \n \u5b57\u6bb5\u540d\u79f0 \n \u5b57\u6bb5\u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n block_slot \n bigint \n \u6b64\u533a\u5757\u5728\u8d26\u672c\u4e2d\u7684\u69fd\u7d22\u5f15 \n \n \n block_time \n timestamp \n \u6b64\u533a\u5757\u7684\uff08\u4f30\u8ba1\uff09\u751f\u6210\u65f6\u95f4 \n \n \n block_date \n date \n \u4e8b\u4ef6\u65e5\u671f \n \n \n index \n bigint \n \u6b64\u4ea4\u6613\u5728\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e \n \n \n fee \n bigint \n \u6b64\u4ea4\u6613\u652f\u4ed8\u7684\u8d39\u7528\uff0c\u7531\u7b2c\u4e00\u4e2a\u5e10\u6237\u652f\u4ed8 \n \n \n block_hash \n string \n \u6b64\u533a\u5757\u7684\u54c8\u5e0c\u503c\uff0cbase-58\u7f16\u7801 \n \n \n error \n STRUCT error \n \u5982\u679c success = true \u5219\u4e3a NULL\u503c. \n \n \n required_signatures \n bigint \n \u4f7f\u5f53\u524d\u4ea4\u6613\u6709\u6548\u6240\u9700\u7684\u7b7e\u540d\u6570\u91cf \n \n \n readonly_signed___accounts \n bigint \n \u53ea\u8bfb\u7684\u7b7e\u540d\u8d26\u6237\u6570\u91cf \n \n \n readonly_unsigned___accounts \n bigint \n \u53ea\u8bfb\u7684\u975e\u7b7e\u540d\u8d26\u6237\u6570\u91cf \n \n \n id \n string \n \u4ea4\u6613\u7684\u7b2c\u4e00\u4e2a\u7b7e\u540d\uff08\u4e5f\u5c31\u662f\u4ea4\u6613\u7684\u54c8\u5e0c\u503c\uff09 \n \n \n success \n boolean \n \u4ea4\u6613\u6709\u6548\u4e14\u5df2\u88ab\u63d0\u4ea4 \n \n \n recent_block___hash \n string \n \u8d26\u672c\u4e2d\u6700\u8fd1\u533a\u5757\u7684\u54c8\u5e0c\u503c\uff0c\u7528\u4e8e\u9632\u6b62\u4ea4\u6613\u91cd\u590d\u5e76\u8d4b\u4e88\u4ea4\u6613\u751f\u547d\u5468\u671f \n \n \n instructions \n array\\ \n \u6267\u884c\u7684\u6307\u4ee4\u6570\u7ec4\uff08\u6309\u987a\u5e8f\uff09 \n \n \n accountKeys \n array\\ \n \u4ea4\u6613\u4e2d\u4f7f\u7528\u7684\u5e10\u6237\u5730\u5740 \n \n \n log_messages \n array\\ \n \u6b64\u4ea4\u6613\u53d1\u51fa\u7684\u65e5\u5fd7\u6d88\u606f \n \n \n pre_balances \n array\\ \n \u5904\u7406\u4ea4\u6613\u4e4b\u524d\u7684\u8d26\u6237\u4f59\u989d\u6570\u7ec4\u3002\u7b2ci\u4e2a\u4f59\u989d\u503c\u5c31\u662faccount_keys\u6570\u7ec4\u4e2d\u7b2ci\u4e2a\u8d26\u6237\u7684\u4f59\u989d \n \n \n post_balances \n array\\ \n \u5904\u7406\u4ea4\u6613\u4e4b\u540e\u7684\u8d26\u6237\u4f59\u989d\u6570\u7ec4\u3002\u7b2ci\u4e2a\u4f59\u989d\u503c\u5c31\u662faccount_keys\u6570\u7ec4\u4e2d\u7b2ci\u4e2a\u8d26\u6237\u7684\u4f59\u989d \n \n \n pre_token_balance \n array\\ \n \u4ea4\u6613\u5904\u7406\u524d\u7684 \u4ee3\u5e01\u4f59\u989d  (https://docs.solana.com/developing/clients/jsonrpc-api#token-balances-structure) \u5217\u8868\uff0c\u5982\u679c\u5728\u6b64\u4ea4\u6613\u671f\u95f4\u5c1a\u672a\u542f\u7528\u4ee3\u5e01\u4f59\u989d\u8bb0\u5f55\uff0c\u5219\u7701\u7565 \n \n \n post_token_balance \n array\\ \n \u4ea4\u6613\u5904\u7406\u540e\u7684 \u4ee3\u5e01\u4f59\u989d  (https://docs.solana.com/developing/clients/jsonrpc-api#token-balances-structure) \u5217\u8868\uff0c\u5982\u679c\u5728\u6b64\u4ea4\u6613\u671f\u95f4\u5c1a\u672a\u542f\u7528\u4ee3\u5e01\u4f59\u989d\u8bb0\u5f55\uff0c\u5219\u7701\u7565 \n \n \n signatures \n array\\ \n \u5e94\u7528\u4e8e\u4ea4\u6613\u7684base-58\u7f16\u7801\u7b7e\u540d\u5217\u8868\u3002\u957f\u5ea6\u603b\u662f\u7b49\u4e8enumRequiredSignatures\u503c \n \n \n signer \n string \n \u53d1\u8d77\u4ea4\u6613\u5e76\u652f\u4ed8\u4ea4\u6613\u8d39\u7528\u7684 account_keys \u6570\u7ec4\u7684\u521d\u59cb\u503c", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/solana/vote-transactions/#solanavote_transactions"}
{"content": "\u4ea4\u6613\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/solana/transactions/#_1"}
{"content": "Solana.transactions \u00b6 \n \u6b64\u8868\u5305\u542bSolana\u533a\u5757\u94fe\u4e2d\u7684\u4ea4\u6613\u6570\u636e\u3002\u6b64\u8868\u4e2d\u63d0\u4f9b\u4e86\u4e0e\u5e10\u6237\u3001\u534f\u8bae\u548c\u8ba1\u5212\u6d3b\u52a8\u76f8\u5173\u7684\u5927\u591a\u6570\u76f8\u5173\u6570\u636e\u3002 \n \u67e5\u8be2\u793a\u4f8b\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\uff1a \u8fc7\u53bb7\u5929\u70ed\u95e8\u7a0b\u5e8f\u7684NFT\u4ea4\u6613  (https://dune.xyz/queries/390720/745376) \u548c drift-protocol\u6982\u8ff0  (https://dune.xyz/bigz/drift-\\(solana\\)) \n \n \n \n \u5b57\u6bb5\u540d\u79f0 \n \u5b57\u6bb5\u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n block_slot \n bigint \n \u6b64\u533a\u5757\u5728\u8d26\u672c\u4e2d\u7684\u69fd\u7d22\u5f15 \n \n \n block_time \n timestamp \n \u6b64\u533a\u5757\u7684\uff08\u4f30\u8ba1\uff09\u751f\u6210\u65f6\u95f4 \n \n \n block_date \n date \n \u4e8b\u4ef6\u65e5\u671f \n \n \n index \n bigint \n \u6b64\u4ea4\u6613\u5728\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e \n \n \n fee \n bigint \n \u6b64\u4ea4\u6613\u652f\u4ed8\u7684\u8d39\u7528\uff0c\u7531\u7b2c\u4e00\u4e2a\u5e10\u6237\u652f\u4ed8 \n \n \n block_hash \n string \n \u6b64\u533a\u5757\u7684\u54c8\u5e0c\u503c\uff0cbase-58\u7f16\u7801 \n \n \n error \n STRUCT error \n \u5982\u679c success = true \u5219\u4e3a NULL\u503c. \n \n \n required_signatures \n bigint \n \u4f7f\u5f53\u524d\u4ea4\u6613\u6709\u6548\u6240\u9700\u7684\u7b7e\u540d\u6570\u91cf \n \n \n readonly_signed___accounts \n bigint \n \u53ea\u8bfb\u7684\u7b7e\u540d\u8d26\u6237\u6570\u91cf \n \n \n readonly_unsigned___accounts \n bigint \n \u53ea\u8bfb\u7684\u975e\u7b7e\u540d\u8d26\u6237\u6570\u91cf \n \n \n id \n string \n \u4ea4\u6613\u7684\u7b2c\u4e00\u4e2a\u7b7e\u540d\uff08\u4e5f\u5c31\u662f\u4ea4\u6613\u7684\u54c8\u5e0c\u503c\uff09 \n \n \n success \n boolean \n \u4ea4\u6613\u6709\u6548\u4e14\u5df2\u88ab\u63d0\u4ea4 \n \n \n recent_block___hash \n string \n \u8d26\u672c\u4e2d\u6700\u8fd1\u533a\u5757\u7684\u54c8\u5e0c\u503c\uff0c\u7528\u4e8e\u9632\u6b62\u4ea4\u6613\u91cd\u590d\u5e76\u8d4b\u4e88\u4ea4\u6613\u751f\u547d\u5468\u671f \n \n \n instructions \n array\\ \n \u6267\u884c\u7684\u6307\u4ee4\u6570\u7ec4\uff08\u6309\u987a\u5e8f\uff09 \n \n \n accountKeys \n array\\ \n \u4ea4\u6613\u4e2d\u4f7f\u7528\u7684\u5e10\u6237\u5730\u5740 \n \n \n log_messages \n array\\ \n \u6b64\u4ea4\u6613\u53d1\u51fa\u7684\u65e5\u5fd7\u6d88\u606f \n \n \n pre_balances \n array\\ \n \u5904\u7406\u4ea4\u6613\u4e4b\u524d\u7684\u8d26\u6237\u4f59\u989d\u6570\u7ec4\u3002\u7b2ci\u4e2a\u4f59\u989d\u503c\u5c31\u662faccount_keys\u6570\u7ec4\u4e2d\u7b2ci\u4e2a\u8d26\u6237\u7684\u4f59\u989d \n \n \n post_balances \n array\\ \n \u5904\u7406\u4ea4\u6613\u4e4b\u540e\u7684\u8d26\u6237\u4f59\u989d\u6570\u7ec4\u3002\u7b2ci\u4e2a\u4f59\u989d\u503c\u5c31\u662faccount_keys\u6570\u7ec4\u4e2d\u7b2ci\u4e2a\u8d26\u6237\u7684\u4f59\u989d \n \n \n pre_token_balance \n array\\ \n \u4ea4\u6613\u5904\u7406\u524d\u7684 \u4ee3\u5e01\u4f59\u989d  (https://docs.solana.com/developing/clients/jsonrpc-api#token-balances-structure) \u5217\u8868\uff0c\u5982\u679c\u5728\u6b64\u4ea4\u6613\u671f\u95f4\u5c1a\u672a\u542f\u7528\u4ee3\u5e01\u4f59\u989d\u8bb0\u5f55\uff0c\u5219\u7701\u7565 \n \n \n post_token_balance \n array\\ \n \u4ea4\u6613\u5904\u7406\u540e\u7684 \u4ee3\u5e01\u4f59\u989d  (https://docs.solana.com/developing/clients/jsonrpc-api#token-balances-structure) \u5217\u8868\uff0c\u5982\u679c\u5728\u6b64\u4ea4\u6613\u671f\u95f4\u5c1a\u672a\u542f\u7528\u4ee3\u5e01\u4f59\u989d\u8bb0\u5f55\uff0c\u5219\u7701\u7565 \n \n \n signatures \n array\\ \n \u5e94\u7528\u4e8e\u4ea4\u6613\u7684base-58\u7f16\u7801\u7b7e\u540d\u5217\u8868\u3002\u957f\u5ea6\u603b\u662f\u7b49\u4e8enumRequiredSignatures\u503c \n \n \n signer \n string \n \u53d1\u8d77\u4ea4\u6613\u5e76\u652f\u4ed8\u4ea4\u6613\u8d39\u7528\u7684 account_keys \u6570\u7ec4\u7684\u521d\u59cb\u503c \n \n \n \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/solana/transactions/#solanatransactions"}
{"content": "\u7ed3\u6784\u5b9a\u4e49 \u00b6 \n \u5728\u5176\u4e2d\u7684\u51e0\u4e2a\u5217\u4e2d\u4f7f\u7528\u4e86STRUCT\u6570\u636e\u7c7b\u578b\uff0c\u5b83\u5141\u8bb8\u8868\u793a\u5d4c\u5957\u7684\u5206\u5c42\u6570\u636e\u5e76\u5177\u6709\u952e\u503c\u5bf9\u3002\u5b83\u7c7b\u4f3c\u4e8epython\u4e2d\u7684\u5b57\u5178\uff0c\u53ef\u7528\u4e8e\u5c06\u5b57\u6bb5\u7ec4\u5408\u5728\u4e00\u8d77\u4ee5\u4f7f\u5b83\u4eec\u66f4\u6613\u4e8e\u8bbf\u95ee\u3002 \n \u4e00\u4e2a\u5982\u4f55\u5173\u4e8e\u4ece\u7ed3\u6784\u5b57\u6bb5\u63d0\u53d6\u6570\u636e\u7684\u793a\u4f8b\uff1a Solana\u53bb\u4e2d\u5fc3\u5316\u4ea4\u6613\u6240\u7684\u6307\u4ee4\u6570  (https://dune.xyz/queries/416358/794290) \n token_balance \n \n \n \n \u5b57\u6bb5\u540d\u79f0 \n \u5b57\u6bb5\u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n account \n string \n \u4ee3\u5e01\u4f59\u989d\u5f52\u5c5e\u7684\u5e10\u6237\u5730\u5740 \n \n \n mint \n string \n \u4ee3\u5e01\u94f8\u9020\u5408\u7ea6\u7684\u516c\u94a5\u3002\u8fd9\u662f\u4e00\u4e2a\u5b58\u50a8\u6709\u5173\u4ee3\u5e01\u5143\u6570\u636e\u7684\u5e10\u6237\uff1a\u4f9b\u5e94\u91cf\u3001\u5c0f\u6570\u4f4d\u6570\u4ee5\u53ca\u63a7\u5236\u94f8\u9020\u7684\u5404\u79cd\u6743\u9650\u3002 \n \n \n amount \n Decimal \n \u6e90\u81ea\u4ee3\u5e01\u4f59\u989d\u7684\u539f\u59cb\u91d1\u989d (ui_token_amount.amount) \u548c\u5c0f\u6570\u4f4d\u6570 (ui_token_amount.decimals) \n \n \n \n \n instructions \n \n \n \n \u5b57\u6bb5\u540d\u79f0 \n \u5b57\u6bb5\u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n account_arguments \n array\\ \n \u8981\u4f20\u9012\u7ed9\u7a0b\u5e8f\u7684\u5e10\u6237\u7684\u6709\u5e8f\u5217\u8868 \n \n \n data \n string \n \u4ee5base-58\u7f16\u7801\u7684\u7a0b\u5e8f\u8f93\u5165\u6570\u636e \n \n \n executing_account \n string \n \u6267\u884c\u6b64\u6307\u4ee4\u7684\u7a0b\u5e8f\u7684\u5e10\u6237\u5730\u5740 \n \n \n inner_instructions \n array\\ \n \u8be5\u6307\u4ee4\u8c03\u7528\u7684\u5185\u90e8\u6307\u4ee4 \n \n \n \n \n inner_instructions \n \n \n \n \u5b57\u6bb5\u540d\u79f0 \n \u5b57\u6bb5\u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n account_arguments \n array\\ \n \u8981\u4f20\u9012\u7ed9\u7a0b\u5e8f\u7684\u5e10\u6237\u7684\u6709\u5e8f\u5217\u8868 \n \n \n data \n string \n \u4ee5base-58\u7f16\u7801\u7684\u7a0b\u5e8f\u8f93\u5165\u6570\u636e \n \n \n executing_account \n string \n \u6267\u884c\u6b64\u6307\u4ee4\u7684\u7a0b\u5e8f\u7684\u5e10\u6237\u5730\u5740 \n \n \n \n \n error \n \n \n \n \u5b57\u6bb5\u540d\u79f0 \n \u5b57\u6bb5\u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n instruction_index \n int \n \u5931\u8d25\u7684\u6307\u4ee4\u53f7\u7801 \n \n \n message \n string \n \u9519\u8bef\u4fe1\u606f \n \n \n \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/solana/transactions/#_2"}
{"content": "\u00b6", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/solana/transactions/#_3"}
{"content": "\u5956\u52b1\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/solana/rewards/#_1"}
{"content": "Solana.rewards \u00b6 \n \u6b64\u8868\u5305\u542b\u6709\u5173\u5728Solana\u4e0a\u652f\u4ed8\u7684\u5956\u52b1\u7684\u6570\u636e\u3002\u4e00\u4e2a\u533a\u5757\u53ef\u80fd\u5305\u542b\u96f6\u4e2a\u6216\u591a\u4e2a\u5956\u52b1\uff0c\u6bcf\u4e00\u884c\u5bf9\u5e94\u4e00\u4e2a\u5956\u52b1\u3002 \n \u53ef\u4ee5\u5728\u6b64\u5904\u627e\u5230\u793a\u4f8b\u67e5\u8be2\uff1a Solana\u6bcf\u65e5\u5956\u52b1\u8d39\u7528  (https://dune.xyz/queries/391421/747012) \u3002 \n \n \n \n \u5b57\u6bb5\u540d\u79f0 \n \u5b57\u6bb5\u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n block_slot \n bigint \n \u6b64\u533a\u5757\u5728\u8d26\u672c\u4e2d\u7684\u69fd\u7d22\u5f15 \n \n \n block_hash \n string \n \u6b64\u533a\u5757\u7684\u54c8\u5e0c\u503c\uff0cbase-58\u7f16\u7801 \n \n \n block_time \n timestamp \n \u6b64\u533a\u5757\u7684\uff08\u4f30\u8ba1\uff09\u751f\u6210\u65f6\u95f4 \n \n \n block_date \n date \n \u4e8b\u4ef6\u65e5\u671f \n \n \n commission \n string \n \u5956\u52b1\u5165\u8d26\u65f6\u7684\u6295\u7968\u8d26\u6237\u4f63\u91d1\uff0c\u4ec5\u7528\u4e8e\u6295\u7968\u548c\u8d28\u62bc\u5956\u52b1 \n \n \n lamports \n bigint \n \u8d26\u6237\u8d37\u8bb0\u6216\u501f\u8bb0\u7684\u5956\u52b1lamports\u6570\u91cf \n \n \n pre_balance \n bigint \n \u5e94\u7528\u5956\u52b1\u524d\u7684\u8d26\u6237\u4f59\u989d\uff08\u4ee5 lamports \u8868\u793a\uff09 \n \n \n post_balance \n bigint \n \u5e94\u7528\u5956\u52b1\u540e\u7684\u8d26\u6237\u4f59\u989d\uff08\u4ee5 lamports \u8868\u793a\uff09 \n \n \n recipient \n string \n \u6536\u5230\u5956\u52b1\u7684\u8d26\u6237\u7684\u516c\u94a5\uff0c\u4ee5base-58\u7f16\u7801\u7684\u5b57\u7b26\u4e32 \n \n \n reward_type \n string \n \u5956\u52b1\u7c7b\u578b\uff1a\u201cfee\u201d\uff0c\u201crent\u201d\uff0c\u201cvoting\u201d\uff0c\u201cstaking\u201d", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/solana/rewards/#solanarewards"}
{"content": "\u66f4\u6539\u65e5\u5fd7 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/solana/changelog/#_1"}
{"content": "2022-03-25 \u00b6 \n solana.account_activity \u8868\u5df2\u66f4\u65b0\u4e3a\u65b0\u7248\u672c\u3002\u8be5\u8868\u7684\u65b0\u7248\u672c\u5305\u542b\u6709\u5173\u4ee3\u5e01\u6d3b\u52a8\u7684\u9644\u52a0\u4fe1\u606f\u3002\u65b0\u589e\u4e86\u4ee5\u4e0b\u5217\u5230\u8868\u4e2d\uff1a \n \n pre_token_balances \n \u4ea4\u6613\u5904\u7406\u524d\u7684\u4ee3\u5e01\u4f59\u989d \n post_token_balances \n \u4ea4\u6613\u5904\u7406\u540e\u7684\u4ee3\u5e01\u4f59\u989d \n token_balance_changes \n \u4f5c\u4e3a\u4ea4\u6613\u7684\u4e00\u90e8\u5206\u53d1\u751f\u7684\u4f59\u989d\u53d8\u5316 \n \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/solana/changelog/#2022-03-25"}
{"content": "2022-03-18 \u00b6 \n \u53d1\u5e03\u4e86 solana.account_activity \u8868\uff0c\u5176\u4e2d\u5305\u542b\u6709\u5173\u4ea4\u6613\u4e2d\u5e10\u6237\u4f7f\u7528\u60c5\u51b5\u7684\u6240\u6709\u4fe1\u606f\u3002 \n \u8be5\u8868\u7ecf\u8fc7\u4f18\u5316\u4ee5\u66f4\u597d\u5730\u8fd0\u884c\u201cWHERE address = ...\u201d\u67e5\u8be2\u3002 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/solana/changelog/#2022-03-18"}
{"content": "2022-03-01 \u00b6 \n solana.transactions \u8868\u73b0\u5df2\u5347\u7ea7\u5230\u65b0\u7248\u672c\u3002\u65b0\u7248\u672c\u7684\u8868\u4f7f\u7528\u66f4\u7b80\u6d01\u7684\u6570\u7ec4\u7ed3\u6784\uff0c\u4ee5\u4fbf\u66f4\u5bb9\u6613\u5730\u63d0\u53d6\u6709\u7528\u4fe1\u606f\u3002 \n \u6295\u7968\u4ea4\u6613\u4e5f\u88ab\u62c6\u5206\u5230\u81ea\u5df1\u7684\u8868 solana.vote_transactions \u4e2d\uff0c\u56e0\u6b64\u4f7f\u7528 solana.transactions \u7684\u67e5\u8be2\u5c06\u5177\u6709\u66f4\u597d\u7684\u6027\u80fd\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u6b64\u8868\u7684\u4fee\u6539\u4e5f\u610f\u5473\u7740\u4e00\u4e9b\u73b0\u6709\u67e5\u8be2\u73b0\u5728\u5c06\u4f1a\u4e2d\u65ad\u5e76\u9700\u8981\u66f4\u65b0\u3002 \n \u8fd9\u5bf9\u4f7f\u7528 solana.transactions \u7684\u73b0\u6709\u67e5\u8be2\u6709\u4ec0\u4e48\u5f71\u54cd\uff1a \n \n \u60a8\u65e0\u9700\u518d\u68c0\u67e5\u4ea4\u6613\u662f\u5426\u4e3a\u6295\u7968\u4ea4\u6613\uff0c\u8fd9\u901a\u5e38\u4f7f\u7528 WHERE ARRAY_CONTAINS(account_keys, \"Vote111111111111111111111111111111111111111\") = false \u6765\u5b8c\u6210\u3002 \n error_index \u548c error_message \u5217\u5df2\u88ab\u5220\u9664\uff0c\u5e76\u5df2\u5408\u5e76\u5230 error \u5217\uff08\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\uff09\u3002\u6240\u4ee5\u73b0\u5728\u67e5\u8be2\u5e94\u8be5\u7528 WHERE error is not null \u800c\u4e0d\u662f\u7528 WHERE error_index is not null \u3002 \n \u5305\u542b account_keys \u7d22\u5f15\u7684\u7ed3\u6784\u73b0\u5728\u76f4\u63a5\u5305\u542b\u5e10\u6237\u5730\u5740\uff0c\u56e0\u6b64\u65e0\u9700\u518d\u4f7f\u7528 account_keys \u5217\u6765\u67e5\u627e\u5e10\u6237\u5730\u5740\uff1a \n \n  (#__codelineno-0-1) \u4e4b\u524d                                              ->  \u73b0\u5728\n  (#__codelineno-0-2) account_keys[instructions[i]['program_id_index']]   ->  instructions[i].executing_account\n  (#__codelineno-0-3) account_keys[pre_token_balances[i]['account_index']]   ->  pre_token_balances[i].account\n  (#__codelineno-0-4) account_keys[post_token_balances[i]['account_index']]  ->  post_token_balances[i].account\n \n \n pre_token_balances \u548c post_token_balances \u5217\u5df2\u66f4\u6539\u3002\u4ee3\u5e01\u4f59\u989d\u73b0\u5728\u5305\u542b\u5728 amount \u5b57\u6bb5\u4e2d\u3002\u5e76\u4e14\u5982\u4e0a\u6240\u8ff0\uff0c\u6570\u7ec4\u4e2d\u7684\u7ed3\u6784\u73b0\u5728\u6709\u4e00\u4e2a\u5b57\u6bb5 account \uff0c\u5b83\u662f\u4ee3\u5e01\u4f59\u989d\u5f52\u5c5e\u7684\u5e10\u6237\u3002 \n instructions \u5217\u5df2\u66f4\u6539\u3002\u5982\u4e0a\u6240\u8ff0\uff0c\u6570\u7ec4\u4e2d\u7684\u7ed3\u6784\u73b0\u5728\u6709\u4e00\u4e2a\u5b57\u6bb5 executing_account \uff0c\u5b83\u662f\u6267\u884c\u6307\u4ee4\u7684\u5e10\u6237\u3002 \n inner_instructions \u5217\u88ab\u5220\u9664\uff0c\u5185\u90e8\u6307\u4ee4\u5df2\u79fb\u81f3 instructions \u5217\u4e2d\u3002", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/solana/changelog/#2022-03-01"}
{"content": "\u533a\u5757\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/solana/blocks/#_1"}
{"content": "Solana.blocks \u00b6 \n \u8be5\u8868\u5305\u542bSolana\u533a\u5757\u94fe\u4e2d\u7684\u533a\u5757\u6570\u636e\u3002\u5b83\u53ef\u7528\u4e8e\u8bc6\u522b\u533a\u5757\u6d3b\u52a8\u548c\u4ea4\u6613\u968f\u65f6\u95f4\u7684\u53d8\u5316\u3002 \n Query examples can be found here:  Solana blocks over time  (https://dune.xyz/queries/389979)  and  Transactions per day  (https://dune.xyz/queries/390045) \n\u53ef\u5728\u6b64\u5904\u627e\u5230\u67e5\u8be2\u793a\u4f8b\uff1a \u968f\u65f6\u95f4\u53d8\u5316\u7684Solana\u533a\u5757\u6570\u636e  (https://dune.xyz/queries/389979) \u548c \u6bcf\u65e5\u4ea4\u6613\u6570\u636e  (https://dune.xyz/queries/390045) \n \n \n \n \u5b57\u6bb5\u540d\u79f0 \n \u5b57\u6bb5\u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n hash \n string \n \u6b64\u533a\u5757\u7684\u54c8\u5e0c\u503c\uff0cbase-58\u7f16\u7801 \n \n \n height \n bigint \n \u6b64\u533a\u5757\u4e4b\u4e0b\u7684\u5df2\u5b58\u5728\u7684\u533a\u5757\u6570\u91cf \n \n \n slot \n bigint \n \u6b64\u533a\u5757\u5728\u8d26\u672c\u4e2d\u7684\u69fd\u7d22\u5f15 \n \n \n time \n timestamp \n \u6b64\u533a\u5757\u7684\uff08\u4f30\u8ba1\uff09\u751f\u6210\u65f6\u95f4 \n \n \n date \n date \n \u7528\u4e8e\u5206\u533a \n \n \n parent_slot \n bigint \n \u6b64\u533a\u5757\u7684\u7236\u533a\u5757\u7684\u69fd\u7d22\u5f15 \n \n \n previous_block___hash \n string \n \u6b64\u533a\u5757\u7684\u7236\u533a\u5757\u7684\u54c8\u5e0c\u503c\uff0cbase-58\u7f16\u7801 \n \n \n total_transactions \n bigint \n \u6b64\u533a\u5757\u4e2d\u7684\u4ea4\u6613\u603b\u6570 \n \n \n successful_transactions \n bigint \n \u6b64\u533a\u5757\u4e2d\u6210\u529f\u4ea4\u6613\u7684\u6570\u91cf \n \n \n failed_transactions \n bigint \n \u6b64\u533a\u5757\u4e2d\u5931\u8d25\u7684\u4ea4\u6613\u6570\u91cf \n \n \n \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/solana/blocks/#solanablocks"}
{"content": "\u00b6", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/solana/blocks/#_2"}
{"content": "\u8d26\u6237\u6d3b\u52a8\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/solana/account-activity/#_1"}
{"content": "Solana.account_activity \u00b6 \n \u6b64\u8868\u5305\u542b\u6765\u81ea\u4ea4\u6613\u8868\u4e2d\u7684\u5173\u6ce8\u5e10\u6237\u4f7f\u7528\u60c5\u51b5\u7684\u4fe1\u606f\u3002\u6bcf\u884c\u5305\u542b\u6709\u5173\u4ea4\u6613\u4e2d\u4e00\u4e2a\u5e10\u6237\u4f7f\u7528\u60c5\u51b5\u7684\u6240\u6709\u4fe1\u606f\u3002 \n \n \n \n \u5b57\u6bb5\u540d\u79f0 \n \u5b57\u6bb5\u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n block_slot \n bigint \n \u4ea4\u6613\u6240\u5728\u533a\u5757\u7684\u69fd\u4f4d \n \n \n block_hash \n string \n \u4ea4\u6613\u6240\u5728\u533a\u5757\u7684\u54c8\u5e0c\u503c \n \n \n block_time \n timestamp \n \u6b64\u5e10\u6237\u4f7f\u7528\u53d1\u751f\u7684\u65f6\u95f4\u6233 \n \n \n block_date \n date \n \u6b64\u5e10\u6237\u4f7f\u7528\u53d1\u751f\u7684\u65e5\u671f \n \n \n address \n string \n \u8d26\u6237\u5730\u5740\uff0c\u4e5f\u79f0\u4e3a\u516c\u94a5 \n \n \n tx_index \n int \n \u4ea4\u6613\u5728\u533a\u5757\u4e2d\u7684\u7d22\u5f15 \n \n \n tx_id \n string \n \u5f15\u53d1\u6b64\u5e10\u6237\u4f7f\u7528\u7684\u4ea4\u6613\u7684ID \n \n \n tx_success \n boolean \n \u6b64\u4ea4\u6613\u662f\u5426\u6210\u529f\u5e76\u5df2\u63d0\u4ea4 \n \n \n signed \n boolean \n \u6b64\u5e10\u6237\u662f\u5426\u7b7e\u7f72\u4e86\u5f53\u524d\u4ea4\u6613 \n \n \n writeable \n boolean \n \u6b64\u5e10\u6237\u662f\u5426\u5728\u5f53\u524d\u4ea4\u6613\u4e2d\u88ab\u6388\u4e88\u5199\u5165\u6743\u9650 \n \n \n pre_balance \n bigint \n \u6b64\u8d26\u6237\u5728\u4ea4\u6613\u5904\u7406\u524d\u7684\u4f59\u989d \n \n \n pre_token___balance \n decimal \n \u4ea4\u6613\u5904\u7406\u524d\u7684\u4ee3\u5e01\u4f59\u989d \n \n \n post_balance \n bigint \n \u4ea4\u6613\u5904\u7406\u540e\u8be5\u8d26\u6237\u7684\u4f59\u989d \n \n \n post_token___balance \n decimal \n \u4ea4\u6613\u5904\u7406\u540e\u7684\u4ee3\u5e01\u4f59\u989d \n \n \n balance_change \n bigint \n \u4f5c\u4e3a\u4ea4\u6613\u7684\u4e00\u90e8\u5206\u53d1\u751f\u7684\u4f59\u989d\u53d8\u5316 \n \n \n token_balance___change \n decimal \n \u4f5c\u4e3a\u4ea4\u6613\u7684\u4e00\u90e8\u5206\u53d1\u751f\u7684\u4ee3\u5e01\u4f59\u989d\u53d8\u5316", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/solana/account-activity/#solanaaccount_activity"}
{"content": "Solana \u00b6 \n \u8bf7\u5728\u4e0b\u9762\u7684\u90e8\u5206\u4e2d\u627e\u5230\u5bf9\u5e94\u7684\u8868\u683c\u3002 \n \u5982\u679c\u60a8\u662fSolana\u5deb\u5e08\u5e76\u60f3\u5e2e\u52a9\u6211\u4eec\uff0c\u8bf7\u5728 dune.com/careers  (https://dune.com/careers) \u63d0\u4ea4\u7533\u8bf7\u3002", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/solana/#solana"}
{"content": "\u4ea4\u6613\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/polygon/transactions/#_1"}
{"content": "polygon.transactions \u00b6 \n \u4ea4\u6613\u662f\u6765\u81ea\u8d26\u6237\u7684\u52a0\u5bc6\u7b7e\u540d\u6307\u4ee4\u3002\u5e10\u6237\u901a\u8fc7\u53d1\u8d77\u4ea4\u6613\u6765\u66f4\u65b0\u4ee5\u592a\u574a\u7f51\u7edc\u7684\u72b6\u6001\u3002\u4ea4\u6613\u59cb\u7ec8\u6765\u81ea\u5916\u90e8\u62e5\u6709\u7684\u8d26\u6237\uff0c\u667a\u80fd\u5408\u7ea6\u65e0\u6cd5\u53d1\u8d77\u4ea4\u6613\u3002 \n \u4ea4\u6613\u9700\u8981\u5e7f\u64ad\u5230\u6574\u4e2a\u7f51\u7edc\u3002\u4efb\u4f55\u8282\u70b9\u90fd\u53ef\u4ee5\u5e7f\u64ad\u5728EVM\u4e0a\u5373\u5c06\u6267\u884c\u4ea4\u6613\u7684\u8bf7\u6c42\uff1b\u5e7f\u64ad\u53d1\u9001\u540e\uff0c\u77ff\u5de5\u5c06\u6267\u884c\u4ea4\u6613\u5e76\u5c06\u7ed3\u679c\u72b6\u6001\u66f4\u6539\u4f20\u64ad\u5230\u7f51\u7edc\u7684\u5176\u4f59\u90e8\u5206\u3002 \n \u70b9\u51fb \u8fd9\u91cc  (https://ethereum.org/en/developers/docs/transactions) \u5728\u4ee5\u592a\u574a\u5b98\u65b9\u6587\u6863\u4e2d\u9605\u8bfb\u66f4\u591a\u4fe1\u606f\u3002 \n \n \n \n \u5b57\u6bb5\u540d\u79f0 \n \u6570\u636e\u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n block_time \n timestamptz \n \u5305\u542b\u6b64\u4ea4\u6613\u7684\u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n nonce \n numeric \n \u53d1\u8d77\u4ea4\u6613\u7684\u94b1\u5305\u7684\u552f\u4e00\u503c\u4ea4\u6613\u968f\u673a\u6570 \n \n \n index \n numeric \n \u5f53\u524d\u4ea4\u6613\u5728\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e \n \n \n success \n boolean \n \u663e\u793a\u4ea4\u6613\u662f\u5426\u6210\u529f\u7684\u771f/\u5047\u503c \n \n \n from \n string \n \u53d1\u9001\u8005\u7684\u5730\u5740 \n \n \n to \n string \n \u63a5\u6536\u8005\u7684\u5730\u5740\u3002\u5f53\u662f\u5408\u7ea6\u521b\u5efa\u4ea4\u6613\u65f6\u503c\u4e3a NULL \n \n \n value \n numeric \n \u5728\u6b64\u4ea4\u6613\u4e2d\u53d1\u9001\u7684\u4ee5 wei \u4e3a\u5355\u4f4d\u7684\u4ee5\u592a\u5e01\u6570\u91cf\u3002\u8bf7\u6ce8\u610f\uff0cerc20\u4ee3\u5e01\u4e0d\u4f1a\u51fa\u73b0\u5728\u8fd9\u91cc\u3002 \n \n \n block_number \n int8 \n \u533a\u5757\u94fe\u7684\u957f\u5ea6\uff08\u4ee5\u533a\u5757\u6570\u4e3a\u5355\u4f4d\uff09 \n \n \n block_hash \n string \n \u5f53\u524d\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n gas_limit \n numeric \n \u4ee5 wei \u8868\u793a\u7684\u71c3\u6599\u9650\u5236 \n \n \n gas_price \n numeric \n \u4ee5 wei \u8868\u793a\u7684\u71c3\u6599\u4ef7\u683c \n \n \n gas_used \n numeric \n \u4ee5 wei \u8868\u793a\u7684\u5f53\u524d\u4ea4\u6613\u6d88\u8017\u7684\u71c3\u6599\u6570\u91cf \n \n \n data \n string \n \u53ef\u4ee5\u662f\u7a7a\u503c\u3001\u5341\u516d\u8fdb\u5236\u7f16\u7801\u7684\u6d88\u606f\u6216\u667a\u80fd\u5408\u7ea6\u8c03\u7528\u6307\u4ee4 \n \n \n hash \n string \n \u4ea4\u6613\u7684\u54c8\u5e0c\u503c \n \n \n type \n text \n \u4ea4\u6613\u7c7b\u578b\uff1a Legacy \uff0c AccessList \u6216 DynamicFee \n \n \n access_list \n jsonb \n \u4ea4\u6613\u51c6\u5907\u8bbf\u95ee\u7684\u5730\u5740\u548c\u5b58\u50a8\u5bc6\u94a5\u7684\u5217\u8868\u3002\u53c2\u89c1 EIP2930  (https://eips.ethereum.org/EIPS/eip-2930) \u3002\u9002\u7528\u4e8e\u4ea4\u6613\u7c7b\u578b\u4e3a AccessList \u6216 DynamicFee \u7684\u60c5\u51b5 \n \n \n max_fee_per_gas \n numeric \n \u4ea4\u6613\u53d1\u9001\u8005\u613f\u610f\u652f\u4ed8\u7684\u6bcf\u5355\u4f4d\u71c3\u6599\u7684\u6700\u9ad8\u8d39\u7528\u603b\u989d\uff08\u7531 EIP1559  (https://eips.ethereum.org/EIPS/eip-1559) \u5f15\u5165\uff09 \n \n \n max_priority_fee_per_gas \n numeric \n \u4ea4\u6613\u53d1\u9001\u8005\u613f\u610f\u5411\u77ff\u5de5\u652f\u4ed8\u7684\u6bcf\u5355\u4f4d\u71c3\u6599\u7684\u6700\u9ad8\u8d39\u7528\uff0c\u4ee5\u6fc0\u52b1\u4ed6\u4eec\u5728\u65b0\u533a\u5757\u4e2d\u5305\u542b\u4ed6\u4eec\u7684\u4ea4\u6613\uff08\u7531 EIP1559  (https://eips.ethereum.org/EIPS/eip-1559) \u5f15\u5165\uff09 \n \n \n priority_fee_per_gas \n numeric \n \u672c\u6b21\u4ea4\u6613\u652f\u4ed8\u7ed9\u77ff\u5de5\u7684\u4f18\u5148\u8d39\u7528\uff08\u7531 EIP1559  (https://eips.ethereum.org/EIPS/eip-1559)  \u5f15\u5165\uff09 \n \n \n \n **** \u8bf7\u81ea\u884c\u67e5\u770b\u67e5\u8be2\u793a\u4f8b  (https://dune.xyz/queries/38964) ****", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/polygon/transactions/#polygontransactions"}
{"content": "\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/polygon/traces/#_1"}
{"content": "polygon.traces \u00b6 \n \u4ea4\u6613\uff08Transactions\uff09\u53ef\u4ee5\u89e6\u53d1\u4fee\u6539\u4ee5\u592a\u574a\u865a\u62df\u673a\u5185\u90e8\u72b6\u6001\u7684\u66f4\u5c0f\u7684\u539f\u5b50\u64cd\u4f5c\u3002\u6709\u5173\u8fd9\u4e9b\u64cd\u4f5c\u6267\u884c\u7684\u4fe1\u606f\u4f1a\u88ab\u8bb0\u5f55\u4e0b\u6765\uff0c\u5e76\u4e14\u53ef\u4ee5\u5b58\u50a8\u4e3aEVM\u6267\u884c\u5185\u90e8\u5408\u7ea6\uff0c\u6216\u8005\u53ea\u662f\u4e00\u4e2a_\u5185\u90e8\u5408\u7ea6_\u3002\u5728Etherscan\u4e2d\uff0c\u8fd9\u4e9b\u88ab\u79f0\u4e3a\u201c\u5185\u90e8\u4ea4\u6613\u201d\u3002 \n \u70b9\u51fb \u8fd9\u91cc  (https://medium.com/chainalysis/ethereum-traces-not-transactions-3f0533d26aa) \u9605\u8bfb\u66f4\u591a\u4fe1\u606f\u3002 \n \n \n \n \u5b57\u6bb5\u540d\u79f0 \n \u6570\u636e\u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n block_time \n timestamptz \n \u5305\u542b\u6b64\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u7684\u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n tx_success \n boolean \n \u6307\u793a\u4ea4\u6613\u662f\u5426\u6210\u529f\u7684\u771f/\u5047\u503c \n \n \n success \n boolean \n \u6307\u793a\u5f53\u524d\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u64cd\u4f5c\u662f\u5426\u6210\u529f\u7684\u771f/\u5047\u503c \n \n \n block_hash \n string \n \u5f53\u524d\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n block_number \n int8 \n \u533a\u5757\u94fe\u7684\u957f\u5ea6\uff08\u4ee5\u533a\u5757\u6570\u4e3a\u5355\u4f4d\uff09 \n \n \n tx_hash \n string \n \u53d1\u51fa\u6b64\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u7684\u4ea4\u6613\u7684\u54c8\u5e0c\u503c \n \n \n from \n string \n \u53d1\u9001\u8005\u7684\u5730\u5740 \n \n \n to \n string \n \u63a5\u6536\u8005\u7684\u5730\u5740\u3002\u5f53\u5b83\u662f\u4e00\u4e2a\u5408\u7ea6\u521b\u5efa\u4ea4\u6613\u65f6\uff0c\u5176\u503c\u4e3a Null \n \n \n value \n numeric \n \u672c\u6b21\u4ea4\u6613\u4e2d\u53d1\u9001\u7684\u4ee5\u592a\u5e01\u6570\u91cf\uff0c\u4ee5 wei \u8868\u793a \n \n \n gas \n numeric \n \n \n \n gas_used \n numeric \n \u6d88\u606f\u8c03\u7528\u6d88\u8017\u7684\u71c3\u6599\u6570\u91cf\uff0c\u4ee5 wei \u8868\u793a \n \n \n tx_index \n numeric \n \u5f52\u5c5e\u7684\u4ea4\u6613\u5728\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e \n \n \n trace_address \n array \n \u5f53\u524d\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u5728\u8c03\u7528\u56fe\u68ee\u6797\u4e2d\u7684\u5730\u5740\u3002\u4f8b\u5982\uff0c[0, 2, 1] \u662f [0, 2, 1, 0] \u7684\u7236\u7ea7 \n \n \n sub_traces \n numeric \n \u5b50\u7ea7\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u7684\u6570\u91cf \n \n \n type \n text \n \u53ef\u4ee5\u662f reward \uff0c create \uff0c call \u6216\u8005 suicide \u3002\u63cf\u8ff0\u5728\u6b64\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u4e2d\u4f7f\u7528\u7684\u64cd\u4f5c\u7c7b\u578b\u3002 \n \n \n address \n string \n \u5f53\u7c7b\u578b\u662f suicide \u6216\u8005 create \u65f6\u4fdd\u5b58\u8c03\u7528\u7684\u5408\u7ea6\u5730\u5740 \n \n \n code \n string \n \u90e8\u7f72\u65b0\u5408\u7ea6\u7684\u5b57\u8282\u7801\uff0c\u4ec5\u5728\u8c03\u7528\u7c7b\u578b\u4e3a create \u65f6\u5305\u542b\u6570\u636e\u3002 \n \n \n call_type \n string \n \u53ef\u4ee5\u662f staticcall \uff0c delegatecall \u6216\u8005 call \u3002 \u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u8003 \u8fd9\u91cc  (https://medium.com/coinmonks/delegatecall-calling-another-contract-function-in-solidity-b579f804178c) \u3002 \n \n \n input \n string \n \u8c03\u7528\u53e6\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6\u7684\u5b57\u8282\u7801 \n \n \n output \n string \n \u88ab\u8c03\u7528\u667a\u80fd\u5408\u7ea6\u53d1\u9001\u56de\u6765\u7684\u5b57\u8282\u7801\u54cd\u5e94 \n \n \n refund_address \n string \n \u4ec5\u5728 type \u662f suicide \u65f6\u5305\u542b\u6570\u636e\u3002\u6307\u5b9a\u5c06\u672a\u652f\u51fa\u7684\u4ee5\u592a\u5e01\u4f59\u989d\u53d1\u9001\u5230\u54ea\u91cc\u3002 \n \n \n \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/polygon/traces/#polygontraces"}
{"content": "\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u6d88\u8017\u7684\u71c3\u6599 \u00b6 \n polygon.traces\u8868\u4e2d\u7684 gas_used \u5b57\u6bb5\u6709\u70b9\u96be\u4ee5\u7406\u89e3\uff0c\u6240\u4ee5\u8fd9\u91cc\u6709\u4e00\u4e9b\u63d0\u793a\uff1a \n \n \u5185\u90e8\u5408\u7ea6\u8c03\u7528\u7684 gas_used \u5c06\u59cb\u7ec8\u5305\u62ec\u5408\u7ea6\u8c03\u7528\u672c\u8eab\u4ee5\u53ca\u5176\u6240\u6709\u5b50\u7ea7\u5408\u7ea6\u8c03\u7528\u6240\u6d88\u8017\u7684\u71c3\u6599\u3002 \n \u521d\u59cb\u8c03\u7528\u7684 gas_used \u5c06\u4e0d\u5305\u542b\u53d1\u8d77\u8c03\u7528\u65f6\u5df2\u53d1\u751f\u7684\u71c3\u6599\u6d88\u8017\u3002 \n \u60a8\u9700\u8981\u5c06\u201c21000\u4e2a\u71c3\u6599\u5355\u4f4d + \u53d1\u9001\u96f6\u5b50\u8282\u53ca\u53d1\u9001\u975e\u96f6\u5b57\u8282\u7684\u71c3\u6599\u6210\u672c\u201d\u6dfb\u52a0\u5230\u9876\u90e8\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u7684 gas_used \u503c\u4e0a\uff0c\u4ee5\u5f97\u5230\u201c\u771f\u5b9e\u201d\u7684 gas_used \u503c\u3002 \n \u6709\u5173\u6b64\u5185\u5bb9\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u6b64 stackexchange\u6761\u76ee  (https://ethereum.stackexchange.com/questions/31443/what-do-the-response-values-of-a-parity-trace-transaction-call-actually-repres) \n \u5728Dune\u4e2d\u6267\u884c\u6b64\u64cd\u4f5c\u7684\u67e5\u8be2\u793a\u4f8b\uff1a https://dune.com/queries/895857  (https://dune.com/queries/895857)", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/polygon/traces/#_2"}
{"content": "\u8df3\u8f6c\u81f3\n          (#faq) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/pricing.md) \n \u4ed8\u8d39 \n \n Whether you're a basement degen or Blackrock VP, Dune has you covered with our Premium plans! \n Dune pro \u8ba9\u60a8\u83b7\u5f97\u5927\u91cf\u7684\u9ad8\u7ea7\u529f\u80fd\uff0c\u5305\u62ec\uff1a \n \n \u79c1\u4eba\u67e5\u8be2\u548c\u770b\u677f \n \u5bfc\u51fa CSV \u6587\u4ef6 \n Up to 64x faster executions  (#whats-the-performance-difference-between-tiers) \n \u65e0 Dune \u6c34\u5370 \n \u6700\u591a\u540c\u65f6\u5904\u7406 6 \u4e2a\u67e5\u8be2 \n \n \u5728\u6211\u4eec\u7684\u4ef7\u683c\u754c\u9762\u4e86\u89e3\u66f4\u591a\u5e76\u5f00\u59cb\u5427  (https://dune.com/pricing) \uff01 \n \n Note \n Premium Team and API plans coming soon, stay tuned! \ud83d\udcfa \n \n ", "url": "https://dune.com/docs/zh/reference/pricing/"}
{"content": "\u4e8b\u4ef6\u65e5\u5fd7\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/polygon/event-logs/#_1"}
{"content": "polygon.logs \u00b6 \n \u6b64\u8868\u5b58\u50a8\u4e86\u667a\u80fd\u5408\u7ea6\u751f\u6210\u7684\u6240\u6709\u4e8b\u4ef6\u65e5\u5fd7\u3002\u5b83\u5bf9\u4e8e\u67e5\u8be2\u5c1a\u672a\u88ab\u89e3\u7801\u6216\u8005\u7531\u4e8e\u4ee3\u7801\u975e\u5f00\u6e90\u800c\u65e0\u6cd5\u89e3\u7801\u7684\u5408\u7ea6\u5f88\u6709\u7528\u3002 \n \u4e8b\u4ef6\u65e5\u5fd7\uff08Logs\uff09\u662f\u4e00\u79cd\u5728EVM\u533a\u5757\u94fe\u4e0a\u5b58\u50a8\u5c11\u91cf\u6570\u636e\u4ece\u800c\u53ea\u6d88\u8017\u5c11\u91cf\u71c3\u6599\u7684\u4f18\u96c5\u65b9\u5f0f\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u4e8b\u4ef6\u65e5\u5fd7\u6709\u52a9\u4e8e\u8ba9\u5176\u4ed6\u4eba\u4e0d\u5fc5\u5355\u72ec\u67e5\u8be2\u5177\u4f53\u7684\u5408\u7ea6\u4ee3\u7801\u5c31\u80fd\u77e5\u9053\u53d1\u751f\u4e86\u4ec0\u4e48\u4e8b\u60c5\u3002 \n \u6709\u5173\u6b64\u4e3b\u9898\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u9605\u8bfb \u672c\u6587  (https://medium.com/mycrypto/understanding-event-logs-on-the-ethereum-blockchain-f4ae7ba50378) \u3002 \n \u6ce8\u610f\uff1a\u6211\u4eec\u7684\u4e3b\u9898\u7d22\u5f15\u662f\u4ece1\u5f00\u59cb\u8ba1\u6570\u7684\uff0c\u6240\u4ee5 topic0 \u663e\u793a\u4e3a topic1 \uff0c topic1 \u663e\u793a\u4e3a topic2 \uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \n \n \n \n \u5b57\u6bb5\u540d\u79f0 \n \u6570\u636e\u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n block_hash \n string \n \u5f53\u524d\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n block_number \n int8 \n \u533a\u5757\u94fe\u7684\u957f\u5ea6\uff08\u4ee5\u533a\u5757\u6570\u4e3a\u5355\u4f4d\uff09 \n \n \n block_time \n timestamptz \n \u5305\u542b\u6b64\u4e8b\u4ef6\u65e5\u5fd7\u7684\u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n contract_address \n string \n \u53d1\u51fa\u5f53\u524d\u4e8b\u4ef6\u65e5\u5fd7\u7684\u5408\u7ea6\u5730\u5740 \n \n \n topic1 \n string \n \u4e8b\u4ef6\u58f0\u660e\u5b57\u7b26\u4e32\u5e73\u5c55\u540e\u7684keccak256\u54c8\u5e0c\u503c \n \n \n topic2 \n string \n \u4e8b\u4ef6\u7684\u7d22\u5f15\u4e3b\u98981 \n \n \n topic3 \n string \n \u4e8b\u4ef6\u7684\u7d22\u5f15\u4e3b\u98982 \n \n \n topic4 \n string \n \u4e8b\u4ef6\u7684\u7d22\u5f15\u4e3b\u98983 \n \n \n data \n string \n \u5305\u542b\u6709\u5173\u4e8b\u4ef6\u7684\u66f4\u591a\u4fe1\u606f\u7684\u672a\u7d22\u5f15\u6570\u636e \n \n \n tx_hash \n string \n \u4ea7\u751f\u6b64\u4e8b\u4ef6\u65e5\u5fd7\u7684\u4ea4\u6613\u7684\u54c8\u5e0c\u503c \n \n \n index \n numeric \n \u4e8b\u4ef6\u65e5\u5fd7\u5728\u88ab\u8bb0\u5f55\u7684\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e\uff08\u6309\u6267\u884c\u987a\u5e8f\u6392\u5e8f\u7684\u7d2f\u8ba1\u65e5\u5fd7\u6570\u91cf\uff09 \n \n \n tx_index \n numeric \n \u4e8b\u4ef6\u65e5\u5fd7\u5f52\u5c5e\u7684\u4ea4\u6613\u5728\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e\uff08\u6309\u6267\u884c\u987a\u5e8f\u6392\u5e8f\u7684\u7d2f\u8ba1\u4ea4\u6613\u6570\u91cf\uff09", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/polygon/event-logs/#polygonlogs"}
{"content": "\u8df3\u8f6c\u81f3\n          (#-dune-api-beta) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/api/FAQ/TOS.md) \n \n ", "url": "https://dune.com/docs/zh/api/FAQ/TOS/"}
{"content": "\u793e\u533a\u6559\u7a0b \u00b6 \n \u6211\u4eec\u7684\u4e00\u4e9b\u793e\u533a\u6210\u5458\u5df2\u7ecf\u4e3a\u9b54\u6cd5\u4e66\u5236\u4f5c\u4e86\u5f88\u597d\u7684\u6559\u7a0b\uff1a \n \n @ilemi aka Andrew Hong \u53d1\u5e03\u4e86\u6559\u7a0b -  \u9605\u8bfb\u5b83  (https://ath.mirror.xyz/K-S_Mwhj7osTBqN-AOWbCmfNn9TZViEkzICCmK-oObM) \uff0c\u5e76\u89c2\u770b \u89c6\u9891  (https://www.youtube.com/watch?v=7zReSzVdV2s) \uff01", "url": "https://dune.com/docs/zh/spellbook/getting-started/#_1"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/api/FAQ/other.md) \n \u5176\u4ed6 \n \u8bf7\u8054\u7cfb  api-feedback@dune.com  (mailto:api-feedback@dune.com)  \u6216\u52a0\u5165\u6211\u4eec\u7684 # dune-api  (https://discord.com/channels/757637422384283659/1019910980634939433)  Discord \u9891\u9053\uff0c\u4ee5\u83b7\u5f97\u5176\u4ed6\u95ee\u9898\u7684\u5feb\u901f\u7b54\u7591\u3002", "url": "https://dune.com/docs/zh/api/FAQ/other/"}
{"content": "\u5bfc\u822a \u00b6 \n \n \u60a8\u53ef\u4ee5\u4f7f\u7528\u7a97\u53e3\u5de6\u4fa7\u7684\u9879\u76ee\u548c\u6570\u636e\u5e93\u5bfc\u822a\u6807\u7b7e\u6765\u63a2\u7d22\u9b54\u6cd5\u4e66\u6a21\u578b\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u9876\u90e8\u7684\u641c\u7d22\u680f\u3002 \n ", "url": "https://dune.com/docs/zh/spellbook/spellbook-model-docs/#_1"}
{"content": "\u9879\u76ee\u7a97\u53e3 \u00b6 \n \n \u9879\u76ee\u6807\u7b7e\u662f\u60a8\u53ef\u4ee5\u627e\u5230\u6570\u636e\u6e90\uff08sources\uff09\u548c\u9b54\u6cd5\u4e66\u6a21\u578b\u7684\u5730\u65b9\u3002 \n ", "url": "https://dune.com/docs/zh/spellbook/spellbook-model-docs/#_2"}
{"content": "\u6570\u636e\u6e90\u6a21\u578b \u00b6 \n \u6570\u636e\u6e90  (../getting-started/data-sources/)  \u662f\u7531 Dune V2 \u6570\u636e\u6e56\u4e2d\u7684\u6570\u636e\u8868\u5efa\u7acb\u7684 dbt \u6570\u636e\u6a21\u578b\u3002 \n \u5728\u4f7f\u7528\u9b54\u6cd5\u4e66\u4e4b\u524d\uff0c\u6570\u636e\u5fc5\u987b\u9996\u5148\u88ab\u62c9\u5165\u9b54\u6cd5\u4e66\u7684\u6570\u636e\u6e90\u6a21\u578b\uff0c\u6240\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u5217\u8868\uff0c\u60a8\u53ef\u4ee5\u4e86\u89e3\u54ea\u4e9b\u6570\u636e\u53ef\u4ee5\u5728\u60a8\u7684\u9b54\u6cd5\u4e66\u4e2d\u4f7f\u7528\uff0c\u4ee5\u53ca\u54ea\u4e9b\u6570\u636e\u53ef\u80fd\u9700\u8981\u5148\u4f5c\u4e3a\u6570\u636e\u6e90\u6a21\u578b\u88ab\u6dfb\u52a0\u3002 \n \u6bd4\u5982\uff0c Arbitrum blocks  (../../tables/v2/raw/arbitrum/blocks/)  \u6570\u636e\u5728\u9b54\u6cd5\u4e66\u4e2d\u53ef\u7528\uff0c\u4f46\u662f  Arbitrum event logs  (../../tables/v2/raw/arbitrum/event-logs/)  \u5219\u4e0d\u884c\u3002 \n ", "url": "https://dune.com/docs/zh/spellbook/spellbook-model-docs/#_3"}
{"content": "\u9b54\u6cd5\u4e66\u6a21\u578b \u00b6 \n \u5728 Sources \u4e0b\u9762\uff0c\u60a8\u4f1a\u53d1\u73b0\u4e00\u4e2a Projects \u76ee\u5f55\uff0c\u8fd9\u91cc\u552f\u4e00\u91cd\u8981\u7684\u662f Spellbook \u6587\u4ef6\u5939\uff0c\u5b83\u5305\u542b\u4e86\u4e0e\u83ab\u53d1\u8868\u6709\u5173\u7684\u5404\u79cd\u4ee3\u7801\u548c\u6570\u636e\u8868\u7684\u6587\u6863\u3002 \n \n \n Macros  \u5305\u542b\u4f7f\u9b54\u6cd5\u4e66\u6b63\u5e38\u5de5\u4f5c\u7684\u51fd\u6570 \n Models  \u5305\u542b \u9b54\u6cd5  (../getting-started/spells/) \n Seeds  \u5305\u542b\u7528\u4e8e\u6d4b\u8bd5\u7684\u9759\u6001\u6570\u636e \n Tests  \u5305\u542b \u5355\u5143\u6d4b\u8bd5  (../getting-started/tests/) \u786e\u4fdd\u9b54\u6cd5\u6309\u9884\u671f\u5de5\u4f5c\u3002 \n \n ", "url": "https://dune.com/docs/zh/spellbook/spellbook-model-docs/#_4"}
{"content": "\u8109\u7edc\u56fe \u00b6 \n \u60a8\u53ef\u4ee5\u70b9\u51fb\u9875\u9762\u53f3\u4e0b\u89d2\u7684\u84dd\u8272\u56fe\u6807\uff0c\u67e5\u770b\u60a8\u6b63\u5728\u770b\u7684\u6a21\u578b\u7684\u8109\u7edc\u56fe\uff1a \n \n \u5728\u8109\u7edc\u56fe\u4e2d\uff0c\u60a8\u4f1a\u770b\u5230\u5f53\u524d\u6a21\u578b\u7684\u76f4\u7cfb\u7236\u7cfb\u548c\u5b50\u7cfb\u6a21\u578b\u3002 \n \n \u70b9\u51fb\u8fd9\u4e2a\u8109\u7edc\u56fe\u53f3\u4e0a\u65b9\u7684 \"\u6269\u5c55 \"\u6309\u94ae\uff0c\u53ef\u4ee5\u770b\u5230\u6240\u6709\u7528\u4e8e\u5efa\u7acb\u6216\u4ece\u5f53\u524d\u7684\u6a21\u578b\u4e2d\u884d\u751f\u7684\u6a21\u578b\u3002 \n \n \u5c55\u5f00\u540e\u70b9\u51fb\u4efb\u4f55\u6a21\u578b\u540d\u79f0\uff0c\u5c31\u53ef\u4ee5\u7a81\u51fa\u663e\u793a\u5176\u76f8\u5173\u7684\u7236/\u5b50\u6a21\u578b\u3002 \n \n \u60a8\u4e5f\u53ef\u4ee5\u5728\u6a21\u578b\u4e0a\u70b9\u51fb\u53f3\u952e\uff0c\u4ee5\u4e92\u52a8\u65b9\u5f0f\u63a2\u7d22\u548c\u8fc7\u6ee4\u56fe\u8868\uff1a \n \n \u6700\u540e\uff0c\u5728\u5e95\u90e8\u6709\u591a\u79cd\u8fc7\u6ee4\u56fe\u8868\u7684\u9009\u9879\uff1a", "url": "https://dune.com/docs/zh/spellbook/spellbook-model-docs/#_5"}
{"content": "\u65b0\u529f\u80fd\u89e3\u9501 \u00b6 \n \u5728\u65b0\u7684\u6570\u636e\u5f15\u64ce\u53d1\u5e03\u540e\uff0c\u73b0\u5728\u662f\u65f6\u5019\u66f4\u65b0\u6211\u4eec\u4f7f\u7528\u7684\u5de5\u5177\u4e86\u3002 \n 2020 \u5e74 1 \u6708 31 \u65e5\uff0c\u6211\u4eec\u53d1\u5e03\u4e86\u6570\u636e\u62bd\u8c61\uff08abstractions\uff09\u5b9a\u4e49\u5e93\uff0c\u4f5c\u4e3a\u5deb\u5e08\u4eec\u521b\u5efa\u89c6\u56fe\u548c\u540e\u7eed\u8868\u683c\u7684\u53c2\u8003\u3002 \u4ece\u90a3\u65f6\u8d77\uff0c\u9b54\u6cd5\u4e66\u9879\u76ee\u5df2\u6709\u8d85\u8fc7 300 \u540d\u8d21\u732e\u8005\u548c\u8fd1\u5343\u6b21\u4ee3\u7801\u63d0\u4ea4\u3002 \n \n \u6570\u636e\u62bd\u8c61\u662f Dune \u4e0a\u67e5\u8be2\u6700\u591a\u7684\u4e00\u7c7b\u8868\uff0c\u5deb\u5e08\u4eec\u901a\u8fc7\u521b\u5efa\u6570\u636e\u62bd\u8c61\u6765\u63d0\u9ad8\u5de5\u4f5c\u6210\u679c\u590d\u7528\u7387\u3002   \u9b54\u6cd5\u4e66 \u6b63\u662f\u7528\u6765\u6539\u5584\u6b64\u6d41\u7a0b\u4f53\u9a8c\u7684\u3002\u9b54\u6cd5\u4e66\u662f\u5bf9\u73b0\u6709 \u6570\u636e\u62bd\u8c61  (https://github.com/duneanalytics/spellbook/index.md) \u5b9a\u4e49\u5e93\u7684\u91cd\u7ec4\uff0c\u5e76\u7ed3\u5408\u4e86\u4e00\u6d41\u7684\u5f00\u6e90\u5206\u6790\u5de5\u7a0b\u5de5\u5177  dbt  (https://docs.getdbt.com/docs/introduction) \u3002 \n dbt-core  (https://docs.getdbt.com/docs/introduction) \uff08data build tool \u6570\u636e\u6784\u5efa\u5de5\u5177\uff09\u662f\u4e00\u4e2a\u5f00\u6e90\u6846\u67b6\uff0c\u901a\u8fc7\u5c06 SQL \u4e0e Jinja \u6a21\u677f\u6df7\u5408\uff0c\u4f7f\u66f4\u591a\u7ecf\u5178\u7684\u8f6f\u4ef6\u5de5\u7a0b\u5b9e\u8df5\u6ce8\u5165\u5230 SQL \u5f00\u53d1\u4e2d\u3002  \n \n \u6570\u636e\u62bd\u8c61\uff0c\u73b0\u5728\u65e2\u662f dbt \u6982\u5ff5\u4e2d\u7684  \u6a21\u578b\uff08models\uff09 \uff0c \u4e5f\u662f Dune \u7cfb\u7edf\u4e2d\u7684  \u9b54\u6cd5\uff08spells\uff09 \uff0c\u53ef\u4ee5\u5177\u4f53\u5316\u4e3a\u89c6\u56fe\u548c\u8868\uff0c\u540c\u65f6\u73b0\u5728\u8fd8\u53ef\u8fdb\u884c\u8bb8\u591a\u529f\u80fd\u4e0a\u7684\u6539\u8fdb\uff0c\u5305\u62ec\u589e\u91cf\u52a0\u8f7d\u8868\u3001\u65e5\u671f\u5206\u533a\u8868\u7b49\u7b49\u3002 \u8fd9\u4e9b\u90fd\u53ef\u4ee5\u7f16\u8bd1\u6210 SQL \u5e76\u5728 dune.com \u4e0a\u8fd0\u884c\u3002 \u65b0\u7684\u4ee3\u7801\u63d0\u4ea4\u90fd\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u65b9\u6cd5\u8fdb\u884c\u81ea\u4e3b\u6d4b\u8bd5\u3002 \n \u6211\u4eec\u53ef\u4ee5\u7528 dbt \u6765\u4e3a SQL \u7f16\u5199\u548c\u7ba1\u7406\u5355\u5143\u6d4b\u8bd5\uff0c\u4ee5\u53d1\u73b0\u548c\u9632\u6b62\u6570\u636e\u62bd\u8c61\u4e2d\u53ef\u80fd\u51fa\u73b0\u7684\u95ee\u9898\u3002 \n \u4ec5\u9700\u5728 YAML \u6587\u4ef6\u4e2d\u6dfb\u52a0\u4e00\u884c\u4ee3\u7801\u5373\u53ef\u4e3a\u6570\u636e\u6dfb\u52a0\u5b8c\u6574\u6027\u6d4b\u8bd5\u3002\u4ece\u6b64\u6d4b\u8bd5\u6a21\u578b\u7684\u552f\u4e00\u4e3b\u952e\u3001\u975e\u7a7a\u503c\u3001\u53ef\u63a5\u53d7\u7684\u503c\u548c\u5173\u7cfb\u5b8c\u6574\u6027\u90fd\u53d8\u5f97\u66f4\u52a0\u65b9\u4fbf\u3002 \n dbt \u539f\u751f\u652f\u6301\u5bf9\u6a21\u578b\u4f9d\u8d56\u5173\u7cfb\u7684\u7406\u89e3\u3002\u5728\u6211\u4eec\u65e7\u7684\u6570\u636e\u62bd\u8c61\u4e2d\uff0c\u6211\u4eec\u624b\u52a8\u7ba1\u7406\u4f9d\u8d56\u5173\u7cfb\uff0c\u8fd9\u4f7f\u5f97\u90e8\u7f72\u548c\u7ef4\u62a4\u5b83\u4eec\u53d8\u5f97\u5341\u5206\u7e41\u7410\u3002\u901a\u8fc7\u4f9d\u8d56\u7ba1\u7406\uff0c\u6211\u4eec\u53ef\u4ee5\u4fdd\u8bc1\u6240\u6709\u6a21\u578b\u90fd\u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u90e8\u7f72\u3002 \n \n \u5e0c\u671b\u60a8\u548c\u6211\u4eec\u4e00\u6837\u5bf9\u8fd9\u4e2a\u65b0\u5de5\u5177\uff08\u9b54\u6cd5\u4e66\uff09\u611f\u5230\u5174\u594b\u3002\u9b54\u6cd5\u4e66\u73b0\u5df2\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u4e0a\u7ebf\uff0c\u6211\u4eec\u6b22\u8fce\u5927\u5bb6\u4e00\u8d77\u6765\u5171\u540c\u7f16\u5199\u9b54\u6cd5\u4e66\u3002 \n ", "url": "https://dune.com/docs/zh/spellbook/#_1"}
{"content": "Getting Started \u00b6 \n To get a better sense of what Spells are already available to you, check out our Spellbook Model Docs: \n \n \n Spellbook Model Docs  (spellbook-model-docs/) \n \n \n To take a look under the hood, check out Spellbook on GitHub: \n \n \n Spellbook on GitHub  (https://github.com/duneanalytics/spellbook) \n \n \n To learn how to build your own Spells, check out our Getting Started section here: \n \n \n Spellbook Getting Started Guide  (getting-started/)", "url": "https://dune.com/docs/zh/spellbook/#getting-started"}
{"content": "\u65b0\u95fb\u8d44\u6599\u5305 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/press-kit/#_1"}
{"content": "How to reference Dune data! \u00b6 \n Content on Dune is first and foremost the product of the creators (\"Wizards\") who build the Queries, Visualizations, and Dashboards we reference and share. \n Any mention or use of data or Visualizations you find on our platform should credit the creators of the Specific Query, Dashboard, or Data specific - not just \"Dune\". \n Crediting should be done as follows: \n \" @rchen8  (https://dune.com/rchen8)  via   OpenSea monthly volume (Ethereum)  (https://dune.com/queries/3469/6913) \". \n If you're referencing a Dashboard, you can find the creator's User Name as well as the Dashboard's name at the top left of the page. \n The link to the users profile can be found by clicking their User Name: \n \n Likewise, you can find their User Name/Profile link and the Query/Visualization name at the top left side of a Query page: \n \n For more info on how to get Embed links for Visualizations you want to share,  see this page  (../../getting-started/embeds/) ! \n \n ", "url": "https://dune.com/docs/zh/reference/press-kit/#how-to-reference-dune-data"}
{"content": "\u4e3b\u8981 - \u6807\u51c6\u5546\u6807 \u00b6 \n \u8fd9\u662f Dune \u7684\u4e3b\u8981\u5546\u6807\u3002\u5e94\u5c3d\u53ef\u80fd\u4f7f\u7528\u8fd9\u79cd\u683c\u5f0f\u3002 \n \n \n \n dune-standard-logo.svg  (../images/dune-standard-logo.svg) \n dune-standard-logo@2x.png  (../images/dune-standard-logo%402x.png) \n dune-standard-logo-dark.svg  (../images/dune-standard-logo-dark.svg) \n dune-standard-logo-dark@2x.png  (../images/dune-standard-logo-dark%402x.png) \n \n \n ", "url": "https://dune.com/docs/zh/reference/press-kit/#-"}
{"content": "\u5782\u76f4\u5546\u6807 \u00b6 \n \n \n \n dune-vertical-logo.svg  (../images/dune-vertical-logo.svg) \n dune-vertical-logo@2x.png  (../images/dune-vertical-logo%402x.png) \n dune-vertical-logo-dark.svg  (../images/dune-vertical-logo.svg) \n dune-vertical-logo-dark@2x.png  (../images/dune-vertical-logo-dark%402x.png) \n \n \n ", "url": "https://dune.com/docs/zh/reference/press-kit/#_2"}
{"content": "\u4ec5\u56fe\u6807 \u00b6 \n \n \n \n dune-icon-only.svg  (../images/dune-icon-only.svg) \n dune-icon-only@2x.png  (../images/dune-icon-only%402x.png) \n \n \n ", "url": "https://dune.com/docs/zh/reference/press-kit/#_3"}
{"content": "\u6574\u5957\u5546\u6807\u96c6\u5408 \u00b6 \n \n \n Dune-logo-Full.zip  (../images/Dune-logo-Full.zip)", "url": "https://dune.com/docs/zh/reference/press-kit/#_4"}
{"content": "Wizard Content \u00b6 \n A few members of our Wizard community are also amazing content creators, check out their work here: \n \n Journey to the Centre of Arakis  (https://1chioku.substack.com/)  by  @1chioku  (https://dune.com/1chioku) \n Andrew Hong's Mirror.xyz  (https://ath.mirror.xyz/)  by  @ilemi  (https://dune.com/ilemi) \n NiftyTable  (https://www.niftytable.com/)  by  @niftytable  (https://dune.com/niftytable) \n \n ", "url": "https://dune.com/docs/zh/reference/recommended-reading/#wizard-content"}
{"content": "General Blockchain Info \u00b6 \n \n Immersion Den  (https://immersionden.xyz/)  - a giant collection of web3 information sources. \n \n ", "url": "https://dune.com/docs/zh/reference/recommended-reading/#general-blockchain-info"}
{"content": "DeFi \u00b6 \n \n Biggest DeFi Hacks  (https://rekt.eth.link/leaderboard/) \n \n ", "url": "https://dune.com/docs/zh/reference/recommended-reading/#defi"}
{"content": "DAOs \u00b6 \n \n DAOs: Absorbing the Internet  (https://www.generalist.com/briefing/dao) \n \n ", "url": "https://dune.com/docs/zh/reference/recommended-reading/#daos"}
{"content": "Bridges/L2 \u00b6 \n \n The ultimate guide to L2s on Ethereum  (https://mirror.xyz/dcbuilder.eth/QX_ELJBQBm1Iq45ktPsz8pWLZN1C52DmEtH09boZuo0) \n \n ", "url": "https://dune.com/docs/zh/reference/recommended-reading/#bridgesl2"}
{"content": "EIPs \u00b6 \n \n https://eips.ethereum.org/  (https://eips.ethereum.org/) \n \n ", "url": "https://dune.com/docs/zh/reference/recommended-reading/#eips"}
{"content": "News and Info: \u00b6 \n \n 21Shares  (https://21shares.com/research/) \n Blockworks  (https://blockworks.co/) \n Decrypt  (https://decrypt.co/) \n CoinDesk  (https://www.coindesk.com/) \n Week in Ethereum News  (https://weekinethereumnews.com/) \n Bankless  (https://newsletter.banklesshq.com/) \n The Daily Ape  (https://www.notion.so/c96c0b6727c0433a962e897ef43efb7e) \n Finematics  (https://www.youtube.com/watch?v=l0vRTi8_FRk)  (helpful youtube videos) \n Gaby's Web3 reading list  (https://www.notion.so/f7050e62461143d49345e7b46eb5576b) \n \n ", "url": "https://dune.com/docs/zh/reference/recommended-reading/#news-and-info"}
{"content": "Newsletters \u00b6 \n \n THe Dune Digest  (https://dunedigest.substack.com/) \n CryptoPragmatist  (https://cryptopragmatist.com/) \n Messari  (https://messari.io/newsletter) \n The Daily Gwei  (https://thedailygwei.substack.com/) \n OurNetwork data newsletter  (https://ournetwork.substack.com/) \n NotBoring  (https://www.notboring.co/) \n \n ", "url": "https://dune.com/docs/zh/reference/recommended-reading/#newsletters"}
{"content": "Cool Blockchain Data Websites \u00b6 \n \n cryptofees.info  (https://cryptofees.info) \n ultrasound.money  (https://ultrasound.money) \n fees.wtf  (https://fees.wtf) \n liquidated.live  (https://liquidated.live)", "url": "https://dune.com/docs/zh/reference/recommended-reading/#cool-blockchain-data-websites"}
{"content": "FAQ \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/pricing/#faq"}
{"content": "General Questions \u00b6 \n Where can I see my billing history? \u00b6  (#where-can-i-see-my-billing-history) \n To view your billing history, follow these steps: \n \n Sign in to your Dune account  (https://dune.com/auth/login) \n Click your avatar in the top right corner \n Click \u201cSettings\u201d then \u201cSubscription\u201d \n \n Your billing history can be found under \u201cBilling\u201d. \n How do I upgrade, downgrade, or cancel my subscription? \u00b6  (#how-do-i-upgrade-downgrade-or-cancel-my-subscription) \n Individuals with paid plans or  Team  (../../getting-started/teams/)  admins can upgrade, downgrade, or cancel subscriptions. \n To upgrade or downgrade, follow these steps: \n \n Sign in to your Dune account  (https://dune.com/auth/login) \n Click your avatar in the top right corner \n Click \u201cSettings\u201d then \u201cSubscription\u201d \n Select the plan you want to up- or downgrade to \n \n To cancel your subscription, follow these steps: \n \n Sign in to your Dune account  (https://dune.com/auth/login) \n Click \u201cSettings\u201d then \u201cSubscription\u201d \n Select the Community plan \n \n Your current subscription will remain active for a full 30 days after your last payment. \n E.g. if you decide to cancel 15 days after your last payment, your current plan will remain active for an additional 15 days. \n How does billing work when I upgrade or downgrade? \u00b6  (#how-does-billing-work-when-i-upgrade-or-downgrade) \n Upgrading immediately resets your billing cycle to the day you upgrade. You'll be charged the full price for your new plan and be refunded pro rata for the unused days of your current plan. \n Downgrades are applied at the end of your billing cycle, so you'll keep your current tier benefits until the end of your current cycle. \n Which query engine will I be billed on? \u00b6  (#which-query-engine-will-i-be-billed-on) \n Queries and CSV downloads on both Dune Engine V2 and other datasets will be billed. \n What if I have more questions? \u00b6  (#what-if-i-have-more-questions) \n For any questions or issues regarding premium plans, please ask in our  #paid-plans Discord channel  (https://discord.com/channels/757637422384283659/1041694148530548776)  or email us at  support@dune.com  (mailto:support@dune.com) . \n ", "url": "https://dune.com/docs/zh/reference/pricing/#general-questions"}
{"content": "Query Execution \u00b6 \n Which query engine do the performance tiers support? \u00b6  (#which-query-engine-do-the-performance-tiers-support) \n The performance tiers are only supported on Dune Engine V2 as we are phasing out our V1 datasets. Until then, you will still be billed for any query executions or CSV downloads using other datasets. \n What's the performance difference between tiers? \u00b6  (#whats-the-performance-difference-between-tiers) \n Roughly speaking, each tier has 2-4x the amount of computational power of the previous tier. This will be more or less noticeable depending on query complexity and cluster load at any point in time. \n Overall, the higher the tier, the faster your queries will run! \n When does the rate for additional executions kick in? \u00b6  (#when-does-the-rate-for-additional-executions-kick-in) \n When your monthly execution quota drops to 0, additional queries will be charged at your plan's Additional Execution rate and charged the next time you're billed. \n Can I limit premium Query usage when I've reached my limit to avoid paying extra fees? \u00b6  (#can-i-limit-premium-query-usage-when-ive-reached-my-limit-to-avoid-paying-extra-fees) \n You can limit premium Query usage once you reach your monthly limit! \n Head to Settings -> Subscription  (https://dune.com/settings/subscription)  while logged in and turn on the \"Limit extra query executions\" toggle. \n When turned on, extra query executions will run on the Community tier and you will not be charged additional fees. \n \n ", "url": "https://dune.com/docs/zh/reference/pricing/#query-execution"}
{"content": "Features \u00b6 \n What if I add a private query to a public dashboard? \u00b6  (#what-if-i-add-a-private-query-to-a-public-dashboard) \n Other Dune users will be able to see the Visualization in the public dashboard, but won't see anything when they click the query. The results table, other Visualizations you might have, and the underlying query, all remain private. \n Can I embed private queries on other websites? \u00b6  (#can-i-embed-private-queries-on-other-websites) \n Yes! Anyone visiting a website with your Dune embed  can see the Visualization you chose  (../../getting-started/embeds/)  and nothing else. \n As an Elite user, what will happen to watermarks? \u00b6  (#as-an-elite-user-what-will-happen-to-watermarks) \n When logged in, you will never see watermarks, and chart embeds you\u2019ve created won\u2019t have watermarks. \n However, public Dashboards URLs will always be watermarked.", "url": "https://dune.com/docs/zh/reference/pricing/#features"}
{"content": "\u670d\u52a1\u6761\u6b3e - Dune API Beta \u514d\u8d39\u8bd5\u7528 \u00b6 \n \u4ee5\u4e0b\u6761\u6b3e\u548c\u6761\u4ef6\uff08\" \u6761\u6b3e \"\uff09\u9002\u7528\u4e8eDune API \u6d4b\u8bd5\u7248\u7684\u514d\u8d39\u8bd5\u7528\uff0c\u7b80\u79f0\u4e3a\" \u670d\u52a1 \"\u7684\u4f7f\u7528\u3002\u672c\u670d\u52a1\u7531\u5728\u632a\u5a01\u6ce8\u518c\u7684\u79c1\u4eba\u6709\u9650\u8d23\u4efb\u516c\u53f8 Dune Analytics AS\uff08\" Dune \"\uff09\u8fd0\u8425\uff0c\u6ce8\u518c\u53f7\u4e3a921 400 349\u3002 \n \u60a8\u5bf9\u672c\u670d\u52a1\u7684\u8bbf\u95ee\u548c\u4f7f\u7528\u662f\u4ee5\u60a8\u63a5\u53d7\u5e76\u9075\u5b88\u8fd9\u4e9b\u6761\u6b3e\u4e3a\u6761\u4ef6\u7684\u3002\u8fd9\u4e9b\u6761\u6b3e\u9002\u7528\u4e8e\u672c\u670d\u52a1\u7684\u6240\u6709\u7528\u6237\u3002\u901a\u8fc7\u63a5\u53d7\u8fd9\u4e9b\u6761\u6b3e\uff0c\u60a8\u5c06\u83b7\u5f97\u6709\u9650\u7684\u3001\u53ef\u64a4\u9500\u7684\u6743\u5229\uff0c\u5728\u6709\u9650\u7684\u65f6\u95f4\u5185\u4f7f\u7528\u548c\u6d4b\u8bd5\u672c\u670d\u52a1\u3002 \n \u901a\u8fc7\u4f7f\u7528\u672c\u670d\u52a1\uff0c\u60a8\u627f\u8ba4\u672c\u670d\u52a1\u662f\u63d0\u4f9b\u7ed9\u7279\u5b9a\u7528\u6237\u7fa4\u7684\u4e34\u65f6\u514d\u8d39\u8bd5\u7528\u7248\uff0c\u53ea\u80fd\u7528\u4e8e\u5185\u90e8\u3001\u8bd5\u9a8c\u6027\u4f7f\u7528\u3002Dune \u4e0d\u4fdd\u8bc1\u8be5\u670d\u52a1\u5c06\u6ee1\u8db3\u4efb\u4f55\u529f\u80fd\u7684\u8981\u6c42\u3002\u5728\u6cd5\u5f8b\u5141\u8bb8\u7684\u6700\u5927\u8303\u56f4\u5185\uff0c\u672c\u670d\u52a1\u662f\u5728 \"\u539f\u6837\"\u548c \"\u53ef\u7528\"\u7684\u57fa\u7840\u4e0a\u63d0\u4f9b\u7684\uff0c\u6ca1\u6709\u4efb\u4f55\u5f62\u5f0f\u7684\u660e\u793a\u6216\u6697\u793a\u7684\u4fdd\u8bc1\u6216\u6761\u4ef6\u3002 \n Dune \u4fdd\u7559\u5bf9\u8be5\u670d\u52a1\u6240\u6709\u5143\u7d20\u7684\u6240\u6709\u6743\u5229\uff0c\u5305\u62ec\u6240\u6709\u7248\u6743\u548c\u4efb\u4f55\u5176\u4ed6\u77e5\u8bc6\u4ea7\u6743\u3002\u9664\u4e86\u8fd9\u4e9b\u6761\u6b3e\u4e2d\u660e\u786e\u89c4\u5b9a\u7684\u5185\u5bb9\u5916\uff0c\u7528\u6237\u4e0d\u4f1a\u5f97\u5230\u4efb\u4f55\u5bf9\u670d\u52a1\u7684\u8bb8\u53ef\u6216\u4f7f\u7528\u6743\u3002 \n \u4f7f\u7528\u6743\u5e76\u4e0d\u8d4b\u4e88\u60a8\u4fee\u6539\u3001\u590d\u5236\u3001\u62f7\u8d1d\u6216\u6a21\u4eff\u8f6f\u4ef6\u6216\u672c\u670d\u52a1\u5176\u4ed6\u90e8\u5206\u7684\u6743\u5229\uff0c\u4f8b\u5982\u4fee\u6539\u6216\u6539\u53d8\u672c\u670d\u52a1\uff0c\u4f8b\u5982\u4fee\u6539\u6216\u6539\u53d8\u672c\u670d\u52a1\u6216\u8bd5\u56fe\u83b7\u5f97\u672a\u7ecf\u6388\u6743\u7684\u4fe1\u606f\uff0c\u662f\u88ab\u7981\u6b62\u7684\uff0c\u5e76\u5c06\u5bfc\u81f4\u60a8\u7684\u5e10\u6237\u88ab\u6682\u65f6\u6216\u6c38\u4e45\u5730\u7981\u7528\u3002 \n \u5728\u7ea6\u5b9a\u7684\u8bd5\u7528\u671f\u7ed3\u675f\u540e\u7ee7\u7eed\u4f7f\u7528\u672c\u670d\u52a1\u7684\u6761\u4ef6\u662f\uff0c\u60a8\u5fc5\u987b\u6309\u7167 Dune \u4ed8\u8d39 API \u670d\u52a1\u7684\u9002\u7528\u6761\u6b3e\u6ce8\u518c\u6210\u4e3a\u7528\u6237\u3002 Dune \u4fdd\u7559\u5728\u4efb\u4f55\u65f6\u5019\u4fee\u6539\u6216\u66ff\u6362\u8fd9\u4e9b\u6761\u6b3e\u7684\u6743\u5229\uff0c\u7531\u6211\u4eec\u5168\u6743\u51b3\u5b9a\u3002\u5982\u679c\u4fee\u8ba2\u662f\u5b9e\u8d28\u6027\u7684\uff0c\u6211\u4eec\u5c06\u5728\u4efb\u4f55\u65b0\u6761\u6b3e\u751f\u6548\u4e4b\u524d\u901a\u77e5\u60a8\u3002\u5728\u8fd9\u4e9b\u4fee\u8ba2\u751f\u6548\u540e\u7ee7\u7eed\u8bbf\u95ee\u6216\u4f7f\u7528\u672c\u670d\u52a1\uff0c\u60a8\u540c\u610f\u63a5\u53d7\u4fee\u8ba2\u540e\u7684\u6761\u6b3e\u7684\u7ea6\u675f\u3002 \n \u5982\u679c\u8fdd\u53cd\u8fd9\u4e9b\u6761\u6b3e\u7684\u4efb\u4f55\u89c4\u5b9a\uff0c\u6211\u4eec\u53ef\u4ee5\u7acb\u5373\u7ec8\u6b62\u60a8\u5bf9\u670d\u52a1\u7684\u8bbf\u95ee\u3002\u5728\u8fdd\u53cd\u6211\u4eec\u5bf9\u670d\u52a1\u7684\u77e5\u8bc6\u4ea7\u6743\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6cd5\u5f8b\u8865\u6551\u63aa\u65bd\u8ffd\u7a76\u8fdd\u7ea6\u884c\u4e3a\uff0c\u4ee5\u963b\u6b62\u8fdd\u7ea6\u884c\u4e3a\u548c/\u6216\u5bfb\u6c42\u4efb\u4f55\u635f\u5bb3\u8d54\u507f\u3002 \n \u8fd9\u4e9b\u6761\u6b3e\u5e94\u53d7\u632a\u5a01\u6cd5\u5f8b\u7684\u7ba1\u8f96\u548c\u89e3\u91ca\uff0c\u4e0d\u8003\u8651\u5176\u6cd5\u5f8b\u6761\u6b3e\u7684\u51b2\u7a81\u3002\u5728\u9002\u7528\u6cd5\u5f8b\u5141\u8bb8\u7684\u8303\u56f4\u5185\uff0c\u60a8\u4e0d\u53ef\u64a4\u9500\u5730\u540c\u610f\u5965\u65af\u9646\u5730\u533a\u6cd5\u9662\u62e5\u6709\u975e\u6392\u4ed6\u6027\u7684\u7ba1\u8f96\u6743\u6765\u5ba1\u7406\u548c\u51b3\u5b9a\u4efb\u4f55\u8bc9\u8bbc\u3001\u884c\u52a8\u6216\u7a0b\u5e8f\uff0c\u6216\u89e3\u51b3\u4efb\u4f55\u7531\u670d\u52a1\u5f15\u8d77\u7684\u6216\u4e0e\u670d\u52a1\u6709\u5173\u7684\u4e89\u8bae\u3002", "url": "https://dune.com/docs/zh/api/FAQ/TOS/#-dune-api-beta"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/spells.md) \n Spells \n \n \u6ce8\u610f \n Spells\u4ec5\u5728Dune V2\u4e2d\u53ef\u7528\u3002\u5bf9\u4e8eV1\u67e5\u8be2\uff0c\u60a8\u9700\u8981\u4f7f\u7528\u73b0\u5df2\u5f03\u7528\u7684[\u8fd9\u91cc\u7684\u62bd\u8c61\u8868]\uff08V1/abstractions/index.md\uff09\u3002 \n \n Spells\u662fDune\u548c\u793e\u533a\u5b9a\u5236\u548c\u7ef4\u62a4\u7684\u6570\u636e\u8868\u3002 \n \u5b83\u4f7f\u60a8\u80fd\u591f\u8f7b\u677e\u5730\u805a\u5408\u5927\u91cf\u6570\u636e\uff0c\u5e76\u5c3d\u53ef\u80fd\u51cf\u5c11\u95ee\u9898\u3002  \n \u8981\u67e5\u9605\u53ef\u7528\u7684Spells\uff0c\u8bf7\u53c2\u8003\u6211\u4eec\u7684 \u9b54\u6cd5\u4e66\u6587\u6863  (https://dune.com/spellbook) \u5e76\u5b66\u4e60\u5982\u4f55\u8d21\u732e\u65b0\u7684\u9b54\u6cd5[\u5728\u8fd9\u91cc]\uff08../spelbook/index.md\uff09\u3002 \n \u6211\u4eec\u7684\u9b54\u6cd5\u662f\u901a\u8fc7\u516c\u5171\u7684[Spellbook GitHub\u5b58\u50a8\u5e93]\u6765\u8fdb\u884c\u7ba1\u7406(https://github.com/duneanalytics/spellbook/index.md) \u3002 \u6211\u4eec\u6b22\u8fce\u63d0\u4ea4pull requests\uff01 \n \u5bf9\u4e8e\u6211\u4eec\u7684 V1\u5f15\u64ce \uff08PostgreSQL\uff09\uff0c\u62bd\u8c61\u8868\u662f\u6570\u636e\u5e73\u53f0\u4e0a\u6267\u884c\u7684SQL\u7684\u7247\u6bb5\u3002\u60a8\u53ef\u4ee5\u5728[GitHub]\u4e0a\u770b\u5230\u73b0\u6709\u6240\u6709\u7684\u62bd\u8c61\u8868(https://github.com/duneanalytics/spellbook/tree/main/deprecated-dune-v1-abstractions)\uff0c \u4ee5\u53ca\u6700\u6536\u6b22\u8fce\u7684\u4e00\u4e9b[\u6587\u6863]\uff08v1/abstractions/index.md\uff09\u3002", "url": "https://dune.com/docs/zh/reference/tables/spells/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/tables/spells/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/tables/decoded/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/tables/v2/raw/ethereum-mainnet/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/tables/v2/raw/ethereum-mainnet/traces/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/tables/v2/raw/ethereum-mainnet/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/tables/v2/raw/ethereum-mainnet/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/tables/v2/raw/ethereum-mainnet/creation-traces/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/tables/v2/raw/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#faq) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/api/FAQ/billing-pricing.md) \n ", "url": "https://dune.com/docs/zh/api/FAQ/billing-pricing/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#faq) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/api/FAQ/functionality.md) \n ", "url": "https://dune.com/docs/zh/api/FAQ/functionality/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#api-key) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/api/api-reference/errors.md) \n \u9519\u8bef\u4ee3\u7801 \n \u597d\u6d88\u606f\uff1a\u60a8\u5728\u975e\u5e38\u65e9\u671f\u7684\u65f6\u5019\u63a5\u89e6\u5230\u4e86 Dune API\u3002 \ud83e\uddd9\u200d\u2642\ufe0f \n \u574f\u6d88\u606f\uff1a\u8fd9\u610f\u5473\u7740\u6211\u4eec\u4ecd\u5728\u52aa\u529b\u89e3\u51b3\u4e00\u4e9b\u6f5c\u5728\u7684\u5c0f\u95ee\u9898\u3002 \ud83d\udc79 \n \u76ee\u524d\uff0cDune API \u5e76\u4e0d\u603b\u662f\u629b\u51fa\u5f02\u5e38\u4fe1\u606f\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5f53\u4e8b\u60c5\u672a\u6309\u9884\u671f\u8fdb\u884c\u65f6\uff0c\u60a8\u9700\u8981\u4f7f\u7528\u6211\u4eec\u7684\u54cd\u5e94\u5bf9\u8c61\u6765\u89e3\u6790\u5177\u4f53\u4fe1\u606f\u3002 \n \n Note \n \u5982\u679c\u8fd9\u4e9b\u4e1c\u897f\u5bf9\u60a8\u800c\u8a00\uff0c\u592a\u8fc7\u4e8e\u751f\u50fb\u3001\u590d\u6742\u6216\u56f0\u60d1\uff0c\u4e0d\u8981\u592a\u52c9\u5f3a\u81ea\u5df1\u3002\u6b22\u8fce\u5728  #dune-api Discord channel  (https://discord.com/channels/757637422384283659/1019910980634939433)  \u8054\u7cfb\u6211\u4eec\uff0c\u6211\u4eec\u4f1a\u5728\u60a8\u5361\u4f4f\u7684\u65f6\u5019\u63d0\u4f9b\u5e2e\u52a9\u3002 \n \n \u4ee5\u4e0b\u662f\u51e0\u79cd\u5e38\u89c1\u7684\u9519\u8bef\u60c5\u51b5\uff1a \n ", "url": "https://dune.com/docs/zh/api/api-reference/errors/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#post) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/api/api-reference/cancel-execution.md) \n ", "url": "https://dune.com/docs/zh/api/api-reference/cancel-execution/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#get) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/api/api-reference/execution-results.md) \n ", "url": "https://dune.com/docs/zh/api/api-reference/execution-results/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#get) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/api/api-reference/execution-status.md) \n ", "url": "https://dune.com/docs/zh/api/api-reference/execution-status/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#post) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/api/api-reference/execute-query-id.md) \n ", "url": "https://dune.com/docs/zh/api/api-reference/execute-query-id/"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/api/api-reference/authentication.md) \n \u9274\u6743 \n Dune API \u4f7f\u7528 API \u5bc6\u94a5\uff08API Keys\uff09\u6765\u8ba4\u8bc1\u8bf7\u6c42\u3002\u60a8\u7684 API \u5bc6\u94a5\u88ab\u7528\u6765\u786e\u5b9a\u60a8\u53ef\u4ee5\u8c03\u7528\u7684\u79c1\u4eba\u67e5\u8be2\u6743\u9650\uff0c\u4ee5\u53ca\u54ea\u4e2a\u8d26\u6237\u4e3a\u6b64\u8bf7\u6c42\u4ed8\u8d39\uff0c\u6240\u4ee5\u8bf7\u52a1\u5fc5\u4fdd\u8bc1\u5bc6\u94a5\u5b89\u5168\uff01 \n \u8bf7\u4e0d\u8981\u5728 GitHub\u3001\u5ba2\u6237\u7aef\u4ee3\u7801\u7b49\u53ef\u516c\u5f00\u8bbf\u95ee\u7684\u5730\u65b9\u5206\u4eab\u60a8\u7684 API \u5bc6\u94a5\u3002 \n API \u9274\u6743\u901a\u8fc7\u5728\u8bf7\u6c42\u5934\u4e2d\u6dfb\u52a0 \"x-de-api-key\" \u5c5e\u6027\u6765\u5b9e\u73b0\u3002\u6240\u6709\u7c7b\u578b\u7684\u8bf7\u6c42\u4e2d\u90fd\u9700\u8981\u8fd9\u4e48\u505a\uff01 \n \u4e0b\u9762\u662f\u4e00\u4e2a\u7528\u4e8e\u6267\u884c POST \u8bf7\u6c42\u7684 API \u8c03\u7528\u6848\u4f8b\uff1a \n  (#__codelineno-0-1) curl -X POST -H x-dune-api-key:{{api_key}} \"https://api.dune.com/api/v1/query/{{query_id}}/execute\"", "url": "https://dune.com/docs/zh/api/api-reference/authentication/"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/api/api-reference/index.md) \n API Reference \n Learn about our API endpoints and common errors here: \n \n \n Authentication  (authentication/) \n Execute Query ID  (execute-query-id/) \n Execution Status  (execution-status/) \n Execution Results  (execution-results/) \n Cancel Execution  (cancel-execution/) \n Error Codes  (errors/)", "url": "https://dune.com/docs/zh/api/api-reference/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#get-the-erc20-balances-for-a-given-address) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/api/quick-start/api-ready-queries.md) \n API Ready Queries \n Here we have four queries, you can use the query ID from the URL in any of the  API guides  (../) . Or, you can fork the query and change it however you like - then use that new query ID in the API. \n ", "url": "https://dune.com/docs/zh/api/quick-start/api-ready-queries/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#cow-python) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/api/quick-start/community-clients.md) \n \u793e\u533a\u5ba2\u6237\u7aef \n \u6211\u4eec\u7684\u793e\u533a\u901a\u8fc7\u6253\u9020\u4ee5\u4e0b API \u5ba2\u6237\u7aef\u518d\u6b21\u5927\u653e\u5f02\u5f69\u3002 \n \u5982\u679c\u60a8\u4e5f\u521b\u5efa\u4e86\u81ea\u5df1\u7684\u5ba2\u6237\u7aef\uff0c\u8bf7\u5728\u6211\u4eec\u7684  #dune-api Discord \u9891\u9053  (https://discord.com/channels/757637422384283659/1019910980634939433)  \u544a\u77e5\u6211\u4eec\uff01 \n ", "url": "https://dune.com/docs/zh/api/quick-start/community-clients/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/api/quick-start/api-js.md) \n Javascript \u793a\u4f8b \n \n Warning \n \u672c\u6307\u5357\u5c1a\u4e0d\u5b8c\u5584\u3002\u5982\u679c\u60a8\u9047\u5230\u5176\u4ed6\u95ee\u9898\uff0c\u8bf7\u901a\u8fc7 Discord \u7684 # dune-api  (https://discord.com/channels/757637422384283659/1019910980634939433)  \u9891\u9053\u8054\u7cfb\u6211\u4eec\u7684\u56e2\u961f\u3002 \n \n \u8ba9\u6211\u4eec\u901a\u8fc7 JavaScript \u8c03\u7528 Dune API\uff01 \n \u6211\u4eec\u5c06\u5411\u60a8\u5c55\u793a\u51e0\u79cd\u901a\u8fc7 JavaScript \u8c03\u7528 API \u7684\u65b9\u5f0f\uff0c\u672c\u4f8b\u4e2d\u4f1a\u4f7f\u7528  node-fetch  \u5305\u3002 \n \n \u524d\u63d0\u6761\u4ef6 \n \u672c\u5feb\u901f\u5165\u95e8\u6307\u5357\u5047\u5b9a\u60a8\u5bf9 Node.js\uff08Node\uff09\u3001Node\u5305\u7ba1\u7406\u5668\uff08NPM\uff09\u548c Node\u7248\u672c\u7ba1\u7406\u5668\uff08NVM\uff09\u8f83\u4e3a\u719f\u6089\u3002 \n \n \u9996\u5148\uff0c\u786e\u4fdd\u60a8\u4f7f\u7528\u7684\u662f Node.js \u7684 LTS \u7248\u672c\uff08Node 16\uff09\u548c NPM \u7684\u6700\u65b0\u7248\uff1a \n ", "url": "https://dune.com/docs/zh/api/quick-start/api-js/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/api/quick-start/api-py.md) \n Python \u793a\u4f8b \n \u8ba9\u6211\u4eec\u901a\u8fc7 Python \u8c03\u7528 Dune API\uff01 \n \u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 Python3\u3002\u6211\u4eec\u5efa\u8bae\u4f7f\u7528\u865a\u62df\u73af\u5883\u548c pip \u5305\u7ba1\u7406\u5668\u3002 \n \n \u524d\u63d0\u6761\u4ef6 \n \u672c\u5feb\u901f\u5165\u95e8\u6307\u5357\u5047\u5b9a\u60a8\u4e4b\u524d\u6709\u8fc7\u4e00\u4e9b Python \u7684\u5f00\u53d1\u7ecf\u9a8c\uff0c\u5c3d\u7ba1\u6211\u4eec\u7684\u76ee\u7684\u662f\u4f7f\u8fd9\u4e9b\u4ee3\u7801\u6613\u4e8e\u7406\u89e3\u3002\u5982\u679c\u60a8\u6709\u5176\u4ed6\u95ee\u9898\uff0c\u8bf7\u901a\u8fc7 Discord \u7684 # dune-api  (https://discord.com/channels/757637422384283659/973606737393352745)  \u9891\u9053\u4e0e\u6211\u4eec\u7684\u56e2\u961f\u8054\u7cfb\u3002 \n \n ", "url": "https://dune.com/docs/zh/api/quick-start/api-py/"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/api/quick-start/index.md) \n API Quick Start \n If you're looking for example queries to use (such as NFT or ERC20 balances or holders), then  check out these endpoints  (api-ready-queries/) . \n Get started with our API fast using these quick start guides: \n \n \n Python  (api-py/) \n Javascript  (api-js/) \n Community Clients  (community-clients/)", "url": "https://dune.com/docs/zh/api/quick-start/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#dune-api) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/api/index.md) \n ", "url": "https://dune.com/docs/zh/api/"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/spellbook/spellbook-workshop-prerequisite.md) \n Spellbook workshop prerequisite \n \u8fd9\u662f\u60a8\u5728\u53bb\u53c2\u52a0\u9b54\u6cd5\u4e66\u7814\u8ba8\u4f1a\u4e4b\u524d\u9884\u5148\u5b8c\u6210\u7684\u6e05\u5355! \n \n \n \u5728\u60a8\u7684\u8ba1\u7b97\u673a\u4e0a\u5b89\u88c5  Python 3.9  (https://realpython.com/installing-python/)  \u3002 \n \n \n \u5b89\u88c5 IDE \u4ee5\u7f16\u8f91\u60a8\u7684\u4ee3\u7801\u3002 VSCode  (https://code.visualstudio.com/)  \u662f\u4e00\u6b3e\u4e0d\u9519\u7684\u514d\u8d39\u8f6f\u4ef6\u3002 \n \n \n \u786e\u4fdd\u5df2\u7ecf\u5b89\u88c5\u4e86 pip  (https://pip.pypa.io/en/stable/installation/) \u3002 \n \n \n \u5b89\u88c5 pipenv  (https://pypi.org/project/pipenv/) \u8fd9\u5c06\u5141\u8bb8\u6211\u4eec\u7528dbt\u521b\u5efa\u4e00\u4e2a\u865a\u62df\u73af\u5883\u3002 \n \n \n \u8bbe\u7f6e git \u548c github  (https://docs.github.com/en/get-started/quickstart/set-up-git) \uff0c\u5305\u62ec\u8ba4\u8bc1\u3002 \n \n \n fork  (https://docs.github.com/en/get-started/quickstart/fork-a-repo) \u4e00\u4e2a \u9b54\u6cd5\u4e66\u8d44\u6e90\u5e93  (https://github.com/duneanalytics/spellbook) \u3002\u5305\u62ec\u672c\u5730\u514b\u9686\uff08Clone\uff09\u548c\u4e0a\u6e38\uff08upstream\uff09\u6dfb\u52a0\u3002 \n \n \n \u67e5\u770b Github \u7684 \u8bf4\u660e  (https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request-from-a-fork) \uff0c\u4e86\u89e3\u5982\u4f55\u4ece fork \u53d1\u51fa pull \u8bf7\u6c42\u3002 \n \n \n P.S. \u5982\u679c\u60a8\u5bf9\u8fd9\u4e9b\u5148\u51b3\u6761\u4ef6\u6709\u7591\u95ee\uff0c\u8bf7\u52a0\u5165\u6211\u4eec\u7684 \ud83e\uddd9  Discord \u793e\u533a  (https://discord.gg/BJBHFR6sdy)  \u5e76\u5728  #\ud83d\udcdcspellbook  (https://discord.com/channels/757637422384283659/999683200563564655)  \u9891\u9053\u4e2d\u5bfb\u6c42\u5e2e\u52a9\uff01", "url": "https://dune.com/docs/zh/spellbook/spellbook-workshop-prerequisite/"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/spellbook/examples/final-day-balance.md) \n \u6700\u7ec8\u6bcf\u65e5\u4f59\u989d \n This is our final daily Ethereum ERC20 token balances spell. We expand our spell to cover all days, not just the days with transfer activity. We add price data, we remove known rebase tokens and any tokens that resulted in large negative balances. \n The ref tokens_ethereum_rebase is a static list of known rebase tokens that we manage. Whereas, the ref  'balances_ethereum_erc20_noncompliant'  is a table we derive from transfers_ethereum_erc20_rolling_day. That table looks for unique token_addresses with larger negative balances which indicate the contract may not be compliant with ERC20. \n balances_ethereum_erc20_day.sql  (https://github.com/duneanalytics/spellbook/blob/master/spellbook/models/balances/ethereum/erc20/balances_ethereum_erc20_day.sql) \n  (#__codelineno-0-1) {{   config ( \n  (#__codelineno-0-2)         alias = 'erc20_day' \n  (#__codelineno-0-3)         ) \n  (#__codelineno-0-4) }} \n  (#__codelineno-0-5) \n  (#__codelineno-0-6) with \n  (#__codelineno-0-7)     days   as   ( \n  (#__codelineno-0-8)         select \n  (#__codelineno-0-9)             explode ( \n  (#__codelineno-0-10)                 sequence ( \n  (#__codelineno-0-11)                     to_date ( '2015-01-01' ),   date_trunc ( 'day' ,   now ()),   interval   1   day \n  (#__codelineno-0-12)                 ) \n  (#__codelineno-0-13)             )   as   day \n  (#__codelineno-0-14)     ) \n  (#__codelineno-0-15) \n  (#__codelineno-0-16) ,   daily_balances   as \n  (#__codelineno-0-17) ( SELECT \n  (#__codelineno-0-18)     wallet_address , \n  (#__codelineno-0-19)     token_address , \n  (#__codelineno-0-20)     amount_raw , \n  (#__codelineno-0-21)     amount , \n  (#__codelineno-0-22)     day , \n  (#__codelineno-0-23)     symbol , \n  (#__codelineno-0-24)     lead ( day ,   1 ,   now ())   OVER   ( PARTITION   BY   token_address ,   wallet_address   ORDER   BY   day )   AS   next_day \n  (#__codelineno-0-25)     FROM   {{   ref ( 'transfers_ethereum_erc20_rolling_day' )   }} ) \n  (#__codelineno-0-26) \n  (#__codelineno-0-27) SELECT \n  (#__codelineno-0-28)     'ethereum'   as   blockchain , \n  (#__codelineno-0-29)     d . day , \n  (#__codelineno-0-30)     b . wallet_address , \n  (#__codelineno-0-31)     b . token_address , \n  (#__codelineno-0-32)     b . amount_raw , \n  (#__codelineno-0-33)     b . amount , \n  (#__codelineno-0-34)     b . amount   *   p . price   as   amount_usd , \n  (#__codelineno-0-35)     b . symbol \n  (#__codelineno-0-36) FROM   daily_balances   b \n  (#__codelineno-0-37) INNER   JOIN   days   d   ON   b . day   <=   d . day   AND   d . day   <   b . next_day \n  (#__codelineno-0-38) LEFT   JOIN   {{   source ( 'prices' ,   'usd' )   }}   p \n  (#__codelineno-0-39)     ON   p . contract_address   =   b . token_address \n  (#__codelineno-0-40)     AND   d . day   =   p . minute \n  (#__codelineno-0-41)     AND   p . blockchain   =   'ethereum' \n  (#__codelineno-0-42) -- Removes rebase tokens from balances \n  (#__codelineno-0-43) LEFT   JOIN   {{   ref ( 'tokens_ethereum_rebase' )   }}    as   r \n  (#__codelineno-0-44)     ON   b . token_address   =   r . contract_address \n  (#__codelineno-0-45) -- Removes likely non-compliant tokens due to negative balances \n  (#__codelineno-0-46) LEFT   JOIN   {{   ref ( 'balances_ethereum_erc20_noncompliant' )   }}    as   nc \n  (#__codelineno-0-47)     ON   b . token_address   =   nc . token_address \n  (#__codelineno-0-48) WHERE   r . contract_address   is   null \n  (#__codelineno-0-49) and   nc . token_address   is   null \n \n transfers_ethereum_schema.yml  (https://github.com/duneanalytics/spellbook/blob/master/spellbook/models/transfers/ethereum/transfers_ethereum_schema.yml) \n  (#__codelineno-1-1)    -   name :   balances_ethereum_erc20_day \n  (#__codelineno-1-2)      meta : \n  (#__codelineno-1-3)        blockchain :   ethereum \n  (#__codelineno-1-4)        sector :   balances \n  (#__codelineno-1-5)        project :   erc20 \n  (#__codelineno-1-6)        contibutors :   soispoke, dot2dotseurat \n  (#__codelineno-1-7)      config : \n  (#__codelineno-1-8)        tags :   [ 'balances' ,   'ethereum' ,   'erc20' ,   'day' ,   'soispoke' ,   'dot2dotseurat' ] \n  (#__codelineno-1-9)      description :   > \n  (#__codelineno-1-10)          Daily token balances of ERC20 Ethereum tokens per wallet and contract address pair. \n  (#__codelineno-1-11)          Depends on erc20_ethereum_transfers. \n  (#__codelineno-1-12)      columns : \n  (#__codelineno-1-13)        -   *blockchain \n  (#__codelineno-1-14)        -   &day \n  (#__codelineno-1-15)          name :   day \n  (#__codelineno-1-16)          description :   \"UTC   event   block   time   truncated   to   the   day   mark\" \n  (#__codelineno-1-17)        -   *wallet_address \n  (#__codelineno-1-18)        -   *token_address \n  (#__codelineno-1-19)        -   *amount_raw \n  (#__codelineno-1-20)        -   *amount \n  (#__codelineno-1-21)        -   *amount_usd \n  (#__codelineno-1-22)        -   *symbolyam", "url": "https://dune.com/docs/zh/spellbook/examples/final-day-balance/"}
{"content": "FAQ: \u8ba1\u8d39\u4e0e\u5b9a\u4ef7 \u00b6 \n ", "url": "https://dune.com/docs/zh/api/FAQ/billing-pricing/#faq"}
{"content": "API \u514d\u8d39\u5417\uff1f \u00b6 \n \u6211\u4eec\u6b63\u4e3a\u7279\u5b9a\u7528\u6237\u63d0\u4f9b\u6709\u9650\u65f6\u957f\u7684\u514d\u8d39\u8bd5\u7528\u670d\u52a1\u3002\u5728\u4efb\u4f55\u8bd5\u7528\u671f\u8fc7\u540e\uff0c\u90fd\u9700\u8981\u4ed8\u8d39\u4f7f\u7528 API\u3002 \n ", "url": "https://dune.com/docs/zh/api/FAQ/billing-pricing/#api"}
{"content": "API \u8ba1\u8d39\u5c06\u5982\u4f55\u4e0e\u65b0\u7684\u56e2\u961f\u5957\u9910\uff08Team plans\uff09\u914d\u5408\uff1f \u00b6 \n We'll be supporting API keys on a team level. So any usage associated with those keys will be billed to their respective team. \n ", "url": "https://dune.com/docs/zh/api/FAQ/billing-pricing/#api-team-plans"}
{"content": "\u4ec0\u4e48\u662f\u6570\u636e\u70b9\uff08datapoint\uff09\uff1f \u00b6 \n \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u6570\u636e\u70b9\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f \u884c*\u5217 \u7684\u7ed3\u679c\u3002\u5728\u4e00\u7ec4\u7ed3\u679c\u4e2d\u6bcf\u4e2a\u5355\u5143\u683c\u5e73\u5747\u6709 50 \u5b57\u8282\u7684\u989d\u5916\u9650\u5236\u3002\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a \n Datapoints = max(rows*columns, ceil(totalbytes/50)) \n ", "url": "https://dune.com/docs/zh/api/FAQ/billing-pricing/#datapoint"}
{"content": "\u6bcf\u6b21\u6267\u884c\u90fd\u8981\u6536\u53d6\u6570\u636e\u70b9\u8d39\u7528\u5417\uff1f \u00b6 \n \u5bf9\u4e8e\u6bcf\u4e2a\u4e0d\u540c\u7684\u67e5\u8be2\u6267\u884c\uff0c\u6211\u4eec\u5bf9\u7b2c1\u6b21\u8bfb\u53d6\u7ed3\u679c\u548c\u968f\u540e\u7684\u7b2c 100 \u6b21\u8bfb\u53d6\u7ed3\u679c\u4e2d\u7684\u6570\u636e\u70b9\u8fdb\u884c\u6536\u8d39\u3002", "url": "https://dune.com/docs/zh/api/FAQ/billing-pricing/#_1"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/spellbook/examples/rolling-sum.md) \n \u6eda\u52a8\u603b\u548c\u7684\u6bcf\u65e5\u8f6c\u8d26 \n The next step is to apply the rolling sum window function to each daily transfer sum. This is a pretty straightforward query. We\u2019d end here for balances if it was guaranteed that each wallet/contract pair made a transfer every day. But since that\u2019s not the case we\u2019ll finish the spell in the next model by filling in all the missing days and doing a few more clean up steps. \n transfers_ethereum_erc20_rolling_day.sql  (https://github.com/duneanalytics/spellbook/blob/master/spellbook/models/transfers/ethereum/erc20/transfers_ethereum_erc20_rolling_day.sql) \n  (#__codelineno-0-1) {{   config ( \n  (#__codelineno-0-2)         alias   = 'erc20_rolling_day' ) \n  (#__codelineno-0-3) }} \n  (#__codelineno-0-4) \n  (#__codelineno-0-5)         select \n  (#__codelineno-0-6)             'ethereum'   as   blockchain , \n  (#__codelineno-0-7)             day , \n  (#__codelineno-0-8)             wallet_address , \n  (#__codelineno-0-9)             token_address , \n  (#__codelineno-0-10)             symbol , \n  (#__codelineno-0-11)             current_timestamp ()   as   last_updated , \n  (#__codelineno-0-12)             row_number ()   over   ( partition   by   token_address ,   wallet_address   order   by   day   desc )   as   recency_index , \n  (#__codelineno-0-13)             sum ( amount_raw )   over   ( \n  (#__codelineno-0-14)                 partition   by   token_address ,   wallet_address   order   by   day \n  (#__codelineno-0-15)             )   as   amount_raw , \n  (#__codelineno-0-16)             sum ( amount )   over   ( \n  (#__codelineno-0-17)                 partition   by   token_address ,   wallet_address   order   by   day \n  (#__codelineno-0-18)             )   as   amount \n  (#__codelineno-0-19)         from   {{   ref ( 'transfers_ethereum_erc20_agg_day' )   }} \n \n transfers_ethereum_schema.yml  (https://github.com/duneanalytics/spellbook/blob/master/spellbook/models/transfers/ethereum/transfers_ethereum_schema.yml) \n  (#__codelineno-1-1)    -   name :   transfers_ethereum_erc20_rolling_hour \n  (#__codelineno-1-2)      meta : \n  (#__codelineno-1-3)        blockchain :   ethereum \n  (#__codelineno-1-4)        sector :   transfers \n  (#__codelineno-1-5)        project :   erc20 \n  (#__codelineno-1-6)        contibutors :   soispoke, dot2dotseurat \n  (#__codelineno-1-7)      config : \n  (#__codelineno-1-8)        tags :   [ 'transfers' ,   'ethereum' ,   'erc20' ,   'rolling_hour' ,   'soispoke' ,   'dot2dotseurat' ] \n  (#__codelineno-1-9)      columns : \n  (#__codelineno-1-10)        -   *blockchain \n  (#__codelineno-1-11)        -   *hour \n  (#__codelineno-1-12)        -   *wallet_address \n  (#__codelineno-1-13)        -   *token_address \n  (#__codelineno-1-14)        -   name :   symbol \n  (#__codelineno-1-15)          description :   \"ERC20   token   symbol\" \n  (#__codelineno-1-16)        -   *amount_raw \n  (#__codelineno-1-17)        -   name :   amount \n  (#__codelineno-1-18)          description :   \"Rolling   sum   of   raw   amount   of   ERC20   token   held   *after*   taking   into   account   token   decimals\" \n  (#__codelineno-1-19)        -   name :   amount_usd \n  (#__codelineno-1-20)          description :   \"Rolling   sum   of   amount   of   ERC20   token   held   in   USD   (fiat   value   at   time   of   transaction)\" \n  (#__codelineno-1-21)        -   name :   updated_at \n  (#__codelineno-1-22)          description :   \"UTC   timestamp   when   table   was   last   updated\" \n  (#__codelineno-1-23)        -   name :   recency_index \n  (#__codelineno-1-24)          description :   \"Index   of   most   recent   balance   ascending.   recency_index=1   is   the   wallet/contract   pair's   most   recent   balance\"", "url": "https://dune.com/docs/zh/spellbook/examples/rolling-sum/"}
{"content": "FAQ: \u529f\u80fd \u00b6 \n ", "url": "https://dune.com/docs/zh/api/FAQ/functionality/#faq"}
{"content": "\u901a\u7528 \u00b6 \n ", "url": "https://dune.com/docs/zh/api/FAQ/functionality/#_1"}
{"content": "\u6211\u6bcf\u5206\u949f\u80fd\u53d1\u51fa\u591a\u5c11\u6b21\u8bf7\u6c42\uff1f \u00b6 \n \u57fa\u4e8e\u8fc7\u8f7d\u4fdd\u62a4\uff0cAPI \u6682\u65f6\u88ab\u9650\u5236\u5728\u6bcf\u5206\u949f 12 \u6b21\u8bf7\u6c42\u3002\u5982\u679c\u60a8\u9700\u8981\u66f4\u9ad8\u7684\u541e\u5410\u91cf\uff0c\u8bf7\u8054\u7cfb\u6211\u4eec\u3002 \n ", "url": "https://dune.com/docs/zh/api/FAQ/functionality/#_2"}
{"content": "\u662f\u5426\u6709\u5177\u4f53\u7684\u670d\u52a1\u6c34\u5e73\u534f\u8bae\uff08SLAs\uff09\uff1f \u00b6 \n SLA\u5c06\u5728\u672a\u6765\u7684\u4f01\u4e1a\u5b9a\u4ef7\u8ba1\u5212\u4e2d\u63d0\u4f9b\u3002 \n ", "url": "https://dune.com/docs/zh/api/FAQ/functionality/#slas"}
{"content": "\u6267\u884c\u67e5\u8be2 \u00b6 \n ", "url": "https://dune.com/docs/zh/api/FAQ/functionality/#_3"}
{"content": "\u5982\u4f55\u627e\u5230\u67e5\u8be2 ID\uff08Query ID\uff09\uff1f \u00b6 \n \u5f53\u5b9a\u4f4d\u5230\u67d0\u4e2a\u67e5\u8be2\u65f6\uff0c\"/queries/\" \u4e4b\u540e\u7684\u7b2c\u4e00\u4e2a\u6570\u5b57\u4fbf\u662f Query ID\u3002 \n \n ", "url": "https://dune.com/docs/zh/api/FAQ/functionality/#idquery-id"}
{"content": "API \u662f\u5426\u652f\u6301\u67e5\u8be2\u53c2\u6570\uff1f \u00b6 \n API \u786e\u5b9e\u652f\u6301\u67e5\u8be2\u53c2\u6570! \n \u5bf9\u4e8e\u5305\u542b\u53c2\u6570\u7684 Dune \u67e5\u8be2\uff0c\u60a8\u53ef\u4ee5\u5c06\u53c2\u6570\u4f5c\u4e3a Dune \u67e5\u8be2\u7684\u4e00\u90e8\u5206\u6765\u4f20\u9012  \u6267\u884c\u67e5\u8be2ID\u7684\u63a5\u5165\u70b9  (../../api-reference/execute-query-id/) ! \n \u66f4\u591a\u5185\u5bb9\u8bf7\u89c1  \u521b\u5efa\u5e26\u53c2\u6570\u7684 Dune \u67e5\u8be2  (../../../getting-started/queries/parameters/) . \n \u4e86\u89e3\u5982\u4f55\u4f7f\u7528  cURL  (../../api-reference/execute-query-id/#curl-with-parameters)  \u4f20\u9012\u53c2\u6570\uff0c\u4ee5\u53ca  Python  (../../quick-start/api-py/#parameterized-queries) \u3002 \n ", "url": "https://dune.com/docs/zh/api/FAQ/functionality/#api"}
{"content": "Dune API \u548c Dune Web \u5e94\u7528\u4e4b\u95f4\u6709\u4f55\u6027\u80fd\u53ca\u6574\u4f53\u4e0a\u7684\u5dee\u5f02\uff1f\u6211\u53ef\u4ee5\u67e5\u8be2\u7684\u5185\u5bb9\u6709\u4f55\u4e0d\u540c\uff1f \u00b6 \n \u4e24\u8005\u4e4b\u95f4\u6ca1\u6709\u592a\u5927\u7684\u6027\u80fd\u5dee\u5f02\u6216\u53ef\u8bfb\u53d6\u7684\u5185\u5bb9\u5dee\u5f02\u3002 \n Dune API \u53ea\u662f\u8ba9\u60a8\u4ee5\u7f16\u7a0b\u65b9\u5f0f\u8bfb\u53d6\u5df2\u7ecf\u53ef\u4ee5\u4ece Dune Web \u5e94\u7528\u8bbf\u95ee\u7684\u529f\u80fd\u548c\u6570\u636e\u96c6\u3002 \n ", "url": "https://dune.com/docs/zh/api/FAQ/functionality/#dune-api-dune-web"}
{"content": "\u6267\u884c\u8d85\u65f6\u7684\u9650\u5236\u662f\u591a\u4e45\uff0c\u6211\u80fd\u5426\u8981\u6c42\u5ef6\u957f\uff1f \u00b6 \n \u4e0a\u7ebf\u4e4b\u521d\uff0c\u67e5\u8be2\u6267\u884c\u7684\u8d85\u65f6\u9650\u5236\u5c06\u4e0e Dune Web \u5e94\u7528\u76f8\u540c\uff1a30\u5206\u949f\u3002 \n \u968f\u540e\uff0c\u6211\u4eec\u8ba1\u5212\u5141\u8bb8\u4fee\u6539\u65f6\u957f\uff0c\u4f46\u6211\u4eec\u4e5f\u9700\u8981\u8c03\u6574\u6211\u4eec\u7684\u67e5\u8be2\u6267\u884c\u6536\u8d39\u6765\u5339\u914d\u3002 \n ", "url": "https://dune.com/docs/zh/api/FAQ/functionality/#_4"}
{"content": "\u4f60\u4eec\u6253\u7b97\u4ec0\u4e48\u65f6\u5019\u652f\u6301\u4f7f\u7528\u76f4\u63a5\u4ece\u670d\u52a1\u5668\u53d1\u9001\u539f\u59cbSQL\uff1f \u00b6 \n \u6211\u4eec\u8fd8\u6ca1\u6709\u4e00\u4e2a\u786e\u5207\u7684\u65f6\u95f4\u8868\uff0c\u4f46\u6b64\u529f\u80fd\u6682\u5b9a\u4e8e\u4ec5\u9650\u4f01\u4e1a\u8ba1\u5212\u3002 \n ", "url": "https://dune.com/docs/zh/api/FAQ/functionality/#sql"}
{"content": "\u6211\u53ef\u4ee5\u540c\u65f6\u4f7f\u7528 Dune v2 \u5f15\u64ce\u548c\u539f\u59cb\u7684 v1 \u6570\u636e\u5e93\u8fdb\u884c\u67e5\u8be2\u5417\uff1f \u00b6 \n \u5f53\u524d\u6ca1\u95ee\u9898\u3002\u4f46\u6211\u4eec\u6b63\u5728\u9010\u6b65\u5e9f\u9664\u5bf9\u65e7\u5f15\u64ce\u7684\u4f7f\u7528\u548c\u652f\u6301\uff0c\u6240\u4ee5\u6211\u4eec\u5efa\u8bae\u5c3d\u53ef\u80fd\u5730\u4f7f\u7528\u65b0\u7684 Dune v2 \u5f15\u64ce\u3002", "url": "https://dune.com/docs/zh/api/FAQ/functionality/#dune-v2-v1"}
{"content": "", "url": "https://dune.com/docs/zh/reference/images/dune-icon-only%402x.png"}
{"content": "", "url": "https://dune.com/docs/zh/reference/images/dune-icon-only.svg"}
{"content": "", "url": "https://dune.com/docs/zh/reference/images/dune-vertical-logo-dark%402x.png"}
{"content": "", "url": "https://dune.com/docs/zh/reference/images/dune-vertical-logo%402x.png"}
{"content": "", "url": "https://dune.com/docs/zh/reference/images/dune-vertical-logo.svg"}
{"content": "", "url": "https://dune.com/docs/zh/reference/images/dune-standard-logo-dark%402x.png"}
{"content": "", "url": "https://dune.com/docs/zh/reference/images/dune-standard-logo-dark.svg"}
{"content": "", "url": "https://dune.com/docs/zh/reference/images/dune-standard-logo%402x.png"}
{"content": "", "url": "https://dune.com/docs/zh/reference/images/dune-standard-logo.svg"}
{"content": "502 Bad Gateway \n nginx", "url": "https://dune.com/docs/zh/spellbook/examples/daily-aggregation/"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/spellbook/examples/reformatted.md) \n \u91cd\u65b0\u66f4\u6539\u683c\u5f0f\u7684\u8f6c\u8d26 \n \u6211\u4eec\u7684\u57fa\u7840\u6570\u636e\u8868\u8bb0\u5f55\u4e86\u4e00\u4e2a\u8d26\u6237\u7684\u8f6c\u8d26\u8fdb\u51fa\u6570\u989d\u3002\u4e3a\u4e86\u4fbf\u4e8e\u5bf9\u8f6c\u8d26\u6570\u989d\u8fdb\u884c\u6c47\u603b\uff0c\u6211\u4eec\u5c06\u5176\u5408\u5e76\u4e3a\u53d1\u9001\u4ea4\u6613\u548c\u63a5\u6536\u4ea4\u6613\u7684\u96c6\u5408\u3002 \n \u6b64\u5916\uff0c\u9274\u4e8e\u5b58\u6b3e\u548c\u63d0\u6b3e\u7684\u989d\u5916\u529f\u80fd\uff0cWETH \u9700\u8981\u7279\u6b8a\u5904\u7406\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u9700\u8981\u6dfb\u52a0  zeroex_ethereum.weth9_evt_deposit \u4f5c\u4e3a\u6570\u636e\u6e90\uff0c\u5c31\u50cf\u6211\u4eec\u5728\u4e0a\u9762\u4e3a  erc20_ethereum.evt_transfer  \u505a\u7684\u90a3\u6837\u3002 \n \u4e0e\u6e90\u6587\u4ef6\u7c7b\u4f3c\uff0c\u6a21\u578b\u88ab\u5b9a\u4e49\u5728 YAML \u6587\u4ef6\u4e2d\u3002\u8fd9\u662f\u5b9a\u4e49\u63cf\u8ff0\u3001\u6d4b\u8bd5\u548c\u5143\u6570\u636e\u7b49\u5185\u5bb9\u7684\u5730\u65b9\u3002\u8fd9\u4e5f\u662f\u6211\u4eec\u8ffd\u8e2a\"\u8d21\u732e\u8005\"\u7684\u5730\u65b9\u3002\u56e0\u6b64\uff0c\u4e3a\u4e86\u786e\u4fdd\u60a8\u83b7\u5f97\u5e94\u6709\u7684\u5f71\u54cd\u529b\uff0c\u8bf7\u5728\u7f16\u5199\u6216\u7f16\u8f91\u9b54\u6cd5\u65f6\u6dfb\u52a0\u60a8\u7684\u540d\u7f00\u3002\u7136\u540e\u60a8\u7684\u8d21\u732e\u4f1a\u88ab\u8bb0\u5165\u5728 \u6587\u6863  (https://spellbook-docs.dune.com/#!/overview) \u4e2d\u3002 \n \u5728 JINJA \u914d\u7f6e\u5757\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u8fd9\u4e2a\u89c6\u56fe\u7684\u522b\u540d\u662f  erc20 \u3002\u5982\u679c\u6ca1\u6709\u8fd9\u4e2a\u522b\u540d\uff0c\u6570\u636e\u8868\u540d\u79f0\u5c06\u9ed8\u8ba4\u4e3a\u6587\u4ef6\u540d\u3002\u8fd9\u4e2a\u89c6\u56fe\u7684\u67b6\u6784\u540d\u79f0\u5728\u9b54\u6cd5\u4e66\u9879\u76ee\u6839\u76ee\u5f55\u7684  dbt_project.yml  (https://github.com/duneanalytics/spellbook/blob/master/spellbook/dbt_project.yml)  \u6587\u4ef6\u4e2d\u5b9a\u4e49\u3002\u67b6\u6784\u662f\u7531\u76ee\u5f55\u7ed3\u6784\u5728\u90a3\u91cc\u5b9a\u4e49\u7684\u3002\u8003\u8651\u5230\u5f53\u524d\u7684\u7ed3\u6784\uff0c\u8fd9\u4e2a\u89c6\u56fe\u7684\u540d\u79f0\u5e94\u8be5\u662f transfers_ethereum.erc20\u3002 \n \u6ce8\u610f\uff1a\u6211\u4eec\u57fa\u672c\u4e0a\u53cd\u5bf9\u4f7f\u7528 SHOUT CASE\uff08\u5927\u5199\uff09\uff0c\u90a3\u662f IDEs \u7528\u7684\u3002\u4e0d\u8bb8\u53cd\u5bf9\u3002 \n transfers_ethereum_erc20.sql  (https://github.com/duneanalytics/spellbook/blob/master/spellbook/models/transfers/ethereum/erc20/transfers_ethereum_erc20.sql) \n  (#__codelineno-0-1) {{   config ( materialized = 'view' ,   alias = 'erc20' )   }} \n  (#__codelineno-0-2) \n  (#__codelineno-0-3) with \n  (#__codelineno-0-4)      sent_transfers   as   ( \n  (#__codelineno-0-5)          select \n  (#__codelineno-0-6)              'send'   ||   '-'   ||   evt_tx_hash   ||   '-'   ||   evt_index   ||   '-'   ||   ` to `   as   unique_tx_id , \n  (#__codelineno-0-7)              ` to `   as   wallet_address , \n  (#__codelineno-0-8)              contract_address   as   token_address , \n  (#__codelineno-0-9)              evt_block_time , \n  (#__codelineno-0-10)              value   as   amount_raw \n  (#__codelineno-0-11)          from \n  (#__codelineno-0-12)              {{   source ( 'erc20_ethereum' ,   'evt_transfer' )   }} \n  (#__codelineno-0-13)      ) \n  (#__codelineno-0-14) \n  (#__codelineno-0-15)      , \n  (#__codelineno-0-16)      received_transfers   as   ( \n  (#__codelineno-0-17)          select \n  (#__codelineno-0-18)          'receive'   ||   '-'   ||   evt_tx_hash   ||   '-'   ||   evt_index   ||   '-'   ||   ` from `   as   unique_tx_id , \n  (#__codelineno-0-19)          ` from `   as   wallet_address , \n  (#__codelineno-0-20)          contract_address   as   token_address , \n  (#__codelineno-0-21)          evt_block_time , \n  (#__codelineno-0-22)          -   value   as   amount_raw \n  (#__codelineno-0-23)          from \n  (#__codelineno-0-24)              {{   source ( 'erc20_ethereum' ,   'evt_transfer' )   }} \n  (#__codelineno-0-25)      ) \n  (#__codelineno-0-26) \n  (#__codelineno-0-27)      , \n  (#__codelineno-0-28)      deposited_weth   as   ( \n  (#__codelineno-0-29)          select \n  (#__codelineno-0-30)              'deposit'   ||   '-'   ||   evt_tx_hash   ||   '-'   ||   evt_index   ||   '-'   ||   dst   as   unique_tx_id , \n  (#__codelineno-0-31)              dst   as   wallet_address , \n  (#__codelineno-0-32)              contract_address   as   token_address , \n  (#__codelineno-0-33)              evt_block_time , \n  (#__codelineno-0-34)              wad   as   amount_raw \n  (#__codelineno-0-35)          from \n  (#__codelineno-0-36)              {{   source ( 'zeroex_ethereum' ,   'weth9_evt_deposit' )   }} \n  (#__codelineno-0-37)      ) \n  (#__codelineno-0-38) \n  (#__codelineno-0-39)      , \n  (#__codelineno-0-40)      withdrawn_weth   as   ( \n  (#__codelineno-0-41)          select \n  (#__codelineno-0-42)              'withdrawn'   ||   '-'   ||   evt_tx_hash   ||   '-'   ||   evt_index   ||   '-'   ||   src   as   unique_tx_id , \n  (#__codelineno-0-43)              src   as   wallet_address , \n  (#__codelineno-0-44)              contract_address   as   token_address , \n  (#__codelineno-0-45)              evt_block_time , \n  (#__codelineno-0-46)              -   wad   as   amount_raw \n  (#__codelineno-0-47)          from \n  (#__codelineno-0-48)              {{   source ( 'zeroex_ethereum' ,   'weth9_evt_withdrawal' )   }} \n  (#__codelineno-0-49)      ) \n  (#__codelineno-0-50) \n  (#__codelineno-0-51) select   unique_tx_id ,   'ethereum'   as   blockchain ,   wallet_address ,   token_address ,   evt_block_time ,   amount_raw \n  (#__codelineno-0-52) from   sent_transfers \n  (#__codelineno-0-53) union \n  (#__codelineno-0-54) select   unique_tx_id ,   'ethereum'   as   blockchain ,   wallet_address ,   token_address ,   evt_block_time ,   amount_raw \n  (#__codelineno-0-55) from   received_transfers \n  (#__codelineno-0-56) union \n  (#__codelineno-0-57) select   unique_tx_id ,   'ethereum'   as   blockchain ,   wallet_address ,   token_address ,   evt_block_time ,   amount_raw \n  (#__codelineno-0-58) from   deposited_weth \n  (#__codelineno-0-59) union \n  (#__codelineno-0-60) select   unique_tx_id ,   'ethereum'   as   blockchain ,   wallet_address ,   token_address ,   evt_block_time ,   amount_raw \n  (#__codelineno-0-61) from   withdrawn_weth \n \n transfers_ethereum_schema.yml  (https://github.com/duneanalytics/spellbook/blob/master/spellbook/models/transfers/ethereum/transfers_ethereum_schema.yml) \n  (#__codelineno-1-1) models : \n  (#__codelineno-1-2)   -   name :   transfers_ethereum_erc20 \n  (#__codelineno-1-3)     meta : \n  (#__codelineno-1-4)       blockchain :   ethereum \n  (#__codelineno-1-5)       sector :   transfers \n  (#__codelineno-1-6)       project :   erc20 \n  (#__codelineno-1-7)       contibutors :   soispoke, dot2dotseurat \n  (#__codelineno-1-8)     config : \n  (#__codelineno-1-9)       tags :   [ 'transfers' ,   'ethereum' ,   'erc20' ,   'soispoke' ,   'dot2dotseurat' ] \n  (#__codelineno-1-10)     description :   \"ERC20   Token   Transfers   on   Ethereum.   This   table   is   updated   every   15   minutes.\" \n  (#__codelineno-1-11)     columns : \n  (#__codelineno-1-12)       -   name :   unique_transfer_id \n  (#__codelineno-1-13)         description :   \"Unique   transfer   ID   (used   for   testing   for   duplicates)\" \n  (#__codelineno-1-14)         tests : \n  (#__codelineno-1-15)           -   unique \n  (#__codelineno-1-16)       -   &blockchain \n  (#__codelineno-1-17)         name :   blockchain \n  (#__codelineno-1-18)         description :   \"Blockchain\" \n  (#__codelineno-1-19)       -   &wallet_address \n  (#__codelineno-1-20)         name :   wallet_address \n  (#__codelineno-1-21)         description :   \"Wallet   address   of   sender   or   receiver.   If   amount   is   negative,   wallet   address   is   the   sender's.\" \n  (#__codelineno-1-22)       -   &token_address \n  (#__codelineno-1-23)         name :   token_address \n  (#__codelineno-1-24)         description :   \"Contract   address   for   token\" \n  (#__codelineno-1-25)       -   &evt_block_time \n  (#__codelineno-1-26)         name :   evt_block_time \n  (#__codelineno-1-27)         description :   \"Timestamp   for   block   event   time   in   UTC\" \n  (#__codelineno-1-28)       -   &amount_raw \n  (#__codelineno-1-29)         name :   amount_raw \n  (#__codelineno-1-30)         description :   \"Raw   amount   of   ERC20   token   held   *before*   taking   into   account   token   decimals\" \n \n dbt_project.yml  (https://github.com/duneanalytics/spellbook/blob/master/spellbook/dbt_project.yml) \n  (#__codelineno-2-1) transfers : \n  (#__codelineno-2-2)   +schema :   transfers \n  (#__codelineno-2-3)   +materialized :   view \n  (#__codelineno-2-4)   ethereum : \n  (#__codelineno-2-5)     +schema :   transfers_ethereum \n  (#__codelineno-2-6)     +materialized :   view", "url": "https://dune.com/docs/zh/spellbook/examples/reformatted/"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/spellbook/examples/index.md) \n \u9b54\u6cd5\u4e66\u793a\u4f8b \n \u4f5c\u4e3a\u4f8b\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u770b ERC-20\u3002 ERC-20  (https://ethereum.org/en/developers/docs/standards/tokens/erc-20)  \u4ee3\u5e01\u662f\u540c\u8d28\u5316\u4ee3\u5e01\uff0c\u90fd\u9075\u5faa\u4ee5\u592a\u574a\u57fa\u91d1\u4f1a\u5236\u5b9a\u7684\u5408\u7ea6\u6807\u51c6\u3002\u4e3a\u4e86\u8ffd\u8e2a\u6bcf\u65e5\u4f59\u989d\uff0c\u6211\u4eec\u9700\u8981\u9996\u5148\u8bc6\u522b\u8f6c\u8d26\u3002 \n \u4e3a\u6b64\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u7684\u4e3b\u8981\u57fa\u7840 Dune \u6570\u636e\u8868\u662f\u60a8\u53ef\u4ee5\u5728\u6570\u636e\u6d4f\u89c8\u5668\u627e\u5230\u7684  erc20_ethereum.evt_Transfer \u3002\n \n \u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06\u9b54\u6cd5\u5206\u89e3\u6210\u66f4\u591a\u6a21\u5757\u5316\u7684\u7cfb\u5217\u9b54\u6cd5\uff1a \n \n \u91cd\u65b0\u66f4\u6539\u683c\u5f0f\u7684\u8f6c\u8d26  (reformatted/) \n \u6bcf\u65e5\u6c47\u603b\u7684\u8f6c\u8d26  (daily-aggregation/) \n \u6eda\u52a8\u603b\u548c\u7684\u6bcf\u65e5\u8f6c\u8d26  (rolling-sum/) \n \u6700\u7ec8\u6bcf\u65e5\u4f59\u989d  (final-day-balance/) \uff08Ethereum ERC20 \u4ee3\u5e01\uff09", "url": "https://dune.com/docs/zh/spellbook/examples/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#casting-a-spell-from-scratch) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/spellbook/how-to-guides/index.md) \n How-To Guides \n Here you'll find a variety of how-to guides for making \u2728 with Spellbook! \n ", "url": "https://dune.com/docs/zh/spellbook/how-to-guides/"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/spellbook/how-to-cast-a-spell/8-make-a-pull-request-get-merged-become-an-archwizard.md) \n 8. \ud83c\udf08 \u63d0\u51fa\u5408\u5e76\u8bf7\u6c42\uff0c\u5408\u5e76\uff0c\u6210\u4e3a\u5927\u5deb\u5e08 \ud83e\uddd9 \n \u5b8c\u6210\u6240\u6709\u8fd9\u4e9b\u540e\uff0c\u662f\u65f6\u5019\u5411\u5b98\u65b9\u9b54\u6cd5\u4e66\u4ed3\u5e93\u63d0\u4ea4PR\u4e86\uff01 \n \u4e3a\u6b64\uff0c\u8bf7\u786e\u4fdd\u5c06\u672c\u5730\u66f4\u6539\u63d0\u4ea4\u5230\u4f60Fork\u7684\u9b54\u6cd5\u4e66 GitHub \u5206\u652f\u3002 \n \u7136\u540e\uff0c\u8f6c\u5230\u4f60\u5728 Github \u4e0a\u7684\u5206\u652f\uff0c\u627e\u5230\u9875\u9762\u9876\u90e8\u7684\u201cContribute\u201d\u4e0b\u62c9\u83dc\u5355\uff0c\u6253\u5f00\u5b83\u5e76\u70b9\u51fb\u201cOpen pull request\u201d\u6309\u94ae\u3002 \n \n \u7ed9\u60a8\u7684 PR \u6dfb\u52a0\u9002\u5f53\u7684\u8bf4\u660e\u4fe1\u606f\uff0c\u7136\u540e\u7b49\u5f85\u8bc4\u8bba\u6eda\u6eda\u800c\u6765\u5427\uff01 \n \u6211\u4eec\u90fd\u4e0d\u662f\u5b8c\u7f8e\u7684\uff0c\u6240\u4ee5\u5728Dune\u56e2\u961f\u6279\u51c6\u6211\u4eec\u7684\u5408\u5e76\u8bf7\u6c42\u4e4b\u524d\uff0c\u51e0\u4e4e\u6240\u6709\u4eba\u90fd\u4f1a\u4ece\u4ed6\u4eec\u90a3\u91cc\u83b7\u5f97\u5173\u4e8e\u6211\u4eec\u7684\u9b54\u6cd5\u8868\u4e2d\u9700\u8981\u4fee\u590d\u6216\u6539\u8fdb\u7684\u5185\u5bb9\u7684\u8bc4\u8bba\u3002 \n \u4e00\u65e6\u60a8\u5904\u7406\u4e86\u6240\u6709\u8bc4\u8bba\uff0c\u60a8\u7684\u9b54\u6cd5\u8868\u5c06\u83b7\u5f97\u6279\u51c6\uff0c\u60a8\u5c06\u6210\u4e3a\u5c11\u6570\u88ab\u9009\u4e2d\u7684Dune\u5927\u6cd5\u5e08\u4e4b\u4e00\uff01 \ud83e\uddd9", "url": "https://dune.com/docs/zh/spellbook/how-to-cast-a-spell/8-make-a-pull-request-get-merged-become-an-archwizard/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#dbt-materialization) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/spellbook/how-to-cast-a-spell/7-configure-alias-and-materialization-strategy.md) \n 7. \ud83c\udfa8 \u914d\u7f6e\u522b\u540d\u548c\u7269\u5316\u7b56\u7565 \n \u5b9a\u4e49\u4e86\u9b54\u6cd5\u8868\u7684 SQL \u540e\uff0c\u5c31\u53ef\u4ee5\u914d\u7f6e\u6211\u4eec\u7684\u522b\u540d\u4e86\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u5176\u4ed6\u9b54\u6cd5\u8868\u548c\u67e5\u8be2\u4e2d\u5f15\u7528\u8fd9\u4e9b\u6587\u4ef6\uff0c\u4ee5\u53ca\u6211\u4eec\u5e0c\u671b dbt \u5982\u4f55\u7269\u5316\u6211\u4eec\u7684\u5de5\u4f5c\u3002 \n ", "url": "https://dune.com/docs/zh/spellbook/how-to-cast-a-spell/7-configure-alias-and-materialization-strategy/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_view_job_migrationssql) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/spellbook/how-to-cast-a-spell/6-write-your-spell-as-SELECT-statement.md) \n 6. \ud83d\udd8b\ufe0f \u5c06\u60a8\u7684\u9b54\u6cd5\u8868\u5199\u6210 SELECT \u8bed\u53e5 \n \u73b0\u5728\u6211\u4eec\u51c6\u5907\u597d \u6b63\u5f0f \u5f00\u59cb\u521b\u5efa\u6211\u4eec\u7684\u9b54\u6cd5\u8868\u4e86\uff01 \n \u867d\u7136\u6211\u4eec\u7684\u7ec8\u70b9\u662f  _view_job_log.sql \uff0c\u4f46\u6211\u4eec\u9700\u8981\u4ece  _view_job_migrations.sql  \u5f00\u59cb\u3002 \n ", "url": "https://dune.com/docs/zh/spellbook/how-to-cast-a-spell/6-write-your-spell-as-SELECT-statement/"}
{"content": "API Key \u65e0\u6548 \u00b6 \n ", "url": "https://dune.com/docs/zh/api/api-reference/errors/#api-key"}
{"content": "\u8fd4\u56de\u5bf9\u8c61 \u00b6 \n  (#__codelineno-0-1)  {'error': 'invalid API Key'}\n \n \u6838\u67e5 \u00b6  (#_2) \n \n \u786e\u4fdd\u60a8\u5728  header  \u4e2d\u5c06\u60a8\u7684 API Key \u4f20\u7ed9\u63a5\u5165\u70b9\u3002\u5177\u4f53\u5b9e\u73b0\u65b9\u5f0f\uff0c\u8bf7\u53c2\u9605 [\u9274\u6743] \u7ae0\u8282\uff08.../api-reference/authentication.md\uff09\uff0c\u4ee5\u53ca\u6211\u4eec [\u5feb\u901f\u5165\u95e8\u6307\u5357]\uff08.../quick-start/api-py.md\uff09\u4e2d\u5177\u4f53\u8bed\u8a00\u7684\u5b9e\u73b0\u6848\u4f8b\u3002 \n \u5982\u679c\u60a8\u5df2\u7ecf\u5728 header \u4e2d\u4f20\u9012\u4e86 API Key\uff0c\u8bf7\u786e\u4fdd\u8f93\u5165\u6b63\u786e\u3002 \n \n ", "url": "https://dune.com/docs/zh/api/api-reference/errors/#_1"}
{"content": "\u53d1\u751f\u4e86\u5185\u90e8\u9519\u8bef \u00b6 \n ", "url": "https://dune.com/docs/zh/api/api-reference/errors/#_3"}
{"content": "\u8fd4\u56de\u5bf9\u8c61 \u00b6 \n  (#__codelineno-1-1)  {'error': 'An internal error occurred'}\n \n \u6838\u67e5 \u00b6  (#_5) \n \n \u5982\u679c\u60a8\u6b63\u5728\u4f7f\u7528\u6211\u4eec\u7684\u67d0\u4e2a GET \u63a5\u5165\u5730\u5740\uff0c\u8bf7\u786e\u4fdd\u60a8\u8f93\u5165\u7684 \"query_id\" \u662f\u6b63\u786e\u7684\u3002 \n \u5982\u679c\u60a8\u6b63\u5728\u4f7f\u7528\u6211\u4eec\u7684\u67d0\u4e2a POST \u63a5\u5165\u5730\u5740\uff0c\u8bf7\u786e\u4fdd\u60a8\u4ece GET \u63a5\u5165\u5730\u5740\u83b7\u53d6\u7684  execution_id  \u5df2\u7ecf\u88ab\u6b63\u786e\u4f20\u9012\u5230 POST \u63a5\u5165\u5730\u5740\u3002 \n \n \u5f53\u524d\u6587\u6863\u5e76\u4e0d\u5b8c\u5584\uff01 \n \u6211\u4eec\u76ee\u524d\u6b63\u5728\u52aa\u529b\u5b8c\u5584\u4e2d\uff0c\u4f46\u8fd8\u662f\u90a3\u53e5\u8bdd\uff0c\u83b7\u5f97\u4efb\u4f55\u5e2e\u52a9\u7684\u6700\u4f73\u9014\u5f84\u4f9d\u65e7\u662f\u6211\u4eec\u7684  #dune-api Discord channel  (https://discord.com/channels/757637422384283659/1019910980634939433) \u3002", "url": "https://dune.com/docs/zh/api/api-reference/errors/#_4"}
{"content": "[POST] \u53d6\u6d88\u6267\u884c\u67e5\u8be2 \u00b6 \n \u5982\u4f55\u64a4\u9500\u60a8\u7684 Dune API \u6267\u884c\u8bf7\u6c42\u3002 \n ", "url": "https://dune.com/docs/zh/api/api-reference/cancel-execution/#post"}
{"content": "\u8bf7\u6c42\u53c2\u6570 \u00b6 \n \u65e0\u9700\u53c2\u6570\u3002 \n ", "url": "https://dune.com/docs/zh/api/api-reference/cancel-execution/#_1"}
{"content": "\u8fd4\u56de\u503c \u00b6 \n \u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u7528\u4e8e\u8868\u793a\u6267\u884c\u662f\u5426\u88ab\u6210\u529f\u64a4\u9500\u3002 \n ", "url": "https://dune.com/docs/zh/api/api-reference/cancel-execution/#_2"}
{"content": "\u8bf7\u6c42\u793a\u4f8b \u00b6 \n \u60a8\u9700\u8981\u4f20\u9012\u60a8\u4ece  \u6267\u884c\u67e5\u8be2 ID  (../execute-query-id/)  \u8bf7\u6c42\u4e2d\u83b7\u5f97\u7684  execution_id  \u53c2\u6570\uff0c\u7528\u4ee5\u5b8c\u6210\u64a4\u9500\u6267\u884c\u7684 API \u8bf7\u6c42\u3002 \n  (#__codelineno-0-1) POST v1/execution/{{execution_id}}/cancel\n  (#__codelineno-0-2) \n  (#__codelineno-0-3) https://api.dune.com/api/v1/execution/{{execution_id}}/cancel\n \n ", "url": "https://dune.com/docs/zh/api/api-reference/cancel-execution/#_3"}
{"content": "cURL \u00b6 \n  (#__codelineno-1-1) curl -X POST -H x-dune-api-key:{{api_key}} \"https://api.dune.com/api/v1/execution/{{execution_id}}/cancel\"\n \n ", "url": "https://dune.com/docs/zh/api/api-reference/cancel-execution/#curl"}
{"content": "\u8fd4\u56de\u793a\u4f8b \u00b6 \n \n Dune API \u4ee5 JSON \u683c\u5f0f\u8fd4\u56de\u54cd\u5e94\u3002 \n \n  (#__codelineno-2-1) { \n  (#__codelineno-2-2)      \"success\" :   true \n  (#__codelineno-2-3) } \n \n \n success  : \u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u7528\u4e8e\u8868\u793a\u64a4\u9500\u67e5\u8be2\u6267\u884c\u7684\u8bf7\u6c42\u662f\u5426\u6210\u529f\u3002", "url": "https://dune.com/docs/zh/api/api-reference/cancel-execution/#_4"}
{"content": "[GET] \u83b7\u53d6\u67e5\u8be2\u7ed3\u679c \u00b6 \n \u5982\u4f55\u83b7\u53d6\u6267\u884c\u8bf7\u6c42\u7684\u7ed3\u679c\u6570\u636e\u3002 \n ", "url": "https://dune.com/docs/zh/api/api-reference/execution-results/#get"}
{"content": "\u8bf7\u6c42\u53c2\u6570 \u00b6 \n \u65e0\u9700\u53c2\u6570\u3002 \n ", "url": "https://dune.com/docs/zh/api/api-reference/execution-results/#_1"}
{"content": "\u8fd4\u56de\u503c \u00b6 \n \u8fd4\u56de\u6267\u884c\u67e5\u8be2\u7684\u72b6\u6001\u3001\u5143\u6570\u636e\u548c\u67e5\u8be2\u7ed3\u679c\u3002 \n ", "url": "https://dune.com/docs/zh/api/api-reference/execution-results/#_2"}
{"content": "\u8bf7\u6c42\u793a\u4f8b \u00b6 \n \u60a8\u9700\u8981\u4f20\u9012\u60a8\u4ece  \u6267\u884c\u67e5\u8be2 ID  (../execute-query-id/)  \u8bf7\u6c42\u4e2d\u83b7\u5f97\u7684  execution_id  \u53c2\u6570\uff0c\u7528\u4ee5\u5b8c\u6210\u83b7\u53d6\u6267\u884c\u7ed3\u679c\u7684 API \u8bf7\u6c42\u3002 \n  (#__codelineno-0-1) GET v1/execution/{{execution_id}}/results\n  (#__codelineno-0-2) \n  (#__codelineno-0-3) https://api.dune.com/api/v1/execution/{{execution_id}}/results\n \n ", "url": "https://dune.com/docs/zh/api/api-reference/execution-results/#_3"}
{"content": "cURL \u00b6 \n  (#__codelineno-1-1) curl -X GET \"https://api.dune.com/api/v1/execution/{{execution_id}}/results\" -H x-dune-api-key:{{api_key}}\n \n ", "url": "https://dune.com/docs/zh/api/api-reference/execution-results/#curl"}
{"content": "\u8fd4\u56de\u793a\u4f8b \u00b6 \n !!! info \u201cDune API \u4ee5 JSON \u683c\u5f0f\u8fd4\u56de\u54cd\u5e94\u3002\u201d \n  (#__codelineno-2-1) { \n  (#__codelineno-2-2)      \"execution_id\" :   \"01GBM4W2N0NMCGPZYW8AYK4YF1\" , \n  (#__codelineno-2-3)      \"query_id\" :   980708 , \n  (#__codelineno-2-4)      \"state\" :   \"QUERY_STATE_COMPLETED\" , \n  (#__codelineno-2-5)      \"submitted_at\" :   \"2022-08-29T06:33:24.913138Z\" , \n  (#__codelineno-2-6)      \"expires_at\" :   \"2024-08-28T06:36:41.58847Z\" , \n  (#__codelineno-2-7)      \"execution_started_at\" :   \"2022-08-29T06:33:24.916543Z\" , \n  (#__codelineno-2-8)      \"execution_ended_at\" :   \"2022-08-29T06:36:41.588467Z\" , \n  (#__codelineno-2-9)      \"result\" :   { \n  (#__codelineno-2-10)          \"rows\" :   [ \n  (#__codelineno-2-11)              { \n  (#__codelineno-2-12)                  \"TableName\" :   \"eth_blocks\" , \n  (#__codelineno-2-13)                  \"ct\" :   6296 \n  (#__codelineno-2-14)              }, \n  (#__codelineno-2-15)              { \n  (#__codelineno-2-16)                  \"TableName\" :   \"eth_traces\" , \n  (#__codelineno-2-17)                  \"ct\" :   4474223 \n  (#__codelineno-2-18)              }, \n  (#__codelineno-2-19)              { \n  (#__codelineno-2-20)                  \"TableName\" :   \"eth_creation_traces\" , \n  (#__codelineno-2-21)                  \"ct\" :   10155 \n  (#__codelineno-2-22)              }, \n  (#__codelineno-2-23)              { \n  (#__codelineno-2-24)                  \"TableName\" :   \"eth_logs\" , \n  (#__codelineno-2-25)                  \"ct\" :   2137508 \n  (#__codelineno-2-26)              }, \n  (#__codelineno-2-27)              { \n  (#__codelineno-2-28)                  \"TableName\" :   \"eth_transactions\" , \n  (#__codelineno-2-29)                  \"ct\" :   1039890 \n  (#__codelineno-2-30)              }, \n  (#__codelineno-2-31)              { \n  (#__codelineno-2-32)                  \"TableName\" :   \"sol_transactions\" , \n  (#__codelineno-2-33)                  \"ct\" :   37185158 \n  (#__codelineno-2-34)              }, \n  (#__codelineno-2-35)              { \n  (#__codelineno-2-36)                  \"TableName\" :   \"bnb_transactions\" , \n  (#__codelineno-2-37)                  \"ct\" :   2942005 \n  (#__codelineno-2-38)              }, \n  (#__codelineno-2-39)              { \n  (#__codelineno-2-40)                  \"TableName\" :   \"optimism_transactions\" , \n  (#__codelineno-2-41)                  \"ct\" :   120973 \n  (#__codelineno-2-42)              } \n  (#__codelineno-2-43)          ], \n  (#__codelineno-2-44)          \"metadata\" :   { \n  (#__codelineno-2-45)              \"column_names\" :   [ \n  (#__codelineno-2-46)                  \"ct\" , \n  (#__codelineno-2-47)                  \"TableName\" \n  (#__codelineno-2-48)              ], \n  (#__codelineno-2-49)              \"result_set_bytes\" :   194 , \n  (#__codelineno-2-50)              \"total_row_count\" :   8 , \n  (#__codelineno-2-51)              \"datapoint_count\" :   16 , \n  (#__codelineno-2-52)              \"pending_time_millis\" :   8 , \n  (#__codelineno-2-53)              \"execution_time_millis\" :   24 \n  (#__codelineno-2-54)          } \n  (#__codelineno-2-55)      } \n  (#__codelineno-2-56) } \n \n \n execution_id  : \u5f53\u524d API \u8c03\u7528\u7684\u6267\u884c ID \u3002 \n query_id  : \u5f53\u524d\u8bf7\u6c42\u6240\u5bf9\u5e94\u6267\u884c\u7684 Dune \u67e5\u8be2 ID \u3002 \n state  : \u6b64\u67e5\u8be2\u7684\u5f53\u524d\u6267\u884c\u72b6\u6001\u3002\u67e5\u9605  FAQ  \u7ae0\u8282\uff0c\u4e86\u89e3\u4e0d\u540c\u72b6\u6001\u7801\u6240\u5bf9\u5e94  state  \u7684\u5177\u4f53\u542b\u4e49\u3002 \n submitted_at  : \u6267\u884c\u8be5\u67e5\u8be2\u7684 API \u88ab\u8c03\u7528\u65f6\u7684\u65f6\u95f4\u6233\u3002 \n expires_at  : \u8be5\u67e5\u8be2\u7684\u6267\u884c\u7ed3\u679c\u88ab\u50a8\u5b58\u5728\u6211\u4eec\u6570\u636e\u5e93\u4e2d\u7684\u8fc7\u671f\u65f6\u95f4\u3002 \n execution_started_at  : \u8be5\u8bf7\u6c42\u5728\u6211\u4eec\u7684\u670d\u52a1\u5668\u4e2d\u67e5\u8be2\u6267\u884c\u5f00\u59cb\u7684\u65f6\u95f4\u3002 \n execution_ended_at  : \u8be5\u8bf7\u6c42\u5728\u6211\u4eec\u7684\u670d\u52a1\u5668\u4e2d\u67e5\u8be2\u6267\u884c\u5b8c\u6210\u7684\u65f6\u95f4\u3002 \n result  : \n rows  : \u8be5\u8bf7\u6c42\u8fd4\u56de\u7684\u5b9e\u9645\u6570\u636e\u8bb0\u5f55\u3002 \n metadata  : \u8fd4\u56de\u67e5\u8be2\u6570\u636e\u7684\u4e00\u4e9b\u5c5e\u6027\u3002 \n column_names  : \u8fd4\u56de\u6570\u636e\u4e2d\u7684\u5217\u540d\u3002 \n result_set_bytes  : \u8fd4\u56de\u7684\u6570\u636e\u5927\u5c0f\u3002 \n total_row_count  : \u6570\u636e\u4e2d\u7684\u884c\u6570\u3002 \n datapoint_count  : \u8be5\u8bf7\u6c42\u8fd4\u56de\u7684\u6570\u636e\u70b9\uff08datapoints\uff09\u603b\u6570\uff0c\u7b49\u503c\u4e8e\uff08 total_row_count  x \u5217\u6570\uff09\u3002 \n pending_time_millis  : \u5728\u6211\u4eec\u7684\u670d\u52a1\u5668\u4e2d\u4e3a\u8fd9\u4e2a\u8bf7\u6c42\u5206\u914d\u4e00\u4e2a\u63d2\u69fd\u6240\u82b1\u8d39\u7684\u65f6\u95f4\uff08\u4ee5\u6beb\u79d2\u8ba1\uff09\u3002 \n execution_time_millis  : \u8be5\u8bf7\u6c42\u5b9e\u9645\u6267\u884c\u67e5\u8be2\u6240\u82b1\u8d39\u7684\u65f6\u95f4\uff08\u4ee5\u6beb\u79d2\u8ba1\uff09\u3002 \n \n \n \n \n \n ", "url": "https://dune.com/docs/zh/api/api-reference/execution-results/#_4"}
{"content": "\u67e5\u8be2\u7ed3\u679c\u8bfb\u53d6 FAQ \u00b6 \n ", "url": "https://dune.com/docs/zh/api/api-reference/execution-results/#faq"}
{"content": "\u6211\u80fd\u5426\u901a\u8fc7\u76f4\u8fde\u6570\u636e\u5e93\u6765\u63d0\u53d6\u6570\u636e\uff1f \u00b6 \n \u76ee\u524d\u8fd8\u4e0d\u884c\u3002\u5728\u8fc7\u6e21\u65f6\u671f\uff0c\u6211\u4eec\u5efa\u8bae\u5b9a\u671f\u4ece \"max(latestBlockNumber) - 2\" \u5230 \"lastFetchedBlockNumber\" \u4e4b\u95f4\u83b7\u53d6\u6570\u636e\u3002\u4ece\u6700\u65b0\u533a\u5757\u7f16\u53f7\u5f80\u524d2\u4f4d\u5f00\u59cb\u83b7\u53d6\uff0c\u53ef\u4ee5\u786e\u4fdd\u60a8\u4ece\u6bcf\u6b21\u65b0\u8bf7\u6c42\u4e2d\u83b7\u53d6\u5230\u5b8c\u6574\u6570\u636e\u96c6\u3002 \n ", "url": "https://dune.com/docs/zh/api/api-reference/execution-results/#_5"}
{"content": "\u67e5\u8be2\u7ed3\u679c\u6570\u636e\u662f\u5426\u4f1a\u88ab\u5b58\u6863\u4ee5\u4fbf\u5feb\u901f\u68c0\u7d22\uff1f \u00b6 \n \u6ca1\u9519 \n ", "url": "https://dune.com/docs/zh/api/api-reference/execution-results/#_6"}
{"content": "\u6267\u884c\u7684\u7ed3\u679c\u6570\u636e\u4f1a\u88ab\u50a8\u5b58\u591a\u4e45\uff1f \u00b6 \n \u76ee\u524d\u662f2\u5e74\uff0c\u4f46\u672a\u6765\u6211\u4eec\u53ef\u80fd\u4f1a\u964d\u4f4e\u5230\u63a5\u8fd190\u5929\u3002\u8fd9\u4e2a\u503c\u5728 API \u54cd\u5e94\u7684\u6267\u884c\u72b6\u6001\u548c\u67e5\u8be2\u7ed3\u679c\u7684 \"expires_at\" \u5b57\u6bb5\u5747\u53ef\u89c1\u3002 \n ", "url": "https://dune.com/docs/zh/api/api-reference/execution-results/#_7"}
{"content": "\u5728\u5355\u6b21 API \u7ed3\u679c\u8c03\u7528\u4e2d\uff0c\u6211\u53ef\u4ee5\u83b7\u53d6\u591a\u5c11\u6570\u636e\uff1f \u00b6 \n \u76ee\u524d\u4e0a\u9650\u4e3a 1GB\uff0c\u4f46\u6211\u4eec\u53ef\u80fd\u4f1a\u5728\u6574\u4f53\u4e0a\u8c03\u4f4e\u6b64\u9650\u5236\uff0c\u6216\u4f9d\u636e\u4e0d\u540c\u7684\u4ed8\u8d39\u8ba1\u5212\u7c7b\u578b\u800c\u6709\u6240\u4e0d\u540c\u3002", "url": "https://dune.com/docs/zh/api/api-reference/execution-results/#api"}
{"content": "[GET] \u83b7\u53d6\u67e5\u8be2\u6267\u884c\u72b6\u6001 \u00b6 \n \u5982\u4f55\u68c0\u67e5\u6267\u884c\u8bf7\u6c42\u7684\u72b6\u6001\u3002 \n ", "url": "https://dune.com/docs/zh/api/api-reference/execution-status/#get"}
{"content": "\u8bf7\u6c42\u53c2\u6570 \u00b6 \n \u65e0\u9700\u53c2\u6570\u3002 \n ", "url": "https://dune.com/docs/zh/api/api-reference/execution-status/#_1"}
{"content": "\u8fd4\u56de\u503c \u00b6 \n \u5982\u679c\u6267\u884c\u5b8c\u6210\uff0c\u5219\u8fd4\u56de\u67e5\u8be2\u7684\u6267\u884c\u72b6\u6001\u4ee5\u53ca\u76f8\u5173\u7684\u7ed3\u679c\u5143\u6570\u636e\u3002 \n ", "url": "https://dune.com/docs/zh/api/api-reference/execution-status/#_2"}
{"content": "\u8bf7\u6c42\u793a\u4f8b \u00b6 \n \u60a8\u9700\u8981\u4f20\u9012\u60a8\u4ece  \u6267\u884c\u67e5\u8be2 ID  (../execute-query-id/)  \u8bf7\u6c42\u4e2d\u83b7\u5f97\u7684  execution_id  \u53c2\u6570\uff0c\u7528\u4ee5\u5b8c\u6210\u83b7\u53d6\u6267\u884c\u72b6\u6001\u7684 API \u8bf7\u6c42\u3002 \n  (#__codelineno-0-1) GET v1/execution/{{execution_id}}/status\n  (#__codelineno-0-2) \n  (#__codelineno-0-3) https://api.dune.com/api/v1/execution/{{execution_id}}/status\n \n ", "url": "https://dune.com/docs/zh/api/api-reference/execution-status/#_3"}
{"content": "cURL \u00b6 \n  (#__codelineno-1-1) curl -X GET \"https://api.dune.com/api/v1/execution/{{execution_id}}/status\" -H x-dune-api-key:{{api_key}}\n \n ", "url": "https://dune.com/docs/zh/api/api-reference/execution-status/#curl"}
{"content": "\u8fd4\u56de\u793a\u4f8b \u00b6 \n !!! info \u201cDune API \u4ee5 JSON \u683c\u5f0f\u8fd4\u56de\u54cd\u5e94\u3002\u201d \n ", "url": "https://dune.com/docs/zh/api/api-reference/execution-status/#_4"}
{"content": "\u67e5\u8be2\u8fd0\u884c\u4e2d \u00b6 \n  (#__codelineno-2-1) { \n  (#__codelineno-2-2)      \"execution_id\" :   \"01GBM4W2N0NMCGPZYW8AYK4YF1\" , \n  (#__codelineno-2-3)      \"query_id\" :   980708 , \n  (#__codelineno-2-4)      \"state\" :   \"QUERY_STATE_EXECUTING\" , \n  (#__codelineno-2-5)      \"submitted_at\" :   \"2022-08-29T06:33:24.913138Z\" , \n  (#__codelineno-2-6)      \"expires_at\" :   \"1970-01-01T00:00:00Z\" , \n  (#__codelineno-2-7)      \"execution_started_at\" :   \"2022-08-29T06:33:24.916543331Z\" \n  (#__codelineno-2-8) } \n \n ", "url": "https://dune.com/docs/zh/api/api-reference/execution-status/#_5"}
{"content": "\u6267\u884c\u5b8c\u6210 \u00b6 \n  (#__codelineno-3-1) { \n  (#__codelineno-3-2)      \"execution_id\" :   \"01GBM4W2N0NMCGPZYW8AYK4YF1\" , \n  (#__codelineno-3-3)      \"query_id\" :   980708 , \n  (#__codelineno-3-4)      \"state\" :   \"QUERY_STATE_COMPLETED\" , \n  (#__codelineno-3-5)      \"submitted_at\" :   \"2022-08-29T06:33:24.913138Z\" , \n  (#__codelineno-3-6)      \"expires_at\" :   \"2024-08-28T06:36:41.58847Z\" , \n  (#__codelineno-3-7)      \"execution_started_at\" :   \"2022-08-29T06:33:24.916543Z\" , \n  (#__codelineno-3-8)      \"execution_ended_at\" :   \"2022-08-29T06:36:41.588467Z\" , \n  (#__codelineno-3-9)      \"result_metadata\" :   { \n  (#__codelineno-3-10)          \"column_names\" :   [ \n  (#__codelineno-3-11)              \"ct\" , \n  (#__codelineno-3-12)              \"TableName\" \n  (#__codelineno-3-13)          ], \n  (#__codelineno-3-14)          \"result_set_bytes\" :   194 , \n  (#__codelineno-3-15)          \"total_row_count\" :   8 , \n  (#__codelineno-3-16)          \"datapoint_count\" :   16 , \n  (#__codelineno-3-17)          \"pending_time_millis\" :   8 , \n  (#__codelineno-3-18)          \"execution_time_millis\" :   24 \n  (#__codelineno-3-19)      } \n  (#__codelineno-3-20) } \n \n \n execution_id  : \u5f53\u524d API \u8c03\u7528\u7684\u6267\u884c ID \u3002 \n query_id  : \u5f53\u524d\u8bf7\u6c42\u6240\u5bf9\u5e94\u6267\u884c\u7684 Dune \u67e5\u8be2 ID \u3002 \n state  : \u6b64\u67e5\u8be2\u7684\u5f53\u524d\u6267\u884c\u72b6\u6001\u3002\u67e5\u9605  FAQ  \u7ae0\u8282\uff0c\u4e86\u89e3\u4e0d\u540c\u72b6\u6001\u7801\u6240\u5bf9\u5e94  state  \u7684\u5177\u4f53\u542b\u4e49\u3002 \n submitted_at  : \u6267\u884c\u8be5\u67e5\u8be2\u7684 API \u88ab\u8c03\u7528\u65f6\u7684\u65f6\u95f4\u6233\u3002 \n expires_at  : \u8be5\u67e5\u8be2\u7684\u6267\u884c\u7ed3\u679c\u88ab\u50a8\u5b58\u5728\u6211\u4eec\u6570\u636e\u5e93\u4e2d\u7684\u8fc7\u671f\u65f6\u95f4\u3002 \n execution_started_at  : \u8be5\u8bf7\u6c42\u5728\u6211\u4eec\u7684\u670d\u52a1\u5668\u4e2d\u67e5\u8be2\u6267\u884c\u5f00\u59cb\u7684\u65f6\u95f4\u3002 \n execution_ended_at  : \u8be5\u8bf7\u6c42\u5728\u6211\u4eec\u7684\u670d\u52a1\u5668\u4e2d\u67e5\u8be2\u6267\u884c\u5b8c\u6210\u7684\u65f6\u95f4\u3002 \n result_metadata  : \u672c\u6b21\u8bf7\u6c42\u8fd4\u56de\u6570\u636e\u7684\u4e00\u4e9b\u5c5e\u6027\u3002 \n column_names  : \u672c\u6b21\u8bf7\u6c42\u8fd4\u56de\u6570\u636e\u4e2d\u7684\u5217\u540d\u3002 \n result_set_bytes  : \u8fd4\u56de\u6570\u636e\u7684\u5b57\u8282\u5927\u5c0f\u3002 \n total_row_count  : \u8fd4\u56de\u6570\u636e\u7684\u884c\u6570\u3002 \n datapoint_count  : \u8be5\u8bf7\u6c42\u8fd4\u56de\u7684\u6570\u636e\u70b9\uff08datapoints\uff09\u603b\u6570\uff0c\u7b49\u503c\u4e8e\uff08 total_row_count  x \u5217\u6570\uff09\u3002 \n pending_time_millis  : \u5728\u6211\u4eec\u7684\u670d\u52a1\u5668\u4e2d\u4e3a\u8fd9\u4e2a\u8bf7\u6c42\u5206\u914d\u4e00\u4e2a\u63d2\u69fd\u6240\u82b1\u8d39\u7684\u65f6\u95f4\uff08\u4ee5\u6beb\u79d2\u8ba1\uff09\u3002 \n execution_time_millis  : \u8be5\u8bf7\u6c42\u5b9e\u9645\u6267\u884c\u67e5\u8be2\u6240\u82b1\u8d39\u7684\u65f6\u95f4\uff08\u4ee5\u6beb\u79d2\u8ba1\uff09\u3002 \n \n \n \n ", "url": "https://dune.com/docs/zh/api/api-reference/execution-status/#_6"}
{"content": "\u67e5\u8be2\u6267\u884c\u72b6\u6001 FAQ \u00b6 \n ", "url": "https://dune.com/docs/zh/api/api-reference/execution-status/#faq"}
{"content": "\u201c\u6267\u884c\u4e2d\u201d(Executing)\u548c\u201c\u5f85\u6267\u884c\u201d(Pending)\u8fd9\u4e24\u79cd\u72b6\u6001\u6709\u4ec0\u4e48\u533a\u522b\uff1f \u00b6 \n \u5f85\u6267\u884c(Pending)\u6307\u7684\u662f\u6267\u884c\u6b63\u5728\u7b49\u5f85\u4e00\u4e2a\u53ef\u7528\u7684\u6267\u884c\u8fde\u63a5\u69fd\u3002\u6267\u884c\u4e2d(Executing)\u610f\u5473\u7740\u76ee\u524d\u6b63\u5bf9\u6570\u636e\u5e93\u8fdb\u884c\u67e5\u8be2\u3002 \n \u4ee5\u4e0b\u662f\u6240\u6709\u7684\u72b6\u6001\u7801\u6e05\u5355\uff0c\u4f9b\u53c2\u8003\u3002 \n \n QUERY_STATE_PENDING  - \u67e5\u8be2\u6267\u884c\u6b63\u5728\u7b49\u5f85\u6267\u884c\u63d2\u69fd \n QUERY_STATE_EXECUTING - \u67e5\u8be2\u6b63\u5728\u8fd0\u884c\u4e2d \n QUERY_STATE_FAILED - \u6267\u884c\u5931\u8d25 \n QUERY_STATE_COMPLETED - \u6267\u884c\u6210\u529f\u5b8c\u6210 \n QUERY_STATE_CANCELLED - \u7528\u6237\u53d6\u6d88\u6267\u884c \n QUERY_STATE_EXPIRED - \u67e5\u8be2\u6267\u884c\u8fc7\u671f\uff0c\u7ed3\u679c\u4e0d\u518d\u53ef\u7528", "url": "https://dune.com/docs/zh/api/api-reference/execution-status/#executingpending"}
{"content": "[POST] \u6267\u884c\u67e5\u8be2 \u00b6 \n \u5982\u4f55\u6267\u884c\uff08\u8fd0\u884c\uff09\u4e00\u4e2a\u5e26\u6216\u4e0d\u5e26\u53c2\u6570\u7684\u67e5\u8be2\u6765\u68c0\u7d22\u6570\u636e\u3002 \n ", "url": "https://dune.com/docs/zh/api/api-reference/execute-query-id/#post"}
{"content": "\u8bf7\u6c42\u53c2\u6570 \u00b6 \n \u65e0\u9700\u53c2\u6570\u3002\u60a8\u4e5f\u53ef\u4ee5\u9009\u62e9\u6dfb\u52a0\u67e5\u8be2\u53c2\u6570\uff08 \u53c2\u89c1\u6b64\u6848\u4f8b  (#curl-with-parameters) \uff09\u3002 \n ", "url": "https://dune.com/docs/zh/api/api-reference/execute-query-id/#_1"}
{"content": "\u8fd4\u56de\u503c \u00b6 \n \u8fd4\u56de\u6307\u5b9a\u8bf7\u6c42\u7684  execution_id  \u3002 \n ", "url": "https://dune.com/docs/zh/api/api-reference/execute-query-id/#_2"}
{"content": "\u8bf7\u6c42\u793a\u4f8b \u00b6 \n  (#__codelineno-0-1) POST v1/query/{{query_id}}/execute\n  (#__codelineno-0-2) \n  (#__codelineno-0-3) https://api.dune.com/api/v1/query/{{query_id}}/execute\n \n ", "url": "https://dune.com/docs/zh/api/api-reference/execute-query-id/#_3"}
{"content": "cURL \u00b6 \n  (#__codelineno-1-1) curl -X POST -H x-dune-api-key:{{api_key}} \"https://api.dune.com/api/v1/query/{{query_id}}/execute\"\n \n ", "url": "https://dune.com/docs/zh/api/api-reference/execute-query-id/#curl"}
{"content": "\u5e26\u53c2\u6570\u7684 cURL \u00b6 \n  (#__codelineno-2-1) curl -X POST -d '{\"query_parameters\": { \"param1\":24}}' -H x-dune-api-key:{{api_key}}  \"https://api.dune.com/api/v1/query/{{query_id}}/execute\"\n \n ", "url": "https://dune.com/docs/zh/api/api-reference/execute-query-id/#curl_1"}
{"content": "\u8fd4\u56de\u793a\u4f8b \u00b6 \n !!! info \u201cDune API \u4ee5 JSON \u683c\u5f0f\u8fd4\u56de\u54cd\u5e94\u3002\u201d \n  (#__codelineno-3-1) { \n  (#__codelineno-3-2)      \"execution_id\" :   \"01GB1Y2MRA4C9PNQ0EQYVT4K6R\" , \n  (#__codelineno-3-3)      \"state\" :   \"QUERY_STATE_PENDING\" \n  (#__codelineno-3-4) } \n \n \n execution_id  : \u6bcf\u6b21\u8c03\u7528\u6b64 API \u65f6\u90fd\u4f1a\u751f\u6210\u7684\u4e00\u4e2a\u552f\u4e00 ID\u3002\u60a8\u53ef\u80fd\u60f3\u8981\u4fdd\u5b58\u8fd9\u4e2a\u503c\uff0c\u7528\u4ee5\u7a0d\u540e\u4f20\u9012\u7ed9\u5176\u4ed6 API \u63a5\u5165\u70b9\u3002 \n state  : \u67e5\u8be2\u7684\u5f53\u524d\u6267\u884c\u72b6\u6001\u3002\u67e5\u9605  FAQ  \u7ae0\u8282\uff0c\u4e86\u89e3\u4e0d\u540c\u72b6\u6001\u7801\u7684\u5177\u4f53\u542b\u4e49\u3002", "url": "https://dune.com/docs/zh/api/api-reference/execute-query-id/#_4"}
{"content": "Get the ERC20 balances for a given address \u00b6 \n The query ID is  1616880  (https://dune.com/queries/1616880) . \n \n \n \n Parameters \n Description \n Valid Choices \n \n \n \n \n address \n The address that you would like to get balances for \n must be a valid EVM address \n \n \n blocknumber \n The cutoff block for checking balances \n 0 if you want most recent block, otherwise any blocknumber that has been processed will work (~3 minute/15 block delay) \n \n \n chain \n The EVM chain you'd like to check balances for \n ethereum ,  polygon ,  bnb ,  optimism ,  arbitrum ,  avalanche_c ,  gnosis \n \n \n dust \n Keep or remove dust tokens (worth less than $0.01) \n keep  or  remove \n \n \n \n Output columns \n \n \n \n Output Column \n Description \n \n \n \n \n symbol \n the token symbol, if we have it \n \n \n notional_value \n the notional amount of tokens held, rounded 5 decimals \n \n \n total_value \n the $USD value of tokens held, rounded 3 decimals \n \n \n token_price \n the $USD price of the token \n \n \n \n ", "url": "https://dune.com/docs/zh/api/quick-start/api-ready-queries/#get-the-erc20-balances-for-a-given-address"}
{"content": "Get all the holders and their balances for a given ERC20 address \u00b6 \n The query ID is  1618116  (https://dune.com/queries/1618116) . \n \n \n \n Parameters \n Description \n Valid Choices \n \n \n \n \n address \n The ERC20 token address you would like to get holders of \n must be a valid EVM address \n \n \n blocknumber \n The cutoff block for checking balances \n 0 if you want most recent block, otherwise any blocknumber that has been processed will work (~3 minute/15 block delay) \n \n \n chain \n The EVM chain you'd like to check balances for \n ethereum ,  polygon ,  bnb ,  optimism ,  arbitrum ,  avalanche_c ,  gnosis \n \n \n \n Output columns \n \n \n \n Output Column \n Description \n \n \n \n \n holder \n the address of the holder \n \n \n holder_ens \n the ens of the holder address, if any \n \n \n notional_value \n the notional amount of tokens held, rounded 5 decimals \n \n \n total_value \n the $USD value of tokens held, rounded 3 decimals \n \n \n token_price \n the $USD price of the token \n \n \n \n ", "url": "https://dune.com/docs/zh/api/quick-start/api-ready-queries/#get-all-the-holders-and-their-balances-for-a-given-erc20-address"}
{"content": "Get the NFT balances for a given address \u00b6 \n The query ID is  1617158  (https://dune.com/queries/1617158) . \n \n \n \n Parameters \n Description \n Valid Choices \n \n \n \n \n address \n The address that you would like to get balances for \n must be a valid EVM address \n \n \n blocknumber \n The cutoff block for checking balances \n 0 if you want most recent block, otherwise any blocknumber that has been processed will work (~3 minute/15 block delay) \n \n \n chain \n The EVM chain you'd like to check balances for \n ethereum ,  polygon ,  bnb ,  optimism ,  arbitrum ,  avalanche_c ,  gnosis \n \n \n \n Output columns \n \n \n \n Output Column \n Description \n \n \n \n \n symbol \n the symbol of the NFT, if we have it \n \n \n name \n the name of the NFT, if we have it \n \n \n category \n the category of the NFT, if we have it \n \n \n token_id \n the token_id of the NFT \n \n \n contract_address \n the contract_address of the NFT \n \n \n acquired_how \n was it  minted  or  transfered/bought \n \n \n acquired_on_block_number \n the block_number that the NFT was received on \n \n \n \n ", "url": "https://dune.com/docs/zh/api/quick-start/api-ready-queries/#get-the-nft-balances-for-a-given-address"}
{"content": "Get all the holders and their balances for a given NFT address \u00b6 \n The query ID is  1618122  (https://dune.com/queries/1618122) . \n \n \n \n Parameters \n Description \n Valid Choices \n \n \n \n \n address \n The NFT address that you would like to holders of \n must be a valid EVM address \n \n \n blocknumber \n The cutoff block for checking balances \n 0 if you want most recent block, otherwise any blocknumber that has been processed will work (~3 minute/15 block delay) \n \n \n chain \n The EVM chain you'd like to check balances for \n ethereum ,  polygon ,  bnb ,  optimism ,  arbitrum ,  avalanche_c ,  gnosis \n \n \n \n Output columns \n \n \n \n Output Column \n Description \n \n \n \n \n holder \n the address of the holder \n \n \n holder_ens \n the ens of the holder address, if any \n \n \n tokens_held \n how many NFTs from this contract is held \n \n \n token_ids \n an array of all the token ids held", "url": "https://dune.com/docs/zh/api/quick-start/api-ready-queries/#get-all-the-holders-and-their-balances-for-a-given-nft-address"}
{"content": "Cow \u534f\u8bae Python \u5ba2\u6237\u7aef \u00b6 \n \u8fd9\u4e2a\u5ba2\u6237\u7aef\u7531\u7528\u6237  @bh2smith  (https://dune.com/bh2smith)  \u548c  Cow Protocol  (https://dune.com/cowprotocol)  \u7684\u56e2\u961f\u6784\u5efa\uff0c\u60a8\u53ef\u4ee5\u5728  PyPi  (https://pypi.org/project/dune-client/)  \u4e0a\u627e\u5230\u5b83\u3002 \n \u901a\u8fc7\u4e00\u6761\u7b80\u5355\u7684 pip \u5b89\u88c5\u547d\u4ee4\u5c31\u80fd\u7acb\u9a6c\u4e0a\u624b\uff1a \n  (#__codelineno-0-1) pip install dune-client\n \n \u5982\u679c\u60a8\u60f3\u4e86\u89e3\u66f4\u591a\u7528\u6cd5\u53ca\u4ee3\u7801\u7ec6\u8282\uff0c\u8bf7\u67e5\u770b\u6b64\u5ba2\u6237\u7aef\u7684  GitHub \u9875\u9762  (https://github.com/cowprotocol/dune-client) . \n \n \u514d\u8d23\u58f0\u660e \n \u867d\u7136\u6211\u4eec\u5f88\u559c\u6b22\u793e\u533a\u7684\u79ef\u6781\u4e3b\u52a8\uff0c\u4f46\u8fd9\u4e9b\u5ba2\u6237\u7aef\u5e76\u4e0d\u662f\u7531 Dune \u56e2\u961f\u76f4\u63a5\u7ef4\u62a4\u7684\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u4e0d\u80fd\u4fdd\u8bc1\u5b83\u4eec\u6ca1\u6709\u9519\u8bef\uff0c\u53e6\u5916\u5982\u679c\u5ba2\u6237\u7aef\u6709 bug\uff0c\u6211\u4eec\u53ef\u80fd\u4e5f\u65e0\u6cd5\u63d0\u4f9b\u5e2e\u52a9\u3002", "url": "https://dune.com/docs/zh/api/quick-start/community-clients/#cow-python"}
{"content": "\u7740\u624b\u51c6\u5907 \u00b6 \n  (#__codelineno-0-1) nvm use lts\n  (#__codelineno-0-2) npm install latest\n \n \u7136\u540e\u5b89\u88c5 node-fetch \u5305\uff1a \n  (#__codelineno-1-1) npm install node-fetch\n \n \u63a5\u4e0b\u6765\uff0c\u521b\u5efa\u4e00\u4e2a\u9879\u76ee\u76ee\u5f55\u5e76\u521d\u59cb\u5316\u4e00\u4e2a ESM \u517c\u5bb9\u7684 Node \u9879\u76ee\uff1a \n  (#__codelineno-2-1) mkdir dune_api_js\n  (#__codelineno-2-2) cd dune_api_js\n  (#__codelineno-2-3) npm init esm --yes\n \n \u8fd9\u5c06\u4e3a\u60a8\u521d\u59cb\u5316\u4e00\u4e2a\u9879\u76ee\uff0c\u5176\u4e2d\u5305\u62ec\u4e00\u4e2a  package.json  \u6587\u4ef6\u3002\u6253\u5f00\u8fd9\u4e2a\u6587\u4ef6\u5e76\u6dfb\u52a0\u4e0b\u9762\u8fd9\u884c\u5185\u5bb9\uff1a \n  (#__codelineno-3-1) \"type\" :   \"module\" \n \n ", "url": "https://dune.com/docs/zh/api/quick-start/api-js/#_1"}
{"content": "Dune API \u4ee3\u7801\u6848\u4f8b \u00b6 \n \u5c06\u4ee5\u4e0b\u4ee3\u7801\u4e2d\u7684  #\uff01YOUR_API_KEY  \u66ff\u6362\u4e3a\u60a8\u81ea\u5df1\u7684 Dune API \u5bc6\u94a5\uff0c\u7136\u540e\u5c06\u5176\u6dfb\u52a0\u5230\u60a8\u9879\u76ee\u7684  main.js  \u6587\u4ef6\u4e2d\uff1a \n  (#__codelineno-4-1) import   {   Headers   }   from   'node-fetch' ; \n  (#__codelineno-4-2) import   fetch   from   'node-fetch' ; \n  (#__codelineno-4-3) \n  (#__codelineno-4-4) // Add the API key to an header object \n  (#__codelineno-4-5) const   meta   =   { \n  (#__codelineno-4-6)      \"x-dune-api-key\" :   \"YOUR_API_KEY\" \n  (#__codelineno-4-7) }; \n  (#__codelineno-4-8) const   header   =   new   Headers ( meta ); \n  (#__codelineno-4-9) \n  (#__codelineno-4-10) //  Call the Dune API \n  (#__codelineno-4-11) const   response   =   await   fetch ( 'https://api.dune.com/api/v1/query/1258228/execute' ,   { \n  (#__codelineno-4-12)      method :   'POST' , \n  (#__codelineno-4-13)      headers :   header \n  (#__codelineno-4-14) }); \n  (#__codelineno-4-15) const   body   =   await   response . text (); \n  (#__codelineno-4-16) \n  (#__codelineno-4-17) // Log the returned response \n  (#__codelineno-4-18) console . log ( body ); \n \n \u76f4\u63a5\u8fd0\u884c\u8fd9\u4e2a\u811a\u672c\u4ece Dune API \u4e2d\u83b7\u5f97\u54cd\u5e94\uff1a \n  (#__codelineno-5-1) node main.js\n \n \u60a8\u5e94\u8be5\u5728\u547d\u4ee4\u884c\u4e0a\u770b\u5230\u4e00\u4e2a\u8fd4\u56de\u7684\u54cd\u5e94\u3002 \n \u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u67e5\u8be2\uff0c\u8be5\u67e5\u8be2\u83b7\u53d6\u4e86\u4e00\u5c0f\u90e8\u5206\u6570\u636e\u96c6\uff1a query_id: 1258228 \n\u60a8\u4e5f\u53ef\u4ee5\u7f16\u8f91 Query URL\uff0c\u5373\u53ef\u4ece\u4efb\u4f55\u5176\u4ed6\u67e5\u8be2\u4e2d\u83b7\u53d6\u60a8\u60f3\u8981\u7684\u6570\u636e\uff01 \ud83e\ude84 \n \u8fd9\u91cc\u7684\u4ee3\u7801\u4ec5\u8c03\u7528\u4e86\u5f00\u542f\u6267\u884c\u67e5\u8be2\u7684 API \u8bbf\u95ee\u57df\u540d\u3002\u5982\u8981\u83b7\u53d6\u8be5\u67e5\u8be2\u6240\u8fd4\u56de\u7684\u6570\u636e\uff0c\u60a8\u9700\u8981\u8c03\u7528\u5176\u4ed6 API \u8bbf\u95ee\u57df\u540d\u3002\u8bf7\u53c2\u9605  API\u53c2\u8003  (../../api-reference/authentication/)  \u90e8\u5206\u7684\u5185\u5bb9\uff0c\u4ee5\u4e86\u89e3\u66f4\u591a\u6709\u5173 Dune API \u8bbf\u95ee\u57df\u540d\u7684\u4fe1\u606f\u3002 \n \n \u5b8c\u6574\u4ee3\u7801 \n \u672c\u6559\u7a0b\u7684\u5b8c\u6574\u4ee3\u7801\u53ef\u5728  \u8fd9\u4e2a\u94fe\u63a5  (https://github.com/SusmeetJain/dune_api_js)  \u67e5\u9605\u3002", "url": "https://dune.com/docs/zh/api/quick-start/api-js/#dune-api"}
{"content": "\u7740\u624b\u51c6\u5907 \u00b6 \n \u6211\u4eec\u5c06\u4e3b\u8981\u4f7f\u7528  requests  \u5e93\u6765\u8bbf\u95ee API\uff0c\u6240\u4ee5\u5148\u5b89\u88c5\u5b83\uff1a \n  (#__codelineno-0-1) pip   install   requests\n \n \u6211\u4eec\u8fd8\u5c06\u4f7f\u7528  pandas  \u5c06\u4ece API \u8fd4\u56de\u7684\u6570\u636e\u52a0\u8f7d\u5230\u4e00\u4e2a\u6574\u6d01\u7684 DataFrame\uff08\u8868\u683c\uff09\u4e2d\uff0c\u5e76\u4f7f\u7528  jupyter notebooks  \u521b\u5efa\u4e00\u4e2a\u9ad8\u989c\u503c\u7684\u4ea4\u4e92\u754c\u9762\u6765\u5b8c\u6210\u6240\u6709\u8fd9\u4e9b\u5de5\u4f5c\u3002 \n \u6240\u4ee5\uff0c\u6211\u4eec\u4e00\u5e76\u5b89\u88c5\u8fd9\u4e9b\u5e93\uff1a \n  (#__codelineno-1-1) pip   install   pandas\n  (#__codelineno-1-2) pip   install   jupyter   notebook\n \n \u6211\u4eec\u5efa\u8bae\u5728 jupyter \u754c\u9762\u6f14\u793a\u540e\u7eed\u7684\u5feb\u901f\u5165\u95e8\u6307\u5357\u3002\u60a8\u53ef\u4ee5\u7528\u8fd9\u6761\u7b80\u5355\u7684\u547d\u4ee4\u6765\u542f\u52a8\u754c\u9762\uff1a \n  (#__codelineno-2-1) jupyter   notebook\n \n ", "url": "https://dune.com/docs/zh/api/quick-start/api-py/#_1"}
{"content": "\u5bfc\u5165\u5fc5\u8981\u7684\u5e93 \u00b6 \n  (#__codelineno-3-1) from   requests   import   get ,   post \n  (#__codelineno-3-2) import   pandas   as   pd \n \n ", "url": "https://dune.com/docs/zh/api/quick-start/api-py/#_2"}
{"content": "API Keys \u00b6 \n \u60a8\u5bf9 Dune API \u7684\u4efb\u4f55\u8c03\u7528\u90fd\u9700\u8981\u5728\u8c03\u7528\u5934\u4e2d\u4f20\u9012 API \u5bc6\u94a5\uff1a \n  (#__codelineno-4-1) API_KEY   =   \"YOUR_API_KEY\" \n  (#__codelineno-4-2) HEADER   =   { \"x-dune-api-key\"   :   API_KEY } \n \n ", "url": "https://dune.com/docs/zh/api/quick-start/api-py/#api-keys"}
{"content": "\u7b80\u5316URL\u751f\u6210 \u00b6 \n \u867d\u7136\u5e76\u975e\u5fc5\u8981\uff0c\u4f46\u4f7f\u7528\u6b64\u51fd\u6570\u53ef\u4ee5\u66f4\u5bb9\u6613\u4e3a\u4e0d\u540c\u7684 API \u8bbf\u95ee\u57df\u540d\uff08endpoints\uff09\u751f\u6210 URL\uff1a \n  (#__codelineno-5-1) BASE_URL   =   \"https://api.dune.com/api/v1/\" \n  (#__codelineno-5-2) \n  (#__codelineno-5-3) def   make_api_url ( module ,   action ,   ID ): \n  (#__codelineno-5-4)      \"\"\" \n  (#__codelineno-5-5)     We shall use this function to generate a URL to call the API. \n  (#__codelineno-5-6)     \"\"\" \n  (#__codelineno-5-7) \n  (#__codelineno-5-8)      url   =   BASE_URL   +   module   +   \"/\"   +   ID   +   \"/\"   +   action \n  (#__codelineno-5-9) \n  (#__codelineno-5-10)      return   url \n \n ", "url": "https://dune.com/docs/zh/api/quick-start/api-py/#url"}
{"content": "\u7528\u51fd\u6570\u5305\u88f9API\u8bbf\u95ee\u57df\u540d\uff08endpoints\uff09 \u00b6 \n Dune API \u76ee\u524d\u6709\u56db\u4e2a\u4e3b\u8981\u7684\u8bbf\u95ee\u57df\u540d\uff0c\u5728  API\u53c2\u8003  (../../api-reference/authentication/)  \u90e8\u5206\u6709\u8be6\u7ec6\u4ecb\u7ecd\u3002\u6211\u4eec\u8fd9\u91cc\u7528\u4e00\u4e9b\u51fd\u6570\u8fdb\u884c\u5305\u88c5\uff0c\u4ece\u800c\u4f7f\u5f97\u8c03\u7528 Dune API \u50cf\u6325\u52a8\u9b54\u6cd5\u68d2 \ud83e\ude84 \u4e00\u6837\u7b80\u5355\uff1a \n  (#__codelineno-6-1) def   execute_query ( query_id ): \n  (#__codelineno-6-2)      \"\"\" \n  (#__codelineno-6-3)     Takes in the query ID. \n  (#__codelineno-6-4)     Calls the API to execute the query. \n  (#__codelineno-6-5)     Returns the execution ID of the instance which is executing the query. \n  (#__codelineno-6-6)     \"\"\" \n  (#__codelineno-6-7) \n  (#__codelineno-6-8)      url   =   make_api_url ( \"query\" ,   \"execute\" ,   query_id ) \n  (#__codelineno-6-9)      response   =   post ( url ,   headers = HEADER ) \n  (#__codelineno-6-10)      execution_id   =   response . json ()[ 'execution_id' ] \n  (#__codelineno-6-11) \n  (#__codelineno-6-12)      return   execution_id \n  (#__codelineno-6-13) \n  (#__codelineno-6-14) \n  (#__codelineno-6-15) def   get_query_status ( execution_id ): \n  (#__codelineno-6-16)      \"\"\" \n  (#__codelineno-6-17)     Takes in an execution ID. \n  (#__codelineno-6-18)     Fetches the status of query execution using the API \n  (#__codelineno-6-19)     Returns the status response object \n  (#__codelineno-6-20)     \"\"\" \n  (#__codelineno-6-21) \n  (#__codelineno-6-22)      url   =   make_api_url ( \"execution\" ,   \"status\" ,   execution_id ) \n  (#__codelineno-6-23)      response   =   get ( url ,   headers = HEADER ) \n  (#__codelineno-6-24) \n  (#__codelineno-6-25)      return   response \n  (#__codelineno-6-26) \n  (#__codelineno-6-27) \n  (#__codelineno-6-28) def   get_query_results ( execution_id ): \n  (#__codelineno-6-29)      \"\"\" \n  (#__codelineno-6-30)     Takes in an execution ID. \n  (#__codelineno-6-31)     Fetches the results returned from the query using the API \n  (#__codelineno-6-32)     Returns the results response object \n  (#__codelineno-6-33)     \"\"\" \n  (#__codelineno-6-34) \n  (#__codelineno-6-35)      url   =   make_api_url ( \"execution\" ,   \"results\" ,   execution_id ) \n  (#__codelineno-6-36)      response   =   get ( url ,   headers = HEADER ) \n  (#__codelineno-6-37) \n  (#__codelineno-6-38)      return   response \n  (#__codelineno-6-39) \n  (#__codelineno-6-40) \n  (#__codelineno-6-41) def   cancel_query_execution ( execution_id ): \n  (#__codelineno-6-42)      \"\"\" \n  (#__codelineno-6-43)     Takes in an execution ID. \n  (#__codelineno-6-44)     Cancels the ongoing execution of the query. \n  (#__codelineno-6-45)     Returns the response object. \n  (#__codelineno-6-46)     \"\"\" \n  (#__codelineno-6-47) \n  (#__codelineno-6-48)      url   =   make_api_url ( \"execution\" ,   \"cancel\" ,   execution_id ) \n  (#__codelineno-6-49)      response   =   get ( url ,   headers = HEADER ) \n  (#__codelineno-6-50) \n  (#__codelineno-6-51)      return   response \n \n ", "url": "https://dune.com/docs/zh/api/quick-start/api-py/#apiendpoints"}
{"content": "\u4f7f\u7528 Dune API \u00b6 \n ", "url": "https://dune.com/docs/zh/api/quick-start/api-py/#dune-api"}
{"content": "\u6267\u884c\u67e5\u8be2 \u00b6 \n \u4e3a\u4e86  \u6267\u884c\u67e5\u8be2  (../../api-reference/execute-query-id/) \uff0c\u60a8\u53ef\u4ee5\u4f20\u9012\u4efb\u4f55\u60a8\u60f3\u8981\u4ece Dune \u83b7\u53d6\u6570\u636e\u7684  query_id \uff0c\u7136\u540e\u628a\u5b83\u4f20\u9012\u7ed9 execute_query  \u51fd\u6570\uff1a \n \u51fd\u6570\u8c03\u7528 \u00b6  (#_4) \n  (#__codelineno-7-1) execution_id   =   execute_query ( \"1258228\" ) \n \n \u8fd4\u56de\u7ed3\u679c \u00b6  (#_5) \n \u6b64\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2a  execution_id \uff0c\u8f93\u51fa\u7ed3\u679c\u663e\u793a\u7c7b\u4f3c\u4e0b\u9762\u8fd9\u6837\uff1a \n  (#__codelineno-8-1) '01GCQKPC4QZ6Q8645C3JC4WBT1' \n \n \u8fd9\u4e2a execution ID \u662f\u5176\u4ed6 API \u51fd\u6570\u6240\u9700\u7684\u8f93\u5165\u9879\u3002 \n ", "url": "https://dune.com/docs/zh/api/quick-start/api-py/#_3"}
{"content": "\u83b7\u53d6\u67e5\u8be2\u7684\u6267\u884c\u72b6\u6001 \u00b6 \n \u8981\u83b7\u53d6  \u67e5\u8be2\u6267\u884c\u72b6\u6001  (../../api-reference/execution-status/) \uff0c\u4ece\u524d\u9762  execute_query  \u51fd\u6570\u63d0\u53d6\u8fd4\u56de\u7684  execution_id \uff0c\u7136\u540e\u5c06\u5176\u4f20\u9012\u7ed9 get_query_status  \u51fd\u6570\uff0c\u5982\u4e0b\u6240\u793a\uff1a \n \u51fd\u6570\u8c03\u7528 \u00b6  (#_7) \n  (#__codelineno-9-1) response   =   get_query_status ( execution_id ) \n \n \u8fd4\u56de\u7ed3\u679c \u00b6  (#_8) \n \u6b64\u51fd\u6570\u8fd4\u56de\u7684 response \u5bf9\u8c61\uff0c\u8f93\u51fa\u7ed3\u679c\u663e\u793a\u7c7b\u4f3c\u4e0b\u9762\u8fd9\u6837\uff1a \n  (#__codelineno-10-1) { 'execu t io n _id' :   ' 01 GCQKPC 4 QZ 6 Q 8645 C 3 JC 4 WBT 1 ' , \n  (#__codelineno-10-2)   'query_id' :   1258228 , \n  (#__codelineno-10-3)   's tate ' :   'QUERY_STATE_COMPLETED' , \n  (#__codelineno-10-4)   'submi tte d_a t ' :   ' 2022-09-12 T 01 : 05 : 51.781328 Z' , \n  (#__codelineno-10-5)   'expires_a t ' :   ' 2024-09-11 T 01 : 05 : 51.82013 Z' , \n  (#__codelineno-10-6)   'execu t io n _s tarte d_a t ' :   ' 2022-09-12 T 01 : 05 : 51.806752 Z' , \n  (#__codelineno-10-7)   'execu t io n _e n ded_a t ' :   ' 2022-09-12 T 01 : 05 : 51.820127 Z' , \n  (#__codelineno-10-8)   'resul t _me ta da ta ' :   { 'colum n _ na mes' :   [ 'block_ t ime' , \n  (#__codelineno-10-9)     ' t oke n _a_symbol' , \n  (#__codelineno-10-10)     ' t oke n _b_symbol' , \n  (#__codelineno-10-11)     ' t oke n _a_amou nt ' , \n  (#__codelineno-10-12)     ' t oke n _b_amou nt ' , \n  (#__codelineno-10-13)     'projec t ' , \n  (#__codelineno-10-14)     'versio n ' , \n  (#__codelineno-10-15)     'ca te gory' , \n  (#__codelineno-10-16)     ' tra der_a' , \n  (#__codelineno-10-17)     ' tra der_b' , \n  (#__codelineno-10-18)     ' t oke n _a_amou nt _raw' , \n  (#__codelineno-10-19)     ' t oke n _b_amou nt _raw' , \n  (#__codelineno-10-20)     'usd_amou nt ' , \n  (#__codelineno-10-21)     ' t oke n _a_address' , \n  (#__codelineno-10-22)     ' t oke n _b_address' , \n  (#__codelineno-10-23)     'excha n ge_co ntra c t _address' , \n  (#__codelineno-10-24)     ' t x_hash' , \n  (#__codelineno-10-25)     ' t x_ fr om' , \n  (#__codelineno-10-26)     ' t x_ t o' , \n  (#__codelineno-10-27)     ' tra ce_address' , \n  (#__codelineno-10-28)     'ev t _i n dex' , \n  (#__codelineno-10-29)     ' tra de_id' ], \n  (#__codelineno-10-30)    'resul t _se t _by tes ' :   5048 , \n  (#__codelineno-10-31)    ' t o tal _row_cou nt ' :   10 , \n  (#__codelineno-10-32)    'da ta poi nt _cou nt ' :   220 , \n  (#__codelineno-10-33)    'pe n di n g_ t ime_millis' :   25 , \n  (#__codelineno-10-34)    'execu t io n _ t ime_millis' :   13 }} \n \n \u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u60a8\u4e3b\u8981\u5173\u5fc3\u8fd9\u4e2a JSON \u5bf9\u8c61\u4e2d\u7684  state  \u5c5e\u6027\uff0c\u6b64\u4f8b\u4e2d\u5373 QUERY_STATE_COMPLETED \u3002 \n ", "url": "https://dune.com/docs/zh/api/quick-start/api-py/#_6"}
{"content": "\u83b7\u53d6\u67e5\u8be2\u7ed3\u679c \u00b6 \n \u6700\u7ec8\uff0c\u8ba9\u6211\u4eec\u4ece\u5b8c\u6210\u67e5\u8be2\u7684\u6267\u884c\u4e2d\u52a0\u8f7d\u7ed3\u679c\u3002 \n \u51fd\u6570\u8c03\u7528 \u00b6  (#_10) \n  (#__codelineno-11-1) response   =   get_query_results ( execution_id ) \n \n \u8ba9\u6211\u4eec\u628a JSON  response  \u5bf9\u8c61\u4e2d\u8fd4\u56de\u7684\u6570\u636e\u5305\u88c5\u6210\u4e00\u4e2a\u6f02\u4eae\u7684pandas Dataframe\u3002 \n  (#__codelineno-12-1) data   =   pd . DataFrame ( response . json ()[ 'result' ][ 'rows' ]) \n \n \u8fd4\u56de\u7ed3\u679c \u00b6  (#_11) \n \u5982\u679c\u4e00\u5207\u987a\u5229\u7684\u8bdd\uff0c\u60a8\u5e94\u8be5\u5728\u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de\u7684  data  \u53d8\u91cf\u4e2d\u770b\u5230\u60a8\u7684\u6570\u636e\uff1a \n  (#__codelineno-13-1) 0     2021 - 05 - 14 T15 : 17 : 39 + 00 : 00     DEX   191  \\ xf82d8ec196fb0d56c6b82a8b1870f09502a49f88    Uniswap  \\ xa2b4c0af19cc16a6cfacce81f192b024d625817d    7.819632e+11      781963170639542600000     KISHU    \\ xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2    ...   WETH      []    1    \\ x75e29a7676717b99da65c6faad2e7644d00e2053    None     \\ x75e29a7676717b99da65c6faad2e7644d00e2053   \\ x6bc05c2bc156a60c1cacfc379540ad00b7280796613b ...    \\ x7a250d5630b4cf539739df2c5dacb4c659f2488d    10387.825000      2 \n  (#__codelineno-13-2) 1     2022 - 04 - 06 T07 : 01 : 37 + 00 : 00     DEX   11   \\ x6591c4bcd6d7a1eb4e537da8b78676c1576ba244    Uniswap  \\ xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48    1.007936e+04      10079361085   USDC     \\ x0391d2021f89dc339f60fff84546ea23e337750f    ...   BOND      []    1    \\ x0000006daea1723962647b7e189d311d757fb793    None     \\ x0000495194ec698fcf89ccf8abb445daf01db497   \\ x8b962e59ca9f1d91e465a7af289b4b4c9c7c64c6d30d ...    \\ x0000006daea1723962647b7e189d311d757fb793    10093.794730      2 \n  (#__codelineno-13-3) 2     2022 - 04 - 06 T07 : 10 : 12 + 00 : 00     DEX   438  \\ xa25b34d2ec38e338bde108c8c4040be88945d024    Uniswap  \\ xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2    1.015798e-01      101579832516438100    WETH     \\ x8020734a29ee290fb81992874bd1de01a16c4204    ...   None      []    1    \\ x68b3465833fb72a70ecdf485e0e4c7bd8665fc45    None     \\ xaac6fb32fd0a7a51768bddd4ac2f643445bd01af   \\ x8bbaff042cea60af88fac791c4d20f84ed7d21601c41 ...    \\ x68b3465833fb72a70ecdf485e0e4c7bd8665fc45    342.732387    2 \n  (#__codelineno-13-4) 3     2022 - 04 - 06 T07 : 10 : 12 + 00 : 00     DEX   339  \\ x8ef79d6c328c25da633559c20c75f638a4863462    Uniswap  \\ xa71d0588eaf47f12b13cf8ec750430d21df04974    1.058343e+09      1058343424775444053499052032.0    QOM  \\ xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2    ...   WETH      []    1    \\ x7540000cab63979795c7d4b326cadbb00ed24a04    None     \\ x7540000cab63979795c7d4b326cadbb00ed24a04   \\ x8bea318de386a65ac1c0c88f13e39654c3d4ec53a412 ...    \\ x68b3465833fb72a70ecdf485e0e4c7bd8665fc45    263.520686    2 \n  (#__codelineno-13-5) 4     2022 - 04 - 06 T07 : 15 : 58 + 00 : 00     DEX   149  \\ x9c84f58bb51fabd18698efe95f5bab4f33e96e8f    Uniswap  \\ xb620be8a1949aa9532e6a3510132864ef9bc3f82    NaN   21168910617154070511616.0     None     \\ xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2    ...   WETH      []    1    \\ xdf29ee8f6d1b407808eb0270f5b128dc28303684    None     \\ xdf29ee8f6d1b407808eb0270f5b128dc28303684   \\ x8bf5a55a772b3c3423ee628bd459655a1d7bd09a5c69 ...    \\ xdef171fe48cf0115b1d80b88dc8eab59176fee57    675.194000    2 \n  (#__codelineno-13-6) 5     2022 - 04 - 06 T07 : 03 : 20 + 00 : 00     DEX   266  \\ x847e0b52589c9e6fa2dcc42b8ffb34ec924d4cf8    Uniswap  \\ xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2    8.903535e-04      890353516515079   WETH     \\ x9cf77be84214beb066f26a4ea1c38ddcc2afbcf7    ...   None      []    1    \\ x7a250d5630b4cf539739df2c5dacb4c659f2488d    None     \\ xf2d229cc832661de2aa56249c5b7991006868522   \\ x8c00c8c20b1f3f1b447c579165c2759c688981dbc408 ...    \\ x1b2cf79d0a3622f25fbe10e968b3b25a348e008b    3.004792      2 \n  (#__codelineno-13-7) 6     2021 - 05 - 17 T16 : 04 : 09 + 00 : 00     DEX   88   \\ x0d4a11d5eeaac28ec3f61d100daf4d40471f1852    Uniswap  \\ xdac17f958d2ee523a2206206994597c13d831ec7    1.003227e+02      100322742     USDT     \\ xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2    ...   WETH      []    1    \\ x773dd321873fe70553acc295b1b49a104d968cc8    None     \\ x7af55e2ab6e74f338d674537958ad236d17ab3ac   \\ x6bc07c4f53719ad8d1a0f5f99d2db3699fa9dce888e3 ...    \\ x8df6084e3b84a65ab9dd2325b5422e5debd8944a    100.372301    2 \n  (#__codelineno-13-8) 7     2022 - 04 - 06 T07 : 24 : 39 + 00 : 00     DEX   219  \\ xaa51ea59c985a92ce881517a8896931d4a86e9e3    Uniswap  \\ xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2    3.214029e-01      321402936315917950    WETH     \\ x4846b0cce69121e4d25b6efe7738eaf27bca7e7f    ...   None      []    1    \\ x7a250d5630b4cf539739df2c5dacb4c659f2488d    None     \\ xa053dbafba05e307a7bddede09c7feb235dc34b1   \\ x8c86abc9c4eaff2b8de48351360781bc153cd16fa108 ...    \\ x68b3465833fb72a70ecdf485e0e4c7bd8665fc45    1084.606349   2 \n  (#__codelineno-13-9) 8     2021 - 05 - 17 T16 : 04 : 09 + 00 : 00     DEX   91   \\ x773dd321873fe70553acc295b1b49a104d968cc8    Uniswap  \\ x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce    6.477303e+06      6477302710423104532774912.0   SHIB     \\ xdac17f958d2ee523a2206206994597c13d831ec7    ...   USDT      []    1    \\ x8df6084e3b84a65ab9dd2325b5422e5debd8944a    None     \\ x7af55e2ab6e74f338d674537958ad236d17ab3ac   \\ x6bc07c4f53719ad8d1a0f5f99d2db3699fa9dce888e3 ...    \\ x8df6084e3b84a65ab9dd2325b5422e5debd8944a    103.636843    2 \n  (#__codelineno-13-10) 9     2022 - 04 - 06 T07 : 24 : 39 + 00 : 00     DEX   234  \\ xaa51ea59c985a92ce881517a8896931d4a86e9e3    Uniswap  \\ xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2    1.127058e-01      112705776325968480    WETH     \\ x4846b0cce69121e4d25b6efe7738eaf27bca7e7f    ...   None      []    1    \\ x68b3465833fb72a70ecdf485e0e4c7bd8665fc45    None     \\ xa053dbafba05e307a7bddede09c7feb235dc34b1   \\ x8c86abc9c4eaff2b8de48351360781bc153cd16fa108 ...    \\ x68b3465833fb72a70ecdf485e0e4c7bd8665fc45    380.336913    2 \n \n \u6240\u4ee5\uff0c\u60a8\u73b0\u5728\u6709\u4e86\u6765\u81ea Dune \u67e5\u8be2\u7684\u6570\u636e\u3002 \n \u4ee5\u8868\u683c\u5448\u73b0\u3002 \n \u7528 Python \u83b7\u53d6\u3002 \n \ud83e\uddd9\ud83e\ude84 \n ", "url": "https://dune.com/docs/zh/api/quick-start/api-py/#_9"}
{"content": "\u64a4\u9500\u67e5\u8be2\u6267\u884c \u00b6 \n \u67d0\u4e9b\u67e5\u8be2\u53ef\u80fd\u9700\u8981\u5f88\u957f\u7684\u65f6\u95f4\u6765\u6267\u884c\uff08\u51e0\u5206\u949f\uff09\u3002 \n \u6839\u636e\u60a8\u7684\u5de5\u4f5c\u6d41\u7a0b\uff0c\u60a8\u53ef\u80fd\u4f1a\u60f3\u8981\u64a4\u9500\u6267\u884c\u3002\u505a\u6cd5\u5982\u4e0b\uff1a \n  (#__codelineno-14-1) response   =   cancel_query_execution ( execution_id ) \n \n \u5f53\u60a8\u6709\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u67e5\u8be2\u5e76\u8c03\u7528\u6b64\u51fd\u6570\uff0c\u60a8\u4f1a\u5f97\u5230\u4e00\u4e2a\u54cd\u5e94\u5bf9\u8c61\uff0c\u7528\u4ee5\u786e\u8ba4\u64a4\u9500\u67e5\u8be2\u3002 \n ", "url": "https://dune.com/docs/zh/api/quick-start/api-py/#_12"}
{"content": "\u53c2\u6570\u5316\u67e5\u8be2 \u00b6 \n \u5f53\u60a8\u4f7f\u7528\u53c2\u6570\u5316\u67e5\u8be2\u65f6\uff0c\u53ea\u9700\u53d8\u52a8\u4e00\u4e2a\u4f4d\u7f6e\uff1a\u60a8\u9700\u8981\u5c06\u67e5\u8be2\u53c2\u6570\u4f20\u9012\u7ed9\u6211\u4eec\u7684 API \u8bbf\u95ee\u57df\u540d\u3002\u5728\u8fd9\u4e4b\u540e\uff0c\u5176\u4f59\u90e8\u5206\u65e0\u9700\u4efb\u4f55\u53d8\u52a8\u3002 \n \u6240\u4ee5\uff0c\u8ba9\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570  execute_query_with_params  \u6765\u8c03\u7528\u53c2\u6570\u5316\u67e5\u8be2\u7684\u8bbf\u95ee\u57df\u540d\uff1a \n  (#__codelineno-15-1) def   execute_query_with_params ( query_id ,   param_dict ): \n  (#__codelineno-15-2)      \"\"\" \n  (#__codelineno-15-3)     Takes in the query ID. And a dictionary containing parameter values. \n  (#__codelineno-15-4)     Calls the API to execute the query. \n  (#__codelineno-15-5)     Returns the execution ID of the instance which is executing the query. \n  (#__codelineno-15-6)     \"\"\" \n  (#__codelineno-15-7) \n  (#__codelineno-15-8)      url   =   make_api_url ( \"query\" ,   \"execute\" ,   query_id ) \n  (#__codelineno-15-9)      response   =   post ( url ,   headers = HEADER ,   json = { \"query_parameters\"   :   param_dict }) \n  (#__codelineno-15-10)      execution_id   =   response . json ()[ 'execution_id' ] \n  (#__codelineno-15-11) \n  (#__codelineno-15-12)      return   execution_id \n \n \u521b\u5efa\u4e00\u4e2a\u53c2\u6570\u5b57\u5178 \u00b6  (#_14) \n \u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u8981\u521b\u5efa\u4e00\u4e2a\u53ea\u6709\u4e00\u4e2a\u952e\u7684\u5b57\u5178\uff0c\u5373  wallet_address \uff0c\u7528\u4e8e\u67e5\u8be2\u7ed9\u5b9a  wallet_address  \u7684 gas \u603b\u82b1\u8d39\uff1a \n  (#__codelineno-16-1) parameters   =   { \"wallet_address\"   :   \"0xb10f35351ff21bb81dc02d4fd901ac5ae34e8dc4\" } \n \n \u5c06\u53c2\u6570\u5b57\u5178\u4f20\u7ed9\u8bbf\u95ee\u57df\u540d\u70b9 \u00b6  (#_15) \n \u73b0\u5728\u8ba9\u6211\u4eec\u7528\u6211\u4eec\u521a\u5b9a\u4e49\u597d\u7684\u51fd\u6570\u6765\u5b9e\u73b0\u8fd9\u4e00\u76ee\u6807\uff1a \n  (#__codelineno-17-1) execution_id   =   execute_query_with_params ( \"638435\" ,   parameters ) \n \n \u641e\u5b9a\uff01 \n \u4e00\u65e6\u60a8\u4ece\u8fd9\u4e2a POST \u8bbf\u95ee\u57df\u540d\u83b7\u53d6\u5230  execution_id \uff0c\u60a8\u5c31\u53ef\u4ee5\u5728API\u7684\u6240\u6709 GET \u8bbf\u95ee\u57df\u540d\u4e0a\u4f7f\u7528\u5b83\uff0c\u5c31\u50cf\u60a8\u4f7f\u7528\u4e00\u4e2a\u65e0\u9700\u53c2\u6570\u7684\u7b80\u5355\u67e5\u8be2\u4e00\u6837\u3002 \n \n \u5b8c\u6574\u4ee3\u7801 \n \u672c\u6559\u7a0b\u7684\u5b8c\u6574\u4ee3\u7801\u53ef\u5728  \u8fd9\u4e2a\u94fe\u63a5  (https://github.com/SusmeetJain/dune_api_python)  \u67e5\u9605\u3002", "url": "https://dune.com/docs/zh/api/quick-start/api-py/#_13"}
{"content": "\u6b22\u8fce\u6765\u5230 Dune API \u00b6 \n \n \u6240\u6709\u60a8\u80fd\u5728 Dune \u7f51\u7ad9\u4e0a\u770b\u5230\u7684\u67e5\u8be2\u548c\u6570\u636e\uff0c\u90fd\u53ef\u4ee5\u901a\u8fc7 Dune API \u5b8c\u6574\u83b7\u53d6\u3002\u8fd9\u4e5f\u5c31\u610f\u5473\u7740\uff0c\u4efb\u4f55\u7684\u516c\u5171\u67e5\u8be2\uff0c\u60a8\u90fd\u53ef\u4ee5\u6267\u884c\u67e5\u8be2\u5e76\u8bfb\u53d6\u7ed3\u679c\uff0c\u8fd9\u5f53\u7136\u4e5f\u5305\u62ec\u60a8\u8d26\u6237\u5185\u62e5\u6709\u8bbf\u95ee\u6743\u9650\u7684\u79c1\u4eba\u67e5\u8be2\u3002 \n \u672c\u6587\u6863\u63cf\u8ff0\u4e86\u6240\u6709\u53ef\u7528\u7684 API \u8c03\u7528\u53ca\u8fd4\u56de\u5bf9\u8c61\u7684\u5c5e\u6027\u3002\u5982\u679c\u60a8\u6709\u4efb\u4f55\u7591\u95ee\u6216\u53cd\u9988\u610f\u89c1\uff0c\u8bf7\u901a\u8fc7  api-feedback@dune.com  (mailto:api-feedback@dune.com)  \u8054\u7cfb\u6211\u4eec\uff0c\u6216\u8005\u6765\u6211\u4eec\u7684 # dune-api  (https://discord.com/channels/757637422384283659/1019910980634939433)  Discord \u9891\u9053\u3002 \n \uff01\uff01\uff01 \u6ce8\u610f \n \u622a\u81f3\u76ee\u524d\uff0cDune API \u5c1a\u5904\u4e8e\u5185\u6d4b\u9636\u6bb5\u3002\u8fd9\u610f\u5473\u7740\u5b83\u7684\u5de5\u4f5c\u65b9\u5f0f\u548c\u8fd4\u56de\u6570\u636e\u53ef\u80fd\u4f1a\u5728\u63d0\u524d\u901a\u77e5\u540e\u53d1\u751f\u53d8\u5316\u3002 \n ", "url": "https://dune.com/docs/zh/api/#dune-api"}
{"content": "API \u5982\u4f55\u5de5\u4f5c\uff1f \u00b6 \n \u6211\u4eec\u7684 API \u76ee\u524d\u5141\u8bb8\u7528\u6237\uff1a \n \n \u6267\u884c\u67e5\u8be2 \n \u68c0\u67e5\u6267\u884c\u72b6\u6001 \n \u83b7\u53d6\u6267\u884c\u7ed3\u679c \n \n \u8fd9\u4e9b\u6267\u884c\u7ed3\u679c\u76ee\u524d\u5355\u72ec\u5b58\u50a8\uff0c\u4e0e\u60a8\u5728 Dune.com \u7f51\u7ad9\u4e0a\u770b\u5230\u7684\u4efb\u4f55\u5185\u5bb9\u90fd\u4e0d\u4e00\u6837\u3002\u8fd9\u610f\u5473\u7740\u4ece Dune API \u83b7\u5f97\u67e5\u8be2\u7ed3\u679c\u7684\u552f\u4e00\u65b9\u6cd5\u662f\u4f7f\u7528 Dune API \u6267\u884c\u67e5\u8be2\u3002 \n \u540c\u6837\u7684\uff0c\u901a\u8fc7 API \u6267\u884c\u7684\u7ed3\u679c\u76ee\u524d\u4e5f\u6ca1\u6709\u51fa\u73b0\u5728 Dune \u7684\u7f51\u7ad9\u4e0a\u3002 \n ", "url": "https://dune.com/docs/zh/api/#api"}
{"content": "API \u5165\u95e8 \u00b6 \n ", "url": "https://dune.com/docs/zh/api/#api_1"}
{"content": "\u83b7\u53d6\u4e00\u679a API \u5bc6\u94a5 \u00b6 \n Dune API \u76ee\u524d\u5c1a\u5904\u4e8e\u5185\u90e8\u6d4b\u8bd5\u9636\u6bb5\uff0c\u6709\u5c0f\u4e00\u6279\u5185\u6d4b\u7528\u6237\uff0c\u4f46\u4f1a\u572811\u6708\u7684\u65f6\u5019\u5bf9\u5916\u5f00\u653e\uff01 \n ", "url": "https://dune.com/docs/zh/api/#api_2"}
{"content": "\u9009\u62e9\u4e00\u95e8\u7f16\u7a0b\u8bed\u8a00 \u00b6 \n \u60a8\u53ef\u4ee5\u81ea\u7531\u9009\u62e9\u81ea\u5df1\u7684\u8bed\u8a00\u6765\u4f7f\u7528\u6211\u4eec\u7684 API - \u67e5\u9605  API \u53c2\u8003  (api-reference/authentication/)  \u533a - \u6211\u4eec\u76ee\u524d\u9488\u5bf9  Python  (quick-start/api-py/)  \u548c  Node.js  (quick-start/api-js/)  \u6709\u5feb\u901f\u5165\u95e8\u6559\u7a0b\u3002 \n ", "url": "https://dune.com/docs/zh/api/#_1"}
{"content": "\u6211\u53ef\u4ee5\u7528 Dune API \u6784\u5efa\u4ec0\u4e48\uff1f \u00b6 \n \u901a\u8fc7 Dune\uff0c\u60a8\u53ef\u4ee5\u8bbf\u95ee\u5f53\u4e0b\u6700\u6d41\u884c\u7684\u533a\u5757\u94fe\u751f\u6001\u7684\u51e0\u4e4e\u6240\u6709\u6570\u636e\u3002\u4f7f\u7528\u8fd9\u4e9b\u6570\u636e\u6765\u6784\u5efa\u7684\u4e1c\u897f\u662f\u6ca1\u6709\u4efb\u4f55\u9650\u5236\u7684\uff01 \n \u7531\u4e8e\u6709\u5982\u6b64\u4e4b\u591a\u7684\u53ef\u80fd\u6027\uff0c\u6709\u65f6\u5019\u6784\u601d\u8981\u505a\u4ec0\u4e48\u4e1c\u897f\u53ef\u80fd\u76f8\u5f53\u6709\u6311\u6218\uff0c\u6240\u4ee5\u8fd9\u91cc\u7ed9\u4e00\u4e9b\u5e2e\u60a8\u6784\u601d\u7684\u5c0f\u63d0\u793a\uff1a \n \u533a\u5757\u94fe\u6570\u636e\u7684\u65b0\u578b\u63a5\u53e3 \u00b6  (#_2) \n \u6211\u4eec\u7684\u793e\u533a\u8fbe\u4eba  @0xBoxer  (https://dune.com/0xBoxer)  \u5236\u4f5c\u4e86\u4e00\u4e2a  \u6559\u7a0b  (https://youtu.be/ez3VfcfNwvc)  \uff0c\u4ed6\u5e26\u6211\u4eec\u4e00\u8d77\u521b\u5efa\u4e00\u4e2a\u53ef\u4ee5\u7ed9\u4efb\u4f55\u94b1\u5305\u5730\u5740\u81ea\u5b9a\u4e49\u4e2a\u6027\u5316\u6307\u6807\u7684  \u6570\u636e\u770b\u677f  (https://dune.com/0xBoxer/gas-tracker-dashboard)  \u3002 \n \u6709\u4e86 Dune API\uff0c\u5c31\u53ef\u4ee5\u5728\u60a8\u81ea\u5df1\u8d85\u4e1d\u6ed1\u3001\u8d85\u9177\u7684\u5e94\u7528 UX \u4e2d\u4e3a\u8fd9\u4e2a\u770b\u677f\u6216 Dune \u4e0a\u7684\u4efb\u4f55\u5176\u4ed6\u770b\u677f\u642d\u5efa\u4e00\u4e2a\u66f4\u6f02\u4eae\u7684\u7528\u6237\u754c\u9762\u3002 \n \u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u53ef\u4ee5\u5c06 API \u67e5\u8be2\u7ed3\u679c\u7528\u4e8e Excel\u3001Google \u8868\u683c\u3001Notion \u9875\u9762\u3001 Discord \u673a\u5668\u4eba\u3001Telegram \u673a\u5668\u4eba\u7b49\u5904\uff0c\u6ca1\u6709\u4efb\u4f55\u4f7f\u7528\u9650\u5236\u3002 \n \u6709\u4e86 API\uff0c\u6570\u636e\u53ef\u4ee5\u6d41\u5411\u4efb\u4f55\u5730\u65b9\uff01 \n \u6765\u81ea CoW Protocol \u7684\u771f\u5b9e\u6848\u4f8b \u00b6  (#cow-protocol) \n \u6211\u4eec\u793e\u533a\u7684  @bh2smith  (https://dune.com/bh2smith)   (\u540c\u65f6\u4e5f\u6765\u81ea  Cow Protocol  (https://dune.com/cowprotocol) ) \u5468\u56db\u5728  DuneCon  (https://dunecon.com)  \u53d1\u8868\u4e86\u4e00\u6b21\u8bb2\u8bdd\uff0c\u5411\u6211\u4eec\u5c55\u793a\u4e86 Cow Protocol \u4f7f\u7528 API \u7684\u771f\u5b9e\u6848\u4f8b\u3002 \n \u5728\u8fd9\u91cc\u770b\u89c6\u9891\u91cd\u64ad  (https://youtu.be/VEvk-iqxXIM?t=404) ! \n ", "url": "https://dune.com/docs/zh/api/#dune-api_1"}
{"content": "\u91cd\u8981\u94fe\u63a5 \u00b6 \n \n API \u6587\u6863 - \u60a8\u5df2\u7ecf\u5728\u8fd9\u513f\u4e86\uff0c\u67e5\u770b\u4fa7\u8fb9\u680f\u4ee5\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\uff01 \n #dune-api Discord \u9891\u9053  (https://discord.com/channels/757637422384283659/1019910980634939433) \n API \u5ba2\u6237\u7aef (\u6765\u81ea\u793e\u533a\u6784\u5efa)  (quick-start/community-clients/)", "url": "https://dune.com/docs/zh/api/#_3"}
{"content": "\u8df3\u8f6c\u81f3\n          (#schema) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/spellbook/how-to-cast-a-spell/5-define-expectations-with-schema-and-tests.md) \n 5. \ud83e\uddea \u4f7f\u7528\u6a21\u5f0f\u548c\u6d4b\u8bd5\u5b9a\u4e49\u671f\u671b\u8f93\u51fa \n \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u901a\u8fc7\u4e24\u79cd\u65b9\u5f0f\u5b9a\u4e49\u6210\u529f\u7684\u9b54\u6cd5\u8868\u9700\u8981\u8f93\u51fa\u4ec0\u4e48\uff1a \n \n \u8981\u8f93\u51fa\u7684\u5217\u6a21\u5f0f\u3002 \n \u786e\u4fdd\u5c06\u51c6\u786e\u6570\u636e\u8f93\u51fa\u5230\u8fd9\u4e9b\u5217\u7684\u5355\u5143\u6d4b\u8bd5\u3002 \n \n ", "url": "https://dune.com/docs/zh/spellbook/how-to-cast-a-spell/5-define-expectations-with-schema-and-tests/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/arbitrum/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/arbitrum/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/"}
{"content": "Casting a Spell from Scratch \u00b6 \n In collaboration with  MetricsDAO  (https://metricsdao.xyz/) , in this workshop  @agaperste  (https://dune.com/agaperste)  walks us through casting a Spell from scratch! \n \n ", "url": "https://dune.com/docs/zh/spellbook/how-to-guides/#casting-a-spell-from-scratch"}
{"content": "Spellbook Intro with Megan Heintz \u00b6 \n In this  DuneCon workshop  (https://www.youtube.com/playlist?list=PLK3b5d4iK10eVQejE7O1JEwcBMA4uwdSC) , Dune Team member Megan Heintz (who came up with the name \"Spellbook\") walks us through Spellbook's infrastructure and how to migrate data to a Spell: \n \n ", "url": "https://dune.com/docs/zh/spellbook/how-to-guides/#spellbook-intro-with-megan-heintz"}
{"content": "web3 Data Guide + Spellbook Tutorial \u00b6 \n In this tutorial,  @ilemi  (https://dune.com/ilemi)  aka Andrew Hong shows us the main protocol interactions (creating a pair, managing liquidity, swapping through pairs) and how to pull and transform data on Ethereum using. \n Read his guide here  (https://ath.mirror.xyz/K-S_Mwhj7osTBqN-AOWbCmfNn9TZViEkzICCmK-oObM)  or watch the video below:", "url": "https://dune.com/docs/zh/spellbook/how-to-guides/#web3-data-guide-spellbook-tutorial"}
{"content": "dbt \u7269\u5316\uff08materialization\uff09 \u00b6 \n \u5728 dbt \u4e2d\uff0c \u7269\u5316  (https://docs.getdbt.com/docs/build/materializations)  \u662f\u5c06\u6570\u636e\u4fdd\u5b58\u5728\u6211\u4eec\u7684\u6570\u636e\u6e56\u4ed3\u5e93\u7684\u7b56\u7565\u3002 \n dbt\u4e2d\u67094\u79cd\u7269\u5316\u7b56\u7565\uff1a \n \n table \n ephemeral \n view \n incremental \n \n \u5bf9\u4e8e\u9b54\u6cd5\u4e66\uff0c\u6211\u4eec\u53ea\u4f7f\u7528  view  \u548c  incremental \u7b56\u7565\u3002 \n ", "url": "https://dune.com/docs/zh/spellbook/how-to-cast-a-spell/7-configure-alias-and-materialization-strategy/#dbt-materialization"}
{"content": "view  \u89c6\u56fe \u00b6 \n view  \u662f\u9b54\u6cd5\u4e66\u4e2d\u7684\u9ed8\u8ba4\u7269\u5316\u7b56\u7565 - \u56e0\u6b64\u4e0d\u9700\u8981\u5728\u4f7f\u7528\u5b83\u7684\u9b54\u6cd5\u8868\u4e2d\u5c06\u5176\u6307\u5b9a\u4e3a\u6211\u4eec\u7684\u7b56\u7565\u3002 \n \u8fd9\u4e9b\u9b54\u6cd5\u8868\u6bcf\u6b21\u8fd0\u884c\u65f6\u90fd\u4f1a\u91cd\u5efa\uff0c\u8fd9\u610f\u5473\u7740\u6bcf\u6b21\u6709\u4eba\u67e5\u8be2  view  \u9b54\u6cd5\u8868\u65f6\uff0c\u90fd\u4f1a\u8fd0\u884c SQL\uff0c\u8fd9\u610f\u5473\u7740\u6839\u636e\u6211\u4eec\u9b54\u6cd5\u8868\u7684 SQL \u903b\u8f91\u6536\u96c6\u6700\u65b0\u6570\u636e\u3002 \n \u57fa\u672c\u4e0a\uff0c view  \u9b54\u6cd5\u8868\u53ea\u662f\u5b58\u50a8\u7684 SQL \u903b\u8f91\uff0c\u6ca1\u6709\u989d\u5916\u7684\u6570\u636e\u4f5c\u4e3a\u9b54\u6cd5\u8868\u7684\u4e00\u90e8\u5206\u5b58\u50a8\u3002 \n \u4f18\u70b9\u662f  view  \u9b54\u6cd5\u8868\u603b\u662f\u6709\u65b0\u9c9c\u6570\u636e\uff0c\u7f3a\u70b9\u662f\u5982\u679c\u6d89\u53ca\u5927\u91cf\u6570\u636e\uff0c\u5b83\u4eec\u53ef\u80fd\u9700\u8981\u5f88\u957f\u65f6\u95f4\u624d\u80fd\u8fd0\u884c\u5b8c\u6210\u3002 \n ", "url": "https://dune.com/docs/zh/spellbook/how-to-cast-a-spell/7-configure-alias-and-materialization-strategy/#view"}
{"content": "incremental  \u589e\u91cf \u00b6 \n incremental  \u9b54\u6cd5\u8868\u5141\u8bb8 dbt \u6839\u636e\u6211\u4eec\u5b9a\u4e49\u7684\u903b\u8f91\u5728\u8868\u4e2d\u63d2\u5165\u6216\u66f4\u65b0\u8bb0\u5f55\u3002 \n \u597d\u5904\u662f\u8fd9\u4e9b\u9b54\u6cd5\u8868\u53ef\u4ee5\u8fd0\u884c\u5f97\u66f4\u5feb\uff0c\u5c3d\u7ba1\u5b83\u4eec\u7684\u6570\u636e\u4e0d\u4f1a\u50cf  view  \u9b54\u6cd5\u8868\u90a3\u6837\u65b0\u9c9c\u3002 \n \u8981\u521b\u5efa  incremental  \u9b54\u6cd5\u8868\uff0c\u6211\u4eec\u9700\u8981\u5728\u6587\u4ef6\u7684\u914d\u7f6e\u90e8\u5206\u4e2d\u6dfb\u52a0\u4e00\u4e9b\u5185\u5bb9\uff1a \n  (#__codelineno-0-1) -- \u6bcf\u6b21\u9012\u589e\u65f6\u6211\u4eec\u5e94\u8be5\u5c06\u65b0\u6570\u636e\u8fde\u63a5\u5230\u73b0\u6709\u6570\u636e\u4e2d\u7684\u54ea\u4e00\u5217\u7684\u58f0\u660e\uff1b \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 block_date\uff0c\u8fd9\u901a\u5e38\u662f\u6700\u597d\u7684\u4f7f\u7528\u65b9\u5f0f \n  (#__codelineno-0-2) \n  (#__codelineno-0-3) partition_by   =   [ 'block_date' ], \n  (#__codelineno-0-4) \n  (#__codelineno-0-5) -- \u8fd9\u91cc\u6211\u4eec\u6307\u5b9a\u8fd9\u662f\u4e00\u4e2a\u589e\u91cf\uff08incremental\uff09\u9b54\u6cd5\u8868 \n  (#__codelineno-0-6) \n  (#__codelineno-0-7) materialized   =   'incremental' , \n  (#__codelineno-0-8) \n  (#__codelineno-0-9) -- \u6709\u5173 dbt \u5e94\u5982\u4f55\u7ec4\u5408\u65b0/\u65e7\u6570\u636e\u7684\u8bf4\u660e\uff1b\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u201cmerge\u201d \n  (#__codelineno-0-10) \n  (#__codelineno-0-11) incremental_strategy   =   'merge' , \n \n \u6211\u4eec\u8fd8\u9700\u8981\u5c06  if  \u8bed\u53e5\u6dfb\u52a0\u5230\u6211\u4eec\u60f3\u8981\u4e3a\u5176\u9012\u589e\u6570\u636e\u7684\u4efb\u4f55  FROM  \u4e2d\u3002 \n \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5728  partition_by = ['block_date']  \u4e2d\u6dfb\u52a0\u4e86if\u8bed\u53e5\u6765\u5237\u65b0\u4e00\u5468\u4ee5\u5185\u7684\u6570\u636e\uff1a \n  (#__codelineno-1-1) { %   if   is_incremental ()   % } \n  (#__codelineno-1-2) \n  (#__codelineno-1-3)      WHERE   evt_block_time   >=   date_trunc ( \"day\" ,   now ()   -   interval   '1 week' ) \n  (#__codelineno-1-4) \n  (#__codelineno-1-5) { %   endif   % } \n \n ", "url": "https://dune.com/docs/zh/spellbook/how-to-cast-a-spell/7-configure-alias-and-materialization-strategy/#incremental"}
{"content": "\u914d\u7f6e\u522b\u540d\u548c\u7269\u5316 \u00b6 \n \u8981\u914d\u7f6e\u9b54\u6cd5\u8868\u7684\u522b\u540d\u548c\u7269\u5316\uff0c\u60a8\u9700\u8981\u5c06\u8fd9\u4e9b\u914d\u7f6e\u9879\u6dfb\u52a0\u5230\u6bcf\u4e2a SQL \u6587\u4ef6\u7684\u9876\u90e8\u3002 \n \u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u5047\u8bbe\u6211\u4eec\u6b63\u5728\u4f7f\u7528  view  \u7269\u5316\u7b56\u7565\uff1b\u6709\u5173\u5982\u4f55\u5b9e\u65bd  incremental  \u7b56\u7565\u7684\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1\u4e0a\u6587\u3002 \n  (#__codelineno-2-1) {{   config   ( \n  (#__codelineno-2-2) \n  (#__codelineno-2-3)      -- \u4e3a\u5c06\u51fa\u73b0\u5728 dune.com \u7528\u6237\u754c\u9762\u4e2d\u7684\u9b54\u6cd5\u8868\u6587\u4ef6\u521b\u5efa\u4e00\u4e2a\u522b\u540d \n  (#__codelineno-2-4) \n  (#__codelineno-2-5)      alias   =   'job_log' , \n  (#__codelineno-2-6) \n  (#__codelineno-2-7)      -- \u8fd9\u8fdb\u4e00\u6b65\u5b9a\u4e49\u4e86\u8be5\u6587\u4ef6\u5982\u4f55\u5b58\u50a8\u548c\u5728 UI \u4e2d\u88ab\u5206\u7c7b\uff0c\u9996\u5148\u662f\u5b83\u4e0e\u54ea\u4e2a\u533a\u5757\u94fe\u76f8\u5173\u8054 \n  (#__codelineno-2-8) \n  (#__codelineno-2-9)      post_hook   =   '{{ expose_spells(\\' [ \"ethereum\" ] \\ ', \n  (#__codelineno-2-10) \n  (#__codelineno-2-11) \n  (#__codelineno-2-12)          -- \u7136\u540e\u6211\u4eec\u5b9a\u4e49\u8fd9\u662f\u9488\u5bf9\u7279\u5b9a\u9879\u76ee\u8fd8\u662f\u6574\u4e2a\u884c\u4e1a\u7684\u9b54\u6cd5\u8868 \n  (#__codelineno-2-13) \n  (#__codelineno-2-14) \n  (#__codelineno-2-15)         \"project\",  \n  (#__codelineno-2-16) \n  (#__codelineno-2-17) \n  (#__codelineno-2-18)          -- \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u547d\u540d\u9879\u76ee/\u884c\u4e1a \n  (#__codelineno-2-19) \n  (#__codelineno-2-20) \n  (#__codelineno-2-21)             \"Keep3r\", \n  (#__codelineno-2-22) \n  (#__codelineno-2-23) \n  (#__codelineno-2-24)          -- \u6700\u540e\uff0c\u6211\u4eec\u547d\u540d\u8d21\u732e\u8005\uff0c\u5305\u62ec\u6211\u4eec\u81ea\u5df1\uff0c\u5728\u672c\u4f8b\u4e2d\u662f V1 \u62bd\u8c61\u7684\u521b\u5efa\u8005\uff01 \n  (#__codelineno-2-25) \n  (#__codelineno-2-26) \n  (#__codelineno-2-27)              \\' [ \"wei3erHase\" ,   \"agaperste\" ] \\ ') }}' \n  (#__codelineno-2-28) \n  (#__codelineno-2-29) )   }} \n \n ", "url": "https://dune.com/docs/zh/spellbook/how-to-cast-a-spell/7-configure-alias-and-materialization-strategy/#_1"}
{"content": "\u5c06\u65b0\u6a21\u578b\u6dfb\u52a0\u5230 dbt_project.yml \u6587\u4ef6 \u00b6 \n \u8fdb\u5165\u6700\u540e\u9636\u6bb5\uff0c\u6211\u4eec\u9700\u8981\u5c06\u65b0\u6a21\u578b\u6dfb\u52a0\u5230\u9b54\u6cd5\u4e66\u6839\u6587\u4ef6\u5939\u4e2d\u7684  dbt_project.yml  \u6587\u4ef6\u4e2d\u3002 \n \u9996\u5148\u627e\u5230\u8fd9\u4e9b\u884c\uff1a \n  (#__codelineno-3-1) # Configuring models \n  (#__codelineno-3-2) \n  (#__codelineno-3-3) # Full documentation: https://docs.getdbt.com/docs/configuring-models \n  (#__codelineno-3-4) \n  (#__codelineno-3-5) models : \n  (#__codelineno-3-6) \n  (#__codelineno-3-7)      spellbook : \n \n \u5728\u4e0b\u9762\uff0c\u6211\u4eec\u4e3a\u6574\u4e2a\u9879\u76ee\u6307\u5b9a\u9879\u76ee\u540d\u79f0\u3001\u6a21\u5f0f\u548c\u7269\u5316\u7b56\u7565\uff0c\u4ee5\u53ca\u6211\u4eec\u4e3a\u5176\u521b\u5efa\u9b54\u6cd5\u8868\u7684\u7279\u5b9a\u533a\u5757\u94fe\u3002 \n \u5bf9\u4e8e Keep3r\uff0c\u6dfb\u52a0\u540e\u7684\u6761\u76ee\u5982\u4e0b\u6240\u793a\uff1a \n  (#__codelineno-4-1)     keep3r_network : \n  (#__codelineno-4-2) \n  (#__codelineno-4-3)        +schema :   keep3r_network \n  (#__codelineno-4-4) \n  (#__codelineno-4-5)        +materialized :   view \n  (#__codelineno-4-6) \n  (#__codelineno-4-7)        ethereum : \n  (#__codelineno-4-8) \n  (#__codelineno-4-9)          +schema :   keep3r_network_ethereum \n  (#__codelineno-4-10) \n  (#__codelineno-4-11)          +materialized :   view", "url": "https://dune.com/docs/zh/spellbook/how-to-cast-a-spell/7-configure-alias-and-materialization-strategy/#dbt_projectyml"}
{"content": "_view_job_migrations.sql \u00b6 \n \u4e3a\u4ec0\u4e48\u4ece\u8fd9\u91cc\u5f00\u59cb\uff1f \u56e0\u4e3a\u5b83\u662f\u6211\u4eec\u6700\u4f4e\u5c42\u7ea7\u7684\u4f9d\u8d56\u8868\uff01 \n \u8bb0\u4f4f  keep3r_network_ethereum_view_job_log.sql  \u4f9d\u8d56\u4e8e  keep3r_network_ethereum_view_job_liquidity_log.sql  \u548c  keep3r_network_ethereum_view_job_credits_log.sql \uff0c\u800c\u5b83\u4eec\u90fd\u4f9d\u8d56\u4e8e  keep3r_network_ethereum_view_job_migrations.sql \u3002 \n \u56e0\u6b64\uff0c\u901a\u8fc7\u4ece  _migrations.sql  \u5f00\u59cb\uff0c\u6211\u4eec\u5c06\u80fd\u591f\u5728\u521b\u5efa\u9b54\u6cd5\u8868\u65f6\u8fdb\u884c\u6d4b\u8bd5\uff0c\u800c\u4e0d\u4f1a\u56e0\u4e3a\u6ca1\u6709\u6784\u5efa\u4f9d\u8d56\u5173\u7cfb\u800c\u51fa\u73b0\u4efb\u4f55\u4e2d\u65ad\u3002 \n \u8981\u4ece V1 \u7684\u62bd\u8c61\u8fc1\u79fb\uff0c\u6211\u4eec\u9996\u5148\u5c06 V1 \u6587\u4ef6\u7684\u5185\u5bb9\uff08 /spellbook/deprecated-dune-v1-abstractions/ethereum/keep3r_network/view_job_migrations.sql \uff09\u590d\u5236\u5230\u6211\u4eec\u7684 keep3r_network_ethereum_view_job_migrations.sql  \u6587\u4ef6\u4e2d\uff1a \n  (#__codelineno-0-1) CREATE   OR   REPLACE   VIEW   keep3r_network . view_job_migrations   AS   ( \n  (#__codelineno-0-2) \n  (#__codelineno-0-3)      SELECT \n  (#__codelineno-0-4) \n  (#__codelineno-0-5)          evt_block_time   AS   timestamp , \n  (#__codelineno-0-6) \n  (#__codelineno-0-7)          '0x'   ||   encode ( evt_tx_hash ,   'hex' )   AS   tx_hash , \n  (#__codelineno-0-8) \n  (#__codelineno-0-9)          evt_index   +   s . step   AS   evt_index , \n  (#__codelineno-0-10) \n  (#__codelineno-0-11)          CASE   s . step \n  (#__codelineno-0-12) \n  (#__codelineno-0-13)          WHEN   ( 0 )   THEN \n  (#__codelineno-0-14) \n  (#__codelineno-0-15)              'JobMigrationOut' \n  (#__codelineno-0-16) \n  (#__codelineno-0-17)          WHEN   ( 1 )   THEN \n  (#__codelineno-0-18) \n  (#__codelineno-0-19)              'JobMigrationIn' \n  (#__codelineno-0-20) \n  (#__codelineno-0-21)          END   AS   event , \n  (#__codelineno-0-22) \n  (#__codelineno-0-23)          '0x'   ||   encode ( contract_address ,   'hex' )   keep3r , \n  (#__codelineno-0-24) \n  (#__codelineno-0-25)          '0x'   ||   encode ( \n  (#__codelineno-0-26) \n  (#__codelineno-0-27)              CASE   s . step \n  (#__codelineno-0-28) \n  (#__codelineno-0-29)              WHEN   ( 0 )   THEN \n  (#__codelineno-0-30) \n  (#__codelineno-0-31)                  m .   \"_fromJob\" \n  (#__codelineno-0-32) \n  (#__codelineno-0-33)              WHEN   ( 1 )   THEN \n  (#__codelineno-0-34) \n  (#__codelineno-0-35)                  m .   \"_toJob\" \n  (#__codelineno-0-36) \n  (#__codelineno-0-37)              END ,   'hex' )   AS   job \n  (#__codelineno-0-38) \n  (#__codelineno-0-39)      FROM   ( \n  (#__codelineno-0-40) \n  (#__codelineno-0-41)          SELECT \n  (#__codelineno-0-42) \n  (#__codelineno-0-43)              * \n  (#__codelineno-0-44) \n  (#__codelineno-0-45)          FROM \n  (#__codelineno-0-46) \n  (#__codelineno-0-47)              keep3r_network .   \"Keep3r_evt_JobMigrationSuccessful\" \n  (#__codelineno-0-48) \n  (#__codelineno-0-49)          UNION \n  (#__codelineno-0-50) \n  (#__codelineno-0-51)          SELECT \n  (#__codelineno-0-52) \n  (#__codelineno-0-53)              * \n  (#__codelineno-0-54) \n  (#__codelineno-0-55)          FROM \n  (#__codelineno-0-56) \n  (#__codelineno-0-57)              keep3r_network .   \"Keep3r_v2_evt_JobMigrationSuccessful\" )   AS   m \n  (#__codelineno-0-58) \n  (#__codelineno-0-59)          INNER   JOIN   ( \n  (#__codelineno-0-60) \n  (#__codelineno-0-61)              SELECT \n  (#__codelineno-0-62) \n  (#__codelineno-0-63)                  generate_series ( 0 ,   1 )   AS   step )   AS   s   ON   TRUE ); \n \n \u6211\u4eec\u4e0d\u9700\u8981  CREATE  \u6216  REPLACE  \u5b9a\u4e49\u8bed\u53e5\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u4ece\u7b2c\u4e00\u4e2a  SELECT  \u5230\u6700\u540e\u4e00\u4e2a  TRUE  \u4e4b\u95f4\u7684\u6240\u6709\u5185\u5bb9\u3002 \n \u7136\u540e\u5bf9\u4e8e\u6211\u4eec\u7684 FROM \u8bed\u53e5\uff0c\u6211\u4eec\u9700\u8981\u7528\u65b0\u8bed\u6cd5\u66ff\u6362\u65e7\u7684\u8868\u5f15\u7528\uff0c\u5e76\u4ed4\u7ec6\u68c0\u67e5\u6211\u4eec\u5728  _sources.yml  \u6587\u4ef6\u4e2d\u63d0\u5230\u7684\u8fd9\u4e9b\u4f9d\u8d56\u6e90\u3002 \n  (#__codelineno-1-1) -- \u79fb\u9664\u4e86 CREATE/REPLACE \u8bed\u53e5 \n  (#__codelineno-1-2) \n  (#__codelineno-1-3) SELECT \n  (#__codelineno-1-4) \n  (#__codelineno-1-5)      evt_block_time   AS   timestamp , \n  (#__codelineno-1-6) \n  (#__codelineno-1-7)      '0x'   ||   encode ( evt_tx_hash ,   'hex' )   AS   tx_hash , \n  (#__codelineno-1-8) \n  (#__codelineno-1-9)      evt_index   +   s . step   AS   evt_index , \n  (#__codelineno-1-10) \n  (#__codelineno-1-11)      CASE   s . step \n  (#__codelineno-1-12) \n  (#__codelineno-1-13)      WHEN   ( 0 )   THEN \n  (#__codelineno-1-14) \n  (#__codelineno-1-15)          'JobMigrationOut' \n  (#__codelineno-1-16) \n  (#__codelineno-1-17)      WHEN   ( 1 )   THEN \n  (#__codelineno-1-18) \n  (#__codelineno-1-19)          'JobMigrationIn' \n  (#__codelineno-1-20) \n  (#__codelineno-1-21)      END   AS   event , \n  (#__codelineno-1-22) \n  (#__codelineno-1-23)      '0x'   ||   encode ( contract_address ,   'hex' )   keep3r , \n  (#__codelineno-1-24) \n  (#__codelineno-1-25)      '0x'   ||   encode ( \n  (#__codelineno-1-26) \n  (#__codelineno-1-27)          CASE   s . step \n  (#__codelineno-1-28) \n  (#__codelineno-1-29)          WHEN   ( 0 )   THEN \n  (#__codelineno-1-30) \n  (#__codelineno-1-31)              m .   \"_fromJob\" \n  (#__codelineno-1-32) \n  (#__codelineno-1-33)          WHEN   ( 1 )   THEN \n  (#__codelineno-1-34) \n  (#__codelineno-1-35)              m .   \"_toJob\" \n  (#__codelineno-1-36) \n  (#__codelineno-1-37)          END ,   'hex' )   AS   job \n  (#__codelineno-1-38) \n  (#__codelineno-1-39) FROM   ( \n  (#__codelineno-1-40) \n  (#__codelineno-1-41)      SELECT   * \n  (#__codelineno-1-42) \n  (#__codelineno-1-43)      -- \u7528\u6211\u4eec\u7684\u65b0\u8bed\u6cd5\u66f4\u65b0\u4e86\u6211\u4eec\u5f15\u7528\u7684\u4e24\u4e2a\u8868\uff0c\u786e\u8ba4\u5b83\u4eec\u90fd\u5728\u6211\u4eec\u7684\u6e90\u6587\u4ef6\u4e2d\u3002 \n  (#__codelineno-1-44) \n  (#__codelineno-1-45)      FROM \n  (#__codelineno-1-46) \n  (#__codelineno-1-47)              keep3r_network_ethereum . Keep3r_evt_JobMigrationSuccessful \n  (#__codelineno-1-48) \n  (#__codelineno-1-49)      UNION \n  (#__codelineno-1-50) \n  (#__codelineno-1-51)      SELECT   * \n  (#__codelineno-1-52) \n  (#__codelineno-1-53)      FROM \n  (#__codelineno-1-54) \n  (#__codelineno-1-55)              keep3r_network_ethereum . Keep3r_v2_evt_JobMigrationSuccessful \n  (#__codelineno-1-56) \n  (#__codelineno-1-57)      )   AS   m \n  (#__codelineno-1-58) \n  (#__codelineno-1-59)      INNER   JOIN   ( \n  (#__codelineno-1-60) \n  (#__codelineno-1-61)          SELECT \n  (#__codelineno-1-62) \n  (#__codelineno-1-63)              generate_series ( 0 ,   1 )   AS   step \n  (#__codelineno-1-64)      )   AS   s   ON   TRUE \n \n \u6ce8\u610f\u65e7\u7684\u62bd\u8c61\u6709\u4e00\u4e2a\u201cSELECT *\u201d\u8bed\u53e5\u3002\u6700\u597d\u7684\u505a\u6cd5\u662f\u5728\u6267\u884c  UNION  \u65f6\u53ea  SELECT  \u6211\u4eec\u9700\u8981\u7684\u5b9e\u9645\u5217\uff0c\u8fd9\u6837\u6211\u4eec\u7684\u9b54\u6cd5\u8868\u5c31\u4e0d\u4f1a\u5728\u6211\u4eec\u7684\u5f15\u7528\u8868\u4e4b\u4e00\u88ab\u66f4\u65b0\u65f6\u88ab\u4e2d\u65ad\u3002 \n \u5728\u6211\u4eec\u7684\u7b2c\u4e00\u4e2a  SELECT *  \u8bed\u53e5\u4e0a\u65b9\uff0c\u6211\u4eec\u5c06\u627e\u5230\u6211\u4eec\u9700\u8981\u7684\u7279\u5b9a\u5217\uff0c\u6211\u4eec\u7684\u4e24\u4e2aSELECT\u8bed\u53e5\u6700\u7ec8\u5982\u4e0b\u6240\u793a\uff1a \n  (#__codelineno-2-1) SELECT \n  (#__codelineno-2-2) \n  (#__codelineno-2-3)      evt_block_time , \n  (#__codelineno-2-4) \n  (#__codelineno-2-5)      evt_tx_hash , \n  (#__codelineno-2-6) \n  (#__codelineno-2-7)      evt_index , \n  (#__codelineno-2-8) \n  (#__codelineno-2-9)      contract_address , \n  (#__codelineno-2-10) \n  (#__codelineno-2-11)      _fromJob , \n  (#__codelineno-2-12) \n  (#__codelineno-2-13)      _toJob \n \n \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u9700\u8981\u5c06\u8bed\u6cd5\u4ece V1 \u62bd\u8c61\u98ce\u683c\u66f4\u6539\u4e3a V2 \u9b54\u6cd5\u8868\u98ce\u683c\uff0c\u8fd9\u610f\u5473\u7740\u8981\u505a\u51e0\u4ef6\u4e8b\uff1a \n \n \u6211\u4eec\u4e0d\u9700\u8981\u5bf9\u5408\u7ea6\u5730\u5740\u8fdb\u884c  encode \uff08\u5728 V1 \u4e2d\u5b83\u4eec\u662f  bytea  \u683c\u5f0f\uff0c\u5728 V2 \u4e2d\u5b83\u4eec\u662f  string \uff09 \n \u5217\u5f15\u7528\u4e0d\u518d\u9700\u8981\u53cc\u5f15\u53f7\u6240\u4ee5  m.\u201c_fromJob\u201d  ->  m._fromJob \n \n \u5b8c\u6210\u540e\uff0c\u8ba9\u6211\u4eec\u5c06 SQL \u590d\u5236\u5230 dune.com \u7684\u4e00\u4e2a\u65b0\u67e5\u8be2\u4e2d\uff0c\u770b\u770b\u5b83\u662f\u5426\u6709\u6548\u3002 \n \u5982\u679c\u9047\u5230\u4efb\u4f55\u9519\u8bef\uff0c\u8bf7\u501f\u52a9\u9519\u8bef\u4ee3\u7801\u4fee\u590d\u5b83\u4eec\uff1b \u5728\u6784\u5efa\u6b64\u793a\u4f8b\u65f6\uff0c\u6211\u4eec\u9047\u5230\u4e86\u4e00\u4e2a  generate_series  \u672a\u5b9a\u4e49\u7684\u51fd\u6570\u9519\u8bef\uff0cV1 \u62bd\u8c61\u4e2d\u4f7f\u7528\u7684\u8fd9\u4e2a\u51fd\u6570\u5728 V2 \u4e2d\u4e0d\u5b58\u5728\u3002 \n \u6211\u4eec\u77e5\u9053 Dune V1 \u662f PostgreSQL\uff0cV2 \u662f Spark SQL\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u901a\u8fc7\u8c37\u6b4c\u641c\u7d22\u201cgenerate series Spark SQL\u201d\uff0c\u6211\u4eec\u80fd\u591f\u627e\u5230\u8fd9\u4e2a  StackExchange \u7b54\u6848  (https://stackoverflow.com/questions/43141671/sparksql-on-%20pyspark-how-to-generate-time-series)  \uff0c\u7528\u4e8e\u4f7f\u7528 Spark \u529f\u80fd\u6267\u884c\u76f8\u540c\u7684\u8f6c\u6362\u3002 \n \u5982\u679c\u60a8\u5728 Google \u4e0a\u4e0d\u662f\u90a3\u4e48\u5e78\u8fd0\uff0c\u8bf7\u5728\u6211\u4eec\u7684  #spellbook Discord \u9891\u9053  (https://discord.com/channels/757637422384283659/999683200563564655)  \u4e2d\u5bfb\u6c42\u5e2e\u52a9\uff01 \n ", "url": "https://dune.com/docs/zh/spellbook/how-to-cast-a-spell/6-write-your-spell-as-SELECT-statement/#_view_job_migrationssql"}
{"content": "_liquidity_log.sql  \uff0c  _credit_log.sql  \uff0c\u548c  _log.sql \u00b6 \n \u8be5\u8fc7\u7a0b\u4e0e\u6211\u4eec\u7684\u5176\u4ed6\u6587\u4ef6\u57fa\u672c\u76f8\u540c\uff08\u5c06\u8bed\u6cd5\u4fee\u6539\u4e3a V2 Spark SQL\u7684\u683c\u5f0f\uff09\u3002 \n \u7531\u4e8e  _liquidity_log.sql  \u548c  _credits_log.sql  \u90fd\u4f9d\u8d56\u4e8e\u6211\u4eec\u521a\u521a\u521b\u5efa\u4f46\u5c1a\u672a\u6dfb\u52a0\u5230\u751f\u4ea7\u73af\u5883\u4e2d\u7684\u9b54\u6cd5\u8868\u7684  _migrations.sql  \uff0c\u6211\u4eec\u9700\u8981\u590d\u5236/\u7c98\u8d34\u521a\u521a\u521b\u5efa\u7684\u903b\u8f91\uff0c\u5b9a\u4e49\u4e3a\u4e00\u4e2a  WITH  \u8bed\u53e5\u3002 \n \u6240\u4ee5\u5728  _liquidity_log.sql  \u4e2d\uff0c\u6211\u4eec\u6709\u8fd9\u4e2a\u53c2\u8003\uff1a  keep3r_network.view_job_migrations migs \n \u8ba9\u6211\u4eec\u5c06\u5176\u66f4\u65b0\u4e3a  keep3r_network.view_job_migrations_temp migs \n \u7136\u540e\u5728\u6211\u4eec\u7684 SQL \u6587\u4ef6\u7684\u9876\u90e8\u5b9a\u4e49  _temp  CTE \uff1a \n  (#__codelineno-3-1) WITH   \n  (#__codelineno-3-2) \n  (#__codelineno-3-3) keep3r_network . view_job_migrations_temp   as   ( \n  (#__codelineno-3-4) \n  (#__codelineno-3-5) -- [\u5728\u6b64\u5904\u63d2\u5165\u6211\u4eec\u521a\u521a\u521b\u5efa\u7684 _migrations \u4ee3\u7801] \n  (#__codelineno-3-6) \n  (#__codelineno-3-7) ) \n \n \u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5c06\u6211\u4eec\u7684\u65b0 SQL \u590d\u5236/\u7c98\u8d34\u5230 dune.com \u5e76\u50cf\u4e0a\u9762\u90a3\u6837\u6d4b\u8bd5\u4fee\u590d\u53ef\u80fd\u9047\u5230\u7684\u9519\u8bef\u3002 \n ", "url": "https://dune.com/docs/zh/spellbook/how-to-cast-a-spell/6-write-your-spell-as-SELECT-statement/#_liquidity_logsql-_credit_logsql-_logsql"}
{"content": "\u7528 JINJA \u6a21\u677f\u66ff\u6362\u786c\u7f16\u7801\u5f15\u7528 \u00b6 \n \u5c06\u6211\u4eec\u7684 SQL \u4ece PostgreSQL \u7ffb\u8bd1\u6210 Spark \u5e76\u5355\u72ec\u6d4b\u8bd5\u540e\uff0c\u6211\u4eec\u9700\u8981\u6dfb\u52a0\u6211\u4eec\u7684 JINJA \u6a21\u677f\uff0c\u4ee5\u4fbf\u8fd9\u4e00\u5207\u90fd\u53ef\u4ee5\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u4f7f\u7528\uff01 \n \u9996\u5148\uff0c\u8ba9\u6211\u4eec\u6f84\u6e05\u51e0\u4e2a\u672f\u8bed\uff1a \n \n Sources  \u662f Dune \u56e2\u961f\u6dfb\u52a0\u7684\u6570\u636e\u2014\u2014\u539f\u59cb\u533a\u5757\u94fe\u6570\u636e\u8868\u3001\u5df2\u89e3\u6790\u6570\u636e\u8868\u3001\u4ef7\u683c\u548c\u793e\u533a\u8868\u2014\u2014\u57fa\u672c\u4e0a\u662f\u4efb\u4f55\u4e0d\u662f\u9b54\u6cd5\u8868\u7684\u6570\u636e\u8868\u3002 \n \u4f7f\u7528 JINJA\uff0c\u5bf9\u6a21\u578b\u7684\u5f15\u7528\u88ab\u683c\u5f0f\u5316\u4e3a  {{ source() }} \n \n \n Models  \u662f\u793e\u533a\u7528\u6237\u5728\u6211\u4eec\u7684  spellbook/models  \u76ee\u5f55\u4e2d\u5b58\u50a8\u7684  .sql  \u6587\u4ef6\u4e2d\u5b9a\u4e49\u7684  SELECT  \u8bed\u53e5\u3002 \n \u4f7f\u7528 JINJA\uff0c\u5f15\u7528\u6a21\u578b\u88ab\u683c\u5f0f\u5316\u4e3a  {{ ref() }} \n \n \n \n \u5bf9\u4e8e  sources()  \u5f15\u7528\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u4f20\u9012  _sources.yml  \u6587\u4ef6\u7684\u540d\u79f0\uff0c\u7136\u540e\u662f\u4f9d\u8d56\u6e90\u7684\u540d\u79f0\u3002 \n \u6240\u4ee5\u6211\u4eec\u7684 V1 \u62bd\u8c61\u5f15\u7528\u7684  keep3r_network.\u201cKeep3r_evt_JobMigrationSuccessful\u201d  \u53d8\u4e3a  {{ source('keep3r_network_ethereum','Keep3r_evt_JobMigrationSuccessful') }} \u3002\u5176\u4e2d\uff1a \n \n keep3r_network_ethereum  \u662f\u6211\u4eec\u7684  _sources.yml   \u4e0d\u5305\u62ec   _sources.yml  \u90e8\u5206\u7684\u540d\u79f0\uff0c\u5e76\u4e14 \n Keep3r_evt_JobMigrationSuccessful  \u662f\u6211\u4eec\u5305\u542b\u5728  keep3r_network_ethereum_sources.yml  \u4e2d\u7684\u5df2\u89e3\u6790\u6570\u636e\u8868\u7684\u540d\u79f0 \n \n \u5bf9\u4e8e\u6211\u4eec\u7684  ref()  \u5f15\u7528\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u4e0d\u5305\u62ec  .sql  \u7684\u60c5\u51b5\u4e0b\u547d\u540d\u6211\u4eec\u521b\u5efa\u7684 SQL \u6587\u4ef6\u3002 \n \u6240\u4ee5\u6211\u4eec\u7684 V1 \u62bd\u8c61\u5f15\u7528  keep3r_network.view_job_liquidity_log  \u53d8\u6210\u4e86  {{ ref('keep3r_network_ethereum_view_job_liquidity_log') }} \u3002 \n \u5c06 JINJA \u683c\u5f0f\u6dfb\u52a0\u5230\u5f15\u7528\u540e\uff0c\u8fd0\u884c  dbt compile  \u5e76\u4fee\u590d\u6240\u6709\u9519\u8bef\uff01 \n \u540c\u6837\uff0c\u8c37\u6b4c\u641c\u7d22\u201cxxx error dbt\u201d\u6216\u201cJINJA\u201d\u6216\u201cSpark SQL\u201d\u53ef\u4ee5\u63d0\u4f9b\u5f88\u591a\u5e2e\u52a9\u3002\u5982\u679c\u6211\u4eec\u7684 Google \u9738\u4e3b\u641c\u7d22\u5931\u8d25\u4e86\uff0c\u8bf7\u5728\u6211\u4eec\u7684  #spellbook Discord \u9891\u9053  (https://discord.com/channels/757637422384283659/999683200563564655)  \u4e2d\u63d0\u95ee\uff01", "url": "https://dune.com/docs/zh/spellbook/how-to-cast-a-spell/6-write-your-spell-as-SELECT-statement/#jinja"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/spellbook/how-to-cast-a-spell/4-identify-and-define-sources.md) \n 4. \ud83d\udcd9 \u8bc6\u522b\u548c\u5b9a\u4e49\u4f9d\u8d56\u6e90 \n \u901a\u8fc7\u6211\u4eec\u7684\u6587\u4ef6\u7ed3\u6784\u8bbe\u7f6e\uff0c\u8ba9\u6211\u4eec\u5b8c\u6210\u6211\u4eec\u7684  _sources.yml  \u6587\u4ef6\u3002 \n \u8fd9\u4e9b\u6587\u4ef6\u7684\u683c\u5f0f\u5982\u4e0b\uff1a \n  (#__codelineno-0-1) version :   2   # \u9b54\u6cd5\u8868\u90fd\u4f7f\u7528\u201cversion: 2\u201d\uff0c\u56e0\u4e3a\u8fd9\u662f\u4ed6\u4eec\u4f7f\u7528\u7684\u6211\u4eec\u6570\u636e\u5e93\u5f15\u64ce\u7684\u7248\u672c\u3002 \n  (#__codelineno-0-2) \n  (#__codelineno-0-3) sources : \n  (#__codelineno-0-4) \n  (#__codelineno-0-5)    -   name :   [ project_name ] _[blockchain] \n  (#__codelineno-0-6) \n  (#__codelineno-0-7)      description :   [ one line description ]   # \u53f3\u7bad\u5934 > \u5141\u8bb8\u6211\u4eec\u6dfb\u52a0\u591a\u884c\u63cf\u8ff0 \n  (#__codelineno-0-8) \n  (#__codelineno-0-9)      tables : \n  (#__codelineno-0-10) \n  (#__codelineno-0-11)        -   name :   [ source_table_1 ] \n  (#__codelineno-0-12) \n  (#__codelineno-0-13)        -   name :   [ source_table_2 ] \n  (#__codelineno-0-14) \n  (#__codelineno-0-15)        -   name :   [ source_table_3 ] \n \n \u6211\u4eec\u9700\u8981\u547d\u540d\u54ea\u4e9b\u4f9d\u8d56\u6e90\uff1f \n \u4e3a\u4e86\u627e\u5230\u8fd9\u4e2a\uff0c\u6211\u4eec\u518d\u6b21\u904d\u5386\u6211\u4eec\u6b63\u5728\u8fc1\u79fb\u7684\u6bcf\u4e2a V1 \u62bd\u8c61\uff0c\u641c\u7d22  FROM  \u8bed\u53e5\uff0c\u8fd9\u6b21\u6211\u4eec\u6b63\u5728\u5bfb\u627e\u6240\u6709\u63d0\u5230\u7684 \u4e0d\u662f \u62bd\u8c61\u7684\u8868\u3002 \n \u5728\u6211\u4eec\u7684 Keep3r \u793a\u4f8b\u4e2d\uff0c\u4e3a\u6211\u4eec\u7684\u4e3b\u8981\u62bd\u8c61\u8868\u548c\u5b83\u7684\u4f9d\u8d56\u9879\u5206\u522b\u6267\u884c\u4e0a\u8ff0\u64cd\u4f5c\uff1a \n \n keep3r_network.view_job_log \n keep3r_network.view_job_liquidity_log \n keep3r_network.view_job_credits_log \n keep3r_network_ethereum_view_job_migrations \n \n \u6211\u4eec\u6700\u7ec8\u5f97\u5230\u4e00\u4e2a\u5982\u4e0b\u6240\u793a\u7684  keep3r_network_ethereum_sources.yml  \u6587\u4ef6\uff1a \n  (#__codelineno-1-1) version :   2 \n  (#__codelineno-1-2) \n  (#__codelineno-1-3) sources : \n  (#__codelineno-1-4) \n  (#__codelineno-1-5)    -   name :   keep3r_network_ethereum \n  (#__codelineno-1-6) \n  (#__codelineno-1-7)      description :   > \n  (#__codelineno-1-8) \n  (#__codelineno-1-9)        Decoded events for [keep3r.network](https://keep3r.network/), a marketplace for posting and accepting jobs to help run decentralized infrastructure. \n  (#__codelineno-1-10) \n  (#__codelineno-1-11)        The scope of Keep3r Network is not to manage the jobs themselves, but to allow contracts to register as jobs for keepers, and keepers to register themselves as available to perform jobs. A \"keeper\" is a term used to refer to an external person and/or team that executes a job. \n  (#__codelineno-1-12) \n  (#__codelineno-1-13)        See their [docs](https://docs.keep3r.network/) for more. \n  (#__codelineno-1-14) \n  (#__codelineno-1-15)      tables : \n  (#__codelineno-1-16) \n  (#__codelineno-1-17)        -   name :   Keep3r_evt_LiquidityAddition \n  (#__codelineno-1-18) \n  (#__codelineno-1-19)        -   name :   Keep3r_v2_evt_LiquidityAddition \n  (#__codelineno-1-20) \n  (#__codelineno-1-21)        -   name :   Keep3r_evt_LiquidityWithdrawal \n  (#__codelineno-1-22) \n  (#__codelineno-1-23)        -   name :   Keep3r_v2_evt_LiquidityWithdrawal \n  (#__codelineno-1-24) \n  (#__codelineno-1-25)        -   name :   Keep3r_evt_JobMigrationSuccessful \n  (#__codelineno-1-26) \n  (#__codelineno-1-27)        -   name :   Keep3r_v2_evt_JobMigrationSuccessful \n  (#__codelineno-1-28) \n  (#__codelineno-1-29)        -   name :   Keep3r_evt_KeeperWork \n  (#__codelineno-1-30) \n  (#__codelineno-1-31)        -   name :   Keep3r_v2_evt_KeeperWork \n  (#__codelineno-1-32) \n  (#__codelineno-1-33)        -   name :   Keep3r_evt_LiquidityCreditsReward \n  (#__codelineno-1-34) \n  (#__codelineno-1-35)        -   name :   Keep3r_v2_evt_LiquidityCreditsReward", "url": "https://dune.com/docs/zh/spellbook/how-to-cast-a-spell/4-identify-and-define-sources/"}
{"content": "\u5b9a\u4e49\u6a21\u5f0f\uff08schema\uff09 \u00b6 \n \u9996\u5148\uff0c\u6211\u4eec\u4ece\u5b9a\u4e49\u6a21\u578b\u7684\u6a21\u5f0f\u5f00\u59cb\u2014\u2014\u5e94\u8be5\u4e3a\u6211\u4eec\u7684\u9b54\u6cd5\u8868\u4e2d\u7684\u6bcf\u4e2a .sql \u6587\u4ef6\u8f93\u51fa\u54ea\u4e9b\u5217\u3002 \n \u6211\u4eec\u7684  _schema.yml  \u6587\u4ef6\u7ed3\u6784\u5982\u4e0b\uff1a \n  (#__codelineno-0-1) version :   2 \n  (#__codelineno-0-2) \n  (#__codelineno-0-3) models : \n  (#__codelineno-0-4) \n  (#__codelineno-0-5)    -   name :   [ model_name ] \n  (#__codelineno-0-6) \n  (#__codelineno-0-7)      meta : \n  (#__codelineno-0-8) \n  (#__codelineno-0-9)        blockchain :   [ blockchain_name ] \n  (#__codelineno-0-10) \n  (#__codelineno-0-11)        project :   [ project_name ] \n  (#__codelineno-0-12) \n  (#__codelineno-0-13)        contributors :   [ your_name ] \n  (#__codelineno-0-14) \n  (#__codelineno-0-15)      config : \n  (#__codelineno-0-16) \n  (#__codelineno-0-17)        tags :   [ \"[blockchain]\" ,   \"[project_name]\" ,   \"[other_relevant_tags]\" ] \n  (#__codelineno-0-18) \n  (#__codelineno-0-19)      description :   [ description ] \n  (#__codelineno-0-20) \n  (#__codelineno-0-21)      columns : \n  (#__codelineno-0-22) \n  (#__codelineno-0-23)        -   & [ column_name ] \n  (#__codelineno-0-24) \n  (#__codelineno-0-25)          name :   [ column_name ] \n  (#__codelineno-0-26) \n  (#__codelineno-0-27)          description :   \"[description]\" \n  (#__codelineno-0-28) \n  (#__codelineno-0-29)          tests : \n  (#__codelineno-0-30) \n  (#__codelineno-0-31)            -   [ generic_test_criteria ] \n  (#__codelineno-0-32) \n  (#__codelineno-0-33)    -   name :   [ model_name_2 ] \n  (#__codelineno-0-34) \n  (#__codelineno-0-35)      meta : \n  (#__codelineno-0-36) \n  (#__codelineno-0-37)        blockchain :   [ blockchain_name ] \n  (#__codelineno-0-38) \n  (#__codelineno-0-39)        project :   [ project_name ] \n  (#__codelineno-0-40) \n  (#__codelineno-0-41)        contributors :   [ your_name ] \n  (#__codelineno-0-42) \n  (#__codelineno-0-43)      config : \n  (#__codelineno-0-44) \n  (#__codelineno-0-45)        tags :   [ \"[blockchain]\" ,   \"[project_name]\" ,   \"[other_relevant_tags]\" ] \n  (#__codelineno-0-46) \n  (#__codelineno-0-47)      description :   [ description ] \n  (#__codelineno-0-48) \n  (#__codelineno-0-49)      columns : \n  (#__codelineno-0-50) \n  (#__codelineno-0-51)        -   * [ previously_definied_column ] \n \n \n \u6ce8\u610f \n \u201c&\u201d\u7528\u4e8e\u67d0\u4e2a\u5217\u7684\u7b2c\u4e00\u4e2a\u5b9a\u4e49\uff0c\u4e4b\u540e\u7684\u201c*\u201d\u5c06\u5bfc\u81f4\u5728\u4e0d\u540c\u6a21\u578b\u4e2d\u5177\u6709\u76f8\u540c\u540d\u79f0\u7684\u5217\u7ee7\u627f\u76f8\u540c\u7684\u540d\u79f0\u3001\u63cf\u8ff0\u548c\u901a\u7528\u6d4b\u8bd5\u3002 \n \n \u6211\u4eec\u5728\u7b2c\u56db\u6b65\u4e2d\u521b\u5efa\u7684\u6bcf\u4e2a SQL \u6587\u4ef6\u5728\u8fd9\u91cc\u90fd\u662f\u4e00\u4e2a\u6a21\u578b\uff0c\u6211\u4eec\u8981\u8f93\u51fa\u7684\u6bcf\u4e2a\u5217\u90fd\u88ab\u547d\u540d\u548c\u63cf\u8ff0\uff0c\u5e76\u76f8\u5e94\u5730\u63d0\u53ca\u5e94\u8be5\u7528\u4e8e\u68c0\u67e5\u5b83\u4eec\u7684\u4efb\u4f55\u901a\u7528\u6d4b\u8bd5\u3002 \n \u5728\u6b64\u5904\u67e5\u770b Keep3r \u9b54\u6cd5\u8868\u7684\u6a21\u5f0f\uff0c\u4e86\u89e3\u6211\u4eec\u7684\u793a\u4f8b\u5b8c\u6210\u540e\u7684\u6837\u5b50  (https://github.com/duneanalytics/spellbook/blob/b9260a03351e562448c5c9e62529da7b2d94ca59/models/keep3r_network/ethereum/keep3r_network_ethereum_schema.yml) . \n ", "url": "https://dune.com/docs/zh/spellbook/how-to-cast-a-spell/5-define-expectations-with-schema-and-tests/#schema"}
{"content": "\u8bbe\u7f6e\u5355\u5143\u6d4b\u8bd5\u79cd\u5b50\u6587\u4ef6\u7ed3\u6784 \u00b6 \n \u8bbe\u7f6e\u6a21\u5f0f\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5b9a\u4e49\u6211\u4eec\u7684 \u5355\u5143\u6d4b\u8bd5  (https://en.wikipedia.org/wiki/Unit_testing)  - \u8fd9\u5c06\u5e2e\u52a9\u6211\u4eec\u786e\u4fdd\u9b54\u6cd5\u8868\u6309\u9884\u671f\u5de5\u4f5c\u3002 \n \u4ece\u8bbe\u7f6e\u79cd\u5b50\u6587\u4ef6\u7ed3\u6784\u5f00\u59cb\u3002 \n \u5728 dbt \u4e2d\uff0c \u79cd\u5b50\u6587\u4ef6\u662f CSV  (https://docs.getdbt.com/docs/build/seeds) \uff0c\u6211\u4eec\u7528\u6765\u5b58\u50a8\u6211\u4eec\u53ef\u4ee5\u5728\u9b54\u6cd5\u8868\u548c\u5355\u5143\u6d4b\u8bd5\u4e2d\u4f7f\u7528\u7684\u53c2\u8003\u6570\u636e\uff1b\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u5b83\u6765\u5b58\u50a8\u4e00\u4e9b\u6570\u636e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u6570\u636e\u6765\u9a8c\u8bc1\u6211\u4eec\u7684\u9b54\u6cd5\u8868\u662f\u5426\u7b26\u5408\u7f51\u7edc\u65e0\u969c\u788d\u5021\u8bae\uff08WAI\uff09\u3002 \n \u5bfc\u822a\u5230  /seeds  \u6587\u4ef6\u5939\uff0c\u5c31\u50cf\u6211\u4eec\u5bf9\u65b0\u9879\u76ee\u6240\u505a\u7684\u90a3\u6837\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u521b\u5efa\u4e00\u4e2a  /[project_name]/[blockchain]  \u5b50\u6587\u4ef6\u5939\u3002 \n \u5728\u6211\u4eec\u7684 Keep3r \u793a\u4f8b\u4e2d\uff0c\u6587\u4ef6\u5939\u8def\u5f84\u662f /seeds/keep3r_network/ethereum \n \u6709\u4e86\u5b83\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u4ee5\u4e0b\u683c\u5f0f\u521b\u5efa\u4e00\u4e2a\u5177\u6709\u63cf\u8ff0\u6027\u540d\u79f0\u7684 CSV \u6587\u4ef6\uff1a \n [project_name]_[blockchain]_[spell_name]_test_data.csv \n \u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\u5219\u662f\uff1a \n keep3r_network_ethereum_view_job_log_test_data.csv \n ", "url": "https://dune.com/docs/zh/spellbook/how-to-cast-a-spell/5-define-expectations-with-schema-and-tests/#_1"}
{"content": "\u67e5\u627e\u5355\u5143\u6d4b\u8bd5\u7684\u9884\u671f\u503c \u00b6 \n \u6211\u4eec\u7684\u5355\u5143\u6d4b\u8bd5\u5c06\u9488\u5bf9\u9884\u671f\u503c\u5217\u8868\u8fd0\u884c\uff0c\u672c\u8d28\u4e0a\u6211\u4eec\u8981\u68c0\u67e5\u4ee5\u786e\u4fdd\u6211\u4eec\u7684\u9b54\u6cd5\u8868\u63d0\u4f9b\u5e94\u6709\u7684\u7ed3\u679c\u3002 \n \u6211\u4eec\u5e94\u8be5\u671f\u5f85\u4ec0\u4e48\u7ed3\u679c\uff1f \n \u4e3a\u4e86\u5f04\u6e05\u695a\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u9700\u8981\u901a\u8fc7\u9605\u8bfb Keep3r \u7684\u7f51\u7ad9\u3001\u6587\u6863\u3001Medium \u535a\u5ba2\u3001\u5728\u4ed6\u4eec\u7684 discord \u4e2d\u63d0\u95ee\u7b49\u6765\u66f4\u591a\u5730\u4e86\u89e3 Keep3r \u7f51\u7edc\u3002 \n \u5bf9\u4e8e\u6211\u4eec\u7684\u4f8b\u5b50\uff0c\u91cd\u8981\u7684\u662f\u8981\u77e5\u9053 Keep3r \u7f51\u7edc\u662f\u4e00\u4e2a\u53d1\u5e03\u548c\u63a5\u53d7\u5de5\u4f5c\u4ee5\u5e2e\u52a9\u8fd0\u884c\u53bb\u4e2d\u5fc3\u5316\u57fa\u7840\u8bbe\u65bd\u7684\u5e02\u573a\u3002 \n Keep3r \u7f51\u7edc\u4e0a\u7684\u5de5\u4f5c\u662f\u667a\u80fd\u5408\u7ea6\uff0c\u9700\u8981 Keepers \u5728\u5176\u5185\u90e8\u903b\u8f91\u4e4b\u5916\u505a\u4e00\u4e9b\u4e8b\u60c5\u3002 \u5b8c\u6210\u8fd9\u4e9b\u4efb\u52a1\u4f1a\u4f7f Keeper \u83b7\u5f97\u5956\u52b1\u3002 \n \u57fa\u4e8e\u6b64\u7406\u89e3\uff0c\u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u4e00\u4e2a\u6d4b\u8bd5\u3002\u5728\u5176\u4e2d\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u4ea4\u6613\u54c8\u5e0c\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4e3a\u8be5\u5de5\u4f5c\u652f\u4ed8\u7684\u5956\u52b1\u91d1\u989d\u3001\u6536\u5230\u5956\u52b1\u7684Keeper\u662f\u8c01\u4ee5\u53ca\u4ed6\u4eec\u6536\u5230\u7684\u4ee3\u5e01\u662f\u4ec0\u4e48\u3002 \n \u56e0\u6b64\uff0c\u5728\u6211\u4eec\u7684 CSV \u6587\u4ef6\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u5b9a\u4e49\u8981\u9a8c\u8bc1\u7684\u6d4b\u8bd5\u6570\u636e\u5217\uff0c\u5728\u672c\u4f8b\u4e2d\u4e3a\uff1a tx_hash \u3001 amount \u3001 keeper  \u548c  token \u3002 \n \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u627e\u5230\u4e00\u4e9b\u7279\u5b9a\u7684\u4ea4\u6613\uff0c3 \u4e2a\u5c31\u8db3\u591f\u4e86\uff0c\u7136\u540e\u6dfb\u52a0\u5e94\u8be5\u5728\u6bcf\u4e00\u5217\u4e2d\u7684\u5b9e\u9645\u6570\u636e\u3002 \n \u7ed3\u679c\u5982\u4e0b\uff1a \n  (#__codelineno-1-1) tx_hash,amount,keeper,token\n  (#__codelineno-1-2) \n  (#__codelineno-1-3) 0xca1ee6de6d2a776afda7d6ab6bc489d4554f69777725db58591a7ac0ef533c96,0.11,0x9429cd74a3984396f3117d51cde46ea8e0e21487,0x1cEB5cB57C4D4E2b2433641b95Dd330A33185A44\n  (#__codelineno-1-4) \n  (#__codelineno-1-5) 0xdd59724ee9a1f151706bc182be810483a35b36c2a82485469245887742996313,0.13,0xfb20864791b7dd70542dae2f4907ef0535a68cdc,0x1cEB5cB57C4D4E2b2433641b95Dd330A33185A44\n  (#__codelineno-1-6) \n  (#__codelineno-1-7) 0xa8c8383254bd4cda949de1e847f8ae0d7f765053ddeeca11a159ad8191d8cc85,0.35,0xfb20864791b7dd70542dae2f4907ef0535a68cdc,0x1cEB5cB57C4D4E2b2433641b95Dd330A33185A44\n \n ", "url": "https://dune.com/docs/zh/spellbook/how-to-cast-a-spell/5-define-expectations-with-schema-and-tests/#_2"}
{"content": "\u7f16\u5199\u5355\u5143\u6d4b\u8bd5 \u00b6 \n \u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u8981\u6d4b\u8bd5\u7684\u9884\u671f\u7ed3\u679c\uff0c\u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u5355\u5143\u6d4b\u8bd5\u4e86\uff01 \n \u9996\u5148\uff0c\u5982\u60a8\u6240\u6599\uff0c\u6211\u4eec\u5728  /tests  \u6587\u4ef6\u5939\u4e2d\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939\u7ed3\u6784\uff0c\u4ee5\u53ca\u4e00\u4e2a\u7528\u4e8e\u6d4b\u8bd5\u7684 SQL \u6587\u4ef6\u3002 \n Same naming conventions as before for the folders, for our SQL file we\u2019ll name it  [project_name]_[spell_name]_test.sql \n\u6587\u4ef6\u5939\u7684\u547d\u540d\u7ea6\u5b9a\u4e0e\u4e4b\u524d\u76f8\u540c\u3002\u5bf9\u4e8e\u6211\u4eec\u7684 SQL \u6587\u4ef6\uff0c\u6211\u4eec\u5c06\u5176\u547d\u540d\u4e3a  [project_name]_[spell_name]_test.sql \u3002 \n \u5373: \n /keep3r_network/ethereum/keep3r_network_view_job_log_test.sql \n \n \u4e3a\u4e86\u7f16\u5199\u5355\u5143\u6d4b\u8bd5\uff0c\u6211\u4eec\u5c06\u68c0\u67e5\u4ee5\u786e\u4fdd\u6211\u4eec\u5c06\uff08\u6700\u7ec8\uff09\u5728\u4e0b\u4e00\u6b65\u4e2d\u5b9a\u4e49\u7684\u9b54\u6cd5\u8868\u7684\u7ed3\u679c\u4e0e\u6211\u4eec\u6dfb\u52a0\u5230\u9884\u671f\u503c\u79cd\u5b50\u6587\u4ef6\u4e2d\u7684\u771f\u5b9e\u7ed3\u679c\u76f8\u5339\u914d\u3002 \n \u4e3a\u6b64\uff0c\u6211\u4eec\u5c06\u5b9a\u4e49\u4e00\u4e2a\u540d\u4e3a  unit_test  \u7684 \u901a\u7528\u8868\u8868\u8fbe\u5f0f\uff08CTE\uff09  (https://learnsql.com/blog/cte-with-examples/) \uff0c\u8fde\u63a5\u6211\u4eec\u7684\u6d4b\u8bd5\u548c\u5b9e\u9645\u7ed3\u679c\u6570\u636e\uff0c\u5e76\u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c\u4e0d\u5339\u914d\uff0c\u8be5\u6570\u636e\u5c06\u8fd4\u56de\u9519\u8bef\u3002 \n \u4e0b\u9762\u662f\u8fd9\u4e2a\u4f8b\u5b50\u7684\u5355\u5143\u6d4b\u8bd5\u7684\u6837\u5b50\uff0c\u6ce8\u91ca\u89e3\u91ca\u4e86\u8be6\u60c5\uff1a \n  (#__codelineno-2-1) -- CTEs \u4f7f\u7528 WITH \u8bed\u53e5\u521b\u5efa \n  (#__codelineno-2-2) \n  (#__codelineno-2-3) WITH   unit_test   AS   ( \n  (#__codelineno-2-4) \n  (#__codelineno-2-5)      -- \u8fd9\u91cc\u6211\u4eec\u5c06\u6d4b\u8bd5\u6570\u636e\u4e0e\u5b9e\u9645\u6570\u636e\u8fdb\u884c\u6bd4\u8f83\uff0c\u5339\u914d\u5219\u8fd4\u56deTRUE\uff0c\u4e0d\u5339\u914d\u5219\u8fd4\u56deFALSE\u3002ROUND \u548c LOWER \u786e\u4fdd\u6211\u4eec\u4e0d\u4f1a\u56e0\u683c\u5f0f\u5dee\u5f02\u800c\u51fa\u73b0\u9519\u8bef\u3002 \n  (#__codelineno-2-6) \n  (#__codelineno-2-7)      SELECT \n  (#__codelineno-2-8) \n  (#__codelineno-2-9)          CASE \n  (#__codelineno-2-10) \n  (#__codelineno-2-11)              WHEN   test . amount   =   ROUND ( \n  (#__codelineno-2-12) \n  (#__codelineno-2-13)                  actual . amount , \n  (#__codelineno-2-14) \n  (#__codelineno-2-15)                  2 \n  (#__codelineno-2-16) \n  (#__codelineno-2-17)              )   THEN   TRUE \n  (#__codelineno-2-18) \n  (#__codelineno-2-19)              ELSE   FALSE \n  (#__codelineno-2-20) \n  (#__codelineno-2-21)          END   AS   amount_test , \n  (#__codelineno-2-22) \n  (#__codelineno-2-23)          CASE \n  (#__codelineno-2-24) \n  (#__codelineno-2-25)              WHEN   LOWER ( \n  (#__codelineno-2-26) \n  (#__codelineno-2-27)                  test . keeper \n  (#__codelineno-2-28) \n  (#__codelineno-2-29)              )   =   LOWER ( \n  (#__codelineno-2-30) \n  (#__codelineno-2-31)                  actual . keeper \n  (#__codelineno-2-32) \n  (#__codelineno-2-33)              )   THEN   TRUE \n  (#__codelineno-2-34) \n  (#__codelineno-2-35)              ELSE   FALSE \n  (#__codelineno-2-36) \n  (#__codelineno-2-37)          END   AS   keeper_test , \n  (#__codelineno-2-38) \n  (#__codelineno-2-39)          CASE \n  (#__codelineno-2-40) \n  (#__codelineno-2-41)              WHEN   LOWER ( \n  (#__codelineno-2-42) \n  (#__codelineno-2-43)                  test . token \n  (#__codelineno-2-44) \n  (#__codelineno-2-45)              )   =   LOWER ( \n  (#__codelineno-2-46) \n  (#__codelineno-2-47)                  actual . token \n  (#__codelineno-2-48) \n  (#__codelineno-2-49)              )   THEN   TRUE \n  (#__codelineno-2-50) \n  (#__codelineno-2-51)              ELSE   FALSE \n  (#__codelineno-2-52) \n  (#__codelineno-2-53)          END   AS   token_test \n  (#__codelineno-2-54) \n  (#__codelineno-2-55)     /* \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4f7f\u7528 tx_hash \u503c\u6765\u8fde\u63a5\u5b9e\u9645\u6570\u636e\u548c\u6d4b\u8bd5\u6570\u636e\u3002 \u6ce8\u610f\u201cactual\u201d\u6211\u4eec\u5f15\u7528\u6211\u4eec\u5b9e\u9645\u7684\u9b54\u6cd5\u8868\u6a21\u578b\u6587\u4ef6\uff0c\u4ee5\u53ca\u6211\u4eec\u7684\u201ctest\u201d\u6d4b\u8bd5\u6570\u636e\u6587\u4ef6\u3002 {{}} \u662f JINJA \u6a21\u677f\uff0c\u6211\u4eec\u7a0d\u540e\u4f1a\u4ecb\u7ecd\u3002*/ \n  (#__codelineno-2-56) \n  (#__codelineno-2-57)      FROM \n  (#__codelineno-2-58) \n  (#__codelineno-2-59)          {{   ref ( 'keep3r_network_ethereum_view_job_log' )   }}   AS   actual \n  (#__codelineno-2-60) \n  (#__codelineno-2-61)          INNER   JOIN   {{   ref ( 'keep3r_network_ethereum_view_job_log_test_data' )   }}   AS   test \n  (#__codelineno-2-62) \n  (#__codelineno-2-63)          ON   LOWER ( \n  (#__codelineno-2-64) \n  (#__codelineno-2-65)              actual . tx_hash \n  (#__codelineno-2-66) \n  (#__codelineno-2-67)          )   =   LOWER ( \n  (#__codelineno-2-68) \n  (#__codelineno-2-69)              test . tx_hash \n  (#__codelineno-2-70) \n  (#__codelineno-2-71)          ) \n  (#__codelineno-2-72) \n  (#__codelineno-2-73) ) \n  (#__codelineno-2-74) \n  (#__codelineno-2-75) -- \u4ece unit_test \u52a0\u8f7d\u6240\u6709\u5217\uff0c\u6211\u4eec\u8fd4\u56de\u4efb\u4f55 FALSE \u7ed3\u679c \n  (#__codelineno-2-76) \n  (#__codelineno-2-77) SELECT \n  (#__codelineno-2-78) \n  (#__codelineno-2-79)      * \n  (#__codelineno-2-80) \n  (#__codelineno-2-81) FROM \n  (#__codelineno-2-82) \n  (#__codelineno-2-83)      unit_test \n  (#__codelineno-2-84) \n  (#__codelineno-2-85) WHERE \n  (#__codelineno-2-86) \n  (#__codelineno-2-87)      amount_test   =   FALSE \n  (#__codelineno-2-88) \n  (#__codelineno-2-89)      OR   keeper_test   =   FALSE \n  (#__codelineno-2-90) \n  (#__codelineno-2-91)      OR   token_test   =   FALSE", "url": "https://dune.com/docs/zh/spellbook/how-to-cast-a-spell/5-define-expectations-with-schema-and-tests/#_3"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/spellbook/how-to-cast-a-spell/3-set-up-your-file-structure-for-SQL-schema-and-source-files.md) \n 3. \ud83d\udee3\ufe0f \u4e3a SQL\u3001\u6a21\u5f0f\u548c\u6e90\u6587\u4ef6\u8bbe\u7f6e\u6587\u4ef6\u7ed3\u6784 \n \u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u68c0\u67e5\u9879\u76ee\u7684\u73b0\u6709\u6587\u4ef6\u5939\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u521b\u5efa\u4e00\u4e2a\u3002 \n \u6240\u6709\u9b54\u6cd5\u8868\uff08spells\uff09\u90fd\u6309\u9879\u76ee\u540d\u79f0\u3001\u533a\u5757\u94fe\u540d\u79f0\u7684\u7ed3\u6784\u5b58\u50a8\u5728  /spellbook/models  \u76ee\u5f55\u4e2d\u3002 \n \u540d\u79f0\u5168\u90e8\u4f7f\u7528\u5c0f\u5199\u5b57\u6bcd\uff0c\u5355\u8bcd\u4e4b\u95f4\u7528 _ \u5206\u9694\u3002 \n \u4f8b\u5982\uff1a  /spellbook/models/[project_name]/[blockchain_name] \n \u6240\u4ee5\u5728\u6211\u4eec\u7684 Keep3r \u7f51\u7edc\u793a\u4f8b\u4e2d\uff0c\u5bf9\u5e94\u7684\u6587\u4ef6\u5939\u5c06\u662f  /spellbook/models/keep3r_network/ethereum \u3002 \n \u7531\u4e8e\u6b64\u6587\u4ef6\u5939\u5df2\u7ecf\u5b58\u5728\uff08\u56e0\u4e3a\u6211\u4eec\u4e4b\u524d\u5df2\u7ecf\u8fd9\u6837\u505a\u8fc7\uff09\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5c06\u5728\u90a3\u91cc\u6784\u5efa\u9b54\u6cd5\u8868\u3002 \n \u5982\u679c\u8be5\u9879\u76ee\u4e0d\u5b58\u5728\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u5176\u6240\u5728\u533a\u5757\u94fe\u7684\u540d\u79f0\u521b\u5efa\u8be5\u6587\u4ef6\u5939\uff1b\u5982\u679c\u9879\u76ee\u6587\u4ef6\u5939\u5b58\u5728\u4f46\u6211\u4eec\u6b63\u5728\u4e3a\u65b0\u533a\u5757\u94fe\u521b\u5efa\u4e00\u4e2a\u9b54\u6cd5\u8868\uff08\u4f8b\u5982\uff0c\u8be5\u9879\u76ee\u521a\u521a\u6dfb\u52a0\u4e86\u5bf9Polygon\u533a\u5757\u94fe\u7684\u652f\u6301\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u5c06\u4e3a\u65b0\u533a\u5757\u94fe\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939\u3002 \n \u6709\u4e86\u76f8\u5e94\u7684\u6587\u4ef6\u5939\u7ed3\u6784\u4e4b\u540e\uff0c\u6211\u4eec\u9700\u8981\u521b\u5efa 3 \u4e2a\u6587\u4ef6\uff1a \n \n \u6211\u4eec\u7684 Spell \u903b\u8f91\u6240\u5728\u7684  .sql  \u6587\u4ef6\u3002 \n \u4e00\u4e2a  _schema.yml \u6587\u4ef6\uff0c\u6211\u5728\u5176\u4e2d\u5b9a\u4e49\u6211\u7684\u9b54\u6cd5\u8868\u7684\u76ee\u7684\u5e76\u6dfb\u52a0\u901a\u7528\u6d4b\u8bd5\u3001\u63cf\u8ff0\u3001\u5143\u6570\u636e\u7b49\u3002 \n \u5305\u62ec\u4efb\u4f55\u7279\u5b9a\u4e8e\u9879\u76ee\u7684\u8868\u4f9d\u8d56\u6e90\u7684  _sources.yml  \u6587\u4ef6\u3002 \n \n \n \u9b54\u6cd5\u8868\u6587\u4ef6\u547d\u540d\u5982\u4e0b\uff1a \n \n \u5bf9\u4e8e\u6a21\u5f0f\u6587\u4ef6\uff1a [project_name]_[blockchain]_schema.yml \n \u5bf9\u4e8e\u4f9d\u8d56\u6e90\u6587\u4ef6\uff1a [project_name]_[blockchain]_sources.yml \n \u5bf9\u4e8e\u9b54\u6cd5\u8868\u7684SQL\u6587\u4ef6\uff1a [project_name]_[blockchain]_[spell_name].sql \n \n \u5728\u8fd9\u4e2a\u7279\u5b9a\u7684\u4ece v1 \u8fc1\u79fb\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u521b\u5efa 3 \u4e2a\u989d\u5916\u7684  .sql  \u6587\u4ef6\uff0c keep3r_network_ethereum_view_job_log.sql  \u4f9d\u8d56\u4e8e\u8fd9\u4e9b\u6587\u4ef6\u3002 \n \u5b83\u4eec\u662f  keep3r_network_ethereum_view_job_liquidity_log.sql  \uff0c keep3r_network_ethereum_view_job_credits_log.sql  \u548c  keep3r_network_ethereum_view_job_migrations.sql \u3002 \n \u6211\u4eec\u600e\u4e48\u77e5\u9053\u6211\u4eec\u9700\u8981\u8fd9\u4e9b\u6587\u4ef6\u5462\uff1f \n \u67e5\u770b\u539f\u59cb\u7684  view_job_log.sql  V1 \u62bd\u8c61\u8868\u5b9a\u4e49\uff0c\u6211\u4eec\u770b\u5230\u4e24\u4e2a  FROM  \u8bed\u53e5\uff1a \n  (#__codelineno-0-1) FROM \n  (#__codelineno-0-2) \n  (#__codelineno-0-3)          keep3r_network . view_job_liquidity_log \n \n  (#__codelineno-1-1) FROM \n  (#__codelineno-1-2) \n  (#__codelineno-1-3)          keep3r_network . view_job_credits_log \n \n \u5f53\u6211\u4eec\u67e5\u770b V1 Keep3r \u7f51\u7edc\u6587\u4ef6\u5939\u65f6\uff0c\u6211\u4eec\u4f1a\u770b\u5230\u8fd9\u4e24\u4e2a\u6587\u4ef6\u5728\u90a3\u91cc - \u8fd9\u610f\u5473\u7740\u5b83\u4eec\u4e5f\u662f\u9700\u8981\u8f6c\u6362\u4e3a Spells \u7684\u62bd\u8c61\u3002 \n \n \u6211\u4eec\u8fd8\u9700\u8981\u8fdb\u884c\u9012\u5f52\u68c0\u67e5\uff0c\u4ee5\u67e5\u770b\u8fd9\u4e9b\u62bd\u8c61\u662f\u5426\u4f9d\u8d56\u4e8e\u5c1a\u672a\u8fc1\u79fb\u5230 Spells \u7684\u4efb\u4f55\u5176\u4ed6\u62bd\u8c61\u3002 \n \u4e3a\u6b64\uff0c\u6211\u4eec\u6253\u5f00\u8fd9\u4e24\u4e2a\u62bd\u8c61\u5e76\u641c\u7d22  FROM  \u8bed\u53e5\u3002 \n \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u627e\u5230\u4e86\u51e0\u4e2a\u5f15\u7528\u7684\u8868\uff0c\u5176\u4e2d\u5305\u62ec\u201c evt \u201d\uff0c\u8fd9\u662f  \u5df2\u89e3\u6790\u4e8b\u4ef6\u8868  (../../../reference/tables/v2/decoded/event-logs/)  \u7684\u547d\u540d\u7ea6\u5b9a\u3002 \n You\u2019ll find other Raw and Decoded data table naming conventions in our  Tables documentation here  (../../../reference/tables/) . \n\u60a8\u53ef\u4ee5\u5728\u6211\u4eec\u7684  \u8868\u683c\u6587\u6863  (../../../reference/tables/) \u4e2d\u627e\u5230\u5176\u4ed6\u539f\u59cb\u548c\u5df2\u89e3\u6790\u6570\u636e\u8868\u7684\u547d\u540d\u7ea6\u5b9a\u3002 \n V1 \u62bd\u8c61\u8868\u547d\u540d\u5982\u4e0b\uff1a \n [project_name].[abstraction_name] \n \u5f53\u6211\u4eec\u641c\u7d22  view_job_log.sql  \u4e2d\u5f15\u7528\u7684\u4e24\u4e2a\u62bd\u8c61\u65f6\uff0c\u6211\u4eec\u8fd8\u627e\u5230\u4e86\u5bf9  keep3r_network_ethereum_view_job_migrations  \u7684\u5f15\u7528\uff0c\u56e0\u6b64\u5b83\u4e5f\u5fc5\u987b\u6210\u4e3a\u4e00\u4e2a\u9b54\u6cd5\u8868\u3002", "url": "https://dune.com/docs/zh/spellbook/how-to-cast-a-spell/3-set-up-your-file-structure-for-SQL-schema-and-source-files/"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/spellbook/how-to-cast-a-spell/2-decide-on-a-Spell-to-cast.md) \n 2. \ud83e\udd14 \u51b3\u5b9a\u8981\u521b\u5efa\u4e3a\u9b54\u6cd5\u8868\u7684\u76ee\u6807 \n \u63a5\u4e0b\u6765\uff0c\u60a8\u9700\u8981\u51b3\u5b9a\u8981\u521b\u5efa\u4e3a\u9b54\u6cd5\u8868\u7684\u76ee\u6807\u3002 \n \u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\uff1a \n \n \u5982\u679c\u60a8\u5bf9 Dune \u7684\u4f7f\u7528\u8db3\u591f\u591a\uff0c\u77e5\u9053\u60a8\u5728\u54ea\u91cc\u9700\u8981\u6bd4\u60a8\u80fd\u591f\u627e\u5230\u7684\u66f4\u591a\u7684\u62bd\u8c61\u6570\u636e\uff0c\u60a8\u53ef\u80fd\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u60f3\u6cd5\u3002 \n \u60a8\u8fd8\u53ef\u4ee5\u67e5\u770b\u6211\u4eec\u5728 Dework \u4e2d\u7684 Spellbook \u8d4f\u91d1\u9879\u76ee  (https://app.dework.xyz/dune/spellbook-86233/overview) . \n \u6b22\u8fce\u5728\u6211\u4eec\u7684  #spellbook Discord \u9891\u9053  (https://discord.com/channels/757637422384283659/999683200563564655)  \u4e2d\u63d0\u95ee\uff0c\u770b\u770b\u4eba\u4eec\u9700\u8981\u4ec0\u4e48\u5e2e\u52a9\u6216\u8005\u5efa\u8bae\u60a8\u505a\u4ec0\u4e48\uff01 \n \n \u5bf9\u4e8e\u672c\u6307\u5357\uff0c\u6211\u4eec\u5c06\u5236\u4f5c\u4e00\u4e2a\u8fc1\u79fb\u9b54\u6cd5\u8868\u2014\u2014\u5c06 Keep3r \u7f51\u7edc  view_job_log  \u62bd\u8c61\u4ece Dune \u7684 v1 \u6570\u636e\u5e93\u8f6c\u6362\u4e3a V2 \u9b54\u6cd5\u8868\u3002 \n \u5728 VSCode \u4e2d\uff0c\u627e\u5230\u201cdeprecated-dune-v1-abstractions\u201d\u6587\u4ef6\u5939\uff0c\u7136\u540e\u5411\u4e0b\u5c55\u5f00\u76ee\u5f55\u4ee5\u627e\u5230\u201cview_job_log.sql\u201d\u6587\u4ef6\u3002 \n \u5b8c\u6574\u8def\u5f84\u662f\uff1a \n [\u4f60\u514b\u9686spellbook\u7684\u6587\u4ef6\u5939]/deprecated-dune-v1-abstractions/ethereum/keep3r_network/view_job_log.sql \n \n \u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u51c6\u5907\u597d\u4e3a\u6211\u4eec\u7684\u9b54\u6cd5\u8868\u7684SQL\u6a21\u5f0f\u548c\u4f9d\u8d56\u6e90\u6587\u4ef6\u8bbe\u7f6e\u6587\u4ef6\u7ed3\u6784\u3002", "url": "https://dune.com/docs/zh/spellbook/how-to-cast-a-spell/2-decide-on-a-Spell-to-cast/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#spellbook-dbt) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/spellbook/how-to-cast-a-spell/1-do-some-prerequisites%20and-set-up-Spellbook-dbt.md) \n 1. \ud83d\udcbb \u51c6\u5907\u4e00\u4e9b\u5148\u51b3\u6761\u4ef6\u5e76\u4e14\u8bbe\u7f6e\u597d\u9b54\u6cd5\u4e66 dbt \n \u4f60\u9700\u8981\u5b89\u88c5\u4e0b\u8ff0\u8f6f\u4ef6\u6765\u5f00\u59cb\uff1a \n \n VSCode  (https://code.visualstudio.com/) \uff08\u4efb\u4f55IDE\u90fd\u53ef\u4ee5\uff0c\u4f46\u6211\u4eec\u4f7f\u7528\u7684\u662f\u8fd9\u4e2a\uff09 \n Python 3.9  (https://realpython.com/installing-python/) \uff08\u60a8\u9700\u8981\u5b89\u88c5\u8fd9\u4e2a\u786e\u5207\u7248\u672c\u7684 Python \u548c distutils\uff1b \u5982\u679c\u60a8\u9047\u5230\u95ee\u9898\uff0c\u8bf7\u5728\u6211\u4eec\u7684 #spellbook Discord channel!  (https://discord.com/channels/757637422384283659/999683200563564655) \u63d0\u95ee\uff09 \n pip  (https://pip.pypa.io/en/stable/installation/) \n pipenv  (https://pypi.org/project/pipenv/) \n git and GitHub  (https://docs.github.com/en/get-started/quickstart/set-up-git)  (\u5305\u62ec\u8ba4\u8bc1) \n \n \u5b89\u88c5\u4e86\u4e0a\u8ff0\u8f6f\u4ef6\u4e4b\u540e\uff0c\u4f60\u8fd8\u9700\u8981\uff1a \n \n \u4e3a \u9b54\u6cd5\u4e66\u4ed3\u5e93  (https://github.com/duneanalytics/spellbook) \u8fd9\u4e2a\u5e93\u505a\u4e00\u4e2a \u5206\u53c9\uff08Fork\uff09  (https://docs.github.com/en/get-started/quickstart/fork-a-repo) \u3002\u5305\u62ec\u514b\u9686\u5230\u672c\u5730\u548c\u6dfb\u52a0\u4e0a\u6e38\u5e93\u94fe\u63a5\u3002 \n \u67e5\u770bGitbut\u4e0a\u5173\u4e8e\u5982\u4f55\u4ece\u5206\u53c9\u4e2d\u53d1\u51fa\u5408\u5e76\u8bf7\u6c42\u7684 \u8bf4\u660e  (https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request-from-a-fork) \u3002 \n \n \u8fd9\u662f\u4e00\u4e2a\u5c55\u793a\u5982\u4f55\u521b\u5efa Spellbook \u5b58\u50a8\u5e93\u7684\u5206\u652f\u7684\u5feb\u901f\u89c6\u9891\uff1a \n \n \u672c\u8d28\u4e0a\uff0c\u4f60\u9700\u8981\uff1a \n \n \u8f6c\u5230 Spellbook \u5b58\u50a8\u5e93\u5e76\u5355\u51fb\u9876\u90e8\u7684 fork \u6309\u94ae\u3002 \n \u590d\u5236\u4f60\u7684 fork \u7684\u5b58\u50a8\u5e93\u7684 HTTPS URL \n \u6253\u5f00\u4f60\u60f3\u8981\u5728 VS Code \u4e2d\u5b58\u50a8 Spellbook \u7684\u6587\u4ef6\u5939 \n \u5728 VS code \u4e2d\u6253\u5f00\u7ec8\u7aef\u5e76\u8f93\u5165  git clone [paste your URL here] \n \n \u6309\u4e0b\u56de\u8f66\u952e\u540e\u5c31\u4f1a\u5f00\u59cb\u4e0b\u8f7d Spellbook\uff0c\u8fd9\u5c06\u9700\u8981\u51e0\u5206\u949f\u65f6\u95f4\u3002 \n ", "url": "https://dune.com/docs/zh/spellbook/how-to-cast-a-spell/1-do-some-prerequisites%20and-set-up-Spellbook-dbt/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#spellbook) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/spellbook/how-to-cast-a-spell/index.md) \n \u5982\u4f55\u521b\u5efa\u9b54\u6cd5\u8868 \n \u8ba9\u6211\u4eec\u5b66\u4e60\u5982\u4f55\u7acb\u5373\u521b\u5efa\u9b54\u6cd5\u8868 - \u5c31\u50cf \ud83d\udcab\uff01 \n \u5728\u672c\u6307\u5357\u7ed3\u675f\u65f6\uff0c\u60a8\u5c06\u8bbe\u7f6e\u597d\u672c\u5730\u73af\u5883\u4ee5\u53ca\u4e3a\u81ea\u5df1\u521b\u5efa\u9b54\u6cd5\u8868\u6216\u9886\u53d6\u8d4f\u91d1\u6240\u9700\u7684\u77e5\u8bc6\u3002 \n \u8ba9\u6211\u4eec\u505a\u4e00\u4e9b\u5f00\u6e90\u533a\u5757\u94fe\u6570\u636e\u5206\u6790\u3002\ud83e\uddd9 \n ", "url": "https://dune.com/docs/zh/spellbook/how-to-cast-a-spell/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#fork-pull-request) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/spellbook/getting-started/submissions.md) \n \u63d0\u4ea4 \n \u5728\u8fd9\u91cc\u60a8\u5c06\u5b66\u4f1a\u5982\u4f55\u5c06\u60a8\u7684\u9b54\u6cd5\u63d0\u4ea4\u5230\u9b54\u6cd5\u4e66\u9879\u76ee\u4e2d \n ", "url": "https://dune.com/docs/zh/spellbook/getting-started/submissions/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/spellbook/getting-started/spells.md) \n \u9b54\u6cd5 \n \u6bcf\u4e00\u4e2a  .sql  \u6587\u4ef6\u5e94\u8be5\u53ea\u80fd\u542b\u6709\u4e00\u4e2a  select  \u4e3b\u4f53\u67e5\u8be2\u3002 \n \u60a8\u65e0\u9700\u5728SQL\u8bed\u53e5\u4e2d\u58f0\u660e  create view \uff08\u521b\u5efa\u89c6\u56fe\uff09\u6216\u8005  create table \uff08\u521b\u5efa\u8868\uff09\u3002  \u5177\u73b0\u5316\u7b56\u7565  (https://docs.getdbt.com/docs/building-a-dbt-project/building-models/materializations) \u5c06\u76f4\u63a5\u5728 JINJA \u8bbe\u7f6e\u5757\u6216\u8005 YAML \u6a21\u5f0f\u6587\u4ef6\u4e2d\u58f0\u660e\u3002 \n \u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6a21\u578b\u5c06\u88ab\u5b9a\u4e49\u4e3a\u89c6\u56fe\uff0c\u4f46\u6211\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49\u4f7f\u4ed6\u4eec\u6210\u4e3a\u8868\u6216\u8005\u589e\u91cf\u52a0\u8f7d\u8868\u3002 \n \u521b\u5efa\u89c6\u56fe\u901f\u5ea6\u5feb\uff0c\u4e0d\u9700\u8981\u989d\u5916\u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u4f46\u67e5\u8be2\u901f\u5ea6\u8f83\u6162\u3002 \u8868\u7684\u521b\u5efa\u901f\u5ea6\u8981\u6162\u5f97\u591a\uff0c\u5e76\u4e14\u786e\u5b9e\u9700\u8981\u989d\u5916\u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u4f46\u67e5\u8be2\u901f\u5ea6\u66f4\u5feb\u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u575a\u6301\u4f7f\u7528\u89c6\u56fe\uff0c\u9664\u975e\u9047\u5230\u6027\u80fd\u95ee\u9898\u65f6\uff0c\u6211\u4eec\u624d\u4f1a\u8003\u8651\u5347\u7ea7\u5230\u8868\u6216\u589e\u91cf\u52a0\u8f7d\u8868\u3002 \n \u5982\u679c\u60a8\u60f3\u4e86\u89e3\u66f4\u591a\u5173\u4e8e DBT \u7684\u5168\u90e8\u529f\u80fd, \u8bf7\u67e5\u770b DBT\u5b98\u65b9\u6587\u6863  (https://docs.getdbt.com/docs/introduction) \u3002\u6211\u4eec\u5df2\u7f16\u5199\u4e86\u4e00\u4e9b \u793a\u8303\u6837\u4f8b  (../../examples/) \u4f5c\u4e3aERC20\u7684\u9b54\u6cd5\u7f16\u5199\u6307\u5357. \n ", "url": "https://dune.com/docs/zh/spellbook/getting-started/spells/"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/spellbook/getting-started/tests.md) \n \u6d4b\u8bd5 \n \u5982\u4f55\u4e3a\u60a8\u7684\u9b54\u6cd5\u7f16\u5199\u5355\u5143\u6d4b\u8bd5\uff1f \n \u5728\u6784\u7b51\u9b54\u6cd5\u524d\u5148\u4e3a\u5176\u7f16\u5199 \u6d4b\u8bd5  (https://docs.getdbt.com/docs/building-a-dbt-project/tests) \uff1f\u8fd9\u662f\u4ec0\u4e48\u8f6f\u4ef6\u5de5\u7a0b\uff1f\u8fd9\u79cd\u8bed\u8a00\u751a\u81f3\u662f\u56fe\u7075\u5b8c\u5907\u7684\u5417\uff1f\uff01 \n \u6211\u4eec\u6b63\u5728\u52aa\u529b\u5b9e\u8df5\u6d4b\u8bd5\u9a71\u52a8\u5f00\u53d1\uff08 test-driven development  (https://en.wikipedia.org/wiki/Test-driven_development) \uff09\u3002 \u8fd9\u610f\u5473\u7740\uff0c\u6211\u4eec\u5728\u7f16\u5199\u9b54\u6cd5\u4e4b\u524d\u5c31\u9700\u8981\u8003\u8651\u6211\u4eec\u60f3\u8981\u4ece\u9b54\u6cd5\u4e2d\u5f97\u5230\u4ec0\u4e48\u7ed3\u679c\u3002 \u4e4b\u540e\uff0c\u6211\u4eec\u7f16\u5199\u4e00\u4e2a\u6d4b\u8bd5\uff0c\u5982\u679c\u8fd9\u4e9b\u7ed3\u679c\u4e0e\u6211\u4eec\u7684\u8f93\u51fa\u5339\u914d\uff0c\u5219\u6d4b\u8bd5\u901a\u8fc7\u3002 \u5982\u679c\u60a8\u65e0\u6cd5\u60f3\u8c61\u60a8\u7684\u9b54\u6cd5\u8f93\u51fa\u5e94\u8be5\u662f\u4ec0\u4e48\u6837\u5b50\uff0c\u60a8\u9700\u8981\u91cd\u65b0\u56de\u5230\u6570\u636e\u5efa\u6a21\u3002 \n \u7f16\u5199\u4e00\u4e2a\u597d\u7684\u5355\u5143\u6d4b\u8bd5\u9700\u8981\u521b\u9020\u529b\u548c\u4e00\u4e9b\u52c7\u6c14\u3002 \u60a8\u9700\u8981\u627e\u5230\u4e00\u79cd\u65b9\u5f0f\u6765\u9a8c\u8bc1\u67d0\u4e9b\u53ef\u80fd\u9700\u8981\u624b\u52a8\u8ba1\u7b97\u7684\u8f93\u51fa\u3002 \n \u4e3e\u4f8b\u6765\u8bf4, Etherscan \u7684 \u4ee3\u5e01\u68c0\u67e5  (https://etherscan.io/tokencheck-tool) \u53ef\u4ee5\u67e5\u8be2\u51fa\u6307\u5b9a\u94b1\u5305\u5730\u5740\u3001\u5408\u7ea6\u5730\u5740\u548c\u65e5\u671f\u7684\u4ee3\u5e01\u4f59\u989d\u3002 \u6211\u4eec\u53ef\u4ee5\u624b\u52a8\u8bb0\u5f55\u5c11\u6570\u6d4b\u8bd5\u7528\u4f8b\u7684\u7ed3\u679c\uff0c\u5b58\u50a8\u5728 CSV \u6587\u4ef6\u4e2d\u4f5c\u4e3a dbt  \u79cd\u5b50  (https://docs.getdbt.com/docs/building-a-dbt-project/seeds) \u79cd\u5b50\u4e0a\u4f20\uff0c\u6216\u8005\u4f5c\u4e3a\u5355\u5143\u6d4b\u8bd5\u672c\u8eab\u7684\u7eaf\u503c\u3002\u53e6\u4e00\u79cd\u65b9\u5f0f\u53ef\u80fd\u662f\u4f7f\u7528\u60a8\u7684\u94b1\u5305\u6765\u8ddf\u8e2a\u51fd\u6570\u8c03\u7528\u5e76\u8ba1\u7b97\u8be5\u9b54\u6cd5\u5bf9\u4e8e\u8be5\u94b1\u5305\u7684\u8f93\u51fa\u3002 \n \n \u8fd9\u4e9b\u6d4b\u8bd5\u4e0d\u9700\u8981\u7279\u522b\u5168\u9762\u3002 \u5c06\u6765\u6bcf\u5f53\u6709\u4eba\u5bf9\u8be5\u6a21\u578b\u8fdb\u884c\u5b9e\u8d28\u6027\u66f4\u6539\u65f6\uff0c\u90fd\u5e94\u8be5\u6dfb\u52a0\u6d4b\u8bd5\u3002 \u8fd9\u91cc\u7684\u4e3b\u8981\u76ee\u6807\u662f\u4f18\u5148\u786e\u4fdd\u60a8\u7684\u6a21\u578b\u80fd\u6b63\u786e\u8fd0\u884c\u5e76\u9632\u6b62\u5c06\u6765\u51fa\u73b0\u56de\u9000\u3002 \n \u6d4b\u8bd5\u5e94\u8be5\u8fd4\u56de\u96f6\u884c\u624d\u80fd\u901a\u8fc7\u3002 \u60a8\u53ef\u4ee5\u53d1\u6325\u521b\u9020\u529b\uff0c\u6ca1\u6709\u56fa\u5b9a\u7684\u65b9\u6cd5\u6765\u7f16\u5199\u6d4b\u8bd5\u3002 \u9488\u5bf9\u5355\u4e2a\u503c\u7f16\u5199\u6d4b\u8bd5\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 case when \u8bed\u53e5\u6765\u6bd4\u8f83\u503c\u3002 \u6211\u4eec\u5728\u4e0e\u6a21\u578b\u8fdb\u884c\u6bd4\u8f83\u503c\u4e2d\u53ef\u4ee5\u8fdb\u884c\u4e00\u4e9b\u786c\u7f16\u7801\u3002 \n \u201cref\u201d\u680f\u91cc\u9700\u8981\u662f\u60a8\u7f16\u5199\u9b54\u6cd5\u7684\u6587\u4ef6\u540d\uff0c\u4f8b\u5982 {{ ref('balances_ethereum_erc20_day' )}} \u3002\u6211\u4eec\u53ef\u4ee5\u7528 ref \u5728 DBT \u9879\u76ee\u4e2d\u5f15\u7528\u5176\u4ed6\u9b54\u6cd5\u6216\u6a21\u578b\u3002 \n \u5728\u7f16\u5199\u6d4b\u8bd5\u65f6\u60a8\u4e0d\u9700\u8981\u5148\u7f16\u5199\u6a21\u578b\uff0c\u53ea\u9700\u786e\u5b9a\u6587\u4ef6\u540d\u5373\u53ef\u3002 \u60a8\u5c06\u5728\u5b8c\u6210\u9b54\u6cd5\u540e\u8fdb\u884c\u6d4b\u8bd5\u3002 \u9664\u975e\u60a8\u60f3\u7acb\u5373\u5c1d\u8bd5\u8fd0\u884c\u6d4b\u8bd5\u4ee5\u786e\u8ba4\u5b83\u4f1a\u5931\u8d25\ud83d\ude09\u3002 \n  (#__codelineno-0-1) WITH   unit_test1 \n  (#__codelineno-0-2)      AS   ( SELECT   CASE \n  (#__codelineno-0-3)                   WHEN   amount   ==   100   THEN   TRUE \n  (#__codelineno-0-4)                   ELSE   FALSE \n  (#__codelineno-0-5)                 END   AS   test \n  (#__codelineno-0-6)          FROM     {{   ref ( 'balances_ethereum_erc20_day'   ) }} \n  (#__codelineno-0-7)          WHERE    wallet_address   =   '0x8de61aeacd24d2865a4fb471b8e746b02ef4e346' \n  (#__codelineno-0-8)                 AND   contract_address   = \n  (#__codelineno-0-9)                     '0x00000000000045166c45af0fc6e4cf31d9e14b9a' \n  (#__codelineno-0-10)                 AND   DATE   =   '2022-06-27 00:00' ), \n  (#__codelineno-0-11)      unit_test2 \n  (#__codelineno-0-12)      AS   ( SELECT   CASE \n  (#__codelineno-0-13)                   WHEN   token   ==   'ONT' \n  (#__codelineno-0-14)                        AND   amount   ==   7   THEN   TRUE \n  (#__codelineno-0-15)                   ELSE   FALSE \n  (#__codelineno-0-16)                 END   AS   test \n  (#__codelineno-0-17)          FROM     {{   ref ( 'balances_ethereum_erc20_day'   ) }} \n  (#__codelineno-0-18)          WHERE    wallet_address   =   '0x01bcb7117f00c4d3141ccab2432c7ae3bd5b00d3' \n  (#__codelineno-0-19)                 AND   contract_address   = \n  (#__codelineno-0-20)                     '0x0000000000004946c0e9f43f4dee607b0ef1fa1c' \n  (#__codelineno-0-21)                 AND   DATE   =   '2022-06-27 00:00' ) \n  (#__codelineno-0-22) SELECT   * \n  (#__codelineno-0-23) FROM     ( SELECT   * \n  (#__codelineno-0-24)         FROM     unit_test1 \n  (#__codelineno-0-25)         UNION \n  (#__codelineno-0-26)         SELECT   * \n  (#__codelineno-0-27)         FROM     unit_test2 ) \n  (#__codelineno-0-28) WHERE    test   =   FALSE", "url": "https://dune.com/docs/zh/spellbook/getting-started/tests/"}
{"content": "\u914d\u7f6e Spellbook dbt \u00b6 \n \u6709\u4e86 Spellbook \u5206\u652f\u7684\u672c\u5730\u526f\u672c\u540e\uff0c\u5c31\u53ef\u4ee5\u8bbe\u7f6e Spellbook dbt \u4e86\uff01 \n \u5982\u679c\u5c1a\u672a\u5b89\u88c5\uff0c\u8bf7\u5728 VSCode \u4e2d\u6253\u5f00 Spellbook \u5206\u652f\u7684\u672c\u5730\u526f\u672c\uff0c\u7136\u540e\u6253\u5f00\u7ec8\u7aef\u5e76\u8f93\u5165  pipenv install \u3002 \n \u8fd9\u5c06\u5b89\u88c5\u5728\u60a8\u7684\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c Spellbook \u6240\u9700\u7684\u8f6f\u4ef6\u5305\u3002 \n \u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u8fd0\u884c  pipenv shell  \u4ee5\u6fc0\u6d3b\u60a8\u7684\u865a\u62df\u73af\u5883\u3002 \n \u7136\u540e\u8fd0\u884c  dbt init  \u6765\u521d\u59cb\u5316dbt\u3002 \n \u5728\u968f\u540e\u7684\u6bcf\u4e2a\u63d0\u793a\u4e2d\u8f93\u5165\u8fd9\u4e9b\u503c\uff1a \n  (#__codelineno-0-1) 1. Enter a number: 2 [choose databricks]\n  (#__codelineno-0-2) 2. host (yourorg.databricks.com): . [enter \u201c.\u201d]\n  (#__codelineno-0-3) 3. http_path (HTTP Path): .\n  (#__codelineno-0-4) 4. token (dapiXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX): [just hit enter at first]\n  (#__codelineno-0-5)     1. [1] use Unity Catalog\n  (#__codelineno-0-6)     2. [2] not use Unity Catalog\n  (#__codelineno-0-7) 5. Desired unity catalog option (enter a number): 2\n  (#__codelineno-0-8) 6. schema (default schema that dbt will build objects in): wizard\n  (#__codelineno-0-9) 7. threads (1 or more) [1]: 2\n \n \u4e0d\u8981\u8fd0\u884c  dbt debug \uff0c\u56e0\u4e3a\u60a8\u6ca1\u6709\uff08\u6216\u4e0d\u9700\u8981\uff09\u6240\u9700\u7684\u51ed\u636e\uff0c\u8fd0\u884c\u5c06\u4f1a\u5931\u8d25\u3002 \n \u4fdd\u5b58\u6b64\u914d\u7f6e\u540e\uff0c\u8fd0\u884c  dbt deps  \u4ee5\u5b89\u88c5\u4f9d\u8d56\u9879\u3002 \n \u8fd9\u4e2a\u8fc7\u7a0b\u5927\u81f4\u662f\u8fd9\u6837\u7684\uff1a \n \n \u6700\u540e\uff0c\u8fd0\u884c  dbt compile . \n \u5982\u679c\u8fd0\u884c\u6b63\u786e\uff0c\u60a8\u7684\u7ec8\u7aef\u5e94\u8be5\u4ee5\u201cdone\u201d\u7ed3\u675f\uff0c\u60a8\u5e94\u8be5\u5728\u4fa7\u8fb9\u680f\u4e2d\u770b\u5230\u201dtarget\u201c\u6587\u4ef6\u5939\u3002 \n \n \u7136\u540e\uff0c\u8fd0\u884c  git checkout -b workshop  \u521b\u5efa\u4e00\u4e2a\u540d\u4e3a\u201cworkshop\u201d\u7684\u65b0\u672c\u5730\u5b58\u50a8\u5206\u652f\uff0c\u7528\u4e8e\u6267\u884c\u672c\u6307\u5357\u4e2d\u7684\u7ec3\u4e60\u5de5\u4f5c\u3002 \n \u6700\u540e\uff0c\u8fd0\u884c  git push -u origin workshop  \u5c06\u60a8\u7684\u672c\u5730\u201cworkshop\u201d\u5206\u652f\u6dfb\u52a0\u6216\u201c\u63a8\u9001\u201d\u5230\u60a8\u7684\u8fdc\u7a0b GitHub \u5b58\u50a8\u5e93\uff0c\u4ee5\u4fbf\u6211\u4eec\u6700\u7ec8\u53ef\u4ee5\u53d1\u51fa\u6211\u4eec\u7684\u9b54\u6cd5\u4e66\u5408\u5e76\u8bf7\u6c42\u3002", "url": "https://dune.com/docs/zh/spellbook/how-to-cast-a-spell/1-do-some-prerequisites%20and-set-up-Spellbook-dbt/#spellbook-dbt"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/spellbook/getting-started/data-sources.md) \n \u6570\u636e\u6e90 \n \u5728\u9b54\u6cd5\u4e66\u4e2d\uff0c\u6570\u636e\u6e90\uff08\u5373\u6784\u5efa\u9b54\u6cd5\u6240\u4f9d\u8d56\u7684\u539f\u59cb\u6570\u636e\u8868\u548c\u89e3\u7801\u6570\u636e\u8868\uff09\u5fc5\u987b\u5728 YAML \u6587\u4ef6\u4e2d\u5b9a\u4e49\u3002 \u4e00\u4e2a\u6570\u636e\u6e90\u5728\u9b54\u6cd5\u4e66\u4e2d\u53ea\u9700\u5b9a\u4e49\u4e00\u6b21\u3002 \n \u4ec5\u9700\u6dfb\u52a0\u5176\u6a21\u5f0f\u548c\u540d\u79f0\u5c31\u53ef\u4ee5\u7b80\u5355\u5730\u5b9a\u4e49\u6570\u636e\u6e90\u3002 \u4f46\u8981\u5145\u5206\u5229\u7528\u8be5\u5de5\u5177\u7684\u5168\u90e8\u529f\u80fd\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5b9a\u4e49\u6d4b\u8bd5\u3001\u6570\u636e\u66f4\u65b0\u5468\u671f\uff0c\u4ee5\u53ca\u5bf9\u6bcf\u4e00\u5217\u6dfb\u52a0\u63cf\u8ff0\u3002 \n \u4ee5\u4e0b\u662f\u4e00\u4e2a\u5b9a\u4e49\u6570\u636e\u6e90\u7684\u793a\u4f8b\uff0c\u6211\u4eec\u5148\u6dfb\u52a0\u8868\u540d\u548c\u8be5\u8868\u63cf\u8ff0\u3002 \n  (#__codelineno-0-1)   sources : \n  (#__codelineno-0-2)    -   name :   erc20_ethereum \n  (#__codelineno-0-3)      description :   \"Transfers   events   for   ERC20   tokens.\" \n  (#__codelineno-0-4)      tables : \n  (#__codelineno-0-5)        -   name :   evt_transfer \n \n \u7136\u540e\u6211\u4eec\u6dfb\u52a0\u66f4\u65b0\u68c0\u67e5\u3002 \u66f4\u65b0\u68c0\u67e5\u4f7f\u7528\u65f6\u95f4\u6233\u7c7b\u578b\u5b57\u6bb5\u6765\u9a8c\u8bc1\u6700\u540e\u51e0\u884c\u6570\u636e\u7684\u52a0\u8f7d\u65f6\u95f4\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u4f7f\u7528  evt_block_time  \u5e76\u4f7f\u7528 DBT \u9ed8\u8ba4\u7684\u8b66\u544a\u548c\u9519\u8bef\u68c0\u67e5\u3002 \n  (#__codelineno-1-1) sources : \n  (#__codelineno-1-2)    -   name :   erc20_ethereum \n  (#__codelineno-1-3)      description :   \"Transfers   events   for   ERC20   tokens.\" \n  (#__codelineno-1-4)      tables : \n  (#__codelineno-1-5)        -   name :   evt_transfer \n  (#__codelineno-1-6)          loaded_at_field :   evt_block_time \n  (#__codelineno-1-7)          description :   \"Transfers   events   for   ERC20   tokens.\" \n  (#__codelineno-1-8)          freshness : \n  (#__codelineno-1-9)            warn_after :   {  count :   12 ,  period :   hour   } \n  (#__codelineno-1-10)            error_after :   {  count :   24 ,  period :   hour   } \n \n \u63a5\u7740\u6dfb\u52a0\u5217\u63cf\u8ff0\u548c\u6d4b\u8bd5\u3002 \u901a\u5e38\u60a8\u9700\u8981\u4f7f\u4e3b\u952e\u503c\u65e2\u552f\u4e00\u53c8\u975e\u7a7a\u3002 \n \u60a8\u53ef\u4ee5\u5728\u5217\u540d\u4e4b\u524d\u4f7f\u7528\u7b26\u53f7 & \uff0c\u4ee5\u4fbf\u7a0d\u540e\u5728\u540c\u4e00 YAML \u6587\u4ef6\u4e2d\u91cd\u7528\u5176\u63cf\u8ff0\u3002 \n * \u5217\u540d\u5c06\u91cd\u7528\u4e4b\u524d\u5b9a\u4e49\u7684\u5217\u63cf\u8ff0\u3002 \n  (#__codelineno-2-1) sources : \n  (#__codelineno-2-2)    -   name :   erc20_ethereum \n  (#__codelineno-2-3)      description :   \"Transfers   events   for   ERC20   tokens.\" \n  (#__codelineno-2-4)      tables : \n  (#__codelineno-2-5)        -   name :   evt_transfer \n  (#__codelineno-2-6)          loaded_at_field :   evt_block_time \n  (#__codelineno-2-7)          description :   \"Transfers   events   for   ERC20   tokens.\" \n  (#__codelineno-2-8)          freshness : \n  (#__codelineno-2-9)            warn_after :   {  count :   12 ,  period :   hour   } \n  (#__codelineno-2-10)            error_after :   {  count :   24 ,  period :   hour   } \n  (#__codelineno-2-11)          columns : \n  (#__codelineno-2-12)          -   name :   contract_address \n  (#__codelineno-2-13)            description :   \"ERC20   token   contract   address\"         \n  (#__codelineno-2-14)          -   &evt_tx_hash \n  (#__codelineno-2-15)            name :   evt_tx_hash \n  (#__codelineno-2-16)            description :   \"Transaction   hash   of   the   event\" \n  (#__codelineno-2-17)          -   &evt_index \n  (#__codelineno-2-18)            name :   evt_index \n  (#__codelineno-2-19)            description :   \"Event   index\"     \n  (#__codelineno-2-20)          -   &evt_block_time \n  (#__codelineno-2-21)            name :   evt_block_time \n  (#__codelineno-2-22)            description :   \"Timestamp   for   block   event   time   in   UTC\" \n  (#__codelineno-2-23)          -   &evt_block_number \n  (#__codelineno-2-24)            name :   evt_block_number \n  (#__codelineno-2-25)            description :   \"Event   block   number\"    \n  (#__codelineno-2-26)          -   *from \n  (#__codelineno-2-27)          -   *to \n  (#__codelineno-2-28)          -   name :   value \n  (#__codelineno-2-29)            description :   \"Amount   of   ERC20   token   transferred\"   \n \n \u8fd9\u4e9b\u63cf\u8ff0\u5c06\u88ab dbt \u6e32\u67d3\u751f\u6210\u6587\u6863\u3002 \u60a8\u53ef\u4ee5\u5728\u672c\u5730\u901a\u8fc7 Spellbook \u76ee\u5f55\u4e2d\u7684 CLI \u4e2d\u8fd0\u884c  dbt docs generate  \u548c  dbt docs serve  \u6765\u6253\u5f00\u5b83\u4eec\u3002 \u6211\u4eec\u7684  \u9b54\u6cd5\u4e66\u6587\u6863  (https://spellbook-docs.dune.com/#!/overview) \u5c31\u662f\u7531\u6b64\u81ea\u52a8\u53d1\u5e03\u7684\u3002", "url": "https://dune.com/docs/zh/spellbook/getting-started/data-sources/"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/spellbook/getting-started/data-modelling.md) \n \u6570\u636e\u5efa\u6a21 \n \u8fd9\u662f\u6784\u5efa\u9b54\u6cd5\u4e2d\u6700\u91cd\u8981\u7684\u4e00\u6b65\u3002 \n \u4e00\u4e2a\u9b54\u6cd5\u53ef\u4ee5\u8ba9\u60a8\u548c\u5176\u4ed6\u7528\u6237\u66f4\u4fbf\u6377\u5730\u5b8c\u6210\u6570\u636e\u5206\u6790\uff0c\u5b83\u53ef\u4ee5\u662f\u4e00\u5f20\u8868\uff0c\u66f4\u7406\u60f3\u7684\u8bdd\u53ef\u4ee5\u662f\u4e00\u4e2a\u6570\u636e\u89c6\u56fe\u3002 \n \u6784\u5efa\u9b54\u6cd5\u6709\u8bf8\u591a\u597d\u5904\uff1a \n \n \n \u4e00\u81f4\u6027\u548c\u53ef\u7ef4\u62a4\u6027\u3002  \u5bf9\u4e8e\u4e34\u65f6\u7684\u6570\u636e\u5206\u6790\u6765\u8bf4\uff0c\u590d\u5236\u5176\u4ed6\u73b0\u6709\u7684\u67e5\u8be2\u5e76\u91cd\u65b0\u7f16\u5408\u662f\u5f88\u6709\u6548\u7684\u505a\u6cd5\uff0c\u4f46\u5e76\u975e\u662f\u4e00\u4e2a\u957f\u4e45\u4e4b\u8ba1\u3002\u60f3\u8c61\u4e00\u4e0b\uff0c\u5982\u679c\u60a8\u5728\u60a8\u7684\u67e5\u8be2\u4e2d\u53d1\u73b0\u4e86\u4e00\u4e2a\u9519\u8bef\uff0c\u6216\u8005\u5728\u667a\u80fd\u5408\u7ea6\u4e0a\u53d1\u73b0\u4e86\u4e00\u4e9b\u65b0\u53d8\u5316\u3002 \u60a8\u53ef\u4ee5\u66f4\u65b0_\u60a8\u81ea\u5df1\u7684_\u67e5\u8be2\uff0c\u4f46\u6bcf\u4e2a\u5206\u53c9\u6216\u590d\u5236\u8be5\u67e5\u8be2\u7684\u7528\u6237\u90fd\u4e0d\u4f1a\u83b7\u5f97\u66f4\u65b0\u3002 \n \n \n \u63d0\u9ad8\u4e86\u6307\u6807\u7684\u6e05\u6670\u5ea6\u3002  \u6bcf\u4e2a\u6307\u6807\u901a\u5e38\u90fd\u6709\u597d\u51e0\u79cd\u65b9\u5f0f\u53ef\u4ee5\u8ba1\u7b97\u3002 \u5982\u679c\u6bcf\u4e2a\u4eba\u90fd\u7528\u81ea\u5df1\u7684\u65b9\u6848\u53bb\u8ba1\u7b97\u4e00\u4e2a\u6307\u6807\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6307\u6807\u5c31\u5f88\u96be\u88ab\u7edf\u4e00\u7684\u5b9a\u4e49\u548c\u63a5\u53d7\uff0c\u540c\u65f6\u8fd9\u4e48\u505a\u4e5f\u6d88\u8017\u4e86\u5927\u5bb6\u8bb8\u591a\u65f6\u95f4\u53bb\u5b8c\u6210\u91cd\u590d\u7684\u5de5\u4f5c\u3002\u800c\u9b54\u6cd5\u662f\u5728\u516c\u5171 GitHub \u5b58\u50a8\u5e93\u4e0a\u4ee5\u5b8c\u5168\u900f\u660e\u7684\u65b9\u5f0f\u6784\u5efa\uff0c\u8fd9\u610f\u5473\u7740\u793e\u533a\u53ef\u4ee5\u5c31\u6307\u6807\u5b9a\u4e49\u53ca\u5b9e\u73b0\u8fbe\u6210\u4e00\u81f4\u3002 \n \n \n \u7b80\u6d01\u6027\u4ee5\u53ca\u66f4\u597d\u7684\u5f00\u53d1\u4f53\u9a8c  \u8c01\u4f1a\u60f3\u4e00\u904d\u53c8\u4e00\u904d\u5730\u7f16\u5199\u91cd\u590d\u7684\u67e5\u8be2\uff1f\u628a\u65e0\u8da3\u7684\u91cd\u590d\u5de5\u4f5c\u8fdb\u884c\u81ea\u52a8\u5316\u53ef\u4ee5\u8ba9\u5f00\u53d1\u8005\u66f4\u4e13\u6ce8\u4e8e\u6570\u636e\u5206\u6790\u4e2d\u7684\u5173\u952e\u90e8\u5206\u3002 DRY \u5f00\u53d1\u65b9\u5f0f  (https://www.softwareyoga.com/is-your-code-dry-or-wet) \u4e5f\u53ef\u4ee5\u50cf\u9002\u7528\u4e8e\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u4e00\u6837\u9002\u7528\u4e8e SQL \u7f16\u5199\u3002 \n \n \n \u8fd9\u4e9b\u8ff9\u8c61\u8868\u660e\u662f\u65f6\u5019\u8be5\u65bd\u5c55\uff08\u6784\u5efa\uff09\u9b54\u6cd5\u4e86: \n \n \u5f53\u60a8\u6709\u591a\u4e2a\u67e5\u8be2\u5305\u542b\u76f8\u540c\u7684\u5b50\u67e5\u8be2\u65f6\u3002 \n \u60a8\u5728\u591a\u4e2a\u67e5\u8be2\u4e2d\u590d\u7528\u975e\u5e38\u957f\u7684\u9759\u6001\u503c\u5217\u8868\u3002 \n \u8be5\u67e5\u8be2\u5df2\u88ab\u5206\u53c9\u548c\u590d\u5236\u4e86\u8bb8\u591a\u6b21\u3002 \n \u60a8\u7684\u67e5\u8be2\u4e2d\u5305\u542b\u5341\u5206\u590d\u6742\u7684\u8fd0\u7b97\u903b\u8f91\uff0c\u5728\u5176\u4ed6\u5730\u65b9\u80fd\u88ab\u6709\u6548\u590d\u7528\u3002", "url": "https://dune.com/docs/zh/spellbook/getting-started/data-modelling/"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/reference/events.md) \n \u6d3b\u52a8 \n Dune\u65e8\u5728\u5173\u6ce8\u793e\u533a\u5e76\u4f1a\u6709\u793e\u533a\u805a\u96c6\u6d3b\u52a8\u3002 \n \u968f\u65f6\u5728\u6211\u4eec\u7684  Community Discord  (https://discord.gg/BJBHFR6sdy)  \u4e2d\u95f2\u901b\uff0c\u4e86\u89e3\u60a8\u7684\u5deb\u5e08\u4f19\u4f34 \ud83e\uddd9\uff08\u5e76\u5411\u4ed6\u4eec\u5b66\u4e60\uff09\u3002  \n \u60f3\u5173\u6ce8\u6211\u4eec\u7684\u76f4\u64ad\uff08\u6d41\u5a92\u4f53\u548c IRL \u6d3b\u52a8\uff09\uff0c\u8bf7\u67e5\u770b\u6211\u4eec\u7684\u6d3b\u52a8\u8c37\u6b4c\u65e5\u5386 @  events.dune.com  (https://events.dune.com) \u3002 \n \u4ee5\u4e0b\u662f\u8ba2\u9605\u8be5\u65e5\u5386\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u60a8\u65e5\u5386\u7684\u65b9\u6cd5\uff1a", "url": "https://dune.com/docs/zh/reference/events/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#the-problem-wizards-projects) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/dune-bounties.md) \n Dune \u8d4f\u91d1\u8ba1\u5212 \n How many Holders does BAYC have? \n Wanna do some whale watching? \n How is the UST depeg going? \n How many users are using Uniswap V3 in a day? \n Over the past 3 years, Dune has become the go-to solution for answering questions like these via on-demand crypto analytics.  \n When it comes to blockchain data analysis, Dune has it all and can do it all, but there's always a frontier left unexplored. \n While Dune has created the tools to make \u2728 from the \ud83c\udf00 of crypto data, it's through the skills and bravery of our community of Wizards that data is surfaced and made understandable for projects and the public alike. \n Many of the Dashboards and Queries you see on Dune today were made out of sheer curiosity and enjoyment. \n Some were done for clout and stars. \n But there's nothing like cold, hard, cash to make sure top tier Wizards come to your aid. \n \n ", "url": "https://dune.com/docs/zh/reference/dune-bounties/"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/reference/wizard-tools/utility-queries.md) \n \u5b9e\u7528\u67e5\u8be2 \n Here you'll find a list of Queries that help you build Queries. \ud83e\ude84 \n Have a Query you think we should include?  Propose your changes here  (https://github.com/duneanalytics/docs/edit/master/docs/getting-started/utility-queries.md) ! \n \n \n \n Name/Link \n Tag \n \n \n \n \n Is my Contract decoded yet  (https://dune.com/0xBoxer/Is-my-Contract-decoded-yet)  by  @0xBoxer  (https://dune.com/0xBoxer) \n decoding \n \n \n Is my Contract decoded yet (Polygon Version)  (https://dune.com/0xBoxer/Is-my-Contract-decoded-yet-(Polygon-Version))  by  @0xBoxer  (https://dune.com/0xBoxer) \n decoding \n \n \n Is my Contract decoded yet (xDAI Version)  (https://dune.com/0xBoxer/Is-my-Contract-decoded-yet-(xDai-Version))  by  @0xBoxer  (https://dune.com/0xBoxer) \n decoding \n \n \n Is my Contract decoded yet (BSC Version)  (https://dune.com/chenxiangli/Is-my-Contract-decoded-yet-(BSC-Version))  by  @chenxiangli  (https://dune.com/chenxiangli) \n decoding \n \n \n Getting most common event signatures for a contract  (https://dune.com/queries/236184)  by  @ilemi  (https://dune.com/ilemi) \n query starting point \n \n \n Getting most common functions called by signers for a contract  (https://dune.com/queries/236194)  by  @ilemi  (https://dune.com/ilemi) \n query starting point \n \n \n Getting most common functions called in traces for a contract  (https://dune.com/queries/278361)  by  @ilemi  (https://dune.com/ilemi) \n query starting point \n \n \n Getting all NFTs held by an address (ERC721 + ERC1155)  (https://dune.com/queries/225147/422359)  by  @ilemi  (https://dune.com/ilemi) \n NFT \n \n \n Getting the address from ENS  (https://dune.com/queries/230953)  by  @hildobby  (https://dune.com/hildobby) \n parameters", "url": "https://dune.com/docs/zh/reference/wizard-tools/utility-queries/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/wizard-tools/helpful-dashboards.md) \n \u6709\u7528\u7684\u6570\u636e\u770b\u677f \n \u4e00\u4e9b\u6cd5\u529b\u65e0\u8fb9\u7684\u5deb\u5e08\u628a\u4e00\u4e9b\u6570\u636e\u770b\u677f\u653e\u5728\u4e00\u8d77\uff0c\u5bf9\u90a3\u4e9b\u60f3\u6210\u4e3a\u5deb\u5e08\u5927\u5e08\u7684\u4eba\u4e5f\u8d85\u7ea7\u6709\u5e2e\u52a9\u3002\ud83e\uddd9 \n \u5982\u679c\u60a8\u53d1\u73b0\uff08\u6216\u5236\u4f5c\uff09\u5176\u4ed6\u7c7b\u4f3c\u7684\u770b\u677f\uff0c \u8bf7\u63d0\u4ea4 GitHub Pull Request  (https://github.com/duneanalytics/docs/edit/master/docs/%E5%85%A5%E9%97%A8/helpful-dashboards.md) \uff0c\u5982\u679c\u6211\u4eec\u8ba4\u4e3a\u5b83\u662f\u6709\u5e2e\u52a9\u7684\uff0c\u6211\u4eec\u5c06\u628a\u5b83\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\uff01 \n ", "url": "https://dune.com/docs/zh/reference/wizard-tools/helpful-dashboards/"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/reference/wizard-tools/blockchain-explorers.md) \n \u533a\u5757\u94fe\u6d4f\u89c8\u5668 \n Here you'll find the primary web-based explorers for the most popular blockchains. \n While they won't let you do half of the cool things Dune does, they're indispensible for figuring out how certain protocols work and what data you need to include in your queries: \n \n Ethereum -  Etherscan  (https://etherscan.io/) \n Solana -  Solscan  (https://solscan.io/) \n Arbitrum -  Arbiscan  (https://arbiscan.io/) \n Polygon -  Polygonscan  (https://polygonscan.com/) \n Optimism -  Optimistic.Etherscan  (https://optimistic.etherscan.io/) \n Avalanche C-Chain -  Snowtrace  (https://snowtrace.io/) \n Binance Smart Chain -  BscScan  (https://bscscan.com/) \n Gnosis Chain -  Gnosisscan  (https://gnosisscan.io)", "url": "https://dune.com/docs/zh/reference/wizard-tools/blockchain-explorers/"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/reference/wizard-tools/index.md) \n \u5deb\u5e08\u5de5\u5177 \n \u8fd9\u91cc\u6709\u4e00\u4e9b\u5f88\u68d2\u7684 \u975e-Dune \u5de5\u5177\u5e2e\u52a9\u6211\u4eec\u5deb\u5e08\u521b\u4f5c \ud83c\udf87\u3002 \n \n OpenZepplin's ERC-xxx Standards Docs  (https://docs.openzeppelin.com/contracts/4.x/tokens)  \u6709\u52a9\u4e8e\u4e86\u89e3\u6bcf\u4e2a ERC-xxx \u6807\u51c6\u7684\u5de5\u4f5c\u539f\u7406\u3002 \n The EVM Handbook  (https://noxx3xxon.notion.site/noxx3xxon/The-EVM-Handbook-bb38e175cc404111a391907c4975426d)  \u662f\u4e00\u4e2a\u5bf9\u6709\u62b1\u8d1f\u7684\u533a\u5757\u94fe\u6570\u636e\u5206\u6790\u5e08\u7684 EVM \u8d44\u6e90\u7cbe\u9009\u5217\u8868\u3002 \n Solidity Visual Developer for VS Code  (https://marketplace.visualstudio.com/items?itemName=tintinweb.solidity-visual-auditor)  \u662f\u4e00\u5957\u6709\u7528\u7684\u5de5\u5177\uff0c\u7528\u4e8e\u5728 VS Code \u4e2d\u8fdb\u884c\u667a\u80fd\u5408\u7ea6\u5ba1\u8ba1\u3002 \n deth.net  (https://deth.net)  \u662f\u4e00\u7ec4\u4ee5\u592a\u574a\u5f00\u53d1\u8005\u5de5\u5177\uff0c\u53ef\u5e2e\u52a9\u8fdb\u884c\u533a\u5757\u94fe\u6570\u636e\u4fa6\u67e5\u3002 \n ZK Zhao's map of the Crypto Data Landscape  (https://twitter.com/zk7hao/status/1576492616715116547)  \u6709\u52a9\u4e8e\u4e86\u89e3\u5f53\u524d\u7684\u52a0\u5bc6\u6570\u636e\u751f\u6001\u7cfb\u7edf\u3002 \n His Chaininsight tool  (https://twitter.com/zk7hao/status/1361948073300164609?cxt=HHwWgoCs-dCjzuYlAAAA)  \u4e5f\u5f88\u9177\uff0c\u53ef\u4ee5\u5e2e\u52a9\u60a8\u5728\u5176\u4ed6\u4eba\u4e4b\u524d\u6784\u5efa\u4e0b\u4e00\u4e2a\u8d8b\u52bf\u770b\u677f \ud83e\uddd9 \n Our Recommended Reading List  (../recommended-reading/)  for a bunch of guides on crypto data topics and projects to check out. \n DeepDAO  (https://deepdao.io/organizations)  - stats on DAOs and their treasuries. \n DethCode  (https://etherscan.deth.net)  lets you go into an Ethereum smart contract's code to read the comments or the actual logic can help to understand the smart contract's emitted data.", "url": "https://dune.com/docs/zh/reference/wizard-tools/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#dune) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/faq/how-does-dune-get-its-data.md) \n ", "url": "https://dune.com/docs/zh/reference/faq/how-does-dune-get-its-data/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/faq/how-are-results-refreshing.md) \n ", "url": "https://dune.com/docs/zh/reference/faq/how-are-results-refreshing/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#dune-api) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/faq/does-dune-have-an-api.md) \n ", "url": "https://dune.com/docs/zh/reference/faq/does-dune-have-an-api/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#dune) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/faq/does-dune-have-a-token.md) \n ", "url": "https://dune.com/docs/zh/reference/faq/does-dune-have-a-token/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#blockchain-icons) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/explorer-labels.md) \n Data Explorer Labels \n While using the  Data Explorer  (../../getting-started/queries/data-explorer/)  (and in reading these docs), you'll encounter a variety of labels. \n Here's what they all mean. \n ", "url": "https://dune.com/docs/zh/reference/explorer-labels/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/community/reservoir/tokens.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/community/reservoir/tokens/"}
{"content": "\u4ec0\u4e48\u662f\u9b54\u6cd5\u4e66\uff08Spellbook\uff09\uff1f \u00b6 \n \u9b54\u6cd5\u4e66\u662f\u4e00\u4e2a\u5f00\u6e90\u7684  dbt \u5b58\u50a8\u5e93  (https://docs.getdbt.com/docs/introduction) \uff0c\u7528\u4e8e\u4f7f\u7528 SQL \u548c  Jinja \u6a21\u677f  (https://realpython.com/primer-on-jinja-templating/)  \u521b\u5efa\u548c\u7ef4\u62a4\u9ad8\u7ea7\u533a\u5757\u94fe\u6570\u636e\u8868\u3002 \n \u5b83\u4f7f\u793e\u533a\u80fd\u591f\u5efa\u7acb\u4e00\u79cd\u6807\u51c6\u5316\u7684\u65b9\u5f0f\uff0c\u5c06\u6570\u636e\u8f6c\u6362\u4e3a\u6709\u610f\u4e49\u7684\u62bd\u8c61\u5c42\u3002 \n \u5bf9\u4e8e web3 \u6570\u636e\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u57fa\u7840\u5c42  \u539f\u59cb\u6570\u636e  (../../reference/tables/raw/)  - \u533a\u5757\u94fe\u4ea4\u6613\u3001\u5185\u90e8\u4ea4\u6613\u8868\u548c\u65e5\u5fd7\u8868\u3002 \n \u9b54\u6cd5\u4e66\u8ba9\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u62bd\u8c61\u7684\u6570\u636e\u96c6\uff0c\u4f8b\u5982  dex.trades  (https://dune.com/spellbook#!/model/model.spellbook.dex_trades)  \u548c  nft.trades  (https://dune.com/%20spellbook#!/model/model.spellbook.nft_trades) \uff0c\u5b83\u4eec\u805a\u5408\u548c\u7ec4\u7ec7\u4e86\u6765\u81ea\u591a\u4e2a\u6765\u6e90\u7684\u539f\u59cb\u6570\u636e\uff0c\u4f7f\u5176\u66f4\u5bb9\u6613\u67e5\u8be2\u3002 \n ", "url": "https://dune.com/docs/zh/spellbook/how-to-cast-a-spell/#spellbook"}
{"content": "\u4e3a\u4ec0\u4e48\u7528\u9b54\u6cd5\u4e66\uff1f \u00b6 \n \u4e3a\u4e86\u66f4\u597d\u5730\u7406\u89e3\u6211\u4eec\u4e3a\u4ec0\u4e48\u4f7f\u7528\u9b54\u6cd5\u4e66\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u770b\u5b83\u7684\u5b9e\u9645\u5e94\u7528\u3002 \n \u66fe\u51e0\u4f55\u65f6\uff0c\u52a0\u5bc6 Twitter \u56e0\u8c08\u8bba\u4e00\u4e2a\u540d\u4e3a Renga \u7684\u65b0 NFT \u9879\u76ee\u800c\u706b\u8d77\u6765\u3002 \n \u8fd9\u4e2a\u9879\u76ee\u662f\u5173\u4e8e\u4ec0\u4e48\u7684\uff1f\u4f5c\u4e3a\u6295\u8d44\u503c\u5f97\u8d2d\u4e70\u5b83\u5417\uff1f \n \u5982\u679c\u6211\u4eec\u60f3\u8fdb\u884c\u4e00\u4e9b\u94fe\u4e0a\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u8f6c\u5230 OpenSea \u5e76\u627e\u5230 Renga \u96c6\u5408\u5f00\u59cb\uff08 \u6b64\u5904  (https://opensea.io/collection/renga) \uff09\u3002 \n \n \u901a\u8fc7\u67e5\u770b\u6b64\u96c6\u5408\u4e2d\u7684\u9879\u76ee  (https://opensea.io/assets/ethereum/0x394e3d3044fc89fcdd966d3cb35ac0b32b0cda91/6294) \uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u5176 OpenSea URL \u4e2d\u83b7\u53d6\u96c6\u5408\u7684\u5408\u7ea6\u5730\u5740\u4ee5\u53ca\u552f\u4e00\u7f16\u53f7\u3002 \n \n \u6211\u4eec\u8fd8\u53ef\u4ee5\u5411\u4e0b\u6eda\u52a8\u5e76\u5355\u51fb\u4ea4\u6613\u4ee5  \u5728\u533a\u5757\u94fe\u6d4f\u89c8\u5668\u4e0a\u67e5\u770b  (https://etherscan.io/tx/0x96f158d75379057d95c1c562b9908603e543feee25a71ac420e21ecf0a0c643c)  \u5e76\u83b7\u53d6\u66f4\u591a\u6570\u636e\u3002\u4f8b\u5982\uff1a \n \n \u4ea4\u6613\u533a\u5757\u548c\u54c8\u5e0c \n \u8f6c\u8d26\u7684\u6536/\u53d1\u5730\u5740 \n \u8f6c\u79fb\u4e86\u591a\u5c11 ETH \n \n \u5728\u57fa\u7840\u5c42\u9762\uff0c\u533a\u5757\u94fe\u6570\u636e\u88ab\u6253\u5305\u6210\u5757\uff0c\u8fd9\u662f\u6211\u4eec\u5728 Dune \u4e2d\u79f0\u4e3a\u201c\u539f\u59cb\u6570\u636e\u201d\u7684\u4e00\u79cd\u5f62\u5f0f\u3002 \n \u56e0\u6b64\uff0c\u6839\u636e\u6211\u4eec\u7684\u7814\u7a76\uff0c\u6211\u4eec\u53ef\u4ee5\u6784\u5efa\u4e00\u4e2a\u67e5\u8be2\uff0c\u4ece\u53d1\u751f\u6b64\u4ea4\u6613\u7684\u533a\u5757\u4e2d\u63d0\u53d6\u6570\u636e\u3002 \n  (#__codelineno-0-1) SELECT   * \n  (#__codelineno-0-2) \n  (#__codelineno-0-3) FROM   ethereum . blocks \n  (#__codelineno-0-4) \n  (#__codelineno-0-5) WHERE   number   =   15661624   -- \u6211\u4eec\u5728 etherscan \u4e2d\u627e\u5230\u7684\u533a\u5757\u7f16\u53f7 \n \n \u8fd4\u56de\uff1a \n \n \u8fd9\u4e2a\u533a\u5757\u4e2d\u53d1\u751f\u4e86\u5f88\u591a\u4e8b\u60c5\uff0c\u6240\u4ee5\u8fd9\u4e0d\u662f\u5f88\u6709\u9488\u5bf9\u6027\u3002\u53e6\u5916\uff0c\u8fd9\u91cc\u7684\u6570\u636e\u4e5f\u4e0d\u662f\u5f88\u5bb9\u6613\u7406\u89e3\u3002 \n \u6211\u4eec\u8fd8\u53ef\u4ee5\u641c\u7d22\u6b64\u7279\u5b9a\u4ea4\u6613\u4ee5\u66f4\u63a5\u8fd1\u6211\u4eec\u7684\u76ee\u6807\uff1a \n  (#__codelineno-1-1) SELECT   * \n  (#__codelineno-1-2) \n  (#__codelineno-1-3) FROM   ethereum . transactions \n  (#__codelineno-1-4) \n  (#__codelineno-1-5) -- \u6211\u4eec\u5728 etherscan \u4e2d\u627e\u5230\u7684\u4ea4\u6613\u54c8\u5e0c\u503c \n  (#__codelineno-1-6) \n  (#__codelineno-1-7) WHERE   where   block_number   =   15661624   AND   hash   =   '0x96f158d75379057d95c1c562b9908603e543feee25a71ac420e21ecf0a0c643c' \n \n \u8fd9\u8ba9\u6211\u4eec\u5f97\u5230\uff1a \n \n \u8fd9\u91cc\u6709\u4e00\u4e9b\u66f4\u6709\u8da3\u7684\u4fe1\u606f\uff0c\u6bd4\u5982  gas_price  \u548c  gas_used \uff0c\u4f46\u6700\u6709\u8da3\u7684\u4e1c\u897f\u5728  data  \u5217\u4e2d\u3002\u4f46\u662f\uff0c\u4e3a\u4e86\u7406\u89e3\u8fd9\u4e9b\uff0c\u6211\u4eec\u9700\u8981\u5f15\u7528\u5408\u7ea6\u7684  \u5e94\u7528\u7a0b\u5e8f\u4e8c\u8fdb\u5236\u63a5\u53e3\uff08ABI\uff09  (https://www.quicknode%20.com/guides/smart-contract-development/what-is-an-abi) \u3002 \n \u503c\u5f97\u5e86\u5e78\u7684\u662f\uff0cDune \u6709 \u5df2\u89e3\u6790\u6570\u636e\u8868  (../../reference/tables/decoded/) \uff0c\u5176\u4e2d\u5305\u542b\u4f7f\u7528 ABI \u4ece\u4ea4\u6613\u7684\u539f\u59cb\u6570\u636e\u81ea\u52a8\u89e3\u6790\u7684\u5408\u7ea6\u6570\u636e\u2014\u2014\u673a\u5668\u4e3a\u6211\u4eec\u8282\u7701\u4e86\u65f6\u95f4\u3002 \n \u4f7f\u7528\u5df2\u89e3\u6790\u6570\u636e\u8868\uff0c\u6211\u4eec\u53ef\u4ee5\u50cf\u8fd9\u6837\u8fdb\u884c\u67e5\u8be2\uff1a \n  (#__codelineno-2-1) SELECT   * \n  (#__codelineno-2-2) \n  (#__codelineno-2-3)      ,   concat ( '0x' , substr ( get_json_object ( offer [ 0 ],   \"$.token\" ), 3 , 40 ))   as   token_contract_address \n  (#__codelineno-2-4) \n  (#__codelineno-2-5)      ,   get_json_object ( consideration [ 0 ],   \"$.identifier\" )   as   token_id \n  (#__codelineno-2-6) \n  (#__codelineno-2-7) FROM   seaport_ethereum . Seaport_evt_OrderFulfilled \n  (#__codelineno-2-8) \n  (#__codelineno-2-9) WHERE   evt_tx_hash   =   lower ( \"0x96f158d75379057d95c1c562b9908603e543feee25a71ac420e21ecf0a0c643c\" )   --sample tx \n \n \u6267\u884c\u67e5\u8be2\u4f1a\u8fd4\u56de\u8fd9\u6837\u7684\u6570\u636e\uff1a \n \n \u8fd9\u91cc\u53d1\u751f\u4e86\u4ec0\u4e48\u4e8b\uff1a \n \n \u6211\u4eec\u5728 Dune \u4e2d\u6316\u6398\u4ee5\u627e\u5230  seaport_ethereum  \u5408\u7ea6\u96c6\u548c\u5305\u542b\u6211\u4eec\u7279\u5b9a\u4ea4\u6613\u6570\u636e\u7684  Seaport_evt_OrderFulfilled  \u8868\u3002\uff08\u8fd9\u672c\u8eab\u5c31\u9700\u8981\u5f88\u591a\u65f6\u95f4\uff09\u3002 \n \u4e3a\u4e86\u66f4\u63a5\u8fd1\u6211\u4eec\u771f\u6b63\u60f3\u8981\u7684\u4e1c\u897f\uff0c\u4ee3\u5e01\u5408\u7ea6\u5730\u5740\u548c\u4ee3\u5e01\u7f16\u53f7\uff0c\u6211\u4eec\u5fc5\u987b\uff1a \n \u77e5\u9053\u5bfb\u627e\u62a5\u4ef7\u5217\u5e76\u83b7\u5f97\u8be5\u6570\u7ec4\u4e2d\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e \n \u8ba9\u5b83\u6210\u4e3a\u4e00\u4e2a JSON \u5bf9\u8c61\uff0c\u77e5\u9053\u4ee3\u5e01\u5408\u7ea6\u662f 20 \u4e2a\u5b57\u8282\uff0c\u8fd9\u610f\u5473\u7740 40 \u4e2a\u5b57\u7b26\u3002 \n \u5bf9\u4ee3\u5e01\u7f16\u53f7\u8fdb\u884c\u7c7b\u4f3c\u6570\u91cf\u7684\u624b\u52a8\u62bd\u8c61 \n \n \n \n \u7136\u800c\u73b0\u5728\u6211\u4eec\u4ecd\u7136\u6ca1\u6709\u5f97\u5230\u4e00\u4e9b\u6709\u8da3\u7684\u4e1c\u897f\uff0c\u6bd4\u5982\u8fd9\u4e2a NFT \u5356\u4e86\u591a\u5c11\u94b1\u3002 \n \u5982\u679c\u6211\u4eec\u60f3\u5230\u8fbe\u90a3\u91cc\uff0c\u5c31\u5fc5\u987b\u6709\u4eba\u505a\u8fd9\u4e2a\u62bd\u8c61\u5de5\u4f5c\u3002 \n \u4f46\u662f\uff0c\u5982\u679c\u4e00\u65e6\u8fd9\u9879\u5de5\u4f5c\u7b2c\u4e00\u6b21\u5b8c\u6210\uff0c\u793e\u533a\u7684\u5176\u4ed6\u4eba\u5c31\u53ef\u4ee5\u8df3\u8fc7\u6240\u6709\u7684\u566a\u97f3\u76f4\u63a5\u83b7\u5f97\u6709\u8da3\u7684\u89c1\u89e3\u5462\uff1f \n \u8fdb\u5165\u9b54\u6cd5\u4e66\u548c nft.trades \u9b54\u6cd5\u8868\u3002 \n ", "url": "https://dune.com/docs/zh/spellbook/how-to-cast-a-spell/#_1"}
{"content": "nft.trades \u00b6 \n \u4f7f\u7528  nft.trades  (https://dune.com/spellbook#!/model/model.spellbook.nft_trades)  \u9b54\u6cd5\u8868\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a \n  (#__codelineno-3-1) SELECT \n  (#__codelineno-3-2) \n  (#__codelineno-3-3)      seller \n  (#__codelineno-3-4) \n  (#__codelineno-3-5)      ,   buyer \n  (#__codelineno-3-6) \n  (#__codelineno-3-7)      ,   amount_original \n  (#__codelineno-3-8) \n  (#__codelineno-3-9)      ,   currency_symbol \n  (#__codelineno-3-10) \n  (#__codelineno-3-11)      ,   * \n  (#__codelineno-3-12) \n  (#__codelineno-3-13) FROM   nft . trades \n  (#__codelineno-3-14) \n  (#__codelineno-3-15) WHERE   tx_hash   =   lower ( \"0x96f158d75379057d95c1c562b9908603e543feee25a71ac420e21ecf0a0c643c\" )   --sample tx \n \n \u5b83\u5c06\u8fd4\u56de\uff1a \n \n \u73b0\u5728\uff0c\u901a\u8fc7\u51e0\u884c SQL\u5c31\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff1a \n \n \u4e70\u5356\u53cc\u65b9\u94b1\u5305\u5730\u5740 \n \u4ee5\u4f55\u79cd\u52a0\u5bc6\u8d27\u5e01\u652f\u4ed8\u7684\u5177\u4f53\u91d1\u989d \n \u5b83\u5728\u54ea\u4e2a\u533a\u5757\u94fe\u4e0a \n \n \u4ee5\u53ca\u66f4\u591a\uff01 \n \u8fd9\u8bf4\u660e\u5728\u5fae\u89c2\u5c42\u9762\u4e0a\uff0c\u5bf9\u4e8e\u4e00\u6b21\u4ea4\u6613\uff0c\u7531\u4e8e\u5148\u4e8e\u6211\u4eec\u7684\u5deb\u5e08\u5b8c\u6210\u7684\u9b54\u6cd5\u8868\uff0c\u6211\u4eec\u53ef\u4ee5\u8282\u7701\u5927\u91cf\u5de5\u4f5c\u3002 \n \u8fd9\u5f53\u7136\u4e5f\u9002\u7528\u4e8e\u5b8f\u89c2\u5c42\u9762\u3002 \n \u3001\u5982\u679c\u6211\u4eec\u60f3\u8fdb\u884c\u8de8\u94fe NFT \u5e02\u573a\u5206\u6790\uff0c\u6211\u4eec\u7684\u76ee\u6807\u53ef\u80fd\u662f\u6784\u5efa\u7c7b\u4f3c\u8fd9\u6837\u7684\u6570\u636e\u770b\u677f\uff1a \n \n \n Cross Chain NFT Marketplace Metrics by @agaperste  (https://dune.com/agaperste/cross-chain-nft-marketplace-metrics) \n \n \n \u901a\u8fc7 nft.trades \u9b54\u6cd5\u8868\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6574\u4e2a\u884c\u4e1a\u7684\u7edf\u8ba1\u6570\u636e\uff0c\u4f8b\u5982\uff1a \n \n \u6309\u4ea4\u6613\u6570\u91cf\u548c\u7f8e\u5143\u8ba1\u7b97\u7684\u603b\u4ea4\u6613\u91cf \n 24 \u5c0f\u65f6\u4ea4\u6613\u91cf \n 24\u5c0f\u65f6\u548c7\u5929\u7684\u589e\u957f\u91cf \n \u6309\u5e02\u573a\u5212\u5206\u7684\u5e02\u573a\u4efd\u989d \n \u6309\u5e02\u573a\u5212\u5206\u7684\u4ea4\u6613\u989d \n \u6309\u5e02\u573a\u5212\u5206\u7684\u4ea4\u6613\u6570\u91cf \n \n \u6211\u4eec\u53ef\u4ee5\u5728\u51e0\u4e2a\u5c0f\u65f6\u800c\u4e0d\u662f\u51e0\u5341\u4e2a\u5c0f\u65f6\u5185\u67e5\u8be2\u3001\u53ef\u89c6\u5316\u5e76\u5229\u7528\u8fd9\u4e9b\u6570\u636e\u5236\u4f5c\u6570\u636e\u770b\u677f\u3002 \n \u4e00\u65e6\u63a8\u51fa\u65b0\u7684 NFT \u5e02\u573a\uff0c\u793e\u533a\u4e2d\u4efb\u4f55\u77e5\u9053\u5982\u4f55\u521b\u5efa\u9b54\u6cd5\u8868\u7684\u4eba\u90fd\u53ef\u4ee5\u4e3a\u8be5\u5e02\u573a\u8fdb\u884c\u6570\u636e\u5de5\u7a0b\uff0c\u5411\u9b54\u6cd5\u4e66\u4ed3\u5e93\u63d0\u4ea4\u5408\u5e76\u8bf7\u6c42\uff0c\u5e76\u8ba9\u6574\u4e2a\u793e\u533a\u4ece\u4ed6\u4eec\u7684\u5de5\u4f5c\u4e2d\u53d7\u76ca\u3002 \n \u7531\u4e8e\u533a\u5757\u94fe\uff0c\u6211\u4eec\u5386\u53f2\u4e0a\u7b2c\u4e00\u6b21\u53ef\u4ee5\u8bbf\u95ee\u5f00\u653e\u6570\u636e\u96c6\u3002 \n \u591a\u4e8f\u4e86\u9b54\u6cd5\u4e66\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u5728\u5f00\u653e\u6570\u636e\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u6784\u5efa\uff0c\u4f7f\u5176\u66f4\u52a0\u900f\u660e\u3001\u53ef\u8bbf\u95ee\u548c\u6709\u610f\u4e49\uff01 \n ", "url": "https://dune.com/docs/zh/spellbook/how-to-cast-a-spell/#nfttrades"}
{"content": "\u516b\u6b65\u521b\u5efa\u9b54\u6cd5\u4e66 \u00b6 \n \u65e2\u7136\u60a8\u77e5\u9053\u662f\u4ec0\u4e48\u4ee5\u53ca\u4e3a\u4ec0\u4e48\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u505a\u3002 \n \u5728\u672c\u6307\u5357\u7ed3\u675f\u65f6\uff0c\u60a8\u5c06\u6210\u4e3a\u4e00\u540d\u5927\u5deb\u5e08\uff0c\u51c6\u5907\u597d\u4e3a web3 \u6570\u636e\u793e\u533a\u505a\u51fa\u5de8\u5927\u8d21\u732e\uff0c\u5e76\u80fd\u591f\u83b7\u5f97\u4e00\u4e9b\u4e30\u539a\u7684\u9b54\u6cd5\u4e66\u8d4f\u91d1\u3002 \n 8\u4e2a\u6b65\u9aa4\uff1a \n \n \n 1. \ud83d\udcbb \u51c6\u5907\u4e00\u4e9b\u5148\u51b3\u6761\u4ef6\u5e76\u4e14\u8bbe\u7f6e\u597d\u9b54\u6cd5\u4e66 dbt  (1-do-some-prerequisites%20and-set-up-Spellbook-dbt/) \n 2. \ud83e\udd14 \u51b3\u5b9a\u8981\u521b\u5efa\u4e3a\u9b54\u6cd5\u8868\u7684\u76ee\u6807  (2-decide-on-a-Spell-to-cast/) \n 3. \ud83d\udee3\ufe0f \u4e3a SQL\u3001\u6a21\u5f0f\u548c\u6e90\u6587\u4ef6\u8bbe\u7f6e\u6587\u4ef6\u7ed3\u6784  (3-set-up-your-file-structure-for-SQL-schema-and-source-files/) \n 4. \ud83d\udcd9 \u8bc6\u522b\u548c\u5b9a\u4e49\u4f9d\u8d56\u6e90  (4-identify-and-define-sources/) \n 5. \ud83e\uddea \u4f7f\u7528\u6a21\u5f0f\u548c\u6d4b\u8bd5\u5b9a\u4e49\u671f\u671b\u8f93\u51fa  (5-define-expectations-with-schema-and-tests/) \n 6. \ud83d\udd8b\ufe0f \u5c06\u60a8\u7684\u9b54\u6cd5\u8868\u5199\u6210 SELECT \u8bed\u53e5  (6-write-your-spell-as-SELECT-statement/) \n 7. \ud83c\udfa8 \u914d\u7f6e\u522b\u540d\u548c\u7269\u5316\u7b56\u7565  (7-configure-alias-and-materialization-strategy/) \n 8. \ud83c\udf08 \u63d0\u4ea4\u5408\u5e76\u8bf7\u6c42\uff0c\u5408\u5e76\uff0c\u6210\u4e3a\u5927\u5deb\u5e08 \ud83e\uddd9  (8-make-a-pull-request-get-merged-become-an-archwizard/) \n \n \n \u5982\u679c\u60a8\u66f4\u559c\u6b22\u89c2\u5bdf\uff0c\u8bf7\u67e5\u770b\u6b64\u5904\u7684\u7814\u8ba8\u4f1a\u89c6\u9891\uff1a", "url": "https://dune.com/docs/zh/spellbook/how-to-cast-a-spell/#_2"}
{"content": "\u5728\u9b54\u6cd5\u4e66\u9879\u76ee\u5206\u53c9\uff08fork\uff09\u4e0b, \u521b\u5efa\u4e00\u4e2a\u62c9\u53d6\u8bf7\u6c42\uff08Pull Request\uff09. \u00b6 \n \u5f53\u60a8\u7684\u9b54\u6cd5\u5145\u5206\u5b8c\u5584\u540e\uff0c\u60a8\u53ef\u4ee5\u5728\u9b54\u6cd5\u4e66\u9879\u76ee\u7684\u5206\u53c9\u4e0b\uff0c\u521b\u5efa\u4e00\u4e2a\u62c9\u53d6\u8bf7\u6c42\u3002 \n \u6b64\u6b65\u9aa4\u4e0d\u7279\u5b9a\u4e8e\u9b54\u6cd5\u4e66\u3002\u6240\u4ee5\u6211\u4eec\u8ba9 Jake Jarvis \u6765\u597d\u597d\u8bb2\u8bb2 \u5982\u4f55\u521b\u5efa\u62c9\u53d6\u8bf7\u6c42  (https://jarv.is/notes/how-to-pull-request-fork-github) \u5e76\u63d0\u4ea4\u5230\u516c\u5f00\u7684Github\u5b58\u50a8\u5e93\u3002 \n \u4e00\u65e6\u63d0\u4ea4\u4e86\u62c9\u53d6\u8bf7\u6c42\uff0c\u8bf7\u586b\u5199 \u62c9\u53d6\u8bf7\u6c42\u6a21\u677f  (https://github.com/duneanalytics/spellbook/blob/master/pull_request_template.md)  \u5e76\u6807\u8bb0\uff08tag) duneanalytics/team-data-experience team-data-experience\u3002 \n \u6211\u4eec\u5c06\u5ba1\u67e5\u60a8\u7684\u4ee3\u7801\u5e76\u8fd0\u884c\u60a8\u7684\u6d4b\u8bd5\u3002 \u672a\u6765\u6211\u4eec\u5e0c\u671b\u5efa\u9020\u4e00\u4e2a\u7406\u60f3\u6c99\u76d2\u5e76\u6d88\u9664\u6b64\u6b65\u9aa4\uff0c\u60a8\u53ef\u4ee5\u5728\u6c99\u76d2\u4e2d\u76f4\u63a5\u8fd0\u884c\u60a8\u7684\u9b54\u6cd5\u548c\u6d4b\u8bd5\u3002 \u6211\u4eec\u4e0d\u80fd\u4ece\u60a8\u7684\u539f\u59cb\u62c9\u53d6\u8bf7\u6c42\u4e2d\u76f4\u63a5\u8fd0\u884c DBT \uff0c\u56e0\u4e3a\u6216\u8bb8\u4e0d\u5e78\u7684\u662f\uff08\u5e78\u8fd0\u7684\u662f\uff1f\uff09GitHub \u539f\u5219\u4e0a\u963b\u6b62\u4e86\u6388\u6743\u79d8\u94a5\u7ed9\u5206\u53c9\u5b58\u50a8\u5e93\u7684\u62c9\u53d6\u8bf7\u6c42\u3002 \n ", "url": "https://dune.com/docs/zh/spellbook/getting-started/submissions/#fork-pull-request"}
{"content": "Dune\u5c06\u5408\u5e76\u4e14\u90e8\u7f72\u60a8\u7684\u4ee3\u7801 \u00b6 \n \u5982\u679c\u4e00\u5207\u6b63\u5e38\uff08\u4ee3\u7801\u6b63\u786e\u8fd0\u884c\uff09\uff0cDune \u5c06\u5408\u5e76\u60a8\u7684\u4ee3\u7801\u66f4\u65b0\u5e76\u5c06\u5b83\u4eec\u90e8\u7f72\u5230\u751f\u4ea7\u73af\u5883\u3002 \u60a8\u7684\u9b54\u6cd5\u5c06\u5728 Dune.com \u6570\u636e\u6d4f\u89c8\u5668\u7684\u9b54\u6cd5\uff08Spell\uff09\u4e0b\u53ef\u89c1\u3002 \n \u54c7\u585e\uff0c\u60a8\u73b0\u5728\u662f\u4e2a\u65bd\u6cd5\u7684\u53d1\u9b54\u6cd5\u5e08\u4e86\u3002", "url": "https://dune.com/docs/zh/spellbook/getting-started/submissions/#dune"}
{"content": "\u6838\u9a8c\u60a8\u7684\u9b54\u6cd5 \u00b6 \n \u4ece\u76ee\u6807\uff08target\uff09\u6587\u4ef6\u5939\u4e2d\u590d\u5236\u7f16\u8bd1\u540e\u7684\u9b54\u6cd5\uff0c\u7136\u540e\u60a8\u53ef\u4ee5\u5728 dune.com \u4e0a\u6253\u5f00\u65b0\u67e5\u8be2\u7a97\u53e3\u5c1d\u8bd5\u8fd0\u884c\u3002 \n \u6211\u4eec\u6b63\u5728\u52aa\u529b\u5f00\u53d1\u4e00\u4e2a\u53ef\u4ee5\u76f4\u63a5\u4ece DBT \u4e2d\u5b89\u5168\u8fd0\u884c\u9b54\u6cd5\u7684\u6c99\u76d2\u3002 \u4f46\u4e0e\u6b64\u540c\u65f6\uff0c\u5728\u672c\u5730\u68c0\u67e5\u60a8\u7684\u5de5\u4f5c\u7684\u6700\u4f73\u65b9\u6cd5\u662f\u201c\u7f16\u8bd1\u201d\u60a8\u7684\u9b54\u6cd5\u3002 \n \u5728\u60a8\u7528 `dbt init` \u5b8c\u6210 DBT\u521d\u59cb\u5316  (https://github.com/duneanalytics/spellbook/blob/master/README.md) \u4e4b\u540e\uff0c\u60a8\u53ef\u4ee5\u5c1d\u8bd5\u8fd0\u884c `dbt compile` \u3002\u8fd9\u5c06\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a\u201ctarget\u201d\u7684\u65b0\u6587\u4ef6\u5939\u3002 \u5728\u76ee\u6807\u6587\u4ef6\u5939\u5185\u5c06\u662f\u7f16\u8bd1\u6210\u666e\u901a SQL \u7684\u6240\u6709\u9b54\u6cd5\u3002\u60a8\u53ef\u4ee5\u590d\u5236\u60a8\u7684\u9b54\u6cd5\u5e76\u76f4\u63a5\u5728 dune.com \u4e0a\u8fd0\u884c\u3002", "url": "https://dune.com/docs/zh/spellbook/getting-started/spells/#_1"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/community/reservoir/token-floor-ask-events.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/community/reservoir/token-floor-ask-events/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/community/reservoir/token-attributes.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/community/reservoir/token-attributes/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/community/reservoir/sales.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/community/reservoir/sales/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/community/reservoir/collections.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/community/reservoir/collections/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/community/reservoir/collection-floor-ask-events.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/community/reservoir/collection-floor-ask-events/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/community/reservoir/attributes.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/community/reservoir/attributes/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/community/reservoir/attribute-keys.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/community/reservoir/attribute-keys/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/community/reservoir/asks.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/community/reservoir/asks/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/community/reservoir/ask-events.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/community/reservoir/ask-events/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/community/flashbots/sandwiches.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/community/flashbots/sandwiches/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/community/flashbots/sandwiched-swaps.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/community/flashbots/sandwiched-swaps/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#mev) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/community/flashbots/mev_summary.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/community/flashbots/mev_summary/"}
{"content": "The problem: Wizards + Projects != \u2728\ud83d\udcca \u00b6 \n Projects need data, Wizards want jobs. It's hard for one to find the other. \n Until now, analytics tasks have been spread out between Twitter, Discord, Gitcoin, Layer3, Notion boards and a few other dark and hidden places.  \n It's hard for  Wizards  to keep track of all these locations they should look for jobs and there's unnecessary friction in the application and work-delivery process.  \n For  Projects , the lack of organization makes it exceedingly hard to find the right Wizard for the job and introduces unnecessary overhead in the management process. \n Fundamentally, this problem is solved through the creation of one marketplace for helping Wizards and Projects make the data flow. \n This one solution should be able to handle: \n \n task creation  \n the application process \n communication \n reputation \n payments \n \n and it should be web3 native. \n Thankfully this marketplace now exists! \n ", "url": "https://dune.com/docs/zh/reference/dune-bounties/#the-problem-wizards-projects"}
{"content": "The solution: Dune Bounties \u00b6 \n Leveraging  dework.xyz  (https://www.dework.xyz) , we've set up a bounty board to manage our Dune internal bounty programs - and we've set it up so it's accessible for other projects and organizations to make use of this infrastructure! \n Dework describes itself as a \u201cweb3 native Trello with payments and credentialing\".  \n What exactly does that mean? \n Let's hear what Lonis, co-founder of Dework, has to say: \n \n Dework offers infrastructure for us to write out tasks on our own  board  (https://app.dework.xyz/dune/board)  and allows other organizations to seamlessly connect with Dune Wizards by simply specifying \u201cDune Analytics\u201d as Skill. \n All open tasks that have the Dune Analytics Skill attached will appear in the  Dune hub  (https://app.dework.xyz/hubs/dune) , making it easy for Wizards to find tasks that need their skills. \n ", "url": "https://dune.com/docs/zh/reference/dune-bounties/#the-solution-dune-bounties"}
{"content": "For projects in need of Wizards \u00b6 \n If you are an organization in need of web3 analytics, it\u2019s now easier than ever to connect with Dune Wizards! \n You can either do all of this by yourself or ask for our help via the typeform in the \"supported approach\" tab in the section below, we are happy to help! \n Supported approach  (#__tabbed_1_1) Self Serve  (#__tabbed_1_2) \n \n \n \n Fill in this Typeform   \n \n We know setting up Dework, defining bounties, and managing your contributors can be quite a challenge. \n Reach out to us by clicking the button below and filling out our Typeform and we'll happily assist you in onboarding and running successful bounties. \n Typeform \n \n \n Dework's Documentation  (https://dework.gitbook.io/product-docs/guides-for-orgs/getting-started-on-dework)  is the best in-depth resource for getting started, but here's a short breakdown for convenience: \n \n \n Create an organization \n If you don\u2019t have a Dework organization yet, the first step is to create one. \n At a minimum, we recommend including a description, an icon and a link to your socials so Wizards know who they are working with. \n We also strongly recommend setting up the  Discord integrations  (https://dework.gitbook.io/product-docs/guides-for-orgs/connecting-to-discord)  to allow for easy communication with the chosen Applicants. \n \n \n Define tasks \n After completing the initial setup, you can start creating tasks for anything, but to work with Dune Wizards, you'll want to define tasks with the  \"Dune Analytics\" Skill\" . \n Once you have created a task, the task will be:  \n \n in your board and  \n in the  Dune hub  (https://app.dework.xyz/hubs/dune) .  \n \n From there on out, people can find your open task and apply or compete. \n \n \n Choose an applicant \n If you have defined a task that needs to be assigned to someone, you will get notifications within Dework and can vet the applicant using their work history, GitHub profile and any other attached information on their profile. \n We strongly recommend spending time and effort vetting your applicants to have a smooth bounty process. \n Once you choose an applicant to work with, they'll become a Dework \"contributor\" to your project. \n \n \n Review the work \n Once the Wizard applicant you have chosen has submitted their work, you can start reviewing the completed task. If it is satisfactory, you mark the task as done and initiate the payment process. \n \n \n Pay your contributor \n Dework integrates with Metamask, Gnosis Safe, Utopia Labs and even Phantom wallet for Solana based payments. You can choose whatever works best for you and your Wizard contributor here. \n \n \n \n \n \n ", "url": "https://dune.com/docs/zh/reference/dune-bounties/#for-projects-in-need-of-wizards"}
{"content": "For Wizards looking for work \u00b6 \n If you are a Wizard or a aspiring Wizard, join the Dune Analytics organization on Dework and start looking for tasks: \n \n On our board  (https://app.dework.xyz/dune/board) \n On the Dune hub  (https://app.dework.xyz/hubs/dune) \n \n Be sure to complete your profile with relevant links to your socials, GitHub and Dune profile so organizations can easily assess your skills and decide you're a perfect fit (the easier it is for them to see what you can do, the more likely they'll hire you!). \n ", "url": "https://dune.com/docs/zh/reference/dune-bounties/#for-wizards-looking-for-work"}
{"content": "Some notes about working on Dune \u00b6 \n Dune can roughly be separated into two parts: \n \n The  App Layer \n The  Data Layer .  \n \n In the  App Layer , you can find  Queries  (../../getting-started/queries/) ,  Visualizations  (../../getting-started/visualizations/)  and  Dashboards  (../../getting-started/dashboards/) .  \n Everything in the App Layer is public by default and can be utilized by other Wizards, but the work produced in the App Layer is not very persistent and most importantly doesn't enable other Wizard analysts to easily build on top of this work. \n Dune's  Data Layer  allows you and the Wizards you work with to produce scalable and persistent work by standardizing and normalizing data.  \n We call this data layer  Spellbook  (../../spellbook/) .   \n A good example of the power of working in the Dune  Data Layer  is OpenSea's standardization and normalization of  all NFT trades across all chains and versions  (https://dune.com/spellbook#!/model/model.spellbook.opensea_trades) . \n By transforming their raw data and adding it to the  opensea.trades  table inside of Spellbook, 2 things can happen: \n \n Every Dune Wizard can easily work with OpenSea's data as it's cleaned and standardized. \n The data can be referenced in other Spellbook tables (\"Spells\") like  nft.trades ; this makes it even more likely that Wizards will incorporate OpenSea data into their work as the  nft.trades  table contains data from all marketplaces across all chains. \n \n In this way, a project like yours working in the Spellbook Data Layer can get a lot of leverage not only from whatever data analysis projects and visualizations you commission, but by making it more likely other Wizards will find and use your data, build it into their Dashboards, and generate interest in your project.  \n Though not necessarily required for your project, getting your data normalized, standardized and possibly inserted into one of our sector level tables like  nft.trades  is definitely recommended! \n Once that is done, people working in the  App layer  will have a much easier time building good queries, visualizations and dashboards since the hardest data engineering parts are already taken care of.   \n If this all sounds confusing to you, don't worry we can advise you in this process! \n Reach out via the  Typeform  (https://form.typeform.com/to/DtX4jqkd)  in the \"Supported approach\" tab above, or ask about building your project in Spellbook in our  #spellbook Discord channel  (https://discord.com/channels/757637422384283659/999683200563564655) ! \n TL;DR \nWe suggest working in this order so your data flows efficiently: \n \n Build Spells in the Data Layer to take care of the data engineering \n Build cool stuff in the App Layer to surface findings \n \n ", "url": "https://dune.com/docs/zh/reference/dune-bounties/#some-notes-about-working-on-dune"}
{"content": "Dune Bounties FAQ \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/dune-bounties/#dune-bounties-faq"}
{"content": "I want to create a requests but how much should I pay/offer? \u00b6 \n Dune is an open platform on which you can build all kinds of analysis, Dashboards and Spells, so the official answer here is the dreaded \"it depends.\" \n Going rates for Freelance Dune Wizards seem to be anywhere between $30-$100 per hour. \n And you can always ask in our  #bounty-questions Discord  (https://discord.com/channels/757637422384283659/1025371996277706792)  or fill out the  Typeform  (https://form.typeform.com/to/DtX4jqkd)  in the \"Supported approach\" tab above to get some help on this!  \n ", "url": "https://dune.com/docs/zh/reference/dune-bounties/#i-want-to-create-a-requests-but-how-much-should-i-payoffer"}
{"content": "Does Dune take a cut of bounty payments? \u00b6 \n Dune does not take a cut in any bounty payments. \n ", "url": "https://dune.com/docs/zh/reference/dune-bounties/#does-dune-take-a-cut-of-bounty-payments"}
{"content": "I don't have time/capacity to do this myself, can you run this for me? \u00b6 \n In some cases, the Dune team can actually run entire bounty campaigns/contests for you, but we can't offer this for every organization. \n Fill out the  Typeform  (https://form.typeform.com/to/DtX4jqkd)  in the \"Supported approach\" tab above and we'll let you know what we can do to help!  \n ", "url": "https://dune.com/docs/zh/reference/dune-bounties/#i-dont-have-timecapacity-to-do-this-myself-can-you-run-this-for-me"}
{"content": "How do Wizards get paid for bounties? \u00b6 \n Dework has a native payment feature. Wizards simply connect their wallet in their Dework profile and will get paid as soon as the bounty is paid out by the Project that created the task. \n ", "url": "https://dune.com/docs/zh/reference/dune-bounties/#how-do-wizards-get-paid-for-bounties"}
{"content": "Can I run contests on Dework? \u00b6 \n You can indeed run contests on Dework, they are called \"multiple submissions.\" \n You can learn more in  Dework's documentation  (https://dework.gitbook.io/product-docs/fundamentals/task-types-and-assignee-gating#multiple-submissions) . \n After running contests it often makes sense to give one of the winners a follow-up task to reconcile the best ideas of all submitted dashboards into one final version. \n ", "url": "https://dune.com/docs/zh/reference/dune-bounties/#can-i-run-contests-on-dework"}
{"content": "Is all of this public? \u00b6 \n Dework allows you to define tasks privately and publicly, if you wanted to you could for example limit tasks for only members of your Discord. \n ", "url": "https://dune.com/docs/zh/reference/dune-bounties/#is-all-of-this-public"}
{"content": "How do I choose the right applicant? \u00b6 \n You can click on any profile in Dework to see what the Credentials of the person are. \n For example: \n https://app.dework.xyz/profile/hamzat_iii  (https://app.dework.xyz/profile/hamzat_iii) \n ", "url": "https://dune.com/docs/zh/reference/dune-bounties/#how-do-i-choose-the-right-applicant"}
{"content": "What's your recommend approach to organizing bounties for my Project and needs? \u00b6 \n Our advice is to first run specific tasks for adding your data to  Spellbook  (../../spellbook/)  first and run a Dashboard design contest afterwards. \n This way, your data will be easily accessible to any Dune Wizard in any Queries and Dashboards they imagine \n Then, by running a contest for Dashboard designs using Dework's \"multiple submissions\" feature, you'll ensure specific Dashboards you want are created while also leaving room to be surprised by our Wizard's creativity.", "url": "https://dune.com/docs/zh/reference/dune-bounties/#whats-your-recommend-approach-to-organizing-bounties-for-my-project-and-needs"}
{"content": "\u6559\u7a0b\u770b\u677f \u00b6 \n \u8fd9\u4e9b\u770b\u677f\u662f\u5b66\u4e60\u65b0\u7684 Dune\u3001\u6570\u636e\u5206\u6790\u548c\u533a\u5757\u94fe\u5206\u6790\u6280\u80fd\u7684\u597d\u5e2e\u624b! \n \n @springzhang  (https://dune.com/springzhang/) 's  Tips and Tricks for Dune V2 Queries and Visualizations  (https://dune.com/springzhang/tips-and-tricks-for-query-and-visualization-in-v2-engine) \n @1chioku  (https://dune.com/1chioku) 's  Data Visualization Cheat Sheet  (https://dune.com/1chioku/data-visualisation-cheat-sheet) \n @agaperste  (https://dune.com/agaperste) 's  Event and Function Signature Sleuthing  (https://dune.com/agaperste/event-and-function-signature-sleuthing) \n @dune  (https://dune.com/dune) 's  Getting Started  (https://dune.com/dune/get-started) \n @duniversity  (https://dune.com/duniversity) 's   Contract Quickstart  (https://dune.com/duniversity/contract-quickstart?contract_t761b2=0x7d2768de32b0b80b7a3454c06bdac94a69ddc7a9) \n \n ", "url": "https://dune.com/docs/zh/reference/wizard-tools/helpful-dashboards/#_1"}
{"content": "\u53c2\u8003\u770b\u677f \u00b6 \n \u8fd9\u4e9b\u770b\u677f\u6709\u52a9\u4e8e\u5728\u5efa\u7acb\u67e5\u8be2\u65f6\u8fdb\u884c\u53c2\u8003\u3002 \n \n @dune  (https://dune.com/dune) 's  Meta Monitoring  (https://dune.com/dune/Meta-Monitoring) \n @dune  (https://dune.com/dune) 's  Is my Contract Decoded Yet?  (https://dune.com/dune/is-my-contract-decoded-yet-v2) \n @subinium  (https://dune.com/subinium) 's  Dune DB Guide  (https://dune.com/subinium/dune-db-guide)", "url": "https://dune.com/docs/zh/reference/wizard-tools/helpful-dashboards/#_2"}
{"content": "Dune \u662f\u5982\u4f55\u83b7\u53d6\u6570\u636e\u7684\uff1f \u00b6 \n \u6211\u4eec\u6b63\u5728\u4e0e\u6574\u4e2a\u884c\u4e1a\u7684\u8282\u70b9\u63d0\u4f9b\u5546\u5408\u4f5c\uff0c\u5c06\u6570\u636e\u63d0\u53d6\u5230\u6211\u4eec\u7684\u6570\u636e\u5e93\u4e2d\u3002 \u8fd9\u5305\u62ec\u6765\u81ea\u8fd9\u4e9b\u533a\u5757\u94fe\u7684\u6240\u6709\u539f\u59cb\u5386\u53f2\u6570\u636e\u3002 \u5b83\u4e0d\u5305\u62ec\u72b6\u6001\u6570\u636e\u3002 \n \u6211\u4eec\u4e0d\u6b67\u89c6\u4efb\u4f55\u667a\u80fd\u5408\u7ea6\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u6211\u4eec\u7684  \u89e3\u6790\u9875\u9762  (../../tables/decoded/)  \u63d0\u4ea4\u4efb\u4f55\u5408\u7ea6\uff0c\u5e76\u5728\u51e0\u4e2a\u5c0f\u65f6\u5185\u5b8c\u6210\u5904\u7406\u3002 \u552f\u4e00\u7684\u5148\u51b3\u6761\u4ef6\u662f ABI\uff0c\u6765\u8ba9\u6211\u4eec\u53ef\u4ee5\u5b9e\u9645\u89e3\u6790\u5408\u7ea6\uff08\u901a\u5e38 ABI \u5df2\u7ecf\u5728 Etherscan \u4e0a\uff0c\u4f46\u5b58\u5728\u8fb9\u7f18\u6848\u4f8b\uff09\u3002", "url": "https://dune.com/docs/zh/reference/faq/how-does-dune-get-its-data/#dune"}
{"content": "\u5982\u4f55\u5237\u65b0\u67e5\u8be2\u7ed3\u679c\uff1f \u00b6 \n \u5f53\u5728\u67e5\u8be2\u9875\u9762\u6216\u770b\u677f\u4e0a\u67e5\u770b\u53ef\u89c6\u5316\u5185\u5bb9\u65f6\uff0cDune \u540e\u7aef\u5c06\u81ea\u52a8\u68c0\u67e5\u8ddd\u79bb\u4e0a\u6b21\u67e5\u8be2\u7ed3\u679c\u7684\u65f6\u95f4\u3002\u5982\u679c\u7ed3\u679c\u5df2\u8fc7\u65f6\uff08\u76ee\u524d\u4e3a>3 \u5c0f\u65f6\uff09\uff0cDune \u5c06\u81ea\u52a8\u5728\u540e\u53f0\u6392\u961f\u8fd0\u884c\u6b64\u67e5\u8be2\u3002 \n \u8fd9\u610f\u5473\u7740\u5728\u67e5\u770b\u770b\u677f\u65f6\uff0c\u770b\u677f\u5c06\u59cb\u7ec8\u4fdd\u6301\u6700\u65b0\u72b6\u6001\uff0c\u67e5\u8be2\u521b\u5efa\u8005\u4e0d\u9700\u8981\u4e3a\u770b\u677f\u8bbe\u5b9a\u5237\u65b0\u8ba1\u5212\u3002 \n \u8bf7\u6ce8\u610f\uff0c\u5f53\u5728\u67e5\u8be2\u7f16\u8f91\u5668\u4e2d\u521b\u5efa\u548c\u8fd0\u884c\u67e5\u8be2\u65f6\uff0c\u6bcf\u4e00\u4e2a\u4eba\u7684\u67e5\u8be2\u6267\u884c\u961f\u5217\u90fd\u662f\u662f\u72ec\u7acb\u5206\u5f00\u7684\u3002", "url": "https://dune.com/docs/zh/reference/faq/how-are-results-refreshing/#_1"}
{"content": "Dune \u6709 API \u5417? \u00b6 \n Dune \u786e\u5b9e\u6709 API\uff01 \n \u76ee\u524d\u6b63\u5728\u8fdb\u884c\u5c01\u95ed\u6d4b\u8bd5\uff0c\u4f46\u5c06\u4e8e 11 \u6708\u5bf9\u516c\u4f17\u5f00\u653e\uff01 \n \u5982\u679c\u60a8\u6ca1\u6709 API \u8bbf\u95ee\u6743\u9650\uff0c \u4ed8\u8d39\u8ba1\u5212\u7528\u6237  (https://dune.com/pricing)  \u53ef\u4ee5\u5c06\u67e5\u8be2\u7ed3\u679c\u5bfc\u51fa\u4e3a CSV\u3002\u53e6\u5916\uff0c\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u5728\u67e5\u8be2\u53ef\u89c6\u5316\u9875\u9762\u4e0a\u5355\u51fb \" Embed  (../../../getting-started/embeds/) \" \u5c06 Dune \u56fe\u8868\u514d\u8d39\u5d4c\u5165\u81ea\u5df1\u7684\u9875\u9762\u3002", "url": "https://dune.com/docs/zh/reference/faq/does-dune-have-an-api/#dune-api"}
{"content": "Dune \u6709\u4ee3\u5e01\u5417\uff1f \u00b6 \n Dune \u6ca1\u6709\u4ee3\u5e01\u3002", "url": "https://dune.com/docs/zh/reference/faq/does-dune-have-a-token/#dune"}
{"content": "Blockchain Icons \u00b6 \n Some data sets will have multiple blockchain icons - meaning data from each of those blockchains is available within that data set! \n \n \n \n Icon \n Description \n \n \n \n \n \n Ethereum blockchain Raw Data, Decoded Project, or Spell \n \n \n \n Gnosis Chain Raw Data, Decoded Project, or Spell \n \n \n \n Polygon blockchain Raw Data, Decoded Project, or Spell \n \n \n \n Optimism blockchain Raw Data, Decoded Project, or Spell \n \n \n \n Optimism (legacy) blockchain Raw Data, Decoded Project, or Spell \n \n \n \n BNB Chain Raw Data, Decoded Project, or Spell \n \n \n \n Solana blockchain Raw Data, Decoded Project, or Spell \n \n \n \n Arbitrum blockchain Raw Data, Decoded Project, or Spell \n \n \n \n Avalanche C-Chain Raw Data, Decoded Project, or Spell \n \n \n \n ", "url": "https://dune.com/docs/zh/reference/explorer-labels/#blockchain-icons"}
{"content": "Dataset Icons \u00b6 \n \n \n \n Icon \n Description \n \n \n \n \n \n Data Table (Raw Data, Spell, or smart contract Event or Function) \n \n \n \n Decoded Project (protocol or protocol version eg \"opensea\" or \"aave_v2\") \n \n \n \n Spell set (eg cow_protocol contains \"batches\" and \"solvers\" Spells) \n \n \n \n Community Data Set \n \n \n \n ", "url": "https://dune.com/docs/zh/reference/explorer-labels/#dataset-icons"}
{"content": "Dataset Labels \u00b6 \n \n \n \n Label \n Description \n \n \n \n \n project \n A Spell set for a specific project eg  aave \n \n \n sector \n A Spell set for a sector eg  dex \n \n \n event \n A smart contract event dataset \n \n \n function \n A smart contract function dataset \n \n \n \n ", "url": "https://dune.com/docs/zh/reference/explorer-labels/#dataset-labels"}
{"content": "Data Type Labels \u00b6 \n You can find the full  Spark SQL data types documentation here  (https://docs.databricks.com/sql/language-manual/sql-ref-datatypes.html) . For types not found there, see  Apache Spark SQL data types here  (https://spark.apache.org/docs/latest/sql-ref-datatypes.html) . \n For V1 Data here are the  official PostgreSQL data types  (https://www.postgresql.org/docs/current/datatype.html) . \n \n \n \n Label \n Description \n \n \n \n \n string \n Character sequences of any length greater or equal to 0. \n \n \n long \n Represents 8-byte signed integer numbers. The range of numbers is from -9223372036854775808 to 9223372036854775807. \n \n \n integer \n Represents 4-byte signed integer numbers. The range of numbers is from -2147483648 to 2147483647. \n \n \n double \n Represents 8-byte double-precision floating point numbers. \n \n \n boolean \n Represents boolean values. (TRUE \n \n \n date \n Represents values comprising values of fields year, month and day, without a time-zone. \n \n \n timestamp \n Represents values comprising values of fields year, month, day, hour, minute, and second, with the session local time-zone. The timestamp value represents an absolute point in time. \n \n \n decimal({{p}},{{s}}) \n Represents numbers with a specified maximum precision (p, 1 - 38) and fixed scale (s, the number of digits to the right of the decimal, 0 to p). \n \n \n array<{{xx}}> \n An array of  {{xx}}  data. ( long ,  string , etc)", "url": "https://dune.com/docs/zh/reference/explorer-labels/#data-type-labels"}
{"content": "\u4ee3\u5e01\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/community/reservoir/tokens/#_1"}
{"content": "reservoir.tokens \u00b6 \n \u8be5\u8868\u5305\u542b\u6709\u5173\u4e8e\u6bcf\u4e2aNFT\u4ee3\u5e01\u7684\u4fe1\u606f\u8bb0\u5f55\u3002 \n \u67e5\u8be2\u7684\u793a\u4f8b\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\uff1a \n https://dune.com/queries/1303052/2232521  (https://dune.com/queries/1303052/2232521) \n https://dune.com/queries/1303064/2232571  (https://dune.com/queries/1303064/2232571) \n \n \n \n \u5217\u540d\u79f0 \n \u7c7b\u578b \n \u8bf4\u660e \n \n \n \n \n id \n string \n \u5185\u90e8\u4ee3\u5e01ID \n \n \n contract \n string \n \u5408\u7ea6\u5730\u5740 \n \n \n token_id \n string \n \u5408\u96c6\uff08collection\uff09\u4e2d\u7684\u4ee3\u5e01\u5730\u5740 \n \n \n name \n string \n NFT\u540d\u79f0 \n \n \n description \n string \n NFT\u63cf\u8ff0 \n \n \n collection_id \n string \n \u76f8\u5173\u7684\u5408\u96c6ID \n \n \n owner \n string \n \u62e5\u6709\u8005\u7684\u94b1\u5305\u5730\u5740 \n \n \n floor_ask_id \n string \n \u5e95\u90e8\u8bf7\u6c42ID \n \n \n floor_ask_value \n bigint \n \u5e95\u90e8\u8bf7\u6c42\u503c \n \n \n floor_ask_maker \n string \n \u5e95\u90e8\u8bf7\u6c42\u5356\u65b9\u7684\u94b1\u5305\u5730\u5740 \n \n \n floor_ask_valid_from \n bigint \n \u5e95\u90e8\u8bf7\u6c42\u5217\u8868\u7684\u5f00\u59cb\u65f6\u95f4 \n \n \n floor_ask_valid_to \n bigint \n \u5e95\u90e8\u8bf7\u6c42\u5217\u8868\u7684\u7ed3\u675f\u65f6\u95f4 \n \n \n floor_ask_source \n string \n \u5e95\u90e8\u8bf7\u6c42\u6765\u6e90(\u4f8b\u5982OpenSea) \n \n \n last_sale_value \n bigint \n \u76f8\u5173\u7684\u4ea4\u6613\u65f6\u95f4\u6233 \n \n \n last_sale_timestamp \n bigint \n \u76f8\u5173\u7684\u4ea4\u6613\u65f6\u95f4\u6233 \n \n \n created_at \n timestamp \n \u4ee3\u5e01\u521b\u5efa\u7684\u65f6\u95f4\u6233 \n \n \n updated_at \n timestamp \n \u4ee3\u5e01\u66f4\u65b0\u7684\u65f6\u95f4\u6233", "url": "https://dune.com/docs/zh/reference/tables/v2/community/reservoir/tokens/#reservoirtokens"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/community/flashbots/liquidations.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/community/flashbots/liquidations/"}
{"content": "\u5730\u677f\u4ef7\u8bf7\u6c42\u4e8b\u4ef6\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/community/reservoir/token-floor-ask-events/#_1"}
{"content": "reservoir.token_floor_ask_events \u00b6 \n \u8be5\u8868\u5305\u542b\u6709\u5173\u4e8e\u6bcf\u4e2aNFT\u4ee3\u5e01\u5730\u677f\u4ef7\u53d8\u5316\u7684\u8bb0\u5f55\u3002 \n \u67e5\u8be2\u7684\u793a\u4f8b\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\uff1a \n https://dune.com/queries/1302852/2232169  (https://dune.com/queries/1302852/2232169) \n https://dune.com/queries/1302854/2232173  (https://dune.com/queries/1302854/2232173) \n \n \n \n \u5217\u540d\u79f0 \n \u7c7b\u578b \n \u8bf4\u660e \n \n \n \n \n id \n bigint \n \u5185\u90e8\u4ee3\u5e01\u5c5e\u6027ID \n \n \n kind \n string \n \u4e8b\u4ef6\u7c7b\u578b\uff08\u65b0\u8ba2\u5355\u3001\u5230\u671f\u3001\u51fa\u552e\u3001\u53d6\u6d88\u3001\u4f59\u989d\u53d8\u5316\u3001\u6279\u51c6\u53d8\u5316\u3001\u5f15\u5bfc\u3001\u91cd\u65b0\u9a8c\u8bc1\u3001\u91cd\u65b0\u5b9a\u4ef7\uff09 \n \n \n contract \n string \n \u5408\u7ea6\u5730\u5740 \n \n \n token_id \n string \n \u5408\u96c6\u4e2d\u7684\u4ee3\u5e01ID \n \n \n order_id \n string \n \u76f8\u5173\u8bf7\u6c42\u7684ID \n \n \n maker \n string \n \u76f8\u5173\u8bf7\u6c42\u5356\u65b9\u7684\u94b1\u5305\u5730\u5740 \n \n \n price \n decimal \n \u76f8\u5173\u8bf7\u6c42\u7684\u4ef7\u683c (\u539f\u751f\u8d27\u5e01) \n \n \n previous_price \n decimal \n \u524d\u4e00\u5929\u7684\u8bf7\u6c42\u5730\u677f\u4ef7 (\u672c\u5730\u8d27\u5e01) \n \n \n nonce \n string \n \u5356\u65b9\u7684\u8ba2\u5355nonce\u503c \n \n \n valid_from \n bigint \n \u76f8\u5173\u8bf7\u6c42\u6709\u6548\u671f\u5f00\u59cb \n \n \n valid_until \n bigint \n \u76f8\u5173\u8bf7\u6c42\u6709\u6548\u671f\u5230\u671f \n \n \n source \n string \n \u8ba2\u5355\u6765\u6e90 (\u4f8b\u5982OpenSea) \n \n \n tx_hash \n string \n \u76f8\u5173\u7684\u4ea4\u6613\u54c8\u5e0c\u503c \n \n \n tx_timestamp \n bigint \n \u76f8\u5173\u7684\u4ea4\u6613\u65f6\u95f4\u6233 \n \n \n created_at \n timestamp \n \u8bb0\u5f55\u4e8b\u4ef6\u7684\u65f6\u95f4\u6233", "url": "https://dune.com/docs/zh/reference/tables/v2/community/reservoir/token-floor-ask-events/#reservoirtoken_floor_ask_events"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/community/flashbots/arbitrages.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/community/flashbots/arbitrages/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#flashbots) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/community/flashbots/index.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/community/flashbots/"}
{"content": "\u4ee3\u5e01\u5c5e\u6027\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/community/reservoir/token-attributes/#_1"}
{"content": "reservoir.token_attributes \u00b6 \n \u8be5\u8868\u5305\u542b\u6709\u5173\u4e8e\u6bcf\u4e2aNFT\u4ee3\u5e01\u5c5e\u6027\u7684\u4fe1\u606f\u8bb0\u5f55\u3002 \n \u67e5\u8be2\u7684\u793a\u4f8b\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\uff1a \n https://dune.com/queries/1302940/2232326  (https://dune.com/queries/1302940/2232326) \n \n \n \n \u5217\u540d\u79f0 \n \u7c7b\u578b \n \u8bf4\u660e \n \n \n \n \n id \n bigint \n \u5185\u90e8\u4ee3\u5e01\u5c5e\u6027ID \n \n \n contract \n string \n \u5408\u7ea6\u5730\u5740 \n \n \n token_id \n string \n \u5408\u96c6\u4e2d\u7684\u4ee3\u5e01ID \n \n \n attribute_id \n bigint \n \u5185\u90e8\u5c5e\u6027ID \n \n \n collection_id \n string \n \u5185\u90e8\u5408\u96c6ID \n \n \n key \n string \n \u5c5e\u6027\u952e\u540d \n \n \n value \n string \n \u5c5e\u6027\u503c \n \n \n created_at \n timestamp \n \u521b\u5efa\u4ee3\u5e01\u5c5e\u6027\u7684\u65f6\u95f4\u6233 \n \n \n updated_at \n timestamp \n \u66f4\u65b0\u4ee3\u5e01\u5c5e\u6027\u7684\u65f6\u95f4\u6233", "url": "https://dune.com/docs/zh/reference/tables/v2/community/reservoir/token-attributes/#reservoirtoken_attributes"}
{"content": "\u9500\u552e\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/community/reservoir/sales/#_1"}
{"content": "reservoir.sales \u00b6 \n \u8be5\u8868\u5305\u542b\u6709\u5173\u4e8e\u6bcf\u7b14\u9500\u552e\u7684\u4fe1\u606f\u8bb0\u5f55\u3002 \n \u67e5\u8be2\u7684\u793a\u4f8b\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\uff1a \n https://dune.com/queries/1302771/2232036  (https://dune.com/queries/1302771/2232036) \n https://dune.com/queries/1302775/2232040  (https://dune.com/queries/1302775/2232040) \n \n \n \n \u5217\u540d\u79f0 \n \u7c7b\u578b \n \u8bf4\u660e \n \n \n \n \n id \n string \n \u5185\u90e8\u9500\u552eID \n \n \n contract \n string \n \u5408\u7ea6\u5730\u5740 \n \n \n token_id \n string \n \u5408\u96c6\u4e2d\u7684\u4ee3\u5e01ID \n \n \n order_id \n string \n \u76f8\u5173\u8ba2\u5355ID \n \n \n order_kind \n string \n \u534f\u8bae\u540d\u79f0 (\u4f8b\u5982Seaport) \n \n \n order_side \n string \n \u8ba2\u5355\u7c7b\u578b (\u8bf7\u6c42 / \u62cd\u5356) \n \n \n order_source \n string \n \u6302\u5355\u6765\u6e90 (\u4f8b\u5982OpenSea) \n \n \n from \n string \n \u5356\u65b9\u7684\u94b1\u5305\u5730\u5740 \n \n \n to \n string \n \u4e70\u65b9\u7684\u94b1\u5305\u5730\u5740 \n \n \n price \n decimal \n \u51fa\u552e\u4ef7\u683c (\u539f\u751f\u8d27\u5e01) \n \n \n usd_price \n string \n \u51fa\u552e\u4ef7\u683c(\u7f8e\u5143) \n \n \n currency_address \n string \n \u672c\u6b21\u9500\u552e\u4f7f\u7528\u7684\u8d27\u5e01\u7684\u5408\u7ea6\u5730\u5740 \n \n \n currency_symbol \n string \n \u672c\u6b21\u51fa\u552e\u4f7f\u7528\u7684\u8d27\u5e01\u4ee3\u53f7 \n \n \n currency_price \n decimal \n \u51fa\u552e\u4ef7\u683c \n \n \n amount \n string \n \u51fa\u552e\u7684\u8d27\u5e01\u6570\u91cf \n \n \n fill_source \n string \n \u8ba2\u5355\u6267\u884c\u7684\u5730\u65b9 \n \n \n aggregator_source \n string \n \u5408\u96c6\u6765\u6e90 (\u4f8b\u5982reservoir) \n \n \n wash_trading_score \n int \n \u542b\u6c34\u4ea4\u6613\uff08wash trading\uff09\u8bc4\u5206 (\u57fa\u4e8e\u8fc7\u53bb\u7684\u9500\u552e) \n \n \n is_primary \n boolean \n \u662f\u5426\u662f\u82b1\u8d39\u94f8\u9020\uff08paid mint\uff09 \n \n \n tx_hash \n string \n \u76f8\u5173\u7684\u4ea4\u6613\u54c8\u5e0c\u503c \n \n \n tx_log_index \n int \n \u76f8\u5173\u7684\u4ea4\u6613\u65e5\u5fd7\u7d22\u5f15 \n \n \n tx_batch_index \n int \n \u76f8\u5173\u7684\u4ea4\u6613\u6279\u6b21\u7d22\u5f15 \n \n \n tx_timestamp \n bigint \n \u76f8\u5173\u7684\u4ea4\u6613\u65f6\u95f4\u6233 \n \n \n created_at \n timestamp \n \u8bb0\u5f55\u51fa\u552e\u7684\u65f6\u95f4\u6233 \n \n \n updated_at \n timestamp \n \u66f4\u65b0\u51fa\u552e\u7684\u65f6\u95f4\u6233", "url": "https://dune.com/docs/zh/reference/tables/v2/community/reservoir/sales/#reservoirsales"}
{"content": "\u5408\u96c6\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/community/reservoir/collections/#_1"}
{"content": "reservoir.collections \u00b6 \n \u8be5\u8868\u5305\u542b\u6709\u5173\u4e8e\u6bcf\u4e2aNFT\u5408\u96c6\uff08collection\uff09\u7684\u4fe1\u606f\u8bb0\u5f55\u3002 \n \u67e5\u8be2\u7684\u793a\u4f8b\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\uff1a \n https://dune.com/queries/1302781/2232054  (https://dune.com/queries/1302781/2232054) \n https://dune.com/queries/1302788/2232065  (https://dune.com/queries/1302788/2232065) \n \n \n \n \u5217\u540d\u79f0 \n \u7c7b\u578b \n \u8bf4\u660e \n \n \n \n \n id \n string \n \u5185\u90e8\u5408\u96c6ID \n \n \n slug \n string \n \u5408\u96c6\u7b80\u79f0 \n \n \n name \n string \n \u5408\u96c6\u540d\u79f0 \n \n \n description \n string \n \u5408\u96c6\u8bf4\u660e \n \n \n token_count \n bigint \n \u5408\u96c6\u4e2d\u7684\u4ee3\u5e01ID \n \n \n contract \n string \n \u5408\u7ea6\u5730\u5740 \n \n \n day1_rank \n bigint \n \u524d1\u65e5\u7684\u6392\u540d \n \n \n day7_rank \n bigint \n \u524d7\u65e5\u7684\u6392\u540d \n \n \n day30_rank \n bigint \n \u524d30\u65e5\u7684\u6392\u540d \n \n \n all_time_rank \n bigint \n \u5168\u65f6\u6bb5\u6392\u540d \n \n \n day1_volume \n decimal \n \u524d1\u65e5\u7684\u4ea4\u6613\u91cf \n \n \n day7_volume \n decimal \n \u524d7\u65e5\u7684\u4ea4\u6613\u91cf \n \n \n day30_volume \n decimal \n \u524d30\u65e5\u7684\u4ea4\u6613\u91cf \n \n \n all_time_volume \n decimal \n \u5168\u65f6\u6bb5\u4ea4\u6613\u91cf \n \n \n day1_volume_change \n double \n \u524d1\u65e5\u7684\u4ea4\u6613\u91cf\u53d8\u5316 \n \n \n day7_volume_change \n double \n \u524d7\u65e5\u7684\u4ea4\u6613\u91cf\u53d8\u5316 \n \n \n day30_volume_change \n double \n \u524d30\u65e5\u7684\u4ea4\u6613\u91cf\u53d8\u5316 \n \n \n floor\\ask_value \n decimal \n \u5168\u65f6\u6bb5\u5730\u677f\u4ef7 (\u539f\u751f\u8d27\u5e01) \n \n \n day1_floor_sale_value \n decimal \n \u524d1\u65e5\u7684\u5730\u677f\u4ef7 \n \n \n day7_floor_sale_value \n decimal \n \u524d7\u65e5\u7684\u5730\u677f\u4ef7 \n \n \n day30_floor_sale_value \n decimal \n \u524d30\u65e5\u7684\u5730\u677f\u4ef7 \n \n \n day1_floor_sale_change \n double \n \u524d1\u65e5\u7684\u5730\u677f\u4ef7\u53d8\u5316 \n \n \n day7_floor_sale_change \n double \n \u524d7\u65e5\u7684\u5730\u677f\u4ef7\u53d8\u5316 \n \n \n day30_floor_sale_change \n double \n \u524d30\u65e5\u7684\u5730\u677f\u4ef7\u53d8\u5316 \n \n \n created_at \n timestamp \n \u521b\u5efa\u5408\u96c6\u7684\u65f6\u95f4\u6233 \n \n \n updated_at \n timestamp \n \u66f4\u65b0\u5408\u96c6\u7684\u65f6\u95f4\u6233", "url": "https://dune.com/docs/zh/reference/tables/v2/community/reservoir/collections/#reservoircollections"}
{"content": "\u5408\u96c6\u5730\u677f\u4ef7\u8bf7\u6c42\u4e8b\u4ef6\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/community/reservoir/collection-floor-ask-events/#_1"}
{"content": "reservoir.collection_floor_ask_events \u00b6 \n \u8be5\u8868\u5305\u542b\u6709\u5173\u4e8e\u6bcf\u4e2a\u5408\u96c6\uff08collection\uff09\u8bf7\u6c42\u5730\u677f\u4ef7\u7684\u4fe1\u606f\u8bb0\u5f55\u3002 \n \u67e5\u8be2\u7684\u793a\u4f8b\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\uff1a \n https://dune.com/queries/1302799/2232083  (https://dune.com/queries/1302799/2232083) \n https://dune.com/queries/1302841/2232151  (https://dune.com/queries/1302841/2232151) \n \n \n \n \u5217\u540d\u79f0 \n \u7c7b\u578b \n \u8bf4\u660e \n \n \n \n \n id \n bigint \n \u5185\u90e8\u4e8b\u4ef6ID \n \n \n kind \n string \n \u4e8b\u4ef6\u7c7b\u578b\uff08\u65b0\u8ba2\u5355\u3001\u5230\u671f\u3001\u51fa\u552e\u3001\u53d6\u6d88\u3001\u4f59\u989d\u53d8\u5316\u3001\u6279\u51c6\u53d8\u5316\u3001\u5f15\u5bfc\u3001\u91cd\u65b0\u9a8c\u8bc1\u3001\u91cd\u65b0\u5b9a\u4ef7\uff09 \n \n \n collection_id \n string \n \u5408\u96c6ID \n \n \n contract \n string \n \u5408\u7ea6\u5730\u5740 \n \n \n token_id \n string \n \u5408\u96c6\u4e2d\u7684\u4ee3\u5e01ID \n \n \n order_id \n string \n \u76f8\u5173\u7684\u8bf7\u6c42ID \n \n \n maker \n string \n \u76f8\u5173\u7684\u5356\u65b9\u94b1\u5305\u5730\u5740 \n \n \n price \n decimal \n \u76f8\u5173\u7684\u8bf7\u6c42\u4ef7\u683c (\u539f\u751f\u8d27\u5e01) \n \n \n previous_price \n decimal \n \u524d\u4e00\u5929\u7684\u8bf7\u6c42\u5730\u677f\u4ef7 (\u539f\u751f\u8d27\u5e01) \n \n \n valid_until \n bigint \n \u76f8\u5173\u7684\u6709\u6548\u8bf7\u6c42\u6709\u6548\u671f \n \n \n source \n string \n \u8ba2\u5355\u6765\u6e90 (\u4f8b\u5982OpenSea) \n \n \n tx_hash \n string \n \u76f8\u5173\u7684\u4ea4\u6613\u54c8\u5e0c\u503c \n \n \n tx_timestamp \n bigint \n \u76f8\u5173\u7684\u4ea4\u6613\u65f6\u95f4\u6233 \n \n \n created_at \n timestamp \n \u8bb0\u5f55\u4e8b\u4ef6\u7684\u65f6\u95f4\u6233", "url": "https://dune.com/docs/zh/reference/tables/v2/community/reservoir/collection-floor-ask-events/#reservoircollection_floor_ask_events"}
{"content": "\u5c5e\u6027\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/community/reservoir/attributes/#_1"}
{"content": "reservoir.attributes \u00b6 \n \u8be5\u8868\u5305\u542b\u6709\u5173\u4e8e\u6bcf\u4e2a\u5c5e\u6027\u7684\u4fe1\u606f\u8bb0\u5f55\u3002 \n \u67e5\u8be2\u7684\u793a\u4f8b\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\uff1a \n https://dune.com/queries/1302927/2232298  (https://dune.com/queries/1302927/2232298) \n https://dune.com/queries/1302966/2232361  (https://dune.com/queries/1302966/2232361) \n \n \n \n \u5217\u540d\u79f0 \n \u7c7b\u578b \n \u8bf4\u660e \n \n \n \n \n id \n bigint \n \u5185\u90e8\u5c5e\u6027ID \n \n \n attribute_key_id \n bigint \n \u5185\u90e8\u5c5e\u6027\u952eID \n \n \n value \n string \n \u5c5e\u6027\u503c \n \n \n token_count \n bigint \n \u5177\u6709\u5c5e\u6027\u7684\u4ee3\u5e01\u6570\u91cf \n \n \n on_sale_count \n bigint \n \u6b63\u5728\u51fa\u552e\u7684\u5177\u6709\u5c5e\u6027\u7684\u4ee3\u5e01\u6570\u91cf \n \n \n floor_sell_value \n decimal \n \u5f53\u524d\u7684\u5730\u677f\u4ef7 \n \n \n sell_updated_at \n timestamp \n \u6700\u540e\u66f4\u65b0\u5e95\u4ef7\u7684\u65f6\u95f4\u6233 \n \n \n collection_id \n string \n \u76f8\u5173\u7684\u5408\u96c6ID \n \n \n kind \n string \n \u503c\u7c7b\u578b (\u5b57\u7b26\u4e32, \u6570\u5b57, \u65e5\u671f, \u8303\u56f4) \n \n \n key \n string \n \u76f8\u5173\u7684\u952e\u540d\u79f0 \n \n \n created_at \n timestamp \n \u521b\u5efa\u5c5e\u6027\u7684\u65f6\u95f4\u6233 \n \n \n updated_at \n timestamp \n \u66f4\u65b0\u5c5e\u6027\u7684\u65f6\u95f4\u6233", "url": "https://dune.com/docs/zh/reference/tables/v2/community/reservoir/attributes/#reservoirattributes"}
{"content": "\u5c5e\u6027\u952e\u503c \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/community/reservoir/attribute-keys/#_1"}
{"content": "reservoir.attribute_keys \u00b6 \n \u8be5\u8868\u5305\u542b\u6709\u6bcf\u4e2a\u5c5e\u6027\u952e\u503c\u7684\u8bb0\u5f55\u3002 \n \u67e5\u8be2\u7684\u793a\u4f8b\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\uff1a \n https://dune.com/queries/1302930/2232305  (https://dune.com/queries/1302930/2232305) \n \n \n \n \u5217\u540d\u79f0 \n \u7c7b\u578b \n \u8bf4\u660e \n \n \n \n \n id \n string \n \u5185\u90e8\u5c5e\u6027\u952e\u503cID \n \n \n collection_id \n string \n \u76f8\u5173\u5408\u96c6ID \n \n \n key \n string \n \u952e\u503c\u540d\u79f0 \n \n \n kind \n string \n \u503c\u7c7b\u578b (\u5b57\u7b26\u4e32, \u6570\u5b57, \u65e5\u671f, \u8303\u56f4) \n \n \n rank \n string \n \u6392\u5e8f\u987a\u5e8f \n \n \n created_at \n timestamp \n \u521b\u5efa\u5c5e\u6027\u952e\u7684\u65f6\u95f4\u6233 \n \n \n updated_at \n timestamp \n \u66f4\u65b0\u5c5e\u6027\u952e\u7684\u65f6\u95f4\u6233", "url": "https://dune.com/docs/zh/reference/tables/v2/community/reservoir/attribute-keys/#reservoirattribute_keys"}
{"content": "\u8bf7\u6c42\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/community/reservoir/asks/#_1"}
{"content": "reservoir.asks \u00b6 \n \u8be5\u8868\u5305\u542b\u6709\u5173\u4e8e\u6bcf\u4e2a\u6302\u5355\u7684\u4fe1\u606f\u8bb0\u5f55. \n \u67e5\u8be2\u7684\u793a\u4f8b\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\uff1a \n https://dune.com/queries/1302885/2232229  (https://dune.com/queries/1302885/2232229) \n https://dune.com/queries/1302904/2232257  (https://dune.com/queries/1302904/2232257) \n \n \n \n \u5217\u540d\u79f0 \n \u7c7b\u578b \n \u8bf4\u660e \n \n \n \n \n id \n string \n \u5185\u90e8\u8ba2\u5355ID \n \n \n kind \n string \n \u534f\u8bae\u540d\u79f0 (\u4f8b\u5982Seaport) \n \n \n status \n string \n \u8ba2\u5355\u72b6\u6001 (\u6709\u6548\u7684\uff0c\u65e0\u6548\u7684) \n \n \n contract \n string \n \u5408\u7ea6\u5730\u5740 \n \n \n token_id \n string \n \u5408\u96c6\u4e2d\u7684\u4ee3\u5e01ID \n \n \n maker \n string \n \u5356\u65b9\u7684\u94b1\u5305\u5730\u5740 \n \n \n taker \n string \n \u4e70\u65b9\u7684\u94b1\u5305\u5730\u5740 \n \n \n price \n decimal \n \u5f53\u524d\u7684\u4ef7\u683c (\u539f\u751f\u8d27\u5e01) \n \n \n start_price \n bigint \n \u6302\u5355\u7684\u521d\u59cb\u4ef7\u683c (\u7528\u4e8e\u8377\u5170\u62cd\u5356) \n \n \n end_price \n bigint \n \u6302\u5355\u7684\u7ed3\u675f\u4ef7\u683c (\u7528\u4e8e\u8377\u5170\u62cd\u5356) \n \n \n currency_address \n string \n \u8d27\u5e01\u5730\u5740 \n \n \n currency_symbol \n string \n \u8d27\u5e01\u4ee3\u53f7 \n \n \n currency_price \n decimal \n \u8d27\u5e01\u4ef7\u683c \n \n \n dynamic \n boolean \n \u662f\u5426\u662f\u8377\u5170\u62cd\u5356 \n \n \n quantity \n bigint \n \u5df2\u6302\u5355\u7684\u4ee3\u5e01\u6570\u91cf \n \n \n quantity_filled \n bigint \n \u5df2\u6267\u884c\u7684\u4ee3\u5e01\u6570\u91cf \n \n \n quantity_remaining \n bigint \n \u5269\u4f59\u7684\u4ee3\u5e01\u6570\u91cf \n \n \n valid_from \n bigint \n \u6302\u5355\u5f00\u59cb\u65f6\u95f4 \n \n \n valid_until \n bigint \n \u6302\u5355\u7ed3\u675f\u65f6\u95f4 \n \n \n nonce \n string \n \u5356\u65b9\u7684nonce\u503c \n \n \n source \n string \n \u6302\u5355\u7684\u6765\u6e90 (\u4f8b\u5982OpenSea) \n \n \n fee_bps \n bigint \n \u6302\u5355\u8d39\u7528 \n \n \n expiration \n bigint \n \u76f8\u5173\u7684\u4ea4\u6613\u54c8\u5e0c\u503c \n \n \n raw_data \n string \n \u539f\u59cb\u8ba2\u5355\u6570\u636e\uff08\u6bcf\u4e2a\u6765\u6e90\u7684\u683c\u5f0f\u4f1a\u6709\u6240\u4e0d\u540c\uff09 \n \n \n created_at \n timestamp \n \u521b\u5efa\u6302\u5355\u7684\u65f6\u95f4\u6233 \n \n \n updated_at \n timestamp \n \u66f4\u65b0\u6302\u5355\u7684\u65f6\u95f4\u6233", "url": "https://dune.com/docs/zh/reference/tables/v2/community/reservoir/asks/#reservoirasks"}
{"content": "\u8bf7\u6c42\u4e8b\u4ef6\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/community/reservoir/ask-events/#_1"}
{"content": "reservoir.ask_events \u00b6 \n \u8be5\u8868\u5305\u542b\u6bcf\u4e2a\u5173\u4e8e\u8bf7\u6c42\u53d8\u66f4\u7684\u4fe1\u606f\u8bb0\u5f55\u3002 \n \u67e5\u8be2\u7684\u793a\u4f8b\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\uff1a \n https://dune.com/queries/1302858/2232178  (https://dune.com/queries/1302858/2232178) \n https://dune.com/queries/1302863/2232189  (https://dune.com/queries/1302863/2232189) \n \n \n \n \u5217\u540d\u79f0 \n \u7c7b\u578b \n \u8bf4\u660e \n \n \n \n \n id \n bigint \n \u5185\u90e8\u4e8b\u4ef6ID \n \n \n kind \n string \n \u4e8b\u4ef6\u7c7b\u578b\uff08\u65b0\u8ba2\u5355\u3001\u5230\u671f\u3001\u51fa\u552e\u3001\u53d6\u6d88\u3001\u4f59\u989d\u53d8\u5316\u3001\u6279\u51c6\u53d8\u5316\u3001\u5f15\u5bfc\u3001\u91cd\u65b0\u9a8c\u8bc1\u3001\u91cd\u65b0\u5b9a\u4ef7\uff09 \n \n \n contract \n string \n \u5408\u7ea6\u5730\u5740 \n \n \n token_id \n string \n \u5408\u96c6\uff08collection\uff09\u4e2d\u7684\u4ee3\u5e01ID \n \n \n order_id \n string \n \u76f8\u5173\u8bf7\u6c42\u7684ID \n \n \n maker \n string \n \u76f8\u5173\u8bf7\u6c42\u7684\u5356\u65b9\u94b1\u5305\u5730\u5740 \n \n \n price \n decimal \n \u76f8\u5173\u8bf7\u6c42\u7684\u4ef7\u683c (\u539f\u751f\u8d27\u5e01) \n \n \n quantity_remaining \n bigint \n \u76f8\u5173\u8bf7\u6c42\u7684\u5269\u4f59\u4ee3\u5e01 \n \n \n valid_from \n bigint \n \u76f8\u5173\u8bf7\u6c42\u7684\u6709\u6548\u671f\u9650\u5f00\u59cb \n \n \n valid_until \n bigint \n \u76f8\u5173\u8bf7\u6c42\u7684\u6709\u6548\u671f\u9650\u7ed3\u675f \n \n \n source \n string \n \u8ba2\u5355\u6765\u6e90 (\u6bd4\u5982OpenSea) \n \n \n tx_hash \n string \n \u76f8\u5173\u7684\u4ea4\u6613\u54c8\u5e0c\u503c \n \n \n tx_timestamp \n bigint \n \u76f8\u5173\u7684\u4ea4\u6613\u65f6\u95f4\u6233 \n \n \n created_at \n timestamp \n \u4e8b\u4ef6\u8bb0\u5f55\u7684\u65f6\u95f4\u6233", "url": "https://dune.com/docs/zh/reference/tables/v2/community/reservoir/ask-events/#reservoirask_events"}
{"content": "\u4e09\u660e\u6cbb\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/community/flashbots/sandwiches/#_1"}
{"content": "sandwiches \u00b6 \n \u8fd9\u4e2a\u8868\u4e2d\u5305\u542b\u5df2\u6267\u884c\u7684\u4e09\u660e\u6cbb\u4e2d\u7684\u7ec6\u8282\u4fe1\u606f\u3002 \n \n \n \n \u5217\u540d\u79f0 \n \u6570\u636e\u7c7b\u578b \n \u63cf\u8ff0n \n \n \n \n \n created_at \n datetime \n \u8bb0\u5f55\u7684\u65f6\u95f4 \n \n \n block_number \n bigint \n \u533a\u5757\u53f7 \n \n \n backrun_swap_trace_address \n string \n \u4e09\u660e\u6cbb\u4e2d\u53cd\u5411\u4ea4\u6613\u7684\u5730\u5740 \n \n \n backrun_swap_transaction_hash \n string \n \u5177\u4f53\u7684\u4e00\u4e2a\u4e09\u660e\u6cbb\u4e2d\u53cd\u5411\u4ea4\u6613\u7684\u4ea4\u6613\u54c8\u5e0c \n \n \n frontrun_swap_trace_address \n string \n \u4e09\u660e\u6cbb\u4e2d\u524d\u5411\u4ea4\u6613\u7684\u5730\u5740 \n \n \n frontrun_swap_transaction_hash \n string \n \u5177\u4f53\u7684\u4e00\u4e2a\u4e09\u660e\u6cbb\u4e2d\u524d\u5411\u4ea4\u6613\u7684\u4ea4\u6613\u54c8\u5e0c \n \n \n id \n string \n \u4e09\u660e\u6cbb\u4e2d\u7684\u5185\u90e8Id \n \n \n profit_amount \n bigint \n \u5957\u5229\u540e\u7684\u5229\u6da6 \n \n \n profit_token_address \n string \n \u5229\u6da6\u8d44\u4ea7\u7684\u5730\u5740 \n \n \n sandwicher_address \n string \n \u53d1\u8d77\u4e09\u660e\u6cbb\u7684\u5730\u5740 \n \n \n timestamp \n timestamp \n \u6587\u4ef6\u6700\u540e\u66f4\u65b0\u7684\u65f6\u95f4\u6233 \n \n \n \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/community/flashbots/sandwiches/#sandwiches"}
{"content": "**** \u00b6", "url": "https://dune.com/docs/zh/reference/tables/v2/community/flashbots/sandwiches/#_2"}
{"content": "\u4e09\u660e\u6cbb\u4ea4\u6613\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/community/flashbots/sandwiched-swaps/#_1"}
{"content": "flashbots.sandwiched_swaps \u00b6 \n \u4e09\u660e\u6cbb\u4ea4\u6613\u8868\u5305\u542b\u4e86\u5173\u4e8e\u4e00\u4e2a\u6216\u591a\u4e2a\u4e0e\u6570\u636e\u8868\u4e2d\u4e0e\u4e09\u660e\u6cbb\u4ea4\u6613\u76f8\u5173\u7684\u6570\u636e\u3002\n\u67e5\u8be2\u793a\u4f8b\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\uff1a \n \n \n \n \u5217\u540d\u79f0 \n \u7c7b\u578b \n \u7c7b\u578b \n \n \n \n \n created_at \n string \n \u8bb0\u5f55\u7684\u65f6\u95f4 \n \n \n block_number \n bigint \n \u533a\u5757\u53f7 \n \n \n sandwich_id \n string \n \u4e09\u660e\u6cbb\u4ea4\u6613\u5185\u90e8\u7684Id \n \n \n trace_address \n string \n \u4e0e\u5957\u5229\u4ea4\u6613\u76f8\u5173\u7684\u6240\u6709\u4ea4\u6613\u7684\u8bb0\u5f55 \n \n \n transaction_hash \n string \n \u4ea4\u6613\u54c8\u5e0c \n \n \n timestamp \n timestamp \n \u6587\u4ef6\u6700\u540e\u66f4\u65b0\u7684\u65f6\u95f4\u6233", "url": "https://dune.com/docs/zh/reference/tables/v2/community/flashbots/sandwiched-swaps/#flashbotssandwiched_swaps"}
{"content": "mev\u6982\u8ff0\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/community/flashbots/mev_summary/#mev"}
{"content": "flashbots.mev_summary \u00b6 \n \u672c\u8868\u5305\u542b\u6240\u6709\u4ea4\u6613\u5206\u7c7b\u7684\u6458\u8981\u3002 \n \u67e5\u8be2\u793a\u4f8b\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\uff1a  Miner Revenue from Liquidations and Arbitrages  (https://dune.com/queries/625974/1167301) \n \n \n \n \u5217\u540d\u79f0 \n \u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n block_timestamp \n timestamp \n \u533a\u5757\u65f6\u95f4\u6233 \n \n \n block_number \n bigint \n \u533a\u5757\u53f7 \n \n \n base_fee_per_gas \n bigint \n \u5355\u4f4dgas\u8d39\u7528 \n \n \n coinbase_transfer \n bigint \n \u76f4\u63a5\u7ed9\u5230\u77ff\u5de5\u7684\u77ff\u5de5\u8d39 \n \n \n error \n string \n \u9519\u8bef \n \n \n gas_price \n bigint \n gas\u8d39 \n \n \n gas_price_with_coinbase_transfer \n bigint \n \u603b\u6d88\u8017\u7684gas+\u76f4\u63a5\u7ed9\u5230\u77ff\u5de5\u7684\u77ff\u5de5\u8d39 \n \n \n gas_used \n bigint \n gas\u6d88\u8017\u91cf \n \n \n gross_profit_usd \n double \n \u4ece\u4ea4\u6613\u4e2d\u83b7\u53d6\u7684\u603b\u6536\u76ca\uff08\u7f8e\u91d1\uff09 \n \n \n miner_address \n string \n \u77ff\u5de5\u5730\u5740 \n \n \n miner_payment_usd \n double \n \u77ff\u5de5\u6536\u76ca\uff08\u7f8e\u91d1\uff09 \n \n \n protocol \n string \n \u4e3b\u8981\u4ea4\u4e92\u7684\u534f\u8bae \n \n \n protocols \n string \n \u4ea4\u6613\u4e2d\u6d89\u53ca\u5230\u7684\u534f\u8bae \n \n \n transaction_hash \n string \n \u4ea4\u6613\u54c8\u5e0c \n \n \n type \n string \n MEV\u7c7b\u578b\uff08\u6bd4\u5982\u5957\u5229\uff09 \n \n \n timestamp \n timestamp \n \u6587\u4ef6\u6700\u540e\u66f4\u65b0\u7684\u65f6\u95f4\u6233", "url": "https://dune.com/docs/zh/reference/tables/v2/community/flashbots/mev_summary/#flashbotsmev_summary"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/polygon/blocks.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/polygon/blocks/"}
{"content": "\u6e05\u7b97\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/community/flashbots/liquidations/#_1"}
{"content": "flashbots.liquidations \u00b6 \n \u6e05\u7b97\u662f\u53e6\u4e00\u79cdMEV\u7b56\u7565\u3002\u672c\u8868\u5305\u542b\u4e0e\u5df2\u6267\u884c\u7684\u6e05\u7b97\u6709\u5173\u7684\u7ec6\u8282\u3002 \n \u67e5\u8be2\u793a\u4f8b\u53ef\u4ee5\u5728\u8fd9\u627e\u5230:  Liquidations by Protocol  (https://dune.com/queries/625715/1166880) \n \n \n \n \u5217\u540d\u79f0 \n \u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n created_at \n string \n \u8bb0\u5f55\u7684\u65f6\u95f4 \n \n \n transaction_hash \n string \n \u4ea4\u6613\u54c8\u5e0c \n \n \n trace_address \n string \n \u8be5\u4ea4\u6613\u4e0e\u6240\u6709MEV\u4ea4\u6613\u94fe\u4e2d\u7684\u76f8\u5173\u8bb0\u5f55 \n \n \n debt_token_address \n string \n \u503a\u52a1\u7684\u4ee3\u5e01\u5730\u5740 \n \n \n received_amount \n bigint \n \u4ece\u6e05\u7b97\u4e2d\u6536\u5230\u7684\u91d1\u989d \n \n \n protocol \n string \n \u534f\u8bae\u540d\u79f0 \n \n \n liquidated_user \n string \n \u88ab\u6e05\u7b97\u5730\u5740 \n \n \n liquidator_user \n string \n \u53d1\u8d77\u6e05\u7b97\u7684\u5730\u5740 \n \n \n received_token_address \n string \n \u6536\u5230\u7684\u8d44\u4ea7\u7684\u5730\u5740 \n \n \n block_number \n bigint \n \u533a\u5757\u53f7 \n \n \n debt_purchase_amount \n bigint \n \u8d2d\u4e70\u7684\u503a\u52a1\u91d1\u989d \n \n \n timestamp \n timestamp \n \u6587\u4ef6\u6700\u540e\u66f4\u65b0\u7684\u65f6\u95f4\u6233", "url": "https://dune.com/docs/zh/reference/tables/v2/community/flashbots/liquidations/#flashbotsliquidations"}
{"content": "\u5957\u5229\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/community/flashbots/arbitrages/#_1"}
{"content": "flashbots.arbitrages \u00b6 \n \u6b64\u8868\u5305\u542b\u6709\u5173\u4e8e\u6bcf\u4e2a\u5957\u5229\u4ea4\u6613\u7684\u989d\u5916\u4fe1\u606f\u7684\u8bb0\u5f55\u3002 \n \u67e5\u8be2\u793a\u4f8b\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230:  Total Arb Protocols  (https://dune.com/queries/626076/1167481) \n \n \n \n \u5217\u540d\u79f0 \n \u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n block_number \n bigint \n \u533a\u5757\u53f7 \n \n \n account_address \n string \n \u5bfb\u627e\u4eba\uff08searcher\uff09\u7684\u5730\u5740 \n \n \n created_at \n string \n \u8bb0\u5f55\u7684\u65f6\u95f4 \n \n \n end_amount \n bigint \n \u5957\u5229\u540e\u53ef\u83b7\u6570\u91cf \n \n \n error \n string \n \u5957\u5229\u540e\u53ef\u83b7\u6570\u91cf \n \n \n id \n string \n \u5957\u5229\u7684\u5185\u90e8Id \n \n \n profit_amount \n bigint \n \u5957\u5229\u540e\u53ef\u83b7\u6536\u76ca \n \n \n profit_token_address \n string \n \u83b7\u5229\u8d44\u4ea7\u5730\u5740 \n \n \n protocols \n string \n \u4ea4\u6613\u4e2d\u8bbe\u8ba1\u7684\u534f\u8bae\u5217\u8868 \n \n \n start_amount \n bigint \n \u5957\u5229\u524d\u53ef\u83b7\u6570\u91cf \n \n \n transaction_hash \n string \n \u4ea4\u6613\u54c8\u5e0c \n \n \n timestamp \n timestamp \n \u6587\u4ef6\u6700\u540e\u66f4\u65b0\u7684\u65f6\u95f4\u6233", "url": "https://dune.com/docs/zh/reference/tables/v2/community/flashbots/arbitrages/#flashbotsarbitrages"}
{"content": "Flashbots \u00b6 \n \u6ce8\u91ca:  mev-inspect-py\u662fFlashbots\u7684\u5f00\u6e90\u5f15\u64ce\uff0c\u7528\u4e8e\u751f\u6210MEV\u6570\u636e\uff0c\u4e3amev-explore\u548cDune\u7684Flashbots\u96c6\u6210\u7b49\u6570\u636e\u770b\u677f\u63d0\u4f9b\u6570\u636e\u3002\u5728\u793e\u533a\u548c\u8d21\u732e\u8005\u7684\u5e2e\u52a9\u4e0b\uff0c\u6211\u4eec\u4e00\u76f4\u5728\u5bfb\u6c42\u6539\u8fdb\uff0c\u4fee\u6b63\u9519\u8bef\uff0c\u5e76\u5c3d\u6211\u4eec\u6240\u80fd\u589e\u52a0\u534f\u8bae\u8986\u76d6\u7387\u3002\u6211\u4eec\u9f13\u52b1\u7814\u7a76\u4eba\u5458\u548c\u5f00\u53d1\u4eba\u5458\u53cd\u9988\u5e76\u5e2e\u52a9\u6211\u4eec\u7ea0\u6b63\u4e00\u5207bug\uff0c\u6216\u5e2e\u52a9\u6211\u4eec\u5b9e\u73b0\u4efb\u610f\u65b0\u529f\u80fd\uff01\u8bf7\u81ea\u7531\u67e5\u9605\u6587\u6863\uff0c\u52a0\u5165\u6211\u4eec\u4e00\u8d77\u5f00\u53d1\u5efa\u8bbe\uff01\u540c\u65f6\u8bf7\u52a0\u5165Flashbots\u8ba8\u8bba\u7ec4\uff0c\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u6211\u4eec\u7684\u6d88\u606f\uff0c\u4ee5\u53ca\u548cmev-inspect\u7684\u6700\u65b0\u6d88\u606f\u3002 \n \u6587\u6863:   https://docs.flashbots.net/  (https://docs.flashbots.net) \n Discord:   https://discord.gg/7hvTycdNcK  (https://discord.gg/7hvTycdNcK)", "url": "https://dune.com/docs/zh/reference/tables/v2/community/flashbots/#flashbots"}
{"content": "\u533a\u5757\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/polygon/blocks/#_1"}
{"content": "polygon.blocks \u00b6 \n \u533a\u5757\u662f\u533a\u5757\u94fe\u548c\u6c47\u603b\uff08rollups\uff09\u7684\u6784\u5efa\u7ec4\u4ef6\u3002\u4e00\u4e2a\u533a\u5757\u5305\u542b\u5c06\u9010\u6e10\u6539\u53d8EVM\u7cfb\u7edf\u72b6\u6001\u7684\u591a\u4e2a\u4ea4\u6613\u3002\u533a\u5757\u5185\u7684\u4ea4\u6613\u53ea\u80fd\u4e00\u4e2a\u63a5\u4e00\u4e2a\u5730\u6267\u884c\uff0c\u4e0d\u80fd\u5e76\u884c\u6267\u884c\u3002 \n \n \n \n \u5b57\u6bb5\u540d\u79f0 \n \u6570\u636e\u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n time \n timestamptz \n \u5f53\u524d\u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n number \n numeric \n \u533a\u5757\u94fe\u7684\u957f\u5ea6\uff08\u4ee5\u533a\u5757\u6570\u4e3a\u5355\u4f4d\uff09 \n \n \n hash \n string \n \u5f53\u524d\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n parent hash \n string \n \u524d\u4e00\u4e2a\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n gas_limit \n numeric \n \u5f53\u524d\u533a\u5757\u7684\u71c3\u6599\u9650\u5236 \n \n \n gas_used \n numeric \n \u5f53\u524d\u533a\u5757\u6d88\u8017\u7684\u71c3\u6599\u6570\u91cf \n \n \n miner \n string \n \u77ff\u5de5\u7684\u5730\u5740 \n \n \n difficulty \n numeric \n \u96be\u5ea6\u503c\uff0c\u5373\u5f00\u91c7\u5f53\u524d\u533a\u5757\u6240\u9700\u7684\u52aa\u529b \n \n \n total_difficulty \n numeric \n \u533a\u5757\u94fe\u5230\u5f53\u524d\u533a\u5757\u4e3a\u6b62\u7684\u603b\u96be\u5ea6\u503c \n \n \n nonce \n string \n \u533a\u5757\u968f\u673a\u6570\uff0c\u7528\u4e8e\u5c55\u793a\u6316\u77ff\u8fc7\u7a0b\u4e2d\u7684\u5de5\u4f5c\u91cf\u8bc1\u660e \n \n \n size \n numeric \n \u533a\u5757\u7684\u5927\u5c0f\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\uff0c\u53d7\u672c\u533a\u5757\u71c3\u6599\u9650\u5236\u7684\u7ea6\u675f \n \n \n base_fee_per_gas \n numeric \n \u5f53\u524d\u533a\u5757\u7684\u57fa\u672c\u71c3\u6599\u8d39\u7528\uff08\u7531 EIP1559  (https://eips.ethereum.org/EIPS/eip-1559) \uff09\u5f15\u5165", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/polygon/blocks/#polygonblocks"}
{"content": "\u8df3\u8f6c\u81f3\n          (#polygon) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/polygon/index.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/polygon/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/optimism/transactions.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/optimism/transactions/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/optimism/traces.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/optimism/traces/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/optimism/event-logs.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/optimism/event-logs/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/optimism/blocks.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/optimism/blocks/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#optimism) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/optimism/index.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/optimism/"}
{"content": "Polygon \u00b6 \n Polygon\uff08\u539fMATIC\uff09\u662f\u7531Polygon Technology\u6258\u7ba1\u548c\u7ef4\u62a4\u7684\u4ee5\u592a\u574a\u4fa7\u94fe\u3002Polygon PoS\u662f\u4e00\u79cd\u5229\u7528POS\u7f51\u7edc\u5b9e\u73b0\u4ea4\u6613\u901f\u5ea6\u63d0\u5347\u548c\u6210\u672c\u8282\u7ea6\u7684\u89e3\u51b3\u65b9\u6848\u3002Polygon\u5bf9\u8282\u70b9\u7684\u8981\u6c42\u660e\u663e\u9ad8\u4e8e\u4e3b\u7f51\u7684\u8981\u6c42\uff0c\u56e0\u4e3aPolygon\u5177\u6709\u66f4\u9ad8\u7684\u71c3\u6599\u9650\u5236\u548c\u66f4\u77ed\u7684\u963b\u585e\u65f6\u95f4\u3002 \n \u60a8\u53ef\u4ee5\u5728\u4ed6\u4eec\u7684 \u6587\u6863  (https://docs.polygon.technology) \u4e2d\u9605\u8bfb\u6709\u5173Polygon\u53ca\u5176\u6269\u5c55EVM\u7684\u65b9\u6cd5\u7684\u66f4\u591a\u4fe1\u606f\u3002 \n Polygon\u9075\u5faaETH\u4e3b\u7f51\u7684\u6240\u6709\u89c4\u5219\uff0c\u5728Dune\u4e0a\u7684\u67e5\u8be2\u5de5\u4f5c\u65b9\u5f0f\u5b8c\u5168\u76f8\u540c\u3002 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/polygon/#polygon"}
{"content": "\u539f\u59cb\u6570\u636e\u8868 \u00b6 \n \n \n \u533a\u5757\u8868\uff08Blocks\uff09  (blocks/) \n \u4ea4\u6613\u8868\uff08Transactions\uff09  (transactions/) \n \u4e8b\u4ef6\u65e5\u5fd7\u8868\uff08Logs\uff09  (event-logs/) \n \u5185\u90e8\u5408\u7ea6\u8c03\u7528\u8868\uff08Traces\uff09  (traces/)", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/polygon/#_1"}
{"content": "\u4ea4\u6613\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/optimism/transactions/#_1"}
{"content": "optimism.transactions \u00b6 \n \u4ea4\u6613\u662f\u6765\u81ea\u8d26\u6237\u7684\u52a0\u5bc6\u7b7e\u540d\u6307\u4ee4\u3002\u5e10\u6237\u901a\u8fc7\u53d1\u8d77\u4ea4\u6613\u6765\u66f4\u65b0\u4ee5\u592a\u574a\u7f51\u7edc\u7684\u72b6\u6001\u3002\u4ea4\u6613\u59cb\u7ec8\u6765\u81ea\u5916\u90e8\u62e5\u6709\u7684\u8d26\u6237\uff0c\u667a\u80fd\u5408\u7ea6\u65e0\u6cd5\u53d1\u8d77\u4ea4\u6613\u3002 \n \u4ea4\u6613\u9700\u8981\u5e7f\u64ad\u5230\u6574\u4e2a\u7f51\u7edc\u3002\u4efb\u4f55\u8282\u70b9\u90fd\u53ef\u4ee5\u5e7f\u64ad\u5728EVM\u4e0a\u5373\u5c06\u6267\u884c\u4ea4\u6613\u7684\u8bf7\u6c42\uff1b\u5e7f\u64ad\u53d1\u9001\u540e\uff0c\u77ff\u5de5\u5c06\u6267\u884c\u4ea4\u6613\u5e76\u5c06\u7ed3\u679c\u72b6\u6001\u66f4\u6539\u4f20\u64ad\u5230\u7f51\u7edc\u7684\u5176\u4f59\u90e8\u5206\u3002 \n \u70b9\u51fb \u8fd9\u91cc  (https://ethereum.org/en/developers/docs/transactions) \u5728\u4ee5\u592a\u574a\u5b98\u65b9\u6587\u6863\u4e2d\u9605\u8bfb\u66f4\u591a\u4fe1\u606f\u3002 \n \n \n \n \u5b57\u6bb5\u540d\u79f0 \n \u6570\u636e\u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n block_time \n timestamptz \n \u5305\u542b\u6b64\u4ea4\u6613\u7684\u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n nonce \n numeric \n \u53d1\u8d77\u4ea4\u6613\u7684\u94b1\u5305\u7684\u552f\u4e00\u503c\u4ea4\u6613\u968f\u673a\u6570 \n \n \n index \n numeric \n \u5f53\u524d\u4ea4\u6613\u5728\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e \n \n \n success \n boolean \n \u663e\u793a\u4ea4\u6613\u662f\u5426\u6210\u529f\u7684\u771f/\u5047\u503c \n \n \n from \n string \n \u53d1\u9001\u8005\u7684\u5730\u5740 \n \n \n to \n string \n \u63a5\u6536\u8005\u7684\u5730\u5740\u3002\u5f53\u662f\u5408\u7ea6\u521b\u5efa\u4ea4\u6613\u65f6\u503c\u4e3a NULL \n \n \n value \n numeric \n \u5728\u6b64\u4ea4\u6613\u4e2d\u53d1\u9001\u7684\u4ee5 wei \u4e3a\u5355\u4f4d\u7684\u4ee5\u592a\u5e01\u6570\u91cf\u3002\u8bf7\u6ce8\u610f\uff0cerc20\u4ee3\u5e01\u4e0d\u4f1a\u51fa\u73b0\u5728\u8fd9\u91cc\u3002 \n \n \n block_number \n int8 \n \u533a\u5757\u94fe\u7684\u957f\u5ea6\uff08\u4ee5\u533a\u5757\u6570\u4e3a\u5355\u4f4d\uff09 \n \n \n block_hash \n string \n \u5f53\u524d\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n gas_limit \n numeric \n \u4ee5 wei \u8868\u793a\u7684\u71c3\u6599\u9650\u5236 \n \n \n gas_price \n numeric \n \u4ee5 wei \u8868\u793a\u7684\u71c3\u6599\u4ef7\u683c \n \n \n gas_used \n numeric \n \u4ee5 wei \u8868\u793a\u7684\u5f53\u524d\u4ea4\u6613\u6d88\u8017\u7684\u71c3\u6599\u6570\u91cf \n \n \n data \n string \n \u53ef\u4ee5\u662f\u7a7a\u503c\u3001\u5341\u516d\u8fdb\u5236\u7f16\u7801\u7684\u6d88\u606f\u6216\u667a\u80fd\u5408\u7ea6\u8c03\u7528\u6307\u4ee4 \n \n \n hash \n string \n \u4ea4\u6613\u7684\u54c8\u5e0c\u503c \n \n \n type \n text \n \u4ea4\u6613\u7c7b\u578b\uff1a Legacy \uff0c AccessList \u6216 DynamicFee \n \n \n access_list \n jsonb \n n/a \n \n \n max_fee_per_gas \n numeric \n n/a \n \n \n max_priority_fee_per_gas \n numeric \n n/a \n \n \n priority_fee_per_gas \n numeric \n n/a \n \n \n l1_gas_used \n numeric \n \u5c06\u8f93\u5165\u6570\u636e\uff08calldata\uff09\u53d1\u9001\u5230L1\u7684\u6210\u672c \n \n \n l1_gas_price \n numeric \n L1\u4e0a\u7684\u71c3\u6599\u4ef7\u683c \n \n \n l1_fee \n numeric \n \u4ee5 wei \u8868\u793a\u7684L1\u4e0a\u652f\u4ed8\u7684\u71c3\u6599\u8d39 \n \n \n l1_fee_scalar \n numeric \n \u786e\u4fddL1\u4e0a\u7684\u71c3\u6599\u6210\u672c\u5f97\u5230\u8986\u76d6\u5e76\u4e14\u6709\u5229\u53ef\u56fe\u7684\u53ef\u53d8\u53c2\u6570 \n \n \n l1_block_\\number \n numeric \n \u8be5\u6279\u6b21\u4ea4\u6613\u5728L1\u4e0a\u7ed3\u7b97\u7684\u533a\u5757\u7684\u7f16\u53f7 \n \n \n l1_timestamp \n numeric \n \u6b64\u4ea4\u6613\u5728L1\u4e0a\u6279\u91cf\u7ed3\u7b97\u7684\u533a\u5757\u7684\u65f6\u95f4\u6233 \n \n \n l1_tx_origin \n numeric \n ?? \n \n \n \n **** \u8bf7\u81ea\u884c\u67e5\u770b\u67e5\u8be2\u793a\u4f8b  (https://dune.xyz/queries/38964) ****", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/optimism/transactions/#optimismtransactions"}
{"content": "\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/optimism/traces/#_1"}
{"content": "optimism.traces \u00b6 \n \u4ea4\u6613\uff08Transactions\uff09\u53ef\u4ee5\u89e6\u53d1\u4fee\u6539\u4ee5\u592a\u574a\u865a\u62df\u673a\u5185\u90e8\u72b6\u6001\u7684\u66f4\u5c0f\u7684\u539f\u5b50\u64cd\u4f5c\u3002\u6709\u5173\u8fd9\u4e9b\u64cd\u4f5c\u6267\u884c\u7684\u4fe1\u606f\u4f1a\u88ab\u8bb0\u5f55\u4e0b\u6765\uff0c\u5e76\u4e14\u53ef\u4ee5\u5b58\u50a8\u4e3aEVM\u6267\u884c\u5185\u90e8\u5408\u7ea6\uff0c\u6216\u8005\u53ea\u662f\u4e00\u4e2a_\u5185\u90e8\u5408\u7ea6_\u3002\u5728Etherscan\u4e2d\uff0c\u8fd9\u4e9b\u88ab\u79f0\u4e3a\u201c\u5185\u90e8\u4ea4\u6613\u201d\u3002 \n \u70b9\u51fb \u8fd9\u91cc  (https://medium.com/chainalysis/ethereum-traces-not-transactions-3f0533d26aa) \u9605\u8bfb\u66f4\u591a\u4fe1\u606f\u3002 \n \n \n \n \u5b57\u6bb5\u540d\u79f0 \n \u6570\u636e\u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n block_time \n timestamptz \n \u5305\u542b\u6b64\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u7684\u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n tx_success \n boolean \n \u6307\u793a\u4ea4\u6613\u662f\u5426\u6210\u529f\u7684\u771f/\u5047\u503c \n \n \n success \n boolean \n \u6307\u793a\u5f53\u524d\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u64cd\u4f5c\u662f\u5426\u6210\u529f\u7684\u771f/\u5047\u503c \n \n \n block_hash \n string \n \u5f53\u524d\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n block_number \n int8 \n \u533a\u5757\u94fe\u7684\u957f\u5ea6\uff08\u4ee5\u533a\u5757\u6570\u4e3a\u5355\u4f4d\uff09 \n \n \n tx_hash \n string \n \u53d1\u51fa\u6b64\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u7684\u4ea4\u6613\u7684\u54c8\u5e0c\u503c \n \n \n from \n string \n \u53d1\u9001\u8005\u7684\u5730\u5740 \n \n \n to \n string \n \u63a5\u6536\u8005\u7684\u5730\u5740\u3002\u5f53\u5b83\u662f\u4e00\u4e2a\u5408\u7ea6\u521b\u5efa\u4ea4\u6613\u65f6\uff0c\u5176\u503c\u4e3a Null \n \n \n value \n numeric \n \u672c\u6b21\u4ea4\u6613\u4e2d\u53d1\u9001\u7684\u4ee5\u592a\u5e01\u6570\u91cf\uff0c\u4ee5 wei \u8868\u793a \n \n \n gas \n numeric \n \u968f\u6d88\u606f\u8c03\u7528\u53d1\u9001\u7684\u71c3\u6599\u6570\u91cf \n \n \n gas_used \n numeric \n \u6d88\u606f\u8c03\u7528\u6d88\u8017\u7684\u71c3\u6599\u6570\u91cf\uff0c\u4ee5 wei \u8868\u793a \n \n \n tx_index \n numeric \n \u5f52\u5c5e\u7684\u4ea4\u6613\u5728\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e \n \n \n trace_address \n array \n \u5f53\u524d\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u5728\u8c03\u7528\u56fe\u68ee\u6797\u4e2d\u7684\u5730\u5740\u3002\u4f8b\u5982\uff0c[0, 2, 1] \u662f [0, 2, 1, 0] \u7684\u7236\u7ea7 \n \n \n sub_traces \n numeric \n \u5b50\u7ea7\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u7684\u6570\u91cf \n \n \n type \n text \n \u53ef\u4ee5\u662f reward \uff0c create \uff0c call \u6216\u8005 suicide \u3002\u63cf\u8ff0\u5728\u6b64\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u4e2d\u4f7f\u7528\u7684\u64cd\u4f5c\u7c7b\u578b\u3002 \n \n \n address \n string \n \u5f53\u7c7b\u578b\u662f suicide \u6216\u8005 create \u65f6\u4fdd\u5b58\u8c03\u7528\u7684\u5408\u7ea6\u5730\u5740 \n \n \n code \n string \n \u90e8\u7f72\u65b0\u5408\u7ea6\u7684\u5b57\u8282\u7801\uff0c\u4ec5\u5728\u8c03\u7528\u7c7b\u578b\u4e3a create \u65f6\u5305\u542b\u6570\u636e\u3002 \n \n \n call_type \n string \n \u53ef\u4ee5\u662f staticcall \uff0c delegatecall \u6216\u8005 call \u3002 \u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u8003 \u8fd9\u91cc  (https://medium.com/coinmonks/delegatecall-calling-another-contract-function-in-solidity-b579f804178c) \u3002 \n \n \n input \n string \n \u8c03\u7528\u53e6\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6\u7684\u5b57\u8282\u7801 \n \n \n output \n string \n \u88ab\u8c03\u7528\u667a\u80fd\u5408\u7ea6\u53d1\u9001\u56de\u6765\u7684\u5b57\u8282\u7801\u54cd\u5e94 \n \n \n refund_address \n string \n \u4ec5\u5728 type \u662f suicide \u65f6\u5305\u542b\u6570\u636e\u3002\u6307\u5b9a\u5c06\u672a\u652f\u51fa\u7684\u4ee5\u592a\u5e01\u4f59\u989d\u53d1\u9001\u5230\u54ea\u91cc\u3002 \n \n \n \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/optimism/traces/#optimismtraces"}
{"content": "\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u6d88\u8017\u7684\u71c3\u6599 \u00b6 \n ethereum.traces\u8868\u4e2d\u7684 gas_used \u5b57\u6bb5\u6709\u70b9\u96be\u4ee5\u7406\u89e3\uff0c\u6240\u4ee5\u8fd9\u91cc\u6709\u4e00\u4e9b\u63d0\u793a\uff1a \n \n \u5185\u90e8\u5408\u7ea6\u8c03\u7528\u7684 gas_used \u5c06\u59cb\u7ec8\u5305\u62ec\u5408\u7ea6\u8c03\u7528\u672c\u8eab\u4ee5\u53ca\u5176\u6240\u6709\u5b50\u7ea7\u5408\u7ea6\u8c03\u7528\u6240\u6d88\u8017\u7684\u71c3\u6599\u3002 \n \u521d\u59cb\u8c03\u7528\u7684 gas_used \u5c06\u4e0d\u5305\u542b\u53d1\u8d77\u8c03\u7528\u65f6\u5df2\u53d1\u751f\u7684\u71c3\u6599\u6d88\u8017\u3002 \n \u60a8\u9700\u8981\u5c06\u201c21000\u4e2a\u71c3\u6599\u5355\u4f4d + \u53d1\u9001\u96f6\u5b50\u8282\u53ca\u53d1\u9001\u975e\u96f6\u5b57\u8282\u7684\u71c3\u6599\u6210\u672c\u201d\u6dfb\u52a0\u5230\u9876\u90e8\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u7684 gas_used \u503c\u4e0a\uff0c\u4ee5\u5f97\u5230\u201c\u771f\u5b9e\u201d\u7684 gas_used \u503c\u3002 \n \u6709\u5173\u6b64\u5185\u5bb9\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u6b64 stackexchange\u6761\u76ee  (https://ethereum.stackexchange.com/questions/31443/what-do-the-response-values-of-a-parity-trace-transaction-call-actually-repres) \n \u5728Dune\u4e2d\u6267\u884c\u6b64\u64cd\u4f5c\u7684\u67e5\u8be2\u793a\u4f8b\uff1a https://dune.com/queries/895857  (https://dune.com/queries/895857)", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/optimism/traces/#_2"}
{"content": "\u4e8b\u4ef6\u65e5\u5fd7\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/optimism/event-logs/#_1"}
{"content": "optimism.logs \u00b6 \n \u6b64\u8868\u5b58\u50a8\u4e86\u667a\u80fd\u5408\u7ea6\u751f\u6210\u7684\u6240\u6709\u4e8b\u4ef6\u65e5\u5fd7\u3002\u5b83\u5bf9\u4e8e\u67e5\u8be2\u5c1a\u672a\u88ab\u89e3\u7801\u6216\u8005\u7531\u4e8e\u4ee3\u7801\u975e\u5f00\u6e90\u800c\u65e0\u6cd5\u89e3\u7801\u7684\u5408\u7ea6\u5f88\u6709\u7528\u3002 \n \u4e8b\u4ef6\u65e5\u5fd7\uff08Logs\uff09\u662f\u4e00\u79cd\u5728EVM\u533a\u5757\u94fe\u4e0a\u5b58\u50a8\u5c11\u91cf\u6570\u636e\u4ece\u800c\u53ea\u6d88\u8017\u5c11\u91cf\u71c3\u6599\u7684\u4f18\u96c5\u65b9\u5f0f\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u4e8b\u4ef6\u65e5\u5fd7\u6709\u52a9\u4e8e\u8ba9\u5176\u4ed6\u4eba\u4e0d\u5fc5\u5355\u72ec\u67e5\u8be2\u5177\u4f53\u7684\u5408\u7ea6\u4ee3\u7801\u5c31\u80fd\u77e5\u9053\u53d1\u751f\u4e86\u4ec0\u4e48\u4e8b\u60c5\u3002 \n \u6709\u5173\u6b64\u4e3b\u9898\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u9605\u8bfb \u672c\u6587  (https://medium.com/mycrypto/understanding-event-logs-on-the-ethereum-blockchain-f4ae7ba50378) \u3002 \n \u6ce8\u610f\uff1a\u6211\u4eec\u7684\u4e3b\u9898\u7d22\u5f15\u662f\u4ece1\u5f00\u59cb\u8ba1\u6570\u7684\uff0c\u6240\u4ee5 topic0 \u663e\u793a\u4e3a topic1 \uff0c topic1 \u663e\u793a\u4e3a topic2 \uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \n \n \n \n \u5b57\u6bb5\u540d\u79f0 \n \u6570\u636e\u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n block_hash \n string \n \u5f53\u524d\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n block_number \n int8 \n \u533a\u5757\u94fe\u7684\u957f\u5ea6\uff08\u4ee5\u533a\u5757\u6570\u4e3a\u5355\u4f4d\uff09 \n \n \n block_time \n timestamptz \n \u5305\u542b\u6b64\u4e8b\u4ef6\u65e5\u5fd7\u7684\u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n contract_address \n string \n \u53d1\u51fa\u5f53\u524d\u4e8b\u4ef6\u65e5\u5fd7\u7684\u5408\u7ea6\u5730\u5740 \n \n \n topic1 \n string \n \u4e8b\u4ef6\u58f0\u660e\u5b57\u7b26\u4e32\u5e73\u5c55\u540e\u7684keccak256\u54c8\u5e0c\u503c \n \n \n topic2 \n string \n \u4e8b\u4ef6\u7684\u7d22\u5f15\u4e3b\u98981 \n \n \n topic3 \n string \n \u4e8b\u4ef6\u7684\u7d22\u5f15\u4e3b\u98982 \n \n \n topic4 \n string \n \u4e8b\u4ef6\u7684\u7d22\u5f15\u4e3b\u98983 \n \n \n data \n string \n \u5305\u542b\u6709\u5173\u4e8b\u4ef6\u7684\u66f4\u591a\u4fe1\u606f\u7684\u672a\u7d22\u5f15\u6570\u636e \n \n \n tx_hash \n string \n \u4ea7\u751f\u6b64\u4e8b\u4ef6\u65e5\u5fd7\u7684\u4ea4\u6613\u7684\u54c8\u5e0c\u503c \n \n \n index \n numeric \n \u4e8b\u4ef6\u65e5\u5fd7\u5728\u88ab\u8bb0\u5f55\u7684\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e\uff08\u6309\u6267\u884c\u987a\u5e8f\u6392\u5e8f\u7684\u7d2f\u8ba1\u65e5\u5fd7\u6570\u91cf\uff09 \n \n \n tx_index \n numeric \n \u4e8b\u4ef6\u65e5\u5fd7\u5f52\u5c5e\u7684\u4ea4\u6613\u5728\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e\uff08\u6309\u6267\u884c\u987a\u5e8f\u6392\u5e8f\u7684\u7d2f\u8ba1\u4ea4\u6613\u6570\u91cf\uff09", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/optimism/event-logs/#optimismlogs"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/gnosis-chain-xdai/transactions.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/gnosis-chain-xdai/transactions/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/gnosis-chain-xdai/traces.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/gnosis-chain-xdai/traces/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/gnosis-chain-xdai/event-logs.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/gnosis-chain-xdai/event-logs/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/gnosis-chain-xdai/blocks.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/gnosis-chain-xdai/blocks/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/ethereum-mainnet/transactions.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/ethereum-mainnet/transactions/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/avalanche-c-chain/transactions.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/avalanche-c-chain/transactions/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/avalanche-c-chain/traces.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/avalanche-c-chain/traces/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/avalanche-c-chain/event-logs.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/avalanche-c-chain/event-logs/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/avalanche-c-chain/blocks.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/avalanche-c-chain/blocks/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#avalanche-c-chain) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/avalanche-c-chain/index.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/avalanche-c-chain/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/arbitrum/transactions.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/arbitrum/transactions/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/arbitrum/traces.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/arbitrum/traces/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/arbitrum/event-logs.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/arbitrum/event-logs/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/arbitrum/blocks.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/arbitrum/blocks/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#arbitrum) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/arbitrum/index.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/arbitrum/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#evm) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v2/raw/index.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#erc721) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v1/abstractions/special-tables/erc721.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/special-tables/erc721/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#erc20) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v1/abstractions/special-tables/erc20.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/special-tables/erc20/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#erc1155) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v1/abstractions/special-tables/erc1155.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/special-tables/erc1155/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v1/abstractions/special-tables/index.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/special-tables/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#dex) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v1/abstractions/prices-from-dexes.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/prices-from-dexes/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#nft-nfttrades) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v1/abstractions/nft.trading.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/nft.trading/"}
{"content": "\u533a\u5757\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/optimism/blocks/#_1"}
{"content": "optimism.blocks \u00b6 \n \u533a\u5757\u662f\u533a\u5757\u94fe\u548c\u6c47\u603b\uff08rollups\uff09\u7684\u6784\u5efa\u7ec4\u4ef6\u3002\u4e00\u4e2a\u533a\u5757\u5305\u542b\u5c06\u9010\u6e10\u6539\u53d8EVM\u7cfb\u7edf\u72b6\u6001\u7684\u591a\u4e2a\u4ea4\u6613\u3002\u533a\u5757\u5185\u7684\u4ea4\u6613\u53ea\u80fd\u4e00\u4e2a\u63a5\u4e00\u4e2a\u5730\u6267\u884c\uff0c\u4e0d\u80fd\u5e76\u884c\u6267\u884c\u3002 \n \n \n \n \u5b57\u6bb5\u540d\u79f0 \n \u6570\u636e\u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n time \n timestamptz \n \u5f53\u524d\u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n number \n numeric \n \u533a\u5757\u94fe\u7684\u957f\u5ea6\uff08\u4ee5\u533a\u5757\u6570\u4e3a\u5355\u4f4d\uff09 \n \n \n hash \n string \n \u5f53\u524d\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n parent hash \n string \n \u524d\u4e00\u4e2a\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n gas_limit \n numeric \n \u5f53\u524d\u533a\u5757\u7684\u71c3\u6599\u9650\u5236 \n \n \n gas_used \n numeric \n \u5f53\u524d\u533a\u5757\u6d88\u8017\u7684\u71c3\u6599\u6570\u91cf \n \n \n miner \n string \n n/a \n \n \n difficulty \n numeric \n \u96be\u5ea6\u503c\uff0c\u5373\u5f00\u91c7\u5f53\u524d\u533a\u5757\u6240\u9700\u7684\u52aa\u529b \n \n \n total_difficulty \n numeric \n \u533a\u5757\u94fe\u5230\u5f53\u524d\u533a\u5757\u4e3a\u6b62\u7684\u603b\u96be\u5ea6\u503c \n \n \n nonce \n string \n n/a \n \n \n size \n numeric \n \u533a\u5757\u7684\u5927\u5c0f\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\uff0c\u53d7\u672c\u533a\u5757\u71c3\u6599\u9650\u5236\u7684\u7ea6\u675f \n \n \n base_fee_per_gas \n numeric \n n/a", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/optimism/blocks/#optimismblocks"}
{"content": "Optimism \u00b6 \n Optimism\u662f\u4e00\u4e2a\u7b2c2\u5c42\u4e50\u89c2\u6c47\u603b\u7f51\u7edc\uff0c\u65e8\u5728\u5229\u7528\u4ee5\u592a\u574a\u7684\u5f3a\u5927\u5b89\u5168\u4fdd\u8bc1\uff0c\u540c\u65f6\u964d\u4f4e\u5176\u6210\u672c\u548c\u5ef6\u8fdf\u3002Optimism\u5728\u4ee5\u592a\u574a\u4e3b\u7f51\u4e4b\u5916\u5904\u7406\u4ea4\u6613\uff0c\u51cf\u5c11\u57fa\u7840\u5c42\u7684\u62e5\u585e\u5e76\u63d0\u9ad8\u53ef\u6269\u5c55\u6027\u3002\u8981\u6df1\u5165\u4e86\u89e3Optimism\uff0c\u6211\u4eec\u5efa\u8bae\u9605\u8bfb\u4ed6\u4eec\u7684 \u6587\u6863  (https://community.optimism.io/docs/how-optimism-works) \u3002 \n Optimism\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5176EVM\u5b9e\u73b0\u4e2d\u8ba1\u7b97\u71c3\u6599\u6210\u672c\u7684\u65b9\u5f0f\uff0c\u56e0\u4e3a\u5b83\u8fd8\u9700\u8981\u4e3aL1\u8d44\u6e90\u4ed8\u8d39\u3002 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/optimism/#optimism"}
{"content": "Optimism\u7684\u71c3\u6599\u6210\u672c \u00b6 \n Optimism\u5728\u4ee5\u592a\u574a\u4e3b\u7f51\u4e0a\u7ed3\u6e05\u5b83\u7684\u4ea4\u6613\u3002\u901a\u8fc7\u5728L1\u4e0a\u7684\u6392\u5e8f\u5668\u5408\u7ea6\u5c06Optimism\u7f51\u7edc\u4e0a\u7684\u4efb\u610f\u7ed9\u5b9a\u4ea4\u6613\u7684\u539f\u59cb\u8c03\u7528\u6570\u636e\u6279\u91cf\u63d0\u4ea4\u5230L1\u7f51\u7edc\u3002\u6279\u91cf\u7ed3\u6e05\u4ea4\u6613\u7684\u8fd9\u4e9b\u6210\u672c\u9700\u8981\u5305\u62ec\u5728Optimism\u7684\u71c3\u6599\u6210\u672c\u8ba1\u7b97\u4e2d\u3002Optimism\u7684\u4ea4\u6613\u8d39\u7528\u4f7f\u7528\u4ee5\u4e0b\u516c\u5f0f\u8ba1\u7b97\uff1a \n \u4ea4 \u6613 \u8d39 \u7528 \u8d39 \u7528 \u71c3 \u6599 \u4ef7 \u683c \u71c3 \u6599 \u6d88 \u8017 \u6570 \u91cf \u4ea4 \u6613 \u8d39 \u7528 \u8d39 \u7528 \u71c3 \u6599 \u4ef7 \u683c \u71c3 \u6599 \u6d88 \u8017 \u6570 \u91cf \u4ea4 \u6613 \u8d39 \u7528 = L 1 \u8d39 \u7528 + ( L 2 \u71c3 \u6599 \u4ef7 \u683c \u2217 L 2 \u71c3 \u6599 \u6d88 \u8017 \u6570 \u91cf ) \n L1\u8d39\u7528\u5305\u62ec\uff1a \n \u8d39 \u7528 \u8d39 \u7528 \u6807 \u91cf \u71c3 \u6599 \u4ef7 \u683c \u71c3 \u6599 \u6d88 \u8017 \u6570 \u91cf \u8d39 \u7528 \u8d39 \u7528 \u6807 \u91cf \u71c3 \u6599 \u4ef7 \u683c \u71c3 \u6599 \u6d88 \u8017 \u6570 \u91cf L 1 \u8d39 \u7528 = L 1 \u8d39 \u7528 \u6807 \u91cf \u2217 L 1 \u71c3 \u6599 \u4ef7 \u683c \u2217 L 1 \u71c3 \u6599 \u6d88 \u8017 \u6570 \u91cf \n L1\u8d39\u7528\u6807\u91cf \u662f\u4e00\u4e2a\u53ef\u4ee5\u7531Optimism\u56e2\u961f\u589e\u52a0\u6216\u51cf\u5c11\u7684\u53d8\u91cf\u3002\u5b83\u786e\u4fddL1\u7684\u71c3\u6599\u6210\u672c\u5f97\u5230\u5145\u5206\u8986\u76d6\uff0c\u5e76\u4e3aOptimism\u56e2\u961f\u63d0\u4f9b\u6536\u5165\u3002 L1\u71c3\u6599\u4ef7\u683c \u662f\u5bf9\u4ee5\u592a\u574a\u4e3b\u7f51\u4e0a\u7684\u71c3\u6599\u4ef7\u683c\u7684\u4f30\u8ba1\u3002 \n L1\u71c3\u6599\u6d88\u8017\u6570\u91cf   \u53ef\u4ee5\u5206\u89e3\u4e3a\uff1a \n \u71c3 \u6599 \u6d88 \u8017 \u6570 \u91cf \u8c03 \u7528 \u6570 \u636e \u6d88 \u8017 \u7684 \u71c3 \u6599 \u4e00 \u4e2a \u56fa \u5b9a \u7684 \u95f4 \u63a5 \u71c3 \u6599 \u6210 \u672c \u71c3 \u6599 \u6d88 \u8017 \u6570 \u91cf \u8c03 \u7528 \u6570 \u636e \u6d88 \u8017 \u7684 \u71c3 \u6599 \u4e00 \u4e2a \u56fa \u5b9a \u7684 \u95f4 \u63a5 \u71c3 \u6599 \u6210 \u672c L 1 \u71c3 \u6599 \u6d88 \u8017 \u6570 \u91cf = \u8c03 \u7528 \u6570 \u636e \u6d88 \u8017 \u7684 \u71c3 \u6599 + \u4e00 \u4e2a \u56fa \u5b9a \u7684 \u95f4 \u63a5 \u71c3 \u6599 \u6210 \u672c \n \u56e0\u6b64\uff0cOptimism\u7684\u71c3\u6599\u6210\u672c\u7684\u5b8c\u6574\u8ba1\u7b97\u5305\u62ec\uff1a \n \u4ea4 \u6613 \u8d39 \u7528 \u8d39 \u7528 \u6807 \u91cf \u71c3 \u6599 \u4ef7 \u683c \u8c03 \u7528 \u6570 \u636e \u6d88 \u8017 \u7684 \u71c3 \u6599 \u4e00 \u4e2a \u56fa \u5b9a \u7684 \u95f4 \u63a5 \u71c3 \u6599 \u6210 \u672c \u4ea4 \u6613 \u8d39 \u7528 \u8d39 \u7528 \u6807 \u91cf \u71c3 \u6599 \u4ef7 \u683c \u8c03 \u7528 \u6570 \u636e \u6d88 \u8017 \u7684 \u71c3 \u6599 \u4e00 \u4e2a \u56fa \u5b9a \u7684 \u95f4 \u63a5 \u71c3 \u6599 \u6210 \u672c \u4ea4 \u6613 \u8d39 \u7528 = L 1 \u8d39 \u7528 \u6807 \u91cf \u2217 L 1 \u71c3 \u6599 \u4ef7 \u683c \u2217 ( L 1 \u8c03 \u7528 \u6570 \u636e \u6d88 \u8017 \u7684 \u71c3 \u6599 + \u4e00 \u4e2a \u56fa \u5b9a \u7684 \u95f4 \u63a5 \u71c3 \u6599 \u6210 \u672c ) \n \u60a8\u53ef\u4ee5\u5728 \u8fd9\u7bc7\u6587\u7ae0  (https://help.optimism.io/hc/en-us/articles/4411895794715-Transaction-fees) \u4e2d\u9605\u8bfb\u66f4\u591a\u5173\u4e8eOptimism\u71c3\u6599\u6210\u672c\u4ee5\u53ca\u5c06\u5176\u6700\u5c0f\u5316\u7684\u65b9\u6cd5\u3002 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/optimism/#optimism_1"}
{"content": "\u7b80\u800c\u8a00\u4e4b \u00b6 \n \u8981\u8ba1\u7b97Optimism\u4ea4\u6613\u7684\u71c3\u6599\u6210\u672c\uff0c\u60a8\u9700\u8981\u9075\u5faa\u4ee5\u4e0b\u516c\u5f0f\uff1a \n  (#__codelineno-0-1) L1\u8d39\u7528 + (\u71c3\u6599\u4ef7\u683c * \u71c3\u6599\u6d88\u8017\u6570\u91cf)\n \n \u6b64\u5916\uff0cOptimism\u5c1a\u672a\u5b9e\u65bdEIP1559\uff0c\u56e0\u6b64\u5b83\u9075\u5faa\u201c\u65e7\u201d\u7684\u71c3\u6599\u62cd\u5356\u6a21\u578b\u3002 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/optimism/#_1"}
{"content": "\u539f\u59cb\u6570\u636e\u8868 \u00b6 \n \n \n \u533a\u5757\u8868\uff08Blocks\uff09  (blocks/) \n \u4ea4\u6613\u8868\uff08Transactions\uff09  (transactions/) \n \u4e8b\u4ef6\u65e5\u5fd7\u8868\uff08Logs\uff09  (event-logs/) \n \u5185\u90e8\u5408\u7ea6\u8c03\u7528\u8868\uff08Traces\uff09  (traces/)", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/optimism/#_2"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v1/abstractions/lending-tables.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/lending-tables/"}
{"content": "\u4ea4\u6613\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/gnosis-chain-xdai/transactions/#_1"}
{"content": "gnosis.transactions \u00b6 \n \u4ea4\u6613\u662f\u6765\u81ea\u8d26\u6237\u7684\u52a0\u5bc6\u7b7e\u540d\u6307\u4ee4\u3002\u5e10\u6237\u901a\u8fc7\u53d1\u8d77\u4ea4\u6613\u6765\u66f4\u65b0\u4ee5\u592a\u574a\u7f51\u7edc\u7684\u72b6\u6001\u3002\u4ea4\u6613\u59cb\u7ec8\u6765\u81ea\u5916\u90e8\u62e5\u6709\u7684\u8d26\u6237\uff0c\u667a\u80fd\u5408\u7ea6\u65e0\u6cd5\u53d1\u8d77\u4ea4\u6613\u3002 \n \u4ea4\u6613\u9700\u8981\u5e7f\u64ad\u5230\u6574\u4e2a\u7f51\u7edc\u3002\u4efb\u4f55\u8282\u70b9\u90fd\u53ef\u4ee5\u5e7f\u64ad\u5728EVM\u4e0a\u5373\u5c06\u6267\u884c\u4ea4\u6613\u7684\u8bf7\u6c42\uff1b\u5e7f\u64ad\u53d1\u9001\u540e\uff0c\u77ff\u5de5\u5c06\u6267\u884c\u4ea4\u6613\u5e76\u5c06\u7ed3\u679c\u72b6\u6001\u66f4\u6539\u4f20\u64ad\u5230\u7f51\u7edc\u7684\u5176\u4f59\u90e8\u5206\u3002 \n \u70b9\u51fb \u8fd9\u91cc  (https://ethereum.org/en/developers/docs/transactions) \u5728\u4ee5\u592a\u574a\u5b98\u65b9\u6587\u6863\u4e2d\u9605\u8bfb\u66f4\u591a\u4fe1\u606f\u3002 \n \n \n \n \u5b57\u6bb5\u540d\u79f0 \n \u6570\u636e\u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n block_time \n timestamptz \n \u5305\u542b\u6b64\u4ea4\u6613\u7684\u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n nonce \n numeric \n \u53d1\u8d77\u4ea4\u6613\u7684\u94b1\u5305\u7684\u552f\u4e00\u503c\u4ea4\u6613\u968f\u673a\u6570 \n \n \n index \n numeric \n \u5f53\u524d\u4ea4\u6613\u5728\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e \n \n \n success \n boolean \n \u663e\u793a\u4ea4\u6613\u662f\u5426\u6210\u529f\u7684\u771f/\u5047\u503c \n \n \n from \n string \n \u53d1\u9001\u8005\u7684\u5730\u5740 \n \n \n to \n string \n \u63a5\u6536\u8005\u7684\u5730\u5740\u3002\u5f53\u662f\u5408\u7ea6\u521b\u5efa\u4ea4\u6613\u65f6\u503c\u4e3a NULL \n \n \n value \n numeric \n \u5728\u6b64\u4ea4\u6613\u4e2d\u53d1\u9001\u7684\u4ee5 atta \u4e3a\u5355\u4f4d\u7684\u4ee5\u592a\u5e01\u6570\u91cf\u3002\u8bf7\u6ce8\u610f\uff0cerc20\u4ee3\u5e01\u4e0d\u4f1a\u51fa\u73b0\u5728\u8fd9\u91cc\u3002 \n \n \n block_number \n int8 \n \u533a\u5757\u94fe\u7684\u957f\u5ea6\uff08\u4ee5\u533a\u5757\u6570\u4e3a\u5355\u4f4d\uff09 \n \n \n block_hash \n string \n \u5f53\u524d\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n gas_limit \n numeric \n \u4ee5 atta \u8868\u793a\u7684\u71c3\u6599\u9650\u5236 \n \n \n gas_price \n numeric \n \u4ee5 atta \u8868\u793a\u7684\u71c3\u6599\u4ef7\u683c \n \n \n gas_used \n numeric \n \u4ee5 atta \u8868\u793a\u7684\u5f53\u524d\u4ea4\u6613\u6d88\u8017\u7684\u71c3\u6599\u6570\u91cf \n \n \n data \n string \n \u53ef\u4ee5\u662f\u7a7a\u503c\u3001\u5341\u516d\u8fdb\u5236\u7f16\u7801\u7684\u6d88\u606f\u6216\u667a\u80fd\u5408\u7ea6\u8c03\u7528\u6307\u4ee4 \n \n \n hash \n string \n \u4ea4\u6613\u7684\u54c8\u5e0c\u503c \n \n \n type \n text \n \u4ea4\u6613\u7c7b\u578b\uff1a Legacy \uff0c AccessList \u6216 DynamicFee \n \n \n access_list \n jsonb \n \u4ea4\u6613\u51c6\u5907\u8bbf\u95ee\u7684\u5730\u5740\u548c\u5b58\u50a8\u5bc6\u94a5\u7684\u5217\u8868\u3002\u53c2\u89c1 EIP2930  (https://eips.ethereum.org/EIPS/eip-2930) \u3002\u9002\u7528\u4e8e\u4ea4\u6613\u7c7b\u578b\u4e3a AccessList \u6216 DynamicFee \u7684\u60c5\u51b5 \n \n \n max_fee_per_gas \n numeric \n \u4ea4\u6613\u53d1\u9001\u8005\u613f\u610f\u652f\u4ed8\u7684\u6bcf\u5355\u4f4d\u71c3\u6599\u7684\u6700\u9ad8\u8d39\u7528\u603b\u989d\uff08\u7531 EIP1559  (https://eips.ethereum.org/EIPS/eip-1559) \u5f15\u5165\uff09 \n \n \n max_priority_fee_per_gas \n numeric \n \u4ea4\u6613\u53d1\u9001\u8005\u613f\u610f\u5411\u77ff\u5de5\u652f\u4ed8\u7684\u6bcf\u5355\u4f4d\u71c3\u6599\u7684\u6700\u9ad8\u8d39\u7528\uff0c\u4ee5\u6fc0\u52b1\u4ed6\u4eec\u5728\u65b0\u533a\u5757\u4e2d\u5305\u542b\u4ed6\u4eec\u7684\u4ea4\u6613\uff08\u7531 EIP1559  (https://eips.ethereum.org/EIPS/eip-1559) \u5f15\u5165\uff09 \n \n \n priority_fee_per_gas \n numeric \n \u672c\u6b21\u4ea4\u6613\u652f\u4ed8\u7ed9\u77ff\u5de5\u7684\u4f18\u5148\u8d39\u7528\uff08\u7531 EIP1559  (https://eips.ethereum.org/EIPS/eip-1559)  \u5f15\u5165\uff09 \n \n \n \n **** \u8bf7\u81ea\u884c\u67e5\u770b\u67e5\u8be2\u793a\u4f8b  (https://dune.xyz/queries/38964) ****", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/gnosis-chain-xdai/transactions/#gnosistransactions"}
{"content": "\u8df3\u8f6c\u81f3\n          (#labels) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v1/abstractions/labels.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/labels/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#erc-20) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v1/abstractions/erc-20-balances.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/erc-20-balances/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#dextrades) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v1/abstractions/dex.trades.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/dex.trades/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v1/abstractions/index.md) \n \u6570\u636e\u62bd\u8c61 (V1) \n \u60a8\u53ef\u4ee5\u5728\u6211\u4eec\u7684  \u516c\u5171 github \u8d44\u6e90\u5e93  (https://github.com/duneanalytics/abstractions)  \u4e2d\u7684 deprecated-dune-v1-abstractions  \u67e5\u770b\u73b0\u6709\u7684\u6570\u636e\u62bd\u8c61\u3002 \n \u60a8\u901a\u5e38\u53ef\u4ee5\u5c06\u5b83\u4eec\u5206\u4e3a 2 \u4e2a\u4e0d\u540c\u7684\u7c7b\u522b\uff1a \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v1/decoded/event-logs.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/decoded/event-logs/"}
{"content": "\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/gnosis-chain-xdai/traces/#_1"}
{"content": "gnosis.traces \u00b6 \n \u4ea4\u6613\uff08Transactions\uff09\u53ef\u4ee5\u89e6\u53d1\u4fee\u6539\u4ee5\u592a\u574a\u865a\u62df\u673a\u5185\u90e8\u72b6\u6001\u7684\u66f4\u5c0f\u7684\u539f\u5b50\u64cd\u4f5c\u3002\u6709\u5173\u8fd9\u4e9b\u64cd\u4f5c\u6267\u884c\u7684\u4fe1\u606f\u4f1a\u88ab\u8bb0\u5f55\u4e0b\u6765\uff0c\u5e76\u4e14\u53ef\u4ee5\u5b58\u50a8\u4e3aEVM\u6267\u884c\u5185\u90e8\u5408\u7ea6\uff0c\u6216\u8005\u53ea\u662f\u4e00\u4e2a_\u5185\u90e8\u5408\u7ea6_\u3002\u5728Etherscan\u4e2d\uff0c\u8fd9\u4e9b\u88ab\u79f0\u4e3a\u201c\u5185\u90e8\u4ea4\u6613\u201d\u3002 \n \u70b9\u51fb \u8fd9\u91cc  (https://medium.com/chainalysis/ethereum-traces-not-transactions-3f0533d26aa) \u9605\u8bfb\u66f4\u591a\u4fe1\u606f\u3002 \n \n \n \n \u5b57\u6bb5\u540d\u79f0 \n \u6570\u636e\u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n block_time \n timestamptz \n \u5305\u542b\u6b64\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u7684\u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n tx_success \n boolean \n \u6307\u793a\u4ea4\u6613\u662f\u5426\u6210\u529f\u7684\u771f/\u5047\u503c \n \n \n success \n boolean \n \u6307\u793a\u5f53\u524d\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u64cd\u4f5c\u662f\u5426\u6210\u529f\u7684\u771f/\u5047\u503c \n \n \n block_hash \n string \n \u5f53\u524d\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n block_number \n int8 \n \u533a\u5757\u94fe\u7684\u957f\u5ea6\uff08\u4ee5\u533a\u5757\u6570\u4e3a\u5355\u4f4d\uff09 \n \n \n tx_hash \n string \n \u53d1\u51fa\u6b64\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u7684\u4ea4\u6613\u7684\u54c8\u5e0c\u503c \n \n \n from \n string \n \u53d1\u9001\u8005\u7684\u5730\u5740 \n \n \n to \n string \n \u63a5\u6536\u8005\u7684\u5730\u5740\u3002\u5f53\u5b83\u662f\u4e00\u4e2a\u5408\u7ea6\u521b\u5efa\u4ea4\u6613\u65f6\uff0c\u5176\u503c\u4e3a Null \n \n \n value \n numeric \n \u672c\u6b21\u4ea4\u6613\u4e2d\u53d1\u9001\u7684\u4ee5\u592a\u5e01\u6570\u91cf\uff0c\u4ee5 atta \u8868\u793a \n \n \n gas \n numeric \n \u968f\u6d88\u606f\u8c03\u7528\u53d1\u9001\u7684\u71c3\u6599\u6570\u91cf \n \n \n gas_used \n numeric \n \u6d88\u606f\u8c03\u7528\u6d88\u8017\u7684\u71c3\u6599\u6570\u91cf\uff0c\u4ee5 atta \u8868\u793a \n \n \n tx_index \n numeric \n \u5f52\u5c5e\u7684\u4ea4\u6613\u5728\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e \n \n \n trace_address \n array \n \u5f53\u524d\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u5728\u8c03\u7528\u56fe\u68ee\u6797\u4e2d\u7684\u5730\u5740\u3002\u4f8b\u5982\uff0c[0, 2, 1] \u662f [0, 2, 1, 0] \u7684\u7236\u7ea7 \n \n \n sub_traces \n numeric \n \u5b50\u7ea7\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u7684\u6570\u91cf \n \n \n type \n text \n \u53ef\u4ee5\u662f reward \uff0c create \uff0c call \u6216\u8005 suicide \u3002\u63cf\u8ff0\u5728\u6b64\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u4e2d\u4f7f\u7528\u7684\u64cd\u4f5c\u7c7b\u578b\u3002 \n \n \n address \n string \n \u5f53\u7c7b\u578b\u662f suicide \u6216\u8005 create \u65f6\u4fdd\u5b58\u8c03\u7528\u7684\u5408\u7ea6\u5730\u5740 \n \n \n code \n string \n \u90e8\u7f72\u65b0\u5408\u7ea6\u7684\u5b57\u8282\u7801\uff0c\u4ec5\u5728\u8c03\u7528\u7c7b\u578b\u4e3a create \u65f6\u5305\u542b\u6570\u636e\u3002 \n \n \n call_type \n string \n \u53ef\u4ee5\u662f staticcall \uff0c delegatecall \u6216\u8005 call \u3002 \u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u8003 \u8fd9\u91cc  (https://medium.com/coinmonks/delegatecall-calling-another-contract-function-in-solidity-b579f804178c) \u3002 \n \n \n input \n string \n \u8c03\u7528\u53e6\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6\u7684\u5b57\u8282\u7801 \n \n \n output \n string \n \u88ab\u8c03\u7528\u667a\u80fd\u5408\u7ea6\u53d1\u9001\u56de\u6765\u7684\u5b57\u8282\u7801\u54cd\u5e94 \n \n \n refund_address \n string \n \u4ec5\u5728 type \u662f suicide \u65f6\u5305\u542b\u6570\u636e\u3002\u6307\u5b9a\u5c06\u672a\u652f\u51fa\u7684\u4ee5\u592a\u5e01\u4f59\u989d\u53d1\u9001\u5230\u54ea\u91cc\u3002 \n \n \n \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/gnosis-chain-xdai/traces/#gnosistraces"}
{"content": "\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u6d88\u8017\u7684\u71c3\u6599 \u00b6 \n gnosis.traces\u8868\u4e2d\u7684 gas_used \u5b57\u6bb5\u6709\u70b9\u96be\u4ee5\u7406\u89e3\uff0c\u6240\u4ee5\u8fd9\u91cc\u6709\u4e00\u4e9b\u63d0\u793a\uff1a \n \n \u5185\u90e8\u5408\u7ea6\u8c03\u7528\u7684 gas_used \u5c06\u59cb\u7ec8\u5305\u62ec\u5408\u7ea6\u8c03\u7528\u672c\u8eab\u4ee5\u53ca\u5176\u6240\u6709\u5b50\u7ea7\u5408\u7ea6\u8c03\u7528\u6240\u6d88\u8017\u7684\u71c3\u6599\u3002 \n \u521d\u59cb\u8c03\u7528\u7684 gas_used \u5c06\u4e0d\u5305\u542b\u53d1\u8d77\u8c03\u7528\u65f6\u5df2\u53d1\u751f\u7684\u71c3\u6599\u6d88\u8017\u3002 \n \u60a8\u9700\u8981\u5c06\u201c21000\u4e2a\u71c3\u6599\u5355\u4f4d + \u53d1\u9001\u96f6\u5b50\u8282\u53ca\u53d1\u9001\u975e\u96f6\u5b57\u8282\u7684\u71c3\u6599\u6210\u672c\u201d\u6dfb\u52a0\u5230\u9876\u90e8\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u7684 gas_used \u503c\u4e0a\uff0c\u4ee5\u5f97\u5230\u201c\u771f\u5b9e\u201d\u7684 gas_used \u503c\u3002 \n \u6709\u5173\u6b64\u5185\u5bb9\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u6b64 stackexchange\u6761\u76ee  (https://ethereum.stackexchange.com/questions/31443/what-do-the-response-values-of-a-parity-trace-transaction-call-actually-repres) \n \u5728Dune\u4e2d\u6267\u884c\u6b64\u64cd\u4f5c\u7684\u67e5\u8be2\u793a\u4f8b\uff1a https://dune.com/queries/895857  (https://dune.com/queries/895857)", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/gnosis-chain-xdai/traces/#_2"}
{"content": "\u4e8b\u4ef6\u65e5\u5fd7\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/gnosis-chain-xdai/event-logs/#_1"}
{"content": "gnosis.logs \u00b6 \n \u6b64\u8868\u5b58\u50a8\u4e86\u667a\u80fd\u5408\u7ea6\u751f\u6210\u7684\u6240\u6709\u4e8b\u4ef6\u65e5\u5fd7\u3002\u5b83\u5bf9\u4e8e\u67e5\u8be2\u5c1a\u672a\u88ab\u89e3\u7801\u6216\u8005\u7531\u4e8e\u4ee3\u7801\u975e\u5f00\u6e90\u800c\u65e0\u6cd5\u89e3\u7801\u7684\u5408\u7ea6\u5f88\u6709\u7528\u3002 \n \u4e8b\u4ef6\u65e5\u5fd7\uff08Logs\uff09\u662f\u4e00\u79cd\u5728EVM\u533a\u5757\u94fe\u4e0a\u5b58\u50a8\u5c11\u91cf\u6570\u636e\u4ece\u800c\u53ea\u6d88\u8017\u5c11\u91cf\u71c3\u6599\u7684\u4f18\u96c5\u65b9\u5f0f\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u4e8b\u4ef6\u65e5\u5fd7\u6709\u52a9\u4e8e\u8ba9\u5176\u4ed6\u4eba\u4e0d\u5fc5\u5355\u72ec\u67e5\u8be2\u5177\u4f53\u7684\u5408\u7ea6\u4ee3\u7801\u5c31\u80fd\u77e5\u9053\u53d1\u751f\u4e86\u4ec0\u4e48\u4e8b\u60c5\u3002 \n \u6709\u5173\u6b64\u4e3b\u9898\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u9605\u8bfb \u672c\u6587  (https://medium.com/mycrypto/understanding-event-logs-on-the-ethereum-blockchain-f4ae7ba50378) \u3002 \n \u6ce8\u610f\uff1a\u6211\u4eec\u7684\u4e3b\u9898\u7d22\u5f15\u662f\u4ece1\u5f00\u59cb\u8ba1\u6570\u7684\uff0c\u6240\u4ee5 topic0 \u663e\u793a\u4e3a topic1 \uff0c topic1 \u663e\u793a\u4e3a topic2 \uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \n \n \n \n \u5b57\u6bb5\u540d\u79f0 \n \u6570\u636e\u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n block_hash \n string \n \u5f53\u524d\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n block_number \n int8 \n \u533a\u5757\u94fe\u7684\u957f\u5ea6\uff08\u4ee5\u533a\u5757\u6570\u4e3a\u5355\u4f4d\uff09 \n \n \n block_time \n timestamptz \n \u5305\u542b\u6b64\u4e8b\u4ef6\u65e5\u5fd7\u7684\u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n contract_address \n string \n \u53d1\u51fa\u5f53\u524d\u4e8b\u4ef6\u65e5\u5fd7\u7684\u5408\u7ea6\u5730\u5740 \n \n \n topic1 \n string \n \u4e8b\u4ef6\u58f0\u660e\u5b57\u7b26\u4e32\u5e73\u5c55\u540e\u7684keccak256\u54c8\u5e0c\u503c \n \n \n topic2 \n string \n \u4e8b\u4ef6\u7684\u7d22\u5f15\u4e3b\u98981 \n \n \n topic3 \n string \n \u4e8b\u4ef6\u7684\u7d22\u5f15\u4e3b\u98982 \n \n \n topic4 \n string \n \u4e8b\u4ef6\u7684\u7d22\u5f15\u4e3b\u98983 \n \n \n data \n string \n \u5305\u542b\u6709\u5173\u4e8b\u4ef6\u7684\u66f4\u591a\u4fe1\u606f\u7684\u672a\u7d22\u5f15\u6570\u636e \n \n \n tx_hash \n string \n \u4ea7\u751f\u6b64\u4e8b\u4ef6\u65e5\u5fd7\u7684\u4ea4\u6613\u7684\u54c8\u5e0c\u503c \n \n \n index \n numeric \n \u4e8b\u4ef6\u65e5\u5fd7\u5728\u88ab\u8bb0\u5f55\u7684\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e\uff08\u6309\u6267\u884c\u987a\u5e8f\u6392\u5e8f\u7684\u7d2f\u8ba1\u65e5\u5fd7\u6570\u91cf\uff09 \n \n \n tx_index \n numeric \n \u4e8b\u4ef6\u65e5\u5fd7\u5f52\u5c5e\u7684\u4ea4\u6613\u5728\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e\uff08\u6309\u6267\u884c\u987a\u5e8f\u6392\u5e8f\u7684\u7d2f\u8ba1\u4ea4\u6613\u6570\u91cf\uff09", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/gnosis-chain-xdai/event-logs/#gnosislogs"}
{"content": "\u533a\u5757\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/gnosis-chain-xdai/blocks/#_1"}
{"content": "gnosis.blocks \u00b6 \n \u533a\u5757\u662f\u533a\u5757\u94fe\u548c\u6c47\u603b\uff08rollups\uff09\u7684\u6784\u5efa\u7ec4\u4ef6\u3002\u4e00\u4e2a\u533a\u5757\u5305\u542b\u5c06\u9010\u6e10\u6539\u53d8EVM\u7cfb\u7edf\u72b6\u6001\u7684\u591a\u4e2a\u4ea4\u6613\u3002\u533a\u5757\u5185\u7684\u4ea4\u6613\u53ea\u80fd\u4e00\u4e2a\u63a5\u4e00\u4e2a\u5730\u6267\u884c\uff0c\u4e0d\u80fd\u5e76\u884c\u6267\u884c\u3002 \n \n \n \n \u5b57\u6bb5\u540d\u79f0 \n \u6570\u636e\u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n time \n timestamptz \n \u5f53\u524d\u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n number \n numeric \n \u533a\u5757\u94fe\u7684\u957f\u5ea6\uff08\u4ee5\u533a\u5757\u6570\u4e3a\u5355\u4f4d\uff09 \n \n \n hash \n bytea \n \u5f53\u524d\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n parent hash \n bytea \n \u524d\u4e00\u4e2a\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n gas_limit \n numeric \n \u5f53\u524d\u533a\u5757\u7684\u71c3\u6599\u9650\u5236 \n \n \n gas_used \n numeric \n \u5f53\u524d\u533a\u5757\u6d88\u8017\u7684\u71c3\u6599\u6570\u91cf \n \n \n miner \n bytea \n \u77ff\u5de5\u7684\u5730\u5740 \n \n \n difficulty \n numeric \n \u96be\u5ea6\u503c\uff0c\u5373\u5f00\u91c7\u5f53\u524d\u533a\u5757\u6240\u9700\u7684\u52aa\u529b \n \n \n total_difficulty \n numeric \n \u533a\u5757\u94fe\u5230\u5f53\u524d\u533a\u5757\u4e3a\u6b62\u7684\u603b\u96be\u5ea6\u503c \n \n \n nonce \n bytea \n n/a \n \n \n size \n numeric \n \u533a\u5757\u7684\u5927\u5c0f\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\uff0c\u53d7\u672c\u533a\u5757\u71c3\u6599\u9650\u5236\u7684\u7ea6\u675f \n \n \n base_fee_per_gas \n numeric \n \u5f53\u524d\u533a\u5757\u7684\u57fa\u672c\u71c3\u6599\u8d39\u7528\uff08\u7531 EIP1559  (https://eips.ethereum.org/EIPS/eip-1559) \uff09\u5f15\u5165", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/gnosis-chain-xdai/blocks/#gnosisblocks"}
{"content": "\u4ea4\u6613\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/ethereum-mainnet/transactions/#_1"}
{"content": "ethereum.transactions \u00b6 \n \u4ea4\u6613\u662f\u6765\u81ea\u8d26\u6237\u7684\u52a0\u5bc6\u7b7e\u540d\u6307\u4ee4\u3002\u5e10\u6237\u901a\u8fc7\u53d1\u8d77\u4ea4\u6613\u6765\u66f4\u65b0\u4ee5\u592a\u574a\u7f51\u7edc\u7684\u72b6\u6001\u3002\u4ea4\u6613\u59cb\u7ec8\u6765\u81ea\u5916\u90e8\u62e5\u6709\u7684\u8d26\u6237\uff0c\u667a\u80fd\u5408\u7ea6\u65e0\u6cd5\u53d1\u8d77\u4ea4\u6613\u3002 \n \u4ea4\u6613\u9700\u8981\u5e7f\u64ad\u5230\u6574\u4e2a\u7f51\u7edc\u3002\u4efb\u4f55\u8282\u70b9\u90fd\u53ef\u4ee5\u5e7f\u64ad\u5728EVM\u4e0a\u5373\u5c06\u6267\u884c\u4ea4\u6613\u7684\u8bf7\u6c42\uff1b\u5e7f\u64ad\u53d1\u9001\u540e\uff0c\u77ff\u5de5\u5c06\u6267\u884c\u4ea4\u6613\u5e76\u5c06\u7ed3\u679c\u72b6\u6001\u66f4\u6539\u4f20\u64ad\u5230\u7f51\u7edc\u7684\u5176\u4f59\u90e8\u5206\u3002 \n \u70b9\u51fb \u8fd9\u91cc  (https://ethereum.org/en/developers/docs/transactions) \u5728\u4ee5\u592a\u574a\u5b98\u65b9\u6587\u6863\u4e2d\u9605\u8bfb\u66f4\u591a\u4fe1\u606f\u3002 \n \n \n \n \u5b57\u6bb5\u540d\u79f0 \n \u6570\u636e\u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n block_time \n timestamptz \n \u5305\u542b\u6b64\u4ea4\u6613\u7684\u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n nonce \n numeric \n \u53d1\u8d77\u4ea4\u6613\u7684\u94b1\u5305\u7684\u552f\u4e00\u503c\u4ea4\u6613\u968f\u673a\u6570 \n \n \n index \n numeric \n \u5f53\u524d\u4ea4\u6613\u5728\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e \n \n \n success \n boolean \n \u663e\u793a\u4ea4\u6613\u662f\u5426\u6210\u529f\u7684\u771f/\u5047\u503c \n \n \n from \n string \n \u53d1\u9001\u8005\u7684\u5730\u5740 \n \n \n to \n string \n \u63a5\u6536\u8005\u7684\u5730\u5740\u3002\u5f53\u662f\u5408\u7ea6\u521b\u5efa\u4ea4\u6613\u65f6\u503c\u4e3a NULL \n \n \n value \n numeric \n \u5728\u6b64\u4ea4\u6613\u4e2d\u53d1\u9001\u7684\u4ee5 wei \u4e3a\u5355\u4f4d\u7684\u4ee5\u592a\u5e01\u6570\u91cf\u3002\u8bf7\u6ce8\u610f\uff0cerc20\u4ee3\u5e01\u4e0d\u4f1a\u51fa\u73b0\u5728\u8fd9\u91cc\u3002 \n \n \n block_number \n int8 \n \u533a\u5757\u94fe\u7684\u957f\u5ea6\uff08\u4ee5\u533a\u5757\u6570\u4e3a\u5355\u4f4d\uff09 \n \n \n block_hash \n string \n \u5f53\u524d\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n gas_limit \n numeric \n \u4ee5 wei \u8868\u793a\u7684\u71c3\u6599\u9650\u5236 \n \n \n gas_price \n numeric \n \u4ee5 wei \u8868\u793a\u7684\u71c3\u6599\u4ef7\u683c \n \n \n gas_used \n numeric \n \u4ee5 wei \u8868\u793a\u7684\u5f53\u524d\u4ea4\u6613\u6d88\u8017\u7684\u71c3\u6599\u6570\u91cf \n \n \n data \n string \n \u53ef\u4ee5\u662f\u7a7a\u503c\u3001\u5341\u516d\u8fdb\u5236\u7f16\u7801\u7684\u6d88\u606f\u6216\u667a\u80fd\u5408\u7ea6\u8c03\u7528\u6307\u4ee4 \n \n \n hash \n string \n \u4ea4\u6613\u7684\u54c8\u5e0c\u503c \n \n \n type \n text \n \u4ea4\u6613\u7c7b\u578b\uff1a Legacy \uff0c AccessList \u6216 DynamicFee \n \n \n access_list \n jsonb \n \u4ea4\u6613\u51c6\u5907\u8bbf\u95ee\u7684\u5730\u5740\u548c\u5b58\u50a8\u5bc6\u94a5\u7684\u5217\u8868\u3002\u53c2\u89c1 EIP2930  (https://eips.ethereum.org/EIPS/eip-2930) \u3002\u9002\u7528\u4e8e\u4ea4\u6613\u7c7b\u578b\u4e3a AccessList \u6216 DynamicFee \u7684\u60c5\u51b5 \n \n \n max_fee_per_gas \n numeric \n \u4ea4\u6613\u53d1\u9001\u8005\u613f\u610f\u652f\u4ed8\u7684\u6bcf\u5355\u4f4d\u71c3\u6599\u7684\u6700\u9ad8\u8d39\u7528\u603b\u989d\uff08\u7531 EIP1559  (https://eips.ethereum.org/EIPS/eip-1559) \u5f15\u5165\uff09 \n \n \n max_priority_fee_per_gas \n numeric \n \u4ea4\u6613\u53d1\u9001\u8005\u613f\u610f\u5411\u77ff\u5de5\u652f\u4ed8\u7684\u6bcf\u5355\u4f4d\u71c3\u6599\u7684\u6700\u9ad8\u8d39\u7528\uff0c\u4ee5\u6fc0\u52b1\u4ed6\u4eec\u5728\u65b0\u533a\u5757\u4e2d\u5305\u542b\u4ed6\u4eec\u7684\u4ea4\u6613\uff08\u7531 EIP1559  (https://eips.ethereum.org/EIPS/eip-1559) \u5f15\u5165\uff09 \n \n \n priority_fee_per_gas \n numeric \n \u672c\u6b21\u4ea4\u6613\u652f\u4ed8\u7ed9\u77ff\u5de5\u7684\u4f18\u5148\u8d39\u7528\uff08\u7531 EIP1559  (https://eips.ethereum.org/EIPS/eip-1559)  \u5f15\u5165\uff09", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/ethereum-mainnet/transactions/#ethereumtransactions"}
{"content": "\u4ea4\u6613\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/avalanche-c-chain/transactions/#_1"}
{"content": "avalanche_c.transactions \u00b6 \n \u4ea4\u6613\u662f\u6765\u81ea\u8d26\u6237\u7684\u52a0\u5bc6\u7b7e\u540d\u6307\u4ee4\u3002\u5e10\u6237\u901a\u8fc7\u53d1\u8d77\u4ea4\u6613\u6765\u66f4\u65b0\u4ee5\u592a\u574a\u7f51\u7edc\u7684\u72b6\u6001\u3002\u4ea4\u6613\u59cb\u7ec8\u6765\u81ea\u5916\u90e8\u62e5\u6709\u7684\u8d26\u6237\uff0c\u667a\u80fd\u5408\u7ea6\u65e0\u6cd5\u53d1\u8d77\u4ea4\u6613\u3002 \n \u4ea4\u6613\u9700\u8981\u5e7f\u64ad\u5230\u6574\u4e2a\u7f51\u7edc\u3002\u4efb\u4f55\u8282\u70b9\u90fd\u53ef\u4ee5\u5e7f\u64ad\u5728EVM\u4e0a\u5373\u5c06\u6267\u884c\u4ea4\u6613\u7684\u8bf7\u6c42\uff1b\u5e7f\u64ad\u53d1\u9001\u540e\uff0c\u77ff\u5de5\u5c06\u6267\u884c\u4ea4\u6613\u5e76\u5c06\u7ed3\u679c\u72b6\u6001\u66f4\u6539\u4f20\u64ad\u5230\u7f51\u7edc\u7684\u5176\u4f59\u90e8\u5206\u3002 \n \u70b9\u51fb \u8fd9\u91cc  (https://ethereum.org/en/developers/docs/transactions) \u5728\u4ee5\u592a\u574a\u5b98\u65b9\u6587\u6863\u4e2d\u9605\u8bfb\u66f4\u591a\u4fe1\u606f\u3002 \n \n \n \n \u5b57\u6bb5\u540d\u79f0 \n \u6570\u636e\u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n block_time \n timestamptz \n \u5305\u542b\u6b64\u4ea4\u6613\u7684\u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n nonce \n numeric \n \u53d1\u8d77\u4ea4\u6613\u7684\u94b1\u5305\u7684\u552f\u4e00\u503c\u4ea4\u6613\u968f\u673a\u6570 \n \n \n index \n numeric \n \u5f53\u524d\u4ea4\u6613\u5728\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e \n \n \n success \n boolean \n \u663e\u793a\u4ea4\u6613\u662f\u5426\u6210\u529f\u7684\u771f/\u5047\u503c \n \n \n from \n string \n \u53d1\u9001\u8005\u7684\u5730\u5740 \n \n \n to \n string \n \u63a5\u6536\u8005\u7684\u5730\u5740\u3002\u5f53\u662f\u5408\u7ea6\u521b\u5efa\u4ea4\u6613\u65f6\u503c\u4e3a NULL \n \n \n value \n numeric \n \u5728\u6b64\u4ea4\u6613\u4e2d\u53d1\u9001\u7684\u4ee5 wei \u4e3a\u5355\u4f4d\u7684\u4ee5\u592a\u5e01\u6570\u91cf\u3002\u8bf7\u6ce8\u610f\uff0cerc20\u4ee3\u5e01\u4e0d\u4f1a\u51fa\u73b0\u5728\u8fd9\u91cc\u3002 \n \n \n block_number \n int8 \n \u533a\u5757\u94fe\u7684\u957f\u5ea6\uff08\u4ee5\u533a\u5757\u6570\u4e3a\u5355\u4f4d\uff09 \n \n \n block_hash \n string \n \u5f53\u524d\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n gas_limit \n numeric \n \u4ee5 nanoavax \u8868\u793a\u7684\u71c3\u6599\u9650\u5236 \n \n \n gas_price \n numeric \n \u4ee5 nanoavax \u8868\u793a\u7684\u71c3\u6599\u4ef7\u683c \n \n \n effective_gas_price \n numeric \n \u4ee5 nanoavax \u8868\u793a\u7684\u5b9e\u9645\u71c3\u6599\u4ef7\u683c \n \n \n gas_used \n numeric \n \u4ee5 nanoavax \u8868\u793a\u7684\u5f53\u524d\u4ea4\u6613\u6d88\u8017\u7684\u71c3\u6599\u6570\u91cf \n \n \n data \n string \n \u53ef\u4ee5\u662f\u7a7a\u503c\u3001\u5341\u516d\u8fdb\u5236\u7f16\u7801\u7684\u6d88\u606f\u6216\u667a\u80fd\u5408\u7ea6\u8c03\u7528\u6307\u4ee4 \n \n \n hash \n string \n \u4ea4\u6613\u7684\u54c8\u5e0c\u503c \n \n \n type \n text \n \u4ea4\u6613\u7c7b\u578b\uff1a Legacy \uff0c AccessList \u6216 DynamicFee \n \n \n access_list \n jsonb \n \u4ea4\u6613\u51c6\u5907\u8bbf\u95ee\u7684\u5730\u5740\u548c\u5b58\u50a8\u5bc6\u94a5\u7684\u5217\u8868\u3002\u53c2\u89c1 EIP2930  (https://eips.ethereum.org/EIPS/eip-2930) \u3002\u9002\u7528\u4e8e\u4ea4\u6613\u7c7b\u578b\u4e3a AccessList \u6216 DynamicFee \u7684\u60c5\u51b5 \n \n \n max_fee_per_gas \n numeric \n \u4ea4\u6613\u53d1\u9001\u8005\u613f\u610f\u652f\u4ed8\u7684\u6bcf\u5355\u4f4d\u71c3\u6599\u7684\u6700\u9ad8\u8d39\u7528\u603b\u989d\uff08\u7531 EIP1559  (https://eips.ethereum.org/EIPS/eip-1559) \u5f15\u5165\uff09 \n \n \n max_priority_fee_per_gas \n numeric \n \u4ea4\u6613\u53d1\u9001\u8005\u613f\u610f\u5411\u77ff\u5de5\u652f\u4ed8\u7684\u6bcf\u5355\u4f4d\u71c3\u6599\u7684\u6700\u9ad8\u8d39\u7528\uff0c\u4ee5\u6fc0\u52b1\u4ed6\u4eec\u5728\u65b0\u533a\u5757\u4e2d\u5305\u542b\u4ed6\u4eec\u7684\u4ea4\u6613\uff08\u7531 EIP1559  (https://eips.ethereum.org/EIPS/eip-1559) \u5f15\u5165\uff09 \n \n \n priority_fee_per_gas \n numeric \n \u672c\u6b21\u4ea4\u6613\u652f\u4ed8\u7ed9\u77ff\u5de5\u7684\u4f18\u5148\u8d39\u7528\uff08\u7531 EIP1559  (https://eips.ethereum.org/EIPS/eip-1559)  \u5f15\u5165\uff09 \n \n \n \n **** \u8bf7\u81ea\u884c\u67e5\u770b\u67e5\u8be2\u793a\u4f8b  (https://dune.xyz/queries/38964) ****", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/avalanche-c-chain/transactions/#avalanche_ctransactions"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v1/decoded/call-tables.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/decoded/call-tables/"}
{"content": "\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/avalanche-c-chain/traces/#_1"}
{"content": "avalanche_c.traces \u00b6 \n \u4ea4\u6613\uff08Transactions\uff09\u53ef\u4ee5\u89e6\u53d1\u4fee\u6539\u4ee5\u592a\u574a\u865a\u62df\u673a\u5185\u90e8\u72b6\u6001\u7684\u66f4\u5c0f\u7684\u539f\u5b50\u64cd\u4f5c\u3002\u6709\u5173\u8fd9\u4e9b\u64cd\u4f5c\u6267\u884c\u7684\u4fe1\u606f\u4f1a\u88ab\u8bb0\u5f55\u4e0b\u6765\uff0c\u5e76\u4e14\u53ef\u4ee5\u5b58\u50a8\u4e3aEVM\u6267\u884c\u5185\u90e8\u5408\u7ea6\uff0c\u6216\u8005\u53ea\u662f\u4e00\u4e2a_\u5185\u90e8\u5408\u7ea6_\u3002\u5728Etherscan\u4e2d\uff0c\u8fd9\u4e9b\u88ab\u79f0\u4e3a\u201c\u5185\u90e8\u4ea4\u6613\u201d\u3002 \n \u70b9\u51fb \u8fd9\u91cc  (https://medium.com/chainalysis/ethereum-traces-not-transactions-3f0533d26aa) \u9605\u8bfb\u66f4\u591a\u4fe1\u606f\u3002 \n \n \n \n \u5b57\u6bb5\u540d\u79f0 \n \u6570\u636e\u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n block_time \n timestamptz \n \u5305\u542b\u6b64\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u7684\u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n tx_success \n boolean \n \u6307\u793a\u4ea4\u6613\u662f\u5426\u6210\u529f\u7684\u771f/\u5047\u503c \n \n \n success \n boolean \n \u6307\u793a\u5f53\u524d\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u64cd\u4f5c\u662f\u5426\u6210\u529f\u7684\u771f/\u5047\u503c \n \n \n block_hash \n string \n \u5f53\u524d\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n block_number \n int8 \n \u533a\u5757\u94fe\u7684\u957f\u5ea6\uff08\u4ee5\u533a\u5757\u6570\u4e3a\u5355\u4f4d\uff09 \n \n \n tx_hash \n string \n \u53d1\u51fa\u6b64\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u7684\u4ea4\u6613\u7684\u54c8\u5e0c\u503c \n \n \n from \n string \n \u53d1\u9001\u8005\u7684\u5730\u5740 \n \n \n to \n string \n \u63a5\u6536\u8005\u7684\u5730\u5740\u3002\u5f53\u5b83\u662f\u4e00\u4e2a\u5408\u7ea6\u521b\u5efa\u4ea4\u6613\u65f6\uff0c\u5176\u503c\u4e3a Null \n \n \n value \n numeric \n \u672c\u6b21\u4ea4\u6613\u4e2d\u53d1\u9001\u7684avx\u6570\u91cf\uff0c\u4ee5 nanoavax \u8868\u793a \n \n \n gas \n numeric \n \u968f\u6d88\u606f\u8c03\u7528\u53d1\u9001\u7684\u71c3\u6599\u6570\u91cf \n \n \n gas_used \n numeric \n \u6d88\u606f\u8c03\u7528\u6d88\u8017\u7684\u71c3\u6599\u6570\u91cf\uff0c\u4ee5 nanoavax \u8868\u793a \n \n \n tx_index \n numeric \n \u5f52\u5c5e\u7684\u4ea4\u6613\u5728\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e \n \n \n trace_address \n array \n \u5f53\u524d\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u5728\u8c03\u7528\u56fe\u68ee\u6797\u4e2d\u7684\u5730\u5740\u3002\u4f8b\u5982\uff0c[0, 2, 1] \u662f [0, 2, 1, 0] \u7684\u7236\u7ea7 \n \n \n sub_traces \n numeric \n \u5b50\u7ea7\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u7684\u6570\u91cf \n \n \n type \n text \n \u53ef\u4ee5\u662f reward \uff0c create \uff0c call \u6216\u8005 suicide \u3002\u63cf\u8ff0\u5728\u6b64\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u4e2d\u4f7f\u7528\u7684\u64cd\u4f5c\u7c7b\u578b\u3002 \n \n \n address \n string \n \u5f53\u7c7b\u578b\u662f suicide \u6216\u8005 create \u65f6\u4fdd\u5b58\u8c03\u7528\u7684\u5408\u7ea6\u5730\u5740 \n \n \n code \n string \n \u90e8\u7f72\u65b0\u5408\u7ea6\u7684\u5b57\u8282\u7801\uff0c\u4ec5\u5728\u8c03\u7528\u7c7b\u578b\u4e3a create \u65f6\u5305\u542b\u6570\u636e\u3002 \n \n \n call_type \n string \n \u53ef\u4ee5\u662f staticcall \uff0c delegatecall \u6216\u8005 call \u3002 \u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u8003 \u8fd9\u91cc  (https://medium.com/coinmonks/delegatecall-calling-another-contract-function-in-solidity-b579f804178c) \u3002 \n \n \n input \n string \n \u8c03\u7528\u53e6\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6\u7684\u5b57\u8282\u7801 \n \n \n output \n string \n \u88ab\u8c03\u7528\u667a\u80fd\u5408\u7ea6\u53d1\u9001\u56de\u6765\u7684\u5b57\u8282\u7801\u54cd\u5e94 \n \n \n refund_address \n string \n \u4ec5\u5728 type \u662f suicide \u65f6\u5305\u542b\u6570\u636e\u3002\u6307\u5b9a\u5c06\u672a\u652f\u51fa\u7684\u4ee5\u592a\u5e01\u4f59\u989d\u53d1\u9001\u5230\u54ea\u91cc\u3002 \n \n \n \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/avalanche-c-chain/traces/#avalanche_ctraces"}
{"content": "\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u6d88\u8017\u7684\u71c3\u6599 \u00b6 \n avax_c.traces\u8868\u4e2d\u7684 gas_used \u5b57\u6bb5\u6709\u70b9\u96be\u4ee5\u7406\u89e3\uff0c\u6240\u4ee5\u8fd9\u91cc\u6709\u4e00\u4e9b\u63d0\u793a\uff1a \n \n \u5185\u90e8\u5408\u7ea6\u8c03\u7528\u7684 gas_used \u5c06\u59cb\u7ec8\u5305\u62ec\u5408\u7ea6\u8c03\u7528\u672c\u8eab\u4ee5\u53ca\u5176\u6240\u6709\u5b50\u7ea7\u5408\u7ea6\u8c03\u7528\u6240\u6d88\u8017\u7684\u71c3\u6599\u3002 \n \u521d\u59cb\u8c03\u7528\u7684 gas_used \u5c06\u4e0d\u5305\u542b\u53d1\u8d77\u8c03\u7528\u65f6\u5df2\u53d1\u751f\u7684\u71c3\u6599\u6d88\u8017\u3002 \n \u60a8\u9700\u8981\u5c06\u201c21000\u4e2a\u71c3\u6599\u5355\u4f4d + \u53d1\u9001\u96f6\u5b50\u8282\u53ca\u53d1\u9001\u975e\u96f6\u5b57\u8282\u7684\u71c3\u6599\u6210\u672c\u201d\u6dfb\u52a0\u5230\u9876\u90e8\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u7684 gas_used \u503c\u4e0a\uff0c\u4ee5\u5f97\u5230\u201c\u771f\u5b9e\u201d\u7684 gas_used \u503c\u3002 \n \u6709\u5173\u6b64\u5185\u5bb9\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u6b64 stackexchange\u6761\u76ee  (https://ethereum.stackexchange.com/questions/31443/what-do-the-response-values-of-a-parity-trace-transaction-call-actually-repres) \n \u5728Dune\u4e2d\u6267\u884c\u6b64\u64cd\u4f5c\u7684\u67e5\u8be2\u793a\u4f8b\uff1a https://dune.com/queries/895857  (https://dune.com/queries/895857)", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/avalanche-c-chain/traces/#_2"}
{"content": "\u4e8b\u4ef6\u65e5\u5fd7\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/avalanche-c-chain/event-logs/#_1"}
{"content": "avalanche_c.logs \u00b6 \n \u6b64\u8868\u5b58\u50a8\u4e86\u667a\u80fd\u5408\u7ea6\u751f\u6210\u7684\u6240\u6709\u4e8b\u4ef6\u65e5\u5fd7\u3002\u5b83\u5bf9\u4e8e\u67e5\u8be2\u5c1a\u672a\u88ab\u89e3\u7801\u6216\u8005\u7531\u4e8e\u4ee3\u7801\u975e\u5f00\u6e90\u800c\u65e0\u6cd5\u89e3\u7801\u7684\u5408\u7ea6\u5f88\u6709\u7528\u3002 \n \u4e8b\u4ef6\u65e5\u5fd7\uff08Logs\uff09\u662f\u4e00\u79cd\u5728EVM\u5b9e\u73b0\u4e2d\u5b58\u50a8\u5c11\u91cf\u6570\u636e\u4ece\u800c\u53ea\u6d88\u8017\u5c11\u91cf\u71c3\u6599\u7684\u4f18\u96c5\u65b9\u5f0f\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u4e8b\u4ef6\u65e5\u5fd7\u6709\u52a9\u4e8e\u8ba9\u5176\u4ed6\u4eba\u4e0d\u5fc5\u5355\u72ec\u67e5\u8be2\u5177\u4f53\u7684\u5408\u7ea6\u4ee3\u7801\u5c31\u80fd\u77e5\u9053\u53d1\u751f\u4e86\u4ec0\u4e48\u4e8b\u60c5\u3002 \n \u6709\u5173\u6b64\u4e3b\u9898\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u9605\u8bfb \u672c\u6587  (https://medium.com/mycrypto/understanding-event-logs-on-the-ethereum-blockchain-f4ae7ba50378) \u3002 \n \u6ce8\u610f\uff1a\u6211\u4eec\u7684\u4e3b\u9898\u7d22\u5f15\u662f\u4ece1\u5f00\u59cb\u8ba1\u6570\u7684\uff0c\u6240\u4ee5 topic0 \u663e\u793a\u4e3a topic1 \uff0c topic1 \u663e\u793a\u4e3a topic2 \uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \n \n \n \n \u5b57\u6bb5\u540d\u79f0 \n \u6570\u636e\u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n block_hash \n string \n \u5f53\u524d\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n block_number \n int8 \n \u533a\u5757\u94fe\u7684\u957f\u5ea6\uff08\u4ee5\u533a\u5757\u6570\u4e3a\u5355\u4f4d\uff09 \n \n \n block_time \n timestamptz \n \u5305\u542b\u6b64\u4e8b\u4ef6\u65e5\u5fd7\u7684\u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n contract_address \n string \n \u53d1\u51fa\u5f53\u524d\u4e8b\u4ef6\u65e5\u5fd7\u7684\u5408\u7ea6\u5730\u5740 \n \n \n topic1 \n string \n \u4e8b\u4ef6\u58f0\u660e\u5b57\u7b26\u4e32\u5e73\u5c55\u540e\u7684keccak256\u54c8\u5e0c\u503c \n \n \n topic2 \n string \n \u4e8b\u4ef6\u7684\u7d22\u5f15\u4e3b\u98981 \n \n \n topic3 \n string \n \u4e8b\u4ef6\u7684\u7d22\u5f15\u4e3b\u98982 \n \n \n topic4 \n string \n \u4e8b\u4ef6\u7684\u7d22\u5f15\u4e3b\u98983 \n \n \n data \n string \n \u5305\u542b\u6709\u5173\u4e8b\u4ef6\u7684\u66f4\u591a\u4fe1\u606f\u7684\u672a\u7d22\u5f15\u6570\u636e \n \n \n tx_hash \n string \n \u4ea7\u751f\u6b64\u4e8b\u4ef6\u65e5\u5fd7\u7684\u4ea4\u6613\u7684\u54c8\u5e0c\u503c \n \n \n index \n numeric \n \u4e8b\u4ef6\u65e5\u5fd7\u5728\u88ab\u8bb0\u5f55\u7684\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e\uff08\u6309\u6267\u884c\u987a\u5e8f\u6392\u5e8f\u7684\u7d2f\u8ba1\u65e5\u5fd7\u6570\u91cf\uff09 \n \n \n tx_index \n numeric \n \u4e8b\u4ef6\u65e5\u5fd7\u5f52\u5c5e\u7684\u4ea4\u6613\u5728\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e\uff08\u6309\u6267\u884c\u987a\u5e8f\u6392\u5e8f\u7684\u7d2f\u8ba1\u4ea4\u6613\u6570\u91cf\uff09", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/avalanche-c-chain/event-logs/#avalanche_clogs"}
{"content": "\u533a\u5757\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/avalanche-c-chain/blocks/#_1"}
{"content": "avalanche_c.blocks \u00b6 \n \u533a\u5757\u662f\u533a\u5757\u94fe\u548c\u6c47\u603b\uff08rollups\uff09\u7684\u6784\u5efa\u7ec4\u4ef6\u3002\u4e00\u4e2a\u533a\u5757\u5305\u542b\u5c06\u9010\u6e10\u6539\u53d8EVM\u7cfb\u7edf\u72b6\u6001\u7684\u591a\u4e2a\u4ea4\u6613\u3002\u533a\u5757\u5185\u7684\u4ea4\u6613\u53ea\u80fd\u4e00\u4e2a\u63a5\u4e00\u4e2a\u5730\u6267\u884c\uff0c\u4e0d\u80fd\u5e76\u884c\u6267\u884c\u3002 \n \n \n \n \u5b57\u6bb5\u540d\u79f0 \n \u6570\u636e\u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n time \n timestamptz \n \u5f53\u524d\u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n number \n numeric \n \u533a\u5757\u94fe\u7684\u957f\u5ea6\uff08\u4ee5\u533a\u5757\u6570\u4e3a\u5355\u4f4d\uff09 \n \n \n hash \n string \n \u5f53\u524d\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n parent hash \n string \n \u524d\u4e00\u4e2a\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n gas_limit \n numeric \n \u5f53\u524d\u533a\u5757\u7684\u71c3\u6599\u9650\u5236 \n \n \n gas_used \n numeric \n \u5f53\u524d\u533a\u5757\u6d88\u8017\u7684\u71c3\u6599\u6570\u91cf \n \n \n miner \n string \n \u4e0d\u9002\u7528 \n \n \n difficulty \n numeric \n \u4e0d\u9002\u7528 \n \n \n total_difficulty \n numeric \n \u533a\u5757\u94fe\u5230\u5f53\u524d\u533a\u5757\u4e3a\u6b62\u7684\u603b\u96be\u5ea6\u503c \n \n \n nonce \n string \n \u533a\u5757\u968f\u673a\u6570\uff0c\u7528\u4e8e\u5c55\u793a\u6316\u77ff\u8fc7\u7a0b\u4e2d\u7684\u5de5\u4f5c\u91cf\u8bc1\u660e \n \n \n size \n numeric \n \u533a\u5757\u7684\u5927\u5c0f\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\uff0c\u53d7\u672c\u533a\u5757\u71c3\u6599\u9650\u5236\u7684\u7ea6\u675f \n \n \n base_fee_per_gas \n numeric \n \u5f53\u524d\u533a\u5757\u7684\u57fa\u672c\u71c3\u6599\u8d39\u7528\uff08\u7531 EIP1559  (https://eips.ethereum.org/EIPS/eip-1559) \uff09\u5f15\u5165", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/avalanche-c-chain/blocks/#avalanche_cblocks"}
{"content": "Avalanche C-Chain \u00b6 \n C-Chain\u662f\u7531Avalanche\u7f51\u7edc\u63d0\u4f9b\u652f\u6301\u7684\u4ee5\u592a\u574a\u865a\u62df\u673a\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002\u5b83\u9075\u5faa\u4ee5\u592a\u574a\u4e3b\u7f51\u89c4\u5219\uff0c\u53ea\u662f\u5171\u8bc6\u673a\u5236\u4e0d\u540c\uff0c\u5176\u4ed6\u6280\u672f\u89c4\u8303\u5b8c\u5168\u76f8\u540c\u3002 \u71c3\u6599\u4ee5 \u800c \u4e0d \u662f \u800c \u4e0d \u662f A V A X \u800c \u4e0d \u662f ETH\u652f\u4ed8\u3002 \n \u60a8\u53ef\u4ee5\u5728 \u8fd9\u7bc7\u6587\u7ae0  (https://learn.figment.io/protocols/avalanche) \u4e2d\u9605\u8bfb\u66f4\u591a\u5173\u4e8eAvalanche\u7f51\u7edc\u548cC-Chain\u7684\u4fe1\u606f\u3002 \n \u5728Dune\u4e0a\u4f7f\u7528C-Chain\u7684\u5de5\u4f5c\u65b9\u5f0f\u4e0e\u67e5\u8be2\u4ee5\u592a\u574a\u4e3b\u7f51\u6570\u636e\u5b8c\u5168\u4e00\u6837\u3002\u53ea\u6709 avalanche_c.blocks \u7684\u5c5e\u6027\u7565\u6709\u4e0d\u540c\uff0c\u56e0\u4e3aAvalanche C-Chain\u5df2\u7ecf\u4f7f\u7528\u6743\u76ca\u8bc1\u660e\uff08POS\uff09\u5171\u8bc6\u7b97\u6cd5\u3002 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/avalanche-c-chain/#avalanche-c-chain"}
{"content": "\u539f\u59cb\u6570\u636e\u8868 \u00b6 \n \n \n \u533a\u5757\u8868\uff08Blocks\uff09  (blocks/) \n \u4ea4\u6613\u8868\uff08Transactions\uff09  (transactions/) \n \u4e8b\u4ef6\u65e5\u5fd7\u8868\uff08Logs\uff09  (event-logs/) \n \u5185\u90e8\u5408\u7ea6\u8c03\u7528\u8868\uff08Traces\uff09  (traces/)", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/avalanche-c-chain/#_1"}
{"content": "\u4ea4\u6613\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/arbitrum/transactions/#_1"}
{"content": "arbitrum.transactions \u00b6 \n \u4ea4\u6613\u662f\u6765\u81ea\u8d26\u6237\u7684\u52a0\u5bc6\u7b7e\u540d\u6307\u4ee4\u3002\u5e10\u6237\u901a\u8fc7\u53d1\u8d77\u4ea4\u6613\u6765\u66f4\u65b0\u4ee5\u592a\u574a\u7f51\u7edc\u7684\u72b6\u6001\u3002\u4ea4\u6613\u59cb\u7ec8\u6765\u81ea\u5916\u90e8\u62e5\u6709\u7684\u8d26\u6237\uff0c\u667a\u80fd\u5408\u7ea6\u65e0\u6cd5\u53d1\u8d77\u4ea4\u6613\u3002 \n \u4ea4\u6613\u9700\u8981\u5e7f\u64ad\u5230\u6574\u4e2a\u7f51\u7edc\u3002\u4efb\u4f55\u8282\u70b9\u90fd\u53ef\u4ee5\u5e7f\u64ad\u5728EVM\u4e0a\u5373\u5c06\u6267\u884c\u4ea4\u6613\u7684\u8bf7\u6c42\uff1b\u5e7f\u64ad\u53d1\u9001\u540e\uff0c\u77ff\u5de5\u5c06\u6267\u884c\u4ea4\u6613\u5e76\u5c06\u7ed3\u679c\u72b6\u6001\u66f4\u6539\u4f20\u64ad\u5230\u7f51\u7edc\u7684\u5176\u4f59\u90e8\u5206\u3002 \n \u70b9\u51fb \u8fd9\u91cc  (https://ethereum.org/en/developers/docs/transactions) \u5728\u4ee5\u592a\u574a\u5b98\u65b9\u6587\u6863\u4e2d\u9605\u8bfb\u66f4\u591a\u4fe1\u606f\u3002 \n \n \n \n \u5b57\u6bb5\u540d\u79f0 \n \u6570\u636e\u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n block_time \n timestamptz \n \u5305\u542b\u6b64\u4ea4\u6613\u7684\u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n nonce \n numeric \n \u53d1\u8d77\u4ea4\u6613\u7684\u94b1\u5305\u7684\u552f\u4e00\u503c\u4ea4\u6613\u968f\u673a\u6570 \n \n \n index \n numeric \n \u5f53\u524d\u4ea4\u6613\u5728\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e \n \n \n success \n boolean \n \u663e\u793a\u4ea4\u6613\u662f\u5426\u6210\u529f\u7684\u771f/\u5047\u503c \n \n \n from \n string \n \u53d1\u9001\u8005\u7684\u5730\u5740 \n \n \n to \n string \n \u63a5\u6536\u8005\u7684\u5730\u5740\u3002\u5f53\u662f\u5408\u7ea6\u521b\u5efa\u4ea4\u6613\u65f6\u503c\u4e3a NULL \n \n \n value \n numeric \n \u5728\u6b64\u4ea4\u6613\u4e2d\u53d1\u9001\u7684\u4ee5 wei \u4e3a\u5355\u4f4d\u7684\u4ee5\u592a\u5e01\u6570\u91cf\u3002\u8bf7\u6ce8\u610f\uff0cerc20\u4ee3\u5e01\u4e0d\u4f1a\u51fa\u73b0\u5728\u8fd9\u91cc\u3002 \n \n \n block_number \n int8 \n \u533a\u5757\u94fe\u7684\u957f\u5ea6\uff08\u4ee5\u533a\u5757\u6570\u4e3a\u5355\u4f4d\uff09 \n \n \n block_hash \n string \n \u5f53\u524d\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n gas_price \n numeric \n \u672c\u6b21\u4ea4\u6613\u613f\u610f\u652f\u4ed8\u7684\u6700\u9ad8\u71c3\u6599\u4ef7\u683c\uff0c\u5355\u4f4d\u4e3a wei \n \n \n effective_gas_price \n numeric \n \u672c\u6b21\u4ea4\u6613\u5b9e\u9645\u652f\u4ed8\u7684\u71c3\u6599\u4ef7\u683c\uff0c\u5355\u4f4d\u4e3a wei \n \n \n gas_limit \n numeric \n \u4ee5ArbGas\u8868\u793a\u7684\u71c3\u6599\u9650\u5236 \n \n \n gas_used \n numeric \n \u4ee5ArbGas\u8868\u793a\u7684\u672c\u6b21\u4ea4\u6613\u5b9e\u9645\u6d88\u8017\u7684\u71c3\u6599\u6570\u91cf \n \n \n gas_used_for_l1 \n numeric \n \u4ee5ArbGas\u8868\u793a\u7684\u672c\u6b21\u4ea4\u6613\u4e2dL1\u8d44\u6e90\u6d88\u8017\u7684\u71c3\u6599\u6570\u91cf \n \n \n data \n string \n \u53ef\u4ee5\u662f\u7a7a\u503c\u3001\u5341\u516d\u8fdb\u5236\u7f16\u7801\u7684\u6d88\u606f\u6216\u667a\u80fd\u5408\u7ea6\u8c03\u7528\u6307\u4ee4 \n \n \n hash \n string \n \u4ea4\u6613\u7684\u54c8\u5e0c\u503c \n \n \n type \n text \n \u4e0d\u9002\u7528\u4e8eArbitrum \n \n \n access_list \n jsonb \n \u4e0d\u9002\u7528\u4e8eArbitrum \n \n \n max_fee_per_gas \n numeric \n \u4e0d\u9002\u7528\u4e8eArbitrum \n \n \n max_priority_fee_per_gas \n numeric \n \u4e0d\u9002\u7528\u4e8eArbitrum \n \n \n priority_fee_per_gas \n numeric \n \u4e0d\u9002\u7528\u4e8eArbitrum", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/arbitrum/transactions/#arbitrumtransactions"}
{"content": "\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/arbitrum/traces/#_1"}
{"content": "arbitrum.traces \u00b6 \n \u4ea4\u6613\uff08Transactions\uff09\u53ef\u4ee5\u89e6\u53d1\u4fee\u6539\u4ee5\u592a\u574a\u865a\u62df\u673a\u5185\u90e8\u72b6\u6001\u7684\u66f4\u5c0f\u7684\u539f\u5b50\u64cd\u4f5c\u3002\u6709\u5173\u8fd9\u4e9b\u64cd\u4f5c\u6267\u884c\u7684\u4fe1\u606f\u4f1a\u88ab\u8bb0\u5f55\u4e0b\u6765\uff0c\u5e76\u4e14\u53ef\u4ee5\u5b58\u50a8\u4e3aEVM\u6267\u884c\u5185\u90e8\u5408\u7ea6\uff0c\u6216\u8005\u53ea\u662f\u4e00\u4e2a_\u5185\u90e8\u5408\u7ea6_\u3002\u5728Etherscan\u4e2d\uff0c\u8fd9\u4e9b\u88ab\u79f0\u4e3a\u201c\u5185\u90e8\u4ea4\u6613\u201d\u3002 \n \u70b9\u51fb \u8fd9\u91cc  (https://medium.com/chainalysis/ethereum-traces-not-transactions-3f0533d26aa) \u9605\u8bfb\u66f4\u591a\u4fe1\u606f\u3002 \n \n \n \n \u5b57\u6bb5\u540d\u79f0 \n \u6570\u636e\u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n block_time \n timestamptz \n \u5305\u542b\u6b64\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u7684\u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n tx_success \n boolean \n \u6307\u793a\u4ea4\u6613\u662f\u5426\u6210\u529f\u7684\u771f/\u5047\u503c \n \n \n success \n boolean \n \u6307\u793a\u5f53\u524d\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u64cd\u4f5c\u662f\u5426\u6210\u529f\u7684\u771f/\u5047\u503c \n \n \n block_hash \n string \n \u5f53\u524d\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n block_number \n int8 \n \u533a\u5757\u94fe\u7684\u957f\u5ea6\uff08\u4ee5\u533a\u5757\u6570\u4e3a\u5355\u4f4d\uff09 \n \n \n tx_hash \n string \n \u53d1\u51fa\u6b64\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u7684\u4ea4\u6613\u7684\u54c8\u5e0c\u503c \n \n \n from \n string \n \u53d1\u9001\u8005\u7684\u5730\u5740 \n \n \n to \n string \n \u63a5\u6536\u8005\u7684\u5730\u5740\u3002\u5f53\u5b83\u662f\u4e00\u4e2a\u5408\u7ea6\u521b\u5efa\u4ea4\u6613\u65f6\uff0c\u5176\u503c\u4e3a Null \n \n \n value \n numeric \n \u672c\u6b21\u4ea4\u6613\u4e2d\u53d1\u9001\u7684\u4ee5\u592a\u5e01\u6570\u91cf\uff0c\u4ee5 wei \u8868\u793a \n \n \n gas \n numeric \n \n \n \n gas_used \n numeric \n \u6d88\u606f\u8c03\u7528\u6d88\u8017\u7684\u71c3\u6599\u6570\u91cf\uff0cArbGas\u5355\u4f4d \n \n \n tx_index \n numeric \n \u5f52\u5c5e\u7684\u4ea4\u6613\u5728\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e \n \n \n trace_address \n array \n \u5f53\u524d\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u5728\u8c03\u7528\u56fe\u68ee\u6797\u4e2d\u7684\u5730\u5740\u3002\u4f8b\u5982\uff0c[0, 2, 1] \u662f [0, 2, 1, 0] \u7684\u7236\u7ea7 \n \n \n sub_traces \n numeric \n \u5b50\u7ea7\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u7684\u6570\u91cf \n \n \n type \n text \n \u53ef\u4ee5\u662f reward \uff0c create \uff0c call \u6216\u8005 suicide \u3002\u63cf\u8ff0\u5728\u6b64\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u4e2d\u4f7f\u7528\u7684\u64cd\u4f5c\u7c7b\u578b\u3002 \n \n \n address \n string \n \u5f53\u7c7b\u578b\u662f suicide \u6216\u8005 create \u65f6\u4fdd\u5b58\u8c03\u7528\u7684\u5408\u7ea6\u5730\u5740 \n \n \n code \n string \n \u90e8\u7f72\u65b0\u5408\u7ea6\u7684\u5b57\u8282\u7801\uff0c\u4ec5\u5728\u8c03\u7528\u7c7b\u578b\u4e3a create \u65f6\u5305\u542b\u6570\u636e\u3002 \n \n \n call_type \n string \n \u53ef\u4ee5\u662f staticcall \uff0c delegatecall \u6216\u8005 call \u3002 \u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u8003 \u8fd9\u91cc  (https://medium.com/coinmonks/delegatecall-calling-another-contract-function-in-solidity-b579f804178c) \u3002 \n \n \n input \n string \n \u8c03\u7528\u53e6\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6\u7684\u5b57\u8282\u7801 \n \n \n output \n string \n \u88ab\u8c03\u7528\u667a\u80fd\u5408\u7ea6\u53d1\u9001\u56de\u6765\u7684\u5b57\u8282\u7801\u54cd\u5e94 \n \n \n refund_address \n string \n \u4ec5\u5728 type \u662f suicide \u65f6\u5305\u542b\u6570\u636e\u3002\u6307\u5b9a\u5c06\u672a\u652f\u51fa\u7684\u4ee5\u592a\u5e01\u4f59\u989d\u53d1\u9001\u5230\u54ea\u91cc\u3002 \n \n \n \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/arbitrum/traces/#arbitrumtraces"}
{"content": "\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u6d88\u8017\u7684\u71c3\u6599 \u00b6 \n arbitrum.traces\u8868\u4e2d\u7684 gas_used \u5b57\u6bb5\u6709\u70b9\u96be\u4ee5\u7406\u89e3\uff0c\u6240\u4ee5\u8fd9\u91cc\u6709\u4e00\u4e9b\u63d0\u793a\uff1a \n \n \u5185\u90e8\u5408\u7ea6\u8c03\u7528\u7684 gas_used \u5c06\u59cb\u7ec8\u5305\u62ec\u5408\u7ea6\u8c03\u7528\u672c\u8eab\u4ee5\u53ca\u5176\u6240\u6709\u5b50\u7ea7\u5408\u7ea6\u8c03\u7528\u6240\u6d88\u8017\u7684\u71c3\u6599\u3002 \n \u521d\u59cb\u8c03\u7528\u7684 gas_used \u5c06\u4e0d\u5305\u542b\u53d1\u8d77\u8c03\u7528\u65f6\u5df2\u53d1\u751f\u7684\u71c3\u6599\u6d88\u8017\u3002 \n \u60a8\u9700\u8981\u5c06\u201cX\u4e2a\u71c3\u6599\u5355\u4f4d + \u53d1\u9001\u96f6\u5b50\u8282\u53ca\u53d1\u9001\u975e\u96f6\u5b57\u8282\u7684\u71c3\u6599\u6210\u672c\u201d\u6dfb\u52a0\u5230\u9876\u90e8\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u7684 gas_used \u503c\u4e0a\uff0c\u4ee5\u5f97\u5230\u201c\u771f\u5b9e\u201d\u7684 gas_used \u503c\u3002 \n \u6709\u5173\u6b64\u5185\u5bb9\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u6b64 stackexchange\u6761\u76ee  (https://ethereum.stackexchange.com/questions/31443/what-do-the-response-values-of-a-parity-trace-transaction-call-actually-repres)", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/arbitrum/traces/#_2"}
{"content": "\u4e8b\u4ef6\u65e5\u5fd7\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/arbitrum/event-logs/#_1"}
{"content": "arbitrum.logs \u00b6 \n \u6b64\u8868\u5b58\u50a8\u4e86\u667a\u80fd\u5408\u7ea6\u751f\u6210\u7684\u6240\u6709\u4e8b\u4ef6\u65e5\u5fd7\u3002\u5b83\u5bf9\u4e8e\u67e5\u8be2\u5c1a\u672a\u88ab\u89e3\u7801\u6216\u8005\u7531\u4e8e\u4ee3\u7801\u975e\u5f00\u6e90\u800c\u65e0\u6cd5\u89e3\u7801\u7684\u5408\u7ea6\u5f88\u6709\u7528\u3002 \n \u4e8b\u4ef6\u65e5\u5fd7\uff08Logs\uff09\u662f\u4e00\u79cd\u5728EVM\u533a\u5757\u94fe\u4e0a\u5b58\u50a8\u5c11\u91cf\u6570\u636e\u4ece\u800c\u53ea\u6d88\u8017\u5c11\u91cf\u71c3\u6599\u7684\u4f18\u96c5\u65b9\u5f0f\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u4e8b\u4ef6\u65e5\u5fd7\u6709\u52a9\u4e8e\u8ba9\u5176\u4ed6\u4eba\u4e0d\u5fc5\u5355\u72ec\u67e5\u8be2\u5177\u4f53\u7684\u5408\u7ea6\u4ee3\u7801\u5c31\u80fd\u77e5\u9053\u53d1\u751f\u4e86\u4ec0\u4e48\u4e8b\u60c5\u3002 \n \u6709\u5173\u6b64\u4e3b\u9898\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u9605\u8bfb \u672c\u6587  (https://medium.com/mycrypto/understanding-event-logs-on-the-ethereum-blockchain-f4ae7ba50378) \u3002 \n \u6ce8\u610f\uff1a\u6211\u4eec\u7684\u4e3b\u9898\u7d22\u5f15\u662f\u4ece1\u5f00\u59cb\u8ba1\u6570\u7684\uff0c\u6240\u4ee5 topic0 \u663e\u793a\u4e3a topic1 \uff0c topic1 \u663e\u793a\u4e3a topic2 \uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \n \n \n \n \u5b57\u6bb5\u540d\u79f0 \n \u6570\u636e\u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n block_hash \n string \n \u5f53\u524d\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n block_number \n int8 \n \u533a\u5757\u94fe\u7684\u957f\u5ea6\uff08\u4ee5\u533a\u5757\u6570\u4e3a\u5355\u4f4d\uff09 \n \n \n block_time \n timestamptz \n \u5305\u542b\u6b64\u4e8b\u4ef6\u65e5\u5fd7\u7684\u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n contract_address \n string \n \u53d1\u51fa\u5f53\u524d\u4e8b\u4ef6\u65e5\u5fd7\u7684\u5408\u7ea6\u5730\u5740 \n \n \n topic1 \n string \n \u4e8b\u4ef6\u58f0\u660e\u5b57\u7b26\u4e32\u5e73\u5c55\u540e\u7684keccak256\u54c8\u5e0c\u503c \n \n \n topic2 \n string \n \u4e8b\u4ef6\u7684\u7d22\u5f15\u4e3b\u98981 \n \n \n topic3 \n string \n \u4e8b\u4ef6\u7684\u7d22\u5f15\u4e3b\u98982 \n \n \n topic4 \n string \n \u4e8b\u4ef6\u7684\u7d22\u5f15\u4e3b\u98983 \n \n \n data \n string \n \u5305\u542b\u6709\u5173\u4e8b\u4ef6\u7684\u66f4\u591a\u4fe1\u606f\u7684\u672a\u7d22\u5f15\u6570\u636e \n \n \n tx_hash \n string \n \u4ea7\u751f\u6b64\u4e8b\u4ef6\u65e5\u5fd7\u7684\u4ea4\u6613\u7684\u54c8\u5e0c\u503c \n \n \n index \n numeric \n \u4e8b\u4ef6\u65e5\u5fd7\u5728\u88ab\u8bb0\u5f55\u7684\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e\uff08\u6309\u6267\u884c\u987a\u5e8f\u6392\u5e8f\u7684\u7d2f\u8ba1\u65e5\u5fd7\u6570\u91cf\uff09 \n \n \n tx_index \n numeric \n \u4e8b\u4ef6\u65e5\u5fd7\u5f52\u5c5e\u7684\u4ea4\u6613\u5728\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e\uff08\u6309\u6267\u884c\u987a\u5e8f\u6392\u5e8f\u7684\u7d2f\u8ba1\u4ea4\u6613\u6570\u91cf\uff09", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/arbitrum/event-logs/#arbitrumlogs"}
{"content": "\u533a\u5757\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/arbitrum/blocks/#_1"}
{"content": "arbitrum.blocks \u00b6 \n \u533a\u5757\u662f\u533a\u5757\u94fe\u548c\u6c47\u603b\uff08rollups\uff09\u7684\u6784\u5efa\u7ec4\u4ef6\u3002\u4e00\u4e2a\u533a\u5757\u5305\u542b\u5c06\u9010\u6e10\u6539\u53d8EVM\u7cfb\u7edf\u72b6\u6001\u7684\u591a\u4e2a\u4ea4\u6613\u3002\u533a\u5757\u5185\u7684\u4ea4\u6613\u53ea\u80fd\u4e00\u4e2a\u63a5\u4e00\u4e2a\u5730\u6267\u884c\uff0c\u4e0d\u80fd\u5e76\u884c\u6267\u884c\u3002 \n \n \n \n Column Name \n datatype \n Description \n \n \n \n \n time \n timestamptz \n \u5f53\u524d\u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n number \n numeric \n \u533a\u5757\u94fe\u7684\u957f\u5ea6\uff08\u4ee5\u533a\u5757\u6570\u4e3a\u5355\u4f4d\uff09 \n \n \n hash \n string \n \u5f53\u524d\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n parent hash \n string \n \u524d\u4e00\u4e2a\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n gas_limit \n numeric \n \u5f53\u524d\u533a\u5757\u7684ArbGas\u71c3\u6599\u9650\u5236 \n \n \n gas_used \n numeric \n \u5f53\u524d\u533a\u5757\u6d88\u8017\u7684ArbGas\u71c3\u6599\u6570\u91cf \n \n \n miner \n string \n \u4e0d\u9002\u7528 \n \n \n difficulty \n numeric \n \u4e0d\u9002\u7528 \n \n \n total_difficulty \n numeric \n \u4e0d\u9002\u7528 \n \n \n nonce \n string \n \u4e0d\u9002\u7528 \n \n \n size \n numeric \n \u4e0d\u9002\u7528 \n \n \n base_fee_per_gas \n numeric \n \u4e0d\u9002\u7528", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/arbitrum/blocks/#arbitrumblocks"}
{"content": "Arbitrum \u00b6 \n Arbitrum\u662f\u4e00\u4e2a\u901a\u8fc7\u4e50\u89c2\u7684\u6c47\u603b\uff08rollup\uff09\u6765\u7ed3\u6e05\u5176\u5728\u4ee5\u592a\u574a\u4e3b\u7f51\u4e0a\u7684\u4ea4\u6613\u7684L2\u533a\u5757\u94fe\u3002\u60a8\u53ef\u4ee5\u5728\u4ed6\u4eec\u7684 \u6587\u6863  (https://developer.offchainlabs.com/docs/inside_arbitrum) \u4e2d\u9605\u8bfb\u6709\u5173Arbitrum\u6269\u5c55\u548c\u6784\u5efa\u6c47\u603b\u7684\u65b9\u6cd5\u7684\u6240\u6709\u4fe1\u606f\u3002 \n Arbitrum\u7684\u6267\u884c\u73af\u5883\u4e0e\u4e3b\u7f51EVM\u5b9e\u65bd\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5b83\u8ba1\u7b97\u71c3\u6599\u6210\u672c\u7684\u65b9\u5f0f\u3002\u7531\u4e8eArbitrum\u662f\u5728\u4ee5\u592a\u574a\u4e3b\u7f51\u4e0a\u53d1\u5e03\u5176\u4ea4\u6613\u7684\u4e50\u89c2\u6c47\u603b\u65b9\u6848\uff0c\u56e0\u6b64\u5176\u71c3\u6599\u8ba1\u7b97\u5fc5\u987b\u8003\u8651\u5176\u4ed6\u7684\u56e0\u7d20\u3002 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/arbitrum/#arbitrum"}
{"content": "L1\u7684\u71c3\u6599\u6210\u672c \u00b6 \n Arbitrum\u4e0a\u7684\u4ea4\u6613\u5fc5\u987b\u540c\u65f6\u4e3aL1\u548cL2\u8d44\u6e90\u652f\u4ed8\u71c3\u6599\u3002L1\u8d44\u6e90\u672c\u8d28\u4e0a\u53ea\u662f\u4ee5\u592a\u574a\u8c03\u7528\u6570\u636e\uff1b\u5373\uff0c\u60a8\u652f\u4ed8\u4ea4\u6613\u539f\u59cb\u6570\u636e\u7684\u5927\u5c0f\u4e58\u4ee5Arbitrum\u5bf9L1\u8c03\u7528\u6570\u636e\u7684\u4ef7\u683c\u5b9a\u4ef7\u3002\u8fd9\u5df2\u7ecf\u5c06L1\u7684\u71c3\u6599\u4ef7\u683c\u6ce2\u52a8\u8003\u8651\u5728\u5185\u3002\u7ed9\u5b9a\u4ea4\u6613\u4e2d\u7684L2\u8d44\u6e90\u662f\u60a8\u5728\u4ea4\u6613\u4e2d\u8c03\u7528\u7684\u8ba1\u7b97\u548c\u5b58\u50a8\u7684\u672c\u5730\u65b0\u589e\u6210\u672c\uff0c\u7c7b\u4f3c\u4e8e\u4efb\u4f55\u5176\u4ed6EVM\u94fe\u3002 \n \u7531\u4e8e\u4ee5\u592a\u574a\u865a\u62df\u673a\u7684\u201c\u6b63\u5e38\u201d\u5b9e\u73b0\u4e0d\u5177\u5907\u591a\u79cd\u652f\u4ed8\u71c3\u6599\u8d39\u7528\u7684\u65b9\u5f0f\uff0cArbitrum\u901a\u8fc7\u5c06L1\u8d44\u6e90\u7684\u6210\u672c\u5305\u542b\u5728\u4f7f\u7528\u7684\u8ba1\u7b97\u71c3\u6599\u5355\u4f4d\uff08 gas_limit \u6216 gas_used \uff09\u4e2d\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002\u6bcf\u5f53\u6709\u4eba\u5c1d\u8bd5\u5728Arbitrum\u4e0a\u8fdb\u884c\u4ea4\u6613\u65f6\uff0cRPC\u7aef\u70b9\u88ab\u8c03\u7528\u4ee5\u4f30\u7b97\u8db3\u591f\u7684\u201c\u71c3\u6599\u9650\u5236\u201d\uff0c\u5176\u8fd4\u56de\u7684\u8ba1\u7b97\u71c3\u6599\u5355\u4f4d\u6570\u91cf\u8d85\u8fc7\u4e86\u201c\u6b63\u5e38\u201dEVM\u4e2d\u4f1a\u4ea7\u751f\u7684\u6807\u51c6\u6210\u672c\u3002 \n  (#__codelineno-0-1) P = Arbitrum\u4e0a\u7684\u201c\u71c3\u6599\u4ef7\u683c\u201d = Arbitrum\u7684\u672c\u5730\u71c3\u6599\u4ef7\u683c \n  (#__codelineno-0-2) G = \u4f20\u7edf\u4e0a\u7684\u201c\u71c3\u6599\u9650\u5236\u201d = L2\u6d88\u8017\u7684\u71c3\u6599 + L1\u8d44\u6e90\u6d88\u8017\u7684\u71c3\u6599\n \n Arbitrum\u7684\u4ea4\u6613\u6210\u672c\u4f7f\u7528\u4ee5\u4e0b\u516c\u5f0f\u8ba1\u7b97\uff1a \n \u4ea4 \u6613 \u6210 \u672c \uff08 \uff09 \u4ea4 \u6613 \u6210 \u672c \uff08 \uff09 P \u2217 G = \u4ea4 \u6613 \u6210 \u672c \uff08 C o s t s \uff09 \n G\u5305\u62ec\uff1a \n \u6d88 \u8017 \u7684 \u71c3 \u6599 \u7684 \u71c3 \u6599 \u4ef7 \u683c \u8c03 \u7528 \u6570 \u636e \u6d88 \u8017 \u7684 \u71c3 \u6599 \u7684 \u71c3 \u6599 \u4ef7 \u683c \u8c03 \u7528 \u6570 \u636e ( L 2 \u6d88 \u8017 \u7684 \u71c3 \u6599 ) + ( L 1 \u7684 \u71c3 \u6599 \u4ef7 \u683c \u2217 L 1 \u8c03 \u7528 \u6570 \u636e ) P = G \n \u56e0\u6b64\uff0c\u5b8c\u6574\u7684\u8ba1\u7b97\u5305\u62ec\uff1a \n \u6d88 \u8017 \u7684 \u71c3 \u6599 \u7684 \u71c3 \u6599 \u4ef7 \u683c \u8c03 \u7528 \u6570 \u636e \u4ea4 \u6613 \u6210 \u672c \u6d88 \u8017 \u7684 \u71c3 \u6599 \u7684 \u71c3 \u6599 \u4ef7 \u683c \u8c03 \u7528 \u6570 \u636e \u4ea4 \u6613 \u6210 \u672c P \u2217 ( ( L 2 \u6d88 \u8017 \u7684 \u71c3 \u6599 ) + ( L 1 \u7684 \u71c3 \u6599 \u4ef7 \u683c \u2217 L 1 \u8c03 \u7528 \u6570 \u636e ) P ) = \u4ea4 \u6613 \u6210 \u672c \n \u901a\u8fc7\u8fd9\u4e2a\u516c\u5f0f\u6211\u4eec\u53ef\u4ee5\u7406\u89e3Arbitrum\u4e0a\u7684\u71c3\u6599\u4ef7\u683c\u4e0a\u6da8\u4f1a\u5bfc\u81f4\u4ea4\u6613\u66f4\u4fbf\u5b9c\u3002\u8fd9\u662f\u56e0\u4e3a\u65e0\u8bba\u662f\u9700\u8981\u53d1\u5e03\u4e00\u4e2a\u8fd8\u662f\u4e00\u5343\u4e2a\u4ea4\u6613\uff0cArbitrum\u5c06\u59cb\u7ec8\u5728\u4ee5\u592a\u574a\u4e3b\u7f51\u4e0a\u53d1\u5e03\u5176\u4ea4\u6613\u3002\u53ea\u6709\u5728\u5bf9\u533a\u5757\u7a7a\u95f4\u7684\u9700\u6c42\u589e\u52a0\u65f6\uff0cArbitrum\u7684\u8d39\u7528\u624d\u4f1a\u4e0a\u6da8\u3002\u4f5c\u4e3a\u56de\u62a5\uff0c\u5bf9\u533a\u5757\u7a7a\u95f4\u7684\u9700\u6c42\u589e\u52a0\u610f\u5473\u7740\u66f4\u591aAbritrum\u4ea4\u6613\u5728\u4e00\u6b21\u201c\u6279\u91cf\u53d1\u5e03\u201d\u4ea4\u6613\u4e2d\u88ab\u53d1\u5e03\u5230\u4e3b\u7f51\u4e0a\uff0c\u56e0\u800c\u663e\u8457\u964d\u4f4e\u4e86\u5355\u4e2a\u4ea4\u6613\u7684\u6210\u672c\u3002 \n \u6211\u4eec\u5728 gas_used_for_l1 \u5217\u4e2d\u53cd\u6620\u4e86\u7528\u4e8eArbitrum\u4ea4\u6613\u7684L1\u8d44\u6e90\u7684\u71c3\u6599\u6d88\u8017\u3002 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/arbitrum/#l1"}
{"content": "\u71c3\u6599\u4ef7\u683c\u673a\u5236 \u00b6 \n Arbitrum\u4e0d\u9075\u5faaEIP1559\u6807\u51c6\uff0c\u800c\u662f\u6709\u81ea\u5df1\u7684\u673a\u5236\u6765\u786e\u5b9a\u71c3\u6599\u6210\u672c\u3002\u4e00\u7b14\u4ea4\u6613\u4f1a\u6709\u4e00\u4e2a gas_price \uff0c\u5b83\u88ab\u89c6\u4e3a\u7528\u6237\u613f\u610f\u4e3a\u6b64\u4ea4\u6613\u652f\u4ed8\u7684\u6700\u9ad8\u4ef7\u683c\u3002\u7528\u6237\u652f\u4ed8\u7684\u5b9e\u9645 gas_price \u5c06\u7531Arbitrum EVM\u4e2d\u7684  \u7b97\u6cd5  (https://developer.offchainlabs.com/docs/inside_arbitrum#price-for-arbgas) \u786e\u5b9a\u3002\u7528\u6237\u652f\u4ed8\u7684\u5b9e\u9645 gas_price \u53cd\u6620\u5728 effective_gas_price \u5217\u4e2d\u3002 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/arbitrum/#_1"}
{"content": "\u71c3\u6599\u4f7f\u7528\u91cf\u8ba1\u7b97 \u00b6 \n Arbitrum\u4e0d\u9075\u5faa\u6807\u51c6\u7684EVM\u89c4\u8303\u548c\u89c4\u5219\u6765\u8ba1\u7b97\u4ea4\u6613\u4f7f\u7528\u4e86\u591a\u5c11\u71c3\u6599\u3002Arbitrum\u7684EVM\u4e2d\u7684\u6210\u672c\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u8ba1\u7b97\u5230\u4e00\u8d77\uff0c\u5176\u4e2d\u6d89\u53ca\u5305\u62ec\u548c\u6392\u9664\u76f8\u5e94\u7684L1\u8d44\u6e90\u6210\u672c\u3002\u60a8\u53ef\u4ee5 \u5728\u4ed6\u4eec\u7684\u6587\u6863\u4e2d  (https://developer.offchainlabs.com/docs/avm_specification#instructions) \u67e5\u770bArbitrum\u7684AVM\u64cd\u4f5c\u7801\u6210\u672c\u89c4\u8303\u3002 \n \u60a8\u4e0d\u80fd\u5c06Arbitrum\u7684\u71c3\u6599\u6210\u672c\u4e0e\u5176\u4ed6EVM\u94fe\u7684\u71c3\u6599\u6210\u672c\u8fdb\u884c\u6bd4\u8f83\uff01 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/arbitrum/#_2"}
{"content": "\u7b80\u800c\u8a00\u4e4b \u00b6 \n \u4f7f\u7528 effective_gas_price \u8ba1\u7b97Arbitrum\u4e0a\u7684\u71c3\u6599\u6210\u672c\u3002 \n \u8981\u67e5\u770b\u4ec5\u5728Arbitrum EVM\u4e2d\u53d1\u751f\u7684\u71c3\u6599\u6210\u672c\uff0c\u8bf7\u4ece effective_gas_price \u5b57\u6bb5\u4e2d\u51cf\u53bb gas_used_for_l1 \u7684\u91d1\u989d\u3002 \n \u8bdd\u867d\u5982\u6b64\uff0c\u60a8\u4ecd\u7136\u4e0d\u80fd\u5c06Arbitrum\u7684\u71c3\u6599\u6d88\u8017\u4e0e\u5176\u4ed6EVM\u94fe\u7684\u71c3\u6599\u6210\u672c\u8fdb\u884c\u6bd4\u8f83\u3002 \n ", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/arbitrum/#_3"}
{"content": "\u539f\u59cb\u6570\u636e\u8868 \u00b6 \n \n \n \u533a\u5757\u8868\uff08Blocks\uff09  (blocks/) \n \u4ea4\u6613\u8868\uff08Transactions\uff09  (transactions/) \n \u4e8b\u4ef6\u65e5\u5fd7\u8868\uff08Logs\uff09  (event-logs/) \n \u5185\u90e8\u5408\u7ea6\u8c03\u7528\u8868\uff08Traces\uff09  (traces/)", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/arbitrum/#_4"}
{"content": "EVM\u517c\u5bb9\u94fe \u00b6 \n \u5927\u591a\u6570EVM\u517c\u5bb9\u94fe\u9075\u5faa\u76f8\u540c\u7684\u6267\u884c\u6a21\u578b\uff0c\u4f46\u6709\u65f6\u5728\u5171\u8bc6\u7b97\u6cd5\u3001\u71c3\u6599\uff08gas\uff09\u6210\u672c\u751a\u81f3\u71c3\u6599\u6210\u672c\u7684\u8ba1\u7b97\u65b9\u9762\u5b58\u5728\u5dee\u5f02\u3002 \n \u60a8\u53ef\u4ee5\u5728\u6587\u6863\u7684\u7279\u5b9a\u90e8\u5206\u4e2d\u627e\u5230\u6709\u5173\u5404\u4e2a\u94fe\u7684\u8be6\u7ec6\u4fe1\u606f\uff1a \n \n \n Ethereum Mainnet  (ethereum-mainnet/) \n Arbitrum  (arbitrum/) \n Solana  (solana/) \n Polygon  (polygon/) \n Optimism  (optimism/) \n Avalanche C-Chain  (avalanche-c-chain/) \n BNB Chain (BSC)  (bnb-chain-bsc/) \n Gnosis Chain (xDai)  (gnosis-chain-xdai/)", "url": "https://dune.com/docs/zh/reference/tables/v2/raw/#evm"}
{"content": "ERC721 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/special-tables/erc721/#erc721"}
{"content": "ERC721\u5b9a\u4e49 \u00b6 \n ERC721\u4ee3\u5e01\u6807\u51c6\u662f\u7528\u4e8e\u6240\u6709EVM\u533a\u5757\u94fe\u4e0a\u7684\u975e\u540c\u8d28\u5316\u8d44\u4ea7\u7684\u4ee3\u5e01\u6807\u51c6\u3002ERC721\u53ef\u4ee5\u4ee3\u8868\u6570\u5b57\u827a\u672f\u3001\u623f\u5c4b\u5951\u7ea6\u3001\u4fdd\u9669\u5355\uff0c\u751a\u81f3\u662funiswap V3\u6d41\u52a8\u6027\u5934\u5bf8\u3002\u6240\u6709\u8fd9\u4e9b\u4e8b\u7269\u7684\u5171\u540c\u5c5e\u6027\u662f\u5b83\u4eec\u662f\u975e\u540c\u8d28\u5316\u7684\uff0c\u56e0\u6b64\u4e5f\u662f\u72ec\u4e00\u65e0\u4e8c\u7684\u3002 \n ERC721\u4ee3\u5e01\u5c06  contract_address  \u548c  tokenId  \u7684\u4f5c\u4e3a\u552f\u4e00\u6807\u8bc6\u3002 \n \u6bcf\u4e2a\u667a\u80fd\u5408\u7ea6\u4e2d\u540c\u4e00\u4e2a\u201ctokenId\u201d\u53ea\u80fd\u51fa\u73b01\u6b21\u3002\u8be5\u63a5\u53e3\u7684\u4e00\u4e2a\u53ef\u9009\u529f\u80fd\u662f\u201ctokenURI\u201d\u5c5e\u6027\uff0c\u8fd9\u91cc\u8fb9\u5b58\u50a8\u4e86\u8be5\u667a\u80fd\u5408\u7ea6\u4e2d\u201ctokenId\u201d\u76f8\u5173\u7684\u591a\u5a92\u4f53\u5185\u5bb9\u3002 \u8fd9\u4e3b\u8981\u662f\u6307\u5411\u53bb\u4e2d\u5fc3\u5316\u5b58\u50a8\u89e3\u51b3\u65b9\u6848\u7684\u94fe\u63a5\uff0c\u4f8b\u5982  ifps  (https://ipfs.io) \u3002 \n \u56e0\u4e3a\u4e5f\u662f\u53d7\u4e86ERC20\u4ee3\u5e01\u6807\u51c6\u7684\u5f71\u54cd\uff0cERC721\u6807\u51c6\u4e2d\u4e5f\u5305\u542b\u8bb8\u591a\u4e0e\u4e4b\u7c7b\u4f3c\u7684\u529f\u80fd\uff0c\u4f46\u7531\u4e8e\u589e\u52a0\u4e86  tokenId  \u7684\u590d\u6742\u6027\uff0c\u5b83\u4e5f\u786e\u5b9e\u6269\u5c55\u4e86\u5176\u4ed6\u529f\u80fd ****\u3002 \n Methods \n  (#__codelineno-0-1)      function   balanceOf ( address   _owner )   external   view   returns   ( uint256 );   \n  (#__codelineno-0-2)      /* \u8fd4\u56de\u6240\u6709\u8005\u5730\u5740\u5305\u542b\u7684\u4ee3\u5e01\u6570\u91cf */ \n  (#__codelineno-0-3)      function   ownerOf ( uint256   _tokenId )   external   view   returns   ( address ); \n  (#__codelineno-0-4)      /* \u8fd4\u56deNFT\u7684\u6301\u6709\u8005,\u901a\u8fc7tokenId\u552f\u4e00\u6807\u8bc6*/ \n  (#__codelineno-0-5)      function   safeTransferFrom ( address   _from ,   address   _to ,   uint256   _tokenId )   external   payable ; \n  (#__codelineno-0-6)      /* \u5c06\u67d0\u4e2a\u4ee3\u5e01\u4ece\u53d1\u9001\u65b9\u8f6c\u79fb\u5230\u63a5\u6536\u65b9 */ \n  (#__codelineno-0-7)      function   transferFrom ( address   _from ,   address   _to ,   uint256   _tokenId )   external   payable ; \n  (#__codelineno-0-8)      /* \u5c06\u67d0\u4e2a\u4ee3\u5e01\u4ece\u53d1\u9001\u65b9\u8f6c\u79fb\u5230\u63a5\u6536\u65b9*/ \n  (#__codelineno-0-9)      function   approve ( address   _approved ,   uint256   _tokenId )   external   payable ; \n  (#__codelineno-0-10)      /* \u7528\u4e8e\u6279\u51c6\u67d0\u4e2a\u5730\u5740\u8f6c\u79fb\u4e00\u4e2a\u7279\u5b9a\u7684tokenID */ \n  (#__codelineno-0-11)      function   setApprovalForAll ( address   _operator ,   bool   _approved )   external ; \n  (#__codelineno-0-12)      /* \u7528\u4e8e\u6279\u51c6\u67d0\u4e2a\u5730\u5740\u8f6c\u79fb\u4efb\u610f\u7684tokenID */ \n  (#__codelineno-0-13)      function   getApproved ( uint256   _tokenId )   external   view   returns   ( address ); \n  (#__codelineno-0-14)      /* \u8fd4\u56de\u5f53\u524d\u80fd\u591f\u8f6c\u79fb\u6b64Token\u7684\u5730\u5740\u3002\u4e00\u6b21\u53ea\u80fd\u6fc0\u6d3b\u4e00\u4e2a*/ \n  (#__codelineno-0-15)      function   isApprovedForAll ( address   _owner ,   address   _operator )   external   view   returns   ( bool ); \n  (#__codelineno-0-16)      /* \u8fd4\u56de\u6267\u884c\u65b9\u662f\u5426\u5f97\u5230\u76f8\u5173\u4ee3\u5e01\u6240\u6709\u4eba\u7684\u8ba4\u53ef */ \n \n Events \n  (#__codelineno-1-1)   event   Transfer ( address   _from ,   address   _to ,   uint256   _tokenId ); \n  (#__codelineno-1-2)   /* Token\u6210\u529f\u8f6c\u79fb\u7684\u65f6\u5019\u53d1\u51fa\uff0c\u6bcf\u6b21\u53ea\u5305\u542b1\u4e2a\u5355\u4f4d*/ \n  (#__codelineno-1-3)   event   Approval ( address   _owner ,   address   _approved ,   uint256   _tokenId ); \n  (#__codelineno-1-4)   /* \u5728\u6267\u884c\u65b9\u6279\u51c6\u7279\u5b9aTokenId\u7684\u65f6\u5019\u53d1\u51fa */ \n  (#__codelineno-1-5)   event   ApprovalForAll ( address   indexed   _owner ,   address   indexed   _operator ,   bool   _approved ); \n  (#__codelineno-1-6)   /* \u5728\u6267\u884c\u65b9\u6279\u51c6\u6240\u6709TokenId\u7684\u65f6\u5019\u53d1\u51fa */ \n \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/special-tables/erc721/#erc721_1"}
{"content": "Tables in Dune \u00b6 \n \u5728Dune\u4e2d\uff0c\u6211\u4eec\u5c06\u6240\u6709\u6765\u81ea\u667a\u80fd\u5408\u7ea6\u7684\u6240\u6709 erc721 \u8f6c\u79fb\u4e8b\u4ef6\u89e3\u7801\u5230  erc721_blockchain.ERC721_evt_Transfer  \u8868\u4e2d\u3002 \n erc721_blockchain.ERC721 _evt_Transfer \u00b6  (#erc721_blockchainerc721_evt_transfer) \n \u8fd9\u662f\u5728ERC721\u667a\u80fd\u5408\u7ea6\u4e2d\u6210\u529f\u8f6c\u79fb\u4ee3\u5e01\u65f6\u53d1\u51fa\u7684\u4e8b\u4ef6\u3002\u5b83\u53ef\u4ee5\u901a\u8fc7  safeTransferFrom  \u6216  transferFrom  \u51fd\u6570\u89e6\u53d1\u3002 \n \n \n \n from \n string \n the sender of the  ERC721  token \n \n \n \n \n to \n string \n ERC721 \u4ee3\u5e01\u7684\u63a5\u53d7\u8005 \n \n \n tokenID \n numeric \n NFT\u7684Token ID \n \n \n contract_address \n string \n ERC721 \u4ee3\u5e01\u7684\u667a\u80fd\u5408\u7ea6\u5730\u5740 \n \n \n evt_tx_hash \n string \n \u5305\u542b\u8fd9\u4e2a\u8f6c\u79fb\u4ee3\u5e01\u4e8b\u4ef6log\u7684transaction\u54c8\u5e0c \n \n \n evt_index \n numeric \n \u5728\u533a\u5757\u65e5\u5fd7\u7d22\u5f15\u4e2d\u7684\u4f4d\u7f6e (\u6309\u7167\u6267\u884c\u987a\u5e8f\u7d2f\u52a0) \n \n \n evt_block_time \n timestamptz \n \u5305\u542b\u8fd9\u4e2a\u65e5\u5fd7\u7684\u533a\u5757\u88ab\u6316\u51fa\u7684\u65f6\u95f4 \n \n \n evt_block_number \n int8 \n \u5305\u542b\u8fd9\u4e2a\u65e5\u5fd7\u7684\u533a\u5757\u7684\u533a\u5757\u9ad8\u5ea6 \n \n \n \n erc721_blockchain.ERC721_evt_Approval \u00b6  (#erc721_blockchainerc721_evt_approval) \n \u8fd9\u662f\u5728\u6210\u529f\u8c03\u7528  approve  \u51fd\u6570\u65f6\u89e6\u53d1\u7684\u4e8b\u4ef6\u3002 \n \n \n \n owner \n string \n the address which gives permission to move this token \n \n \n \n \n approved \n string \n \u53ef\u4ee5\u8f6c\u79fb\u8fd9\u4e2a tokenId \u7684\u88ab\u6388\u6743\u65b9\u7684\u5730\u5740 \n \n \n tokenId \n numeric \n ERC721 \u4ee3\u5e01\u7684  tokenId \n \n \n contract_address \n string \n ERC721 \u4ee3\u5e01\u7684\u667a\u80fd\u5408\u7ea6\u5730\u5740 \n \n \n evt_tx_hash \n string \n \u5305\u542b\u8fd9\u4e2a\u8f6c\u79fb\u4ee3\u5e01\u4e8b\u4ef6log\u7684transaction\u54c8\u5e0c \n \n \n evt_index \n bigint \n \u5728\u533a\u5757\u65e5\u5fd7\u7d22\u5f15\u4e2d\u7684\u4f4d\u7f6e (\u6309\u7167\u6267\u884c\u987a\u5e8f\u7d2f\u52a0 \n \n \n evt_block_time \n timestamp with time zone \n \u5305\u542b\u8fd9\u4e2a\u65e5\u5fd7\u7684\u533a\u5757\u88ab\u6316\u51fa\u7684\u65f6\u95f4 \n \n \n evt_block_number \n bigint \n \u5305\u542b\u8fd9\u4e2a\u65e5\u5fd7\u7684\u533a\u5757\u7684\u533a\u5757\u9ad8\u5ea6", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/special-tables/erc721/#tables-in-dune"}
{"content": "ERC20 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/special-tables/erc20/#erc20"}
{"content": "ERC20\u5b9a\u4e49 \u00b6 \n ERC20\u6807\u51c6\u662f\u7528\u4e8e\u6240\u6709EVM\u533a\u5757\u94fe\u4e0a\u7684\u540c\u8d28\u5316\u4ee3\u5e01\u7684\u4ee3\u5e01\u6807\u51c6\u3002ERC20\u53ef\u4ee5\u4ee3\u8868\u4efb\u4f55\u4e1c\u897f\uff0c\u4ece\u795e\u5947\u7684\u4e92\u8054\u7f51\u79ef\u5206\u5230\u7f8e\u5143\u518d\u5230\u9ec4\u91d1\u4ee3\u5e01\u3002 \n ERC-20\u6807\u51c6\u7531Fabian Vogelsteller\u4e8e2015\u5e7411\u6708\u63d0\u51fa\uff0c\u5b83\u4ee3\u8868\u4e86\u7b2c\u4e00\u4e2a\u5728\u667a\u80fd\u5408\u7ea6\u4e2d\u5b9e\u73b0\u4ee3\u5e01API\u7684\u4ee3\u5e01\u6807\u51c6\u3002\u8fd9\u79cd\u667a\u80fd\u5408\u7ea6\u7684\u6807\u51c6\u5316\u89e3\u51b3\u4e86\u4e0e\u533a\u5757\u94fe\u4e0a\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u7684\u4e92\u64cd\u4f5c\u6027\u95ee\u9898\u3002 \u7531\u4e8e\u6240\u6709\u4ee3\u5e01\u5171\u4eab\u76f8\u540c\u7684\u63a5\u53e3\uff0c\u5176\u4ed6\u667a\u80fd\u5408\u7ea6\u53ef\u4ee5\u8f7b\u677e\u5730\u4e0e\u5b83\u4eec\u4ea4\u4e92\u3002 \n \u5305\u542bERC-20\u4ee3\u5e01\u6807\u51c6\u7684\u667a\u80fd\u5408\u7ea6\u4e0d\u4ec5\u9650\u4e8e\u5177\u6709\u8fd9\u4e9b\u529f\u80fd\uff0c\u8fd8\u9700\u8981\u5305\u542b\u8fd9\u4e9b\u529f\u80fd\u624d\u80fd\u5728\u6807\u51c6\u8303\u56f4\u5185\u3002 \n \u60f3\u8981\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\uff0c\u53ef\u4ee5\u67e5\u770b  initial proposal  (https://eips.ethereum.org/EIPS/eip-20)  \u6216\u8005  ethereum.org documentation  (https://ethereum.org/en/developers/docs/standards/tokens/erc-20) . \n \u8bf7\u6ce8\u610f\uff0c\u5e01\u5b89\u667a\u80fd\u94fe\u9009\u62e9\u5c06ERC\u91cd\u547d\u540d\u4e3aBEP\uff0c\u4ece\u8868\u540d\u4e2d\u5c31\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a\u53d8\u5316\u3002 \n \u65b9\u6cd5 \n  (#__codelineno-0-1) function   name ()   public   view   returns   ( string )   \n  (#__codelineno-0-2) /* \u8fd4\u56deToken\u7684\u5168\u79f0 */ \n  (#__codelineno-0-3) function   symbol ()   public   view   returns   ( string )   \n  (#__codelineno-0-4) /* \u8fd4\u56deToken\u7684ticker*/ \n  (#__codelineno-0-5) function   decimals ()   public   view   returns   ( uint8 )   \n  (#__codelineno-0-6) /* \u8fd4\u56deToken\u7684\u7cbe\u5ea6 */ \n  (#__codelineno-0-7) function   totalSupply ()   public   view   returns   ( uint256 )   \n  (#__codelineno-0-8) /* \u8fd4\u56deToken\u5f53\u524d\u7684\u5faa\u73af\u4f9b\u5e94\u91cf */ \n  (#__codelineno-0-9) function   balanceOf ( address   _owner )   public   view   returns   ( uint256   balance )   \n  (#__codelineno-0-10) /* \u8fd4\u56de\u6307\u5b9a\u5730\u5740\u7684\u4f59\u989d */   \n  (#__codelineno-0-11) function   transfer ( address   _to ,   uint256   _value )   public   returns   ( bool   success )   \n  (#__codelineno-0-12) /* \u5c06\u6307\u5b9a\u6570\u91cf\u7684\u4ee3\u5e01\u8f6c\u79fb\u5230\u6307\u5b9a\u5730\u5740*/   \n  (#__codelineno-0-13) function   transferFrom ( address   _from ,   address   _to ,   uint256   _value )   public   returns   ( bool   success )   \n  (#__codelineno-0-14) /* \u5982\u679c\u5b58\u5728\u5f53\u9664\u53d1\u9001\u8005\u63a5\u53d7\u8005\u4e4b\u5916\u7684\u7b2c\u4e09\u4e2a\u5730\u5740\u6709\u6743\u9650\u5b8c\u6210\u8f6c\u8d26\uff0c\u8fd9\u4e2a\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528\u6b64\u65b9\u6cd5*/ \n  (#__codelineno-0-15) function   approve ( address   _spender ,   uint256   _value )   public   returns   ( bool   success )   \n  (#__codelineno-0-16) /* \u7528\u4e8e\u6388\u6743\u82b1\u8d39\u4ee3\u5e01\u7684\u6570\u91cf*/ \n  (#__codelineno-0-17) function   allowance ( address   _owner ,   address   _spender )   public   view   returns   ( uint256   remaining ) \n  (#__codelineno-0-18) /* \u8fd4\u56de\u5f53\u524d\u4ee3\u5e01\u6d88\u8017\u8005\u53ef\u4f7f\u7528\u7684\u5269\u4f59\u4ee3\u5e01\u6570\u91cf\uff08_value\uff09*/ \n \n \u4e8b\u4ef6 \n  (#__codelineno-1-1) event   Transfer ( address   indexed   _from ,   address   indexed   _to ,   uint256   _value ) \n  (#__codelineno-1-2) /* \u5728\u6210\u529f\u8f6c\u51fa\u4ee3\u5e01\u65f6\u53d1\u51fa*/ \n  (#__codelineno-1-3) event   Approval ( address   indexed   _owner ,   address   indexed   _spender ,   uint256   _value ) \n  (#__codelineno-1-4) /* \u5728\u7ed9\u67d0\u4e2a\u5730\u5740\u6210\u529f\u6388\u6743\u4e00\u5b9a\u6570\u91cf\u4ee3\u5e01\u7684\u65f6\u5019\u53d1\u51fa*/ \n \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/special-tables/erc20/#erc20_1"}
{"content": "Dune\u4e0a\u7684\u8868 \u00b6 \n \u5728Dune\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528ERC20\u4ee3\u5e01\u6807\u51c6\u7684\u6240\u6709\u667a\u80fd\u5408\u7ea6\u4e2d\u7684\u6240\u6709\u4f20\u8f93\u4e8b\u4ef6\u89e3\u7801\u5230  erc20_blockchain.ERC20_evt_Transfer  \u8868\u4e2d\u3002\n\u6b64\u5916\uff0c\u6211\u4eec\u5c06\u6240\u6709Token\u6388\u6743\u4e8b\u4ef6\u89e3\u6790\u5230  erc20_blockchain.ERC20_evt_Approval  \u8868\u4e2d\u3002 \n erc20_blockchain.ERC20_evt_Transfer \u00b6  (#erc20_blockchainerc20_evt_transfer) \n \u8fd9\u662f\u5728ERC20\u667a\u80fd\u5408\u7ea6\u4e2d\u6210\u529f\u8f6c\u79fb\u4ee3\u5e01\u65f6\u53d1\u51fa\u7684\u4e8b\u4ef6\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528  transfer  \u6216  transferFrom  \u51fd\u6570\u6765\u89e6\u53d1\u3002 \n \n \n \n from \n string \n ERC20 \u4ee3\u5e01\u7684\u53d1\u9001\u8005 \n \n \n \n \n to \n string \n ERC20 \u4ee3\u5e01\u7684\u63a5\u6536\u8005 \n \n \n value \n numeric \n \u53d1\u9001\u7684\u201cERC20\u201d\u4ee3\u5e01\u6570\u91cf\u3002 \u8bf7\u6ce8\u610f\uff0c\u60a8\u5fc5\u987b\u5c06\u5176\u9664\u4ee5\u201cERC20\u201d\u4ee3\u5e01\u7684\u76f8\u5173\u7684\u7cbe\u5ea6\uff0c\u624d\u80fd\u5f97\u5230\u8be5\u4ee3\u5e01\u7684\u5e38\u7528\u9762\u989d\u3002 \n \n \n contract_address \n string \n ERC20 \u4ee3\u5e01\u7684\u667a\u80fd\u5408\u7ea6\u5730\u5740 \n \n \n evt_tx_hash \n string \n \u5305\u542b\u8fd9\u4e2a\u8f6c\u79fb\u4ee3\u5e01\u4e8b\u4ef6log\u7684transaction\u54c8\u5e0c \n \n \n evt_index \n numeric \n \u5728\u533a\u5757\u65e5\u5fd7\u7d22\u5f15\u4e2d\u7684\u4f4d\u7f6e (\u6309\u7167\u6267\u884c\u987a\u5e8f\u7d2f\u52a0) \n \n \n evt_block_time \n timestamptz \n \u5305\u542b\u8fd9\u4e2a\u65e5\u5fd7\u7684\u533a\u5757\u88ab\u6316\u51fa\u7684\u65f6\u95f4 \n \n \n evt_block_number \n int8 \n \u5305\u542b\u8fd9\u4e2a\u65e5\u5fd7\u7684\u533a\u5757\u7684\u533a\u5757\u9ad8\u5ea6 \n \n \n \n erc20_blockchain.ERC20_evt_Approval \n ERC20\u4ee3\u5e01\u53ef\u4ee5\u88ab\u5176\u4ed6\u667a\u80fd\u5408\u7ea6\u8f6c\u79fb\u3002 \u7528\u6237\u9700\u8981\u9996\u5148\u8c03\u7528  approve  \u51fd\u6570\uff0c\u6765\u6279\u51c6\u7c7b\u4f3c\u7684\u64cd\u4f5c\u3002\u4e8b\u52a1\u6210\u529f\u6267\u884c\u540e\u5c06\u53d1\u51fa Approval  \u4e8b\u4ef6\u3002 \n \n \n \n owner \n string \n the address giving the approval \n \n \n \n \n spender \n string \n \u88ab\u6279\u51c6\u8f6c\u79fb\u4ee3\u5e01\u7684\u5730\u5740 \n \n \n value \n numeric \n \u652f\u51fa\u9650\u989d \n \n \n contract_address \n string \n \u53ef\u88ab\u8f6c\u79fb\u7684ERC20\u4ee3\u5e01\u5730\u5740 \n \n \n evt_tx_hash \n string \n \u5305\u542b\u8fd9\u4e2a\u8f6c\u79fb\u4ee3\u5e01\u4e8b\u4ef6log\u7684transaction\u54c8\u5e0c \n \n \n evt_index \n bigint \n \u5728\u533a\u5757\u65e5\u5fd7\u7d22\u5f15\u4e2d\u7684\u4f4d\u7f6e (\u6309\u7167\u6267\u884c\u987a\u5e8f\u7d2f\u52a0) \n \n \n evt_block_time \n timestamp with time zone \n \u5305\u542b\u8fd9\u4e2a\u65e5\u5fd7\u7684\u533a\u5757\u88ab\u6316\u51fa\u7684\u65f6\u95f4 \n \n \n evt_block_number \n bigint \n \u5305\u542b\u8fd9\u4e2a\u65e5\u5fd7\u7684\u533a\u5757\u7684\u533a\u5757\u9ad8\u5ea6", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/special-tables/erc20/#dune"}
{"content": "ERC1155 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/special-tables/erc1155/#erc1155"}
{"content": "ERC1155 \u5b9a\u4e49 \u00b6 \n ERC1155\u6807\u51c6\u662f\u4e00\u4e2a\u591a\u4ee3\u5e01\u6807\u51c6\u3002\u5b83\u53ef\u4ee5\u5305\u62ec\u540c\u8d28\u5316\u548c\u975e\u540c\u8d28\u5316\u4ee3\u5e01\u7684\u4efb\u610f\u7ec4\u5408\uff0c\u56e0\u6b64ERC1155\u53ef\u88ab\u7528\u4e8e\u5e7f\u6cdb\u7684\u4f7f\u7528\u573a\u666f\u3002\u76ee\u524d\uff0cERC1155\u667a\u80fd\u5408\u7ea6\u6700\u5e38\u89c1\u7684\u4f7f\u7528\u573a\u666f\u662f\u6e38\u620f\u4e2d\u7684\u7269\u54c1\u548c\u8d27\u5e01\u3001\u6570\u5b57\u6536\u85cf\u54c1\u3001\u827a\u672f\u54c1\u548c\u4f1a\u5458\u901a\u884c\u8bc1\u3002\u56e0\u4e3a\u4ed6\u4eec\u5c06ERC20\u548cERC721\u4ee3\u5e01\u7684\u6240\u6709\u5c5e\u6027\u96c6\u4e2d\u5728\u4e86\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6\uff0c\u56e0\u6b64\u5b83\u4eec\u786e\u5b9e\u53ef\u4ee5\u5728\u975e\u5e38\u591a\u7684\u573a\u666f\u4e2d\u4f7f\u7528\u3002\u5bf9\u4e8e\u67d0\u4e2a\u9879\u76ee\u4e2d\u53ef\u80fd\u5b58\u5728\u7684\u6240\u6709\u7c7b\u578b\u7684\u4ee3\u5e01\u7684\u573a\u666f\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528\u5355\u4e2a\u667a\u80fd\u5408\u7ea6\uff0c\u8fd9\u4f1a\u5f88\u5927\u7a0b\u5ea6\u4e0a\u8282\u7701\u4f7f\u7528\u65f6\u7684gas\u4ee5\u53ca\u90e8\u7f72\u65f6\u7684\u590d\u6742\u5ea6\u3002 \n ERC1155 \u667a\u80fd\u5408\u7ea6\u4e2d\u7684\u6bcf\u4e2a id \u90fd\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u4ee3\u5e01 value \u3002\u5047\u8bbe\u4e00\u4e2a\u975e\u540c\u8d28\u5316\u4ee3\u5e01\u62e5\u6709\u7684\u4ef7\u503c\u662f  value 1 \uff0c\u540c\u8d28\u5316\u7684\u4ee3\u5e01\u62e5\u6709\u4ef7\u503c\u53ef\u4ee5\u662f  value > 1 \u3002 \u6240\u6709ERC1155\u4ee3\u5e01\u90fd\u662f\u4e0d\u540c\u7684\uff0c\u5e76\u4e14\u6ca1\u6709 ERC20\u4ee3\u5e01\u7684 decimal \u5c5e\u6027\u3002\u4f46\u662f\u5b9e\u9645\u7684\u4f7f\u7528\u8fc7\u7a0b\u4e2d\uff0c\u8fd9\u79cd decimal \u5c5e\u6027\u7f3a\u5931\u7684\u95ee\u9898\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5728\u60a8\u5904\u7406\u4ee3\u5e01\u7684\u524d\u7aef\u66f4\u6b63\u3002 \n \u5982\u9700\u66f4\u591a\u9605\u8bfb\uff0c\u8bf7\u67e5\u770b proposal for the standard  (https://eips.ethereum.org/EIPS/eip-1155) \u3001 ethereum.org \u6587\u6863  (https://ethereum.org/en/developers/docs/standards/tokens/erc-1155)  \u6216  open Zeppelin docs  (https://docs.openzeppelin.com/contracts/3.x/erc1155) \u3002 \n \u65b9\u6cd5 \n  (#__codelineno-0-1) function   safeTransferFrom ( address   _from ,   address   _to ,   uint256   _id ,   uint256   _value ,   bytes   calldata   _data )   external ; \n  (#__codelineno-0-2) /* transfers a quantity(_value) of a specific token type(_id) from an address(_from) to a receiver(_to)*/ \n  (#__codelineno-0-3) function   safeBatchTransferFrom ( address   _from ,   address   _to ,   uint256 []   calldata   _ids ,   uint256 []   calldata   _values ,   bytes   calldata   _data )   external ; \n  (#__codelineno-0-4) /* transfers multiple token types in different quantities as specified in the _ids and _values arrays. Can only have one sender and one receiver.*/ \n  (#__codelineno-0-5) function   balanceOf ( address   _owner ,   uint256   _id )   external   view   returns   ( uint256 ); \n  (#__codelineno-0-6) /* returns the quantity of tokens for a specific token type for a specific owner */ \n  (#__codelineno-0-7) function   balanceOfBatch ( address []   calldata   _owners ,   uint256 []   calldata   _ids )   external   view   returns   ( uint256 []   memory );     \n  (#__codelineno-0-8) /*returns the balance of mutiple owners and multiple token types */ \n  (#__codelineno-0-9) function   setApprovalForAll ( address   _operator ,   bool   _approved )   external ; \n  (#__codelineno-0-10) /* sets the approval for a certain operator for all token types(Ids) */    \n  (#__codelineno-0-11) function   isApprovedForAll ( address   _owner ,   address   _operator )   external   view   returns   ( bool ); \n  (#__codelineno-0-12) /* returns whether a operator is approved for all */ \n  (#__codelineno-0-13) function   uri ( uint256   _id )   external   view   returns   ( string   memory ); \n  (#__codelineno-0-14) /* returns the uri of the specified id \n \n \u4e8b\u4ef6 \n  (#__codelineno-1-1) event   TransferSingle ( address   indexed   _operator ,   address   indexed   _from ,   address   indexed   _to ,   uint256   _id ,   uint256   _value ); \n  (#__codelineno-1-2) /* gets emitted after a successful safeTransferFrom call */ \n  (#__codelineno-1-3) event   TransferBatch ( address   indexed   _operator ,   address   indexed   _from ,   address   indexed   _to ,   uint256 []   _ids ,   uint256 []   _values ); \n  (#__codelineno-1-4) /* gets emitted after a successful safeBtachTransferFrom call */   \n  (#__codelineno-1-5) event   ApprovalForAll ( address   indexed   _owner ,   address   indexed   _operator ,   bool   _approved ); \n  (#__codelineno-1-6) /* gets emitted after a successful setApprovalForAll call */ \n  (#__codelineno-1-7) event   URI ( string   _value ,   uint256   indexed   _id ); \n  (#__codelineno-1-8) /* gets emmitted when the URI gets changed \n \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/special-tables/erc1155/#erc1155_1"}
{"content": "Dune\u4e0a\u7684\u8868 \u00b6 \n \u6211\u4eec\u5c06\u6240\u6709 ERC1155 \u5408\u7ea6\u7684\u6240\u6709\u4e8b\u4ef6\u89e3\u7801\u5230\u76f8\u5e94\u7684\u4e8b\u4ef6\u8868\u4e2d\u3002 \n erc1155_blockchain.ERC1155_evt_Transfer_Single \u00b6  (#erc1155_blockchainerc1155_evt_transfer_single) \n \u5f53\u4f7f\u7528  safeTransferFrom  \u51fd\u6570\u8f6c\u79fb\u4e00\u4e2a erc1155 \u5408\u7ea6\u4e2d\u7684\u5355\u4e00\u7c7b\u578b\u7684\u4ee3\u5e01\u65f6\uff0c\u4f1a\u89e6\u53d1\u6b64\u4e8b\u4ef6\u3002 \n \n \n \n operator \n string \n \u83b7\u51c6\u8fdb\u884c\u8f6c\u8d26\u5e76\u53d1\u8d77\u672c\u6b21\u4ea4\u6613\u7684\u8d26\u6237/\u5408\u7ea6\u5730\u5740 \n \n \n \n \n from \n string \n ERC1155  \u4ee3\u5e01\u7684\u53d1\u9001\u8005 \n \n \n to \n string \n ERC1155  \u4ee3\u5e01\u7684\u63a5\u6536\u8005 \n \n \n id \n numeric \n \u6b64\u7c7b\u4ee3\u5e01\u7684 ID \u5c5e\u6027 \n \n \n value \n numeric \n \u5411\u7279\u5b9a id \u8f6c\u79fb\u7684\u4ee3\u5e01\u6570\u91cf \n \n \n contract_address \n string \n \u6b64 ERC1155 \u667a\u80fd\u5408\u7ea6\u7684\u5408\u7ea6\u5730\u5740 \n \n \n evt_tx_hash \n string \n \u4e8b\u4ef6\u7684\u4ea4\u6613\u54c8\u5e0c \n \n \n evt_index \n bigint \n \u533a\u5757\u4e2d\u7684\u65e5\u5fd7\u7d22\u5f15\u4f4d\u7f6e \n \n \n evt_block_time \n timestamp with time zone \n \u5305\u542b\u6b64\u4e8b\u4ef6\u65e5\u5fd7\u7684\u533a\u5757\u88ab\u6316\u51fa\u7684\u65f6\u95f4 \n \n \n evt_block_number \n bigint \n \u533a\u5757\u9ad8\u5ea6 \n \n \n \n erc1155_blockchain.ERC1155_evt_TransferBatch \u00b6  (#erc1155_blockchainerc1155_evt_transferbatch) \n \u5f53\u4f7f\u7528  safeBatchTransferFrom  \u51fd\u6570\u8f6c\u79fb\u4e00\u4e2a erc1155 \u5408\u7ea6\u4e2d\u7684\u591a\u79cd\u7c7b\u578b\u7684\u4ee3\u5e01\u65f6\u4f1a\u89e6\u53d1\u6b64\u4e8b\u4ef6\u3002 \n \n \n \n operator \n string \n \u83b7\u51c6\u8fdb\u884c\u8f6c\u8d26\u5e76\u53d1\u8d77\u672c\u6b21\u4ea4\u6613\u7684\u8d26\u6237/\u5408\u7ea6\u5730\u5740 transaction \n \n \n \n \n from \n string \n ERC1155  \u4ee3\u5e01\u7684\u53d1\u9001\u8005 \n \n \n to \n string \n ERC1155  \u4ee3\u5e01\u7684\u63a5\u6536\u8005 \n \n \n id \n ARRAY \n \u88ab\u8f6c\u8d26Token\u7684  ID  \u5c5e\u6027\u7684\u4e00\u4e2a\u6570\u7ec4 \n \n \n value \n ARRAY \n \u88ab\u8f6c\u8d26Token\u7684  Value  \u5c5e\u6027\u7684\u4e00\u4e2a\u6570\u7ec4 \n \n \n contract_address \n string \n \u6b64  ERC1155  \u667a\u80fd\u5408\u7ea6\u7684\u5408\u7ea6\u5730\u5740 \n \n \n evt_tx_hash \n string \n \u8f6c\u8d26\u7684\u4ea4\u6613\u54c8\u5e0c \n \n \n evt_index \n bigint \n \u533a\u5757\u4e2d\u7684\u65e5\u5fd7\u7d22\u5f15\u4f4d\u7f6e \n \n \n evt_block_time \n timestamp with time zone \n \u5305\u542b\u6b64\u4e8b\u4ef6\u65e5\u5fd7\u7684\u533a\u5757\u88ab\u6316\u51fa\u7684\u65f6\u95f4 \n \n \n evt_block_number \n bigint \n \u533a\u5757\u9ad8\u5ea6 \n \n \n \n erc1155_blockchain. ERC1155_evt_URI \u00b6  (#erc1155_blockchainerc1155_evt_uri) \n \u5f53\u4ee3\u5e01\u7c7b\u578b\u7684 URI \u53d1\u751f\u66f4\u6539\u65f6\u51fa\u6b64\u4e8b\u4ef6\u4f1a\u88ab\u89e6\u53d1\u3002\u53ea\u8981\u7b26\u5408\u8981\u6c42\uff0c\u8fd9\u884c\u4e3a\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a\u51fd\u6570\u6765\u5b8c\u6210\uff0c \n \n \n \n value \n text \n the new URI \n \n \n \n \n id \n numeric \n \u5df2\u7ecf\u88ab\u6539\u53d8\u7684\u4ee3\u5e01 URI \u7684id \n \n \n contract_address \n string \n \u6b64ERC1155 \u667a\u80fd\u5408\u7ea6\u7684\u5730\u5740 \n \n \n evt_tx_hash \n string \n \u8f6c\u8d26\u7684\u4ea4\u6613\u54c8\u5e0c \n \n \n evt_index \n bigint \n \u533a\u5757\u4e2d\u7684\u65e5\u5fd7\u7d22\u5f15\u4f4d\u7f6e \n \n \n evt_block_time \n timestamp with time zone \n \u5305\u542b\u6b64\u4e8b\u4ef6\u65e5\u5fd7\u7684\u533a\u5757\u88ab\u6316\u51fa\u7684\u65f6\u95f4 \n \n \n evt_block_number \n bigint \n \u533a\u5757\u9ad8\u5ea6", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/special-tables/erc1155/#dune"}
{"content": "\u4ee3\u5e01\u6807\u51c6 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/special-tables/#_1"}
{"content": "\u63a5\u53e3 \u00b6 \n \u6bcf\u5f53\u6211\u4eec\u5bf9\u88ab\u89e6\u53d1\u7684\u4e8b\u4ef6\u65e5\u5fd7\u7684\u5b50\u96c6\u611f\u5174\u8da3\u7684\u65f6\u5019(\u65e0\u8bba\u662f\u54ea\u4e2a\u539f\u59cb\u5408\u7ea6)\uff0cDune\u90fd\u4f1a\u4f7f\u7528interface-decoding\u53bb\u5904\u7406\u3002\u5178\u578b\u7684\u7684\u4f8b\u5b50\u5305\u62ec ERC20 \u3001 ERC721 \u548c ERC1155 \u7684\u8f6c\u8d26\u4e8b\u4ef6\u3002 \u6b64\u65b9\u6cd5\u88ab\u4fdd\u7559\u4e0b\u6765\u7528\u4e8e\u7279\u6b8a\u60c5\u51b5\u3002 \u8fd9\u4e9b\u8868\u53ef\u4ee5\u8f7b\u677e\u8ddf\u8e2a\u6d41\u5165\u548c\u6d41\u51fa\u5408\u7ea6\u4ee5\u53ca\u94b1\u5305\u7684\u540c\u8d28\u5316\u4ee5\u53ca\u975e\u540c\u8d28\u5316\u4ee3\u5e01\u5e76\u5728Dune\u4e2d\u88ab\u5e7f\u6cdb\u4f7f\u7528\u3002 \n \u60a8\u53ef\u4ee5\u5728\u6b64\u5904\u9605\u8bfb\u6709\u5173\u5404\u4e2a\u4ee3\u7b14\u6807\u51c6\u548c\u8868\u7684\u66f4\u591a\u4fe1\u606f\uff1a \n \n \n ERC-20  (erc20/) \n ERC-721  (erc721/) \n ERC-1155  (erc1155/)", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/special-tables/#_2"}
{"content": "\u6765\u6e90Dex\u7684\u4ef7\u683c \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/prices-from-dexes/#dex"}
{"content": "\u6839\u636e\u4ea4\u6613\u6570\u636e\u8ba1\u7b97\u7684\u4ef7\u683c \u00b6 \n \u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u57fa\u4e8e\u53bb\u4e2d\u5fc3\u5316\u4ea4\u6613\u6240\u4ea4\u6613\u6570\u636e\u7684\u4ef7\u683c\u8868\u3002 \u8be5\u8868\u6db5\u76d6\u7684\u8d44\u4ea7\u6bd4\u201cprices.usd\u201d\u591a\u5f97\u591a\uff0c\u56e0\u4e3a\u5b83\u6db5\u76d6\u4e86\u5728\u201cdex.trades\u201d\u7d22\u5f15\u7684\u4efb\u4f55\u53bb\u4e2d\u5fc3\u5316\u4ea4\u6613\u6240\u4ea4\u6613\u7684\u6240\u6709\u8d44\u4ea7\u3002 \n \u8bf7\u8bb0\u4f4f\uff0c\u6b64\u811a\u672c\u5728\u6781\u5c11\u6570\u60c5\u51b5\u4e0b\u4f1a\u4ea7\u751f\u9519\u8bef\u7684\u4ef7\u683c \n \u6b64\u8868\u975e\u5e38\u8017\u8d39\u8d44\u6e90\uff0c\u56e0\u6b64\u53ea\u80fd\u6bcf\u9694\u51e0\u4e2a\u5c0f\u65f6\u66f4\u65b0\u4e00\u6b21\uff0c\u4f7f\u7528\u65f6\u8bf7\u8bb0\u4f4f\u8fd9\u4e00\u70b9\u3002 **** \u6b64\u5916\uff0c\u65f6\u95f4\u5468\u671f\u662f\u6bcf\u5c0f\u65f6\u7ea7\u522b\uff0c\u6240\u4ee5\u5982\u679c\u60a8\u9700\u8981\u5206\u949f\u7ea7\u522b\u4ef7\u683c\uff0c\u8bf7\u53c2\u8003  prices.usd  (../../../prices/) . \n \u8be5\u8868\u76ee\u524d\u4ec5\u5b58\u5728\u4e8e\u6211\u4eec\u65e7\u6570\u636e\u5e93\u67b6\u6784\u4e0a\u7684Ethereum\u3002 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/prices-from-dexes/#_1"}
{"content": "\u5b83\u662f\u5982\u4f55\u8fd0\u8f6c\u7684 \u00b6 \n \u53ef\u4ee5\u5728\u6211\u4eec\u7684  \u516c\u5171 github  (https://github.com/duneanalytics/spellbook/tree/master/ethereum/prices)  \u5e93\u4e2d\u8bbf\u95ee\u8be5\u8868\u7684\u8fd0\u884c\u673a\u5236\u3002 \n \u8be5\u811a\u672c\u6839\u636e dex.trades \u4e2d\u53bb\u4e2d\u5fc3\u5316\u4ea4\u6613\u6240\u7684\u6570\u636e\u751f\u6210\u6bcf\u5c0f\u65f6\u4ef7\u683c\u4e2d\u4f4d\u6570\u3002\u5b83\u4f1a\u57fa\u4e8e prices.usd \u4e2d\u6709\u4ef7\u683c\u7684\u4ea4\u6613\u5bf9\u53bb\u786e\u5b9a\u8d44\u4ea7\u7684\u4ef7\u683c\u3002 \n \u8ba9\u6211\u4eec\u4ee5 $SPELL/ETH \u6c60\u4e3a\u4f8b\u3002 \n \n $ETH \u4ef7\u683c\u5305\u542b\u5728  prices.usd  \u4e2d \n prices.usd  \u4e2d\u4e0d\u5305\u542b $SPELL \u4ef7\u683c \n \n \u4e3a\u4e86\u83b7\u5f97 $SPELL \u4ef7\u683c\uff0c\u811a\u672c\u5c06\u6839\u636e\u6240\u5151\u6362\u7684 $ETH \u4ef7\u683c\u52a8\u6001\u8ba1\u7b97 $SPELL \u7684\u4ef7\u683c\u3002\n\u4f8b\u5982\uff0c5 $ETH were exchanged for 1,086,083 $SPELL. \n Dex.trades \u5c06\u6839\u636e\u201cprices.usd\u201d\u4e2d\u7684 $ETH \u4ef7\u683c\u6570\u636e\u4e3a\u8be5\u4ea4\u6613\u5206\u914d\u4e00\u4e2a\u201cusd_amount\u201d\u3002 \n \u8fd9\u91cc  usd_amount  \u662f $23,498. \n 5 * price of ETH (4.699,6) = $23,498 \n \u8ba1\u7b97 $SPELL \u7684\u4ef7\u683c\u73b0\u5728\u5c31\u50cf\u7528  dex.trades  \u4e2d\u8bb0\u5f55\u7684  usd_amount  \u4e00\u6837\u7b80\u5355\u3002 \n $23,498/1,086,083 \u2248 $0,02163 \n \u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u6210\u529f\u8ba1\u7b97\u51fa 1 $SPELL \u7684\u4ef7\u683c\u3002 \n \u4e3a\u4e86\u7ea0\u6b63\u6781\u7aef\u5f02\u5e38\u503c\u5e76\u4f7f\u8be5\u8868\u6027\u80fd\u66f4\u597d\uff0c\u8be5\u811a\u672c\u5c06\u6bcf\u5c0f\u65f6\u5c06\u6240\u6709\u8bb0\u5f55\u7684\u6570\u636e\u805a\u5408\u5230\u4e00\u4e2a\u201cmedian_price\u201d\u4e2d\u3002 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/prices-from-dexes/#_2"}
{"content": "\u5df2\u77e5\u7684\u95ee\u9898 \u00b6 \n \u5728\u6781\u5c11\u6570\u60c5\u51b5\u4e0b\uff0c\u6b64\u811a\u672c\u4f1a\u62a5\u9519\uff0c\u56e0\u4e3a\u8ba1\u7b97\u5e76\u4ea7\u51fa\u4e86\u57fa\u4e8e\u975e\u6d41\u52a8\u7684\u4ee3\u5e01\u5bf9\u7684\u4ef7\u683c\u6570\u636e\u6d41\uff0c\u3002 \u5f53\u8be5\u4ee3\u5e01\u7684\u6240\u6709\u6d41\u52a8\u4ea4\u6613\u6c60\u5728\u201cprices.usd\u201d\u4e2d\u6ca1\u6709\u4ef7\u683c\u9988\u9001\u65f6\uff0c\u5c31\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u3002 \n \u8fd9\u65b9\u9762\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f  \\(PLAY\uff0c\u4e00\u4e2a\u6765\u81ea piedao \u7684\u5143\u7d22\u5f15\u3002\u8be5\u8d44\u4ea7\u7684\u6d41\u52a8\u4ea4\u6613\u5bf9\u4e3a  P L A Y / DOUGH\u3002\u6c60\u5b50\u4e2d\u7684\\) PLAY\u7684\u4f1a\u6709\u4e00\u4e2a\u2018\u6b63\u786e\u2019\u7684\u4ef7\u683c\uff0c\u4f46\u662f\u901a\u8fc7 dex.trades  \u548c  prices.prices_from_dex_data  \u8fd9\u4e24\u4e2a\u8868\u5374\u65e0\u6cd5\u83b7\u53d6\u6b64\u4ef7\u683c\u3002 \n \u5bf9\u4e8e\u8be5\u8d44\u4ea7\u7684\u975e\u6d41\u52a8\u6027\u5bf9\uff0c dex.trades  \u5c06\u53ea\u6709\u4e00\u4e2a  usd_amount  \u5b57\u6bb5\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c P L A Y / ETH \u6c60\u4f1a\u5076\u5c14\u8fdb\u884c\u4e00\u6b21\u4ea4\u6613\uff0c\u8fd9\u4e9b\u4ea4\u6613\u5c06\u5728  dex.trades  \u4e2d\u5b58\u6709\u4e00\u4e2a usd_amount \u5b57\u6bb5\u3002  P L A Y / ETH \u6c60\u7684\u6d41\u52a8\u6027\u975e\u5e38\u4f4e\uff0c\u51e0\u4e4e\u53ea\u5305\u542b\u5957\u5229\u4ea4\u6613\u3002 \u56e0\u6b64\uff0c prices.prices_from_dex_data  \u4e2d\u751f\u6210\u7684 pricefeed \u662f\u9519\u8bef\u7684\uff0c\u56e0\u4e3a\u5b83\u53d6\u51b3\u4e8e  dex.trades  \u4e2d\u7684  usd_amount \u3002 \n \u4e3a\u4e86\u6838\u5b9e\u8fd9\u4e00\u70b9\uff0c\u60a8\u5e94\u8be5\u624b\u52a8\u53bb\u9a8c\u8bc1  prices.prices_from_dex_data  \u7684\u7ed3\u679c\uff0c\u4ee5\u786e\u4fdd\u5957\u5229\u4ea4\u6613\u4e0d\u4f1a\u5e72\u6270\u5f62\u6210\u7684\u4ef7\u683c\u3002 \u9a8c\u8bc1\u811a\u672c\u662f\u5426\u4f7f\u7528\u6b63\u786e\u7684\u6c60\u7684\u4e00\u79cd\u7b80\u5355\u65b9\u6cd5\u662f\u68c0\u67e5\u201csample_size\u201d\u5217\u3002 \u5982\u679c\u8fd9\u4e2a\u6570\u5b57\u770b\u8d77\u6765\u4f4e\u5f97\u53ef\u7591\uff0c\u5219\u811a\u672c\u53ef\u80fd\u6ca1\u6709\u627e\u5230\u5408\u9002\u7684\u4ef7\u683c\u3002 \n \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u5fc5\u987b\u624b\u52a8\u6784\u5efa\u4ef7\u683c\u3002 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/prices-from-dexes/#_3"}
{"content": "\u5176\u4ed6 \u00b6 \n \u6211\u4eec\u4e00\u76f4\u5728\u5bfb\u6c42\u6539\u8fdb\u6b64\u8868\uff0c\u5982\u679c\u60a8\u6709\u4efb\u4f55\u60f3\u6cd5\u6216\u610f\u89c1\uff0c\u8bf7\u4e0d\u8981\u72b9\u8c6b\u6253\u5f00 PR \u6216\u901a\u8fc7\u6211\u4eec\u7684 Discord \u8054\u7cfb\u6211\u4eec\u3002", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/prices-from-dexes/#_4"}
{"content": "NFT \u4ea4\u6613\u8868\uff08nft.trades\uff09 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/nft.trading/#nft-nfttrades"}
{"content": "\u4e00\u79cd\u67e5\u8be2 NFT \u6570\u636e\u7684\u7b80\u5355\u65b9\u6cd5 \u00b6 \n NFT \u4ea4\u6613\u8868\uff08 nft.trades \uff09\u65e8\u5728\u8ba9 Dune \u4e0a\u7684\u6bcf\u4e2a\u4eba\u90fd\u80fd\u8f7b\u677e\u83b7\u5f97 NFT \u4ea4\u6613\u6570\u636e\u3002\u8be5\u8868\u5c06\u4e0d\u540c\u6570\u636e\u5e73\u53f0\u4e4b\u95f4\u7684\u6570\u636e\u805a\u5408\u548c\u6807\u51c6\u5316\uff0c\u5e76\u5728\u540c\u4e00\u5f20\u8868\u4e2d\u63d0\u4f9b\u8f85\u52a9\u4fe1\u606f\u548c\u5143\u6570\u636e\u3002 \n \u6700\u91cd\u8981\u7684\u662f\u4f7f\u7528\u8be5\u6570\u636e\u96c6\uff0c\u8ba9\u5728\u6240\u6709\u7d22\u5f15\u5e73\u53f0\u4e0a\u67e5\u8be2\u4efb\u4f55\u4e0e NFT \u76f8\u5173\u7684\u4ea4\u6613\u6570\u636e\u53d8\u5f97\u975e\u5e38\u5bb9\u6613\u3002 \n \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u5bf9\u4ee5\u4e0b\u5e73\u53f0\u7684\u6570\u636e\u8fdb\u884c\u4e86\u7d22\u5f15\uff1a \n \n OpenSea \n Rarible \n SuperRare \n CryptoPunks\uff08\u4ed6\u4eec\u5728\u81ea\u5df1\u7684\u5408\u7ea6\u4e2d\u8fdb\u884c\u4ea4\u6613\uff09 \n Foundation \n LooksRare \n \n \u6240\u6709\u8fd9\u4e9b\u6570\u636e\u90fd\u53ef\u4ee5\u901a\u8fc7\u975e\u5e38\u7b80\u5355\u7684\u67e5\u8be2\u8f7b\u677e\u8bbf\u95ee\uff0c\u4f8b\u5982\uff1a \n \n \u7ed9\u5b9a NFT \u7684\u6240\u6709\u4ea4\u6613  (https://dune.xyz/queries/146090) \n \n \n  (#__codelineno-0-1) select   *   from   nft . trades   \n  (#__codelineno-0-2) \n  (#__codelineno-0-3) where   nft_contract_address   =   '\\xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb'   -- \u8fd9\u662f cryptopunks \u7684\u5730\u5740 \n \n \n \u8fc7\u53bb 24 \u5c0f\u65f6\u5185\u5728\u7ed9\u5b9a\u5e73\u53f0\u4e0a\u7684\u4ea4\u6613  (https://dune.xyz/queries/146152) \n \n  (#__codelineno-1-1) select   date_trunc ( 'day' ,   block_time ),   usd_amount ,   nft_contract_address ,   token_id   from    \n  (#__codelineno-1-2) \n  (#__codelineno-1-3) where   platform   =   'OpenSea'   -- \u4ec5\u663e\u793a\u7ed9\u5b9a\u5e73\u53f0\u4e0a\u7684\u4ea4\u6613 \n  (#__codelineno-1-4) \n  (#__codelineno-1-5) and   block_time   >   now ()   -   interval   '24hours' \n \n \n \u53bb\u5e74\u7684\u5e73\u53f0\u4ea4\u6613\u91cf  (https://dune.xyz/queries/146160) \n \n  (#__codelineno-2-1) select   sum ( usd_amount ),   date_trunc ( 'day' ,   block_time ),   platform   from   nft . trades   \n  (#__codelineno-2-2) \n  (#__codelineno-2-3) where   block_time   >   now ()   -   interval   '365 days' \n  (#__codelineno-2-4) \n  (#__codelineno-2-5) group   by   2 , 3 \n \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/nft.trading/#nft"}
{"content": "\u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/nft.trading/#_1"}
{"content": "\u57fa\u672c\u7406\u89e3 \u00b6 \n \u5355\u54c1\u4ea4\u6613\uff08Single Item Trade\uff09 \u00b6  (#single-item-trade) \n \u4ea4\u6613\u53d1\u751f\u5728\u201c\u4e70\u65b9\u201d\uff08buyer\uff09\u548c\u201c\u5356\u65b9\u201d\uff08seller\uff09\u4e4b\u95f4\u3002 \n \u4ed6\u4eec\u4ea4\u6362\u4e00\u4e2a\u7531  nft_contract_address  \u548c  token_id  \u7684\u7ec4\u5408\u552f\u4e00\u6807\u8bc6\u7684\u9879\u76ee\u3002\u4e70\u65b9\u5c06\u4ee5\u4efb\u4f55\u7ed9\u5b9a\u7684  original_currency  \u5411\u5356\u65b9\u652f\u4ed8\u7ed9\u5b9a\u7684  original_amount  \u4ee3\u5e01\u3002\u4e3a\u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u4eec\u5df2\u7ecf\u4e3a\u60a8\u8ba1\u7b97\u4e86\u5728\u4ea4\u6613\u65f6\u5bf9\u5e94\u4ef7\u503c\u7684  usd_amount  \u3002\u5927\u591a\u6570\u4ea4\u6613\u5c06\u4ee5 ETH \u6216 WETH \u8fdb\u884c\uff0c\u4f46\u5c24\u5176\u662f\u975e OpenSea \u4ea4\u6613\u901a\u5e38\u5305\u542b\u5176\u4ed6\u8d27\u5e01\u7c7b\u578b\u3002 \n \u4ea4\u6613\u5728\u4efb\u4f55\u88ab\u7d22\u5f15\u7684  platforms  \u4e0a\u8fdb\u884c\uff0c\u5e76\u5c06\u901a\u8fc7\u8fd9\u4e9b\u5e73\u53f0\u7684  exchange_contract_address  \u7684\u667a\u80fd\u5408\u7ea6\u6765\u4fc3\u8fdb\u3002\u6bcf\u7b14\u4ea4\u6613\u90fd\u4f1a\u6709\u8bf8\u5982  block_time  \uff0c  tx_hash  \uff0c  block_number  \uff0c  platform version  \uff0c  evt_index  \u7b49\u5143\u6570\u636e\u3002 \n \u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u63d0\u4f9b\u6709\u5173\u4ea4\u6613\u7684 NFT \u7684\u5143\u6570\u636e\u3002 nft_project_name  \u548c  erc_standard  \u5c06\u5e2e\u52a9\u60a8\u66f4\u8f7b\u677e\u5730\u5206\u6790\u6570\u636e\u96c6\u3002 nft_project_name  \u6570\u636e\u5c06\u4ece  nft.tokens   \u6570\u636e\u8868  (https://github.com/duneanalytics/abstractions/blob/master/ethereum/nft/tokens.sql)  \u4e2d\u63d0\u53d6\uff0c\u5982\u679c\u60a8\u7684 NFT \u5728\u8be5\u8868\u4e2d\u4e0d\u5b58\u5728\uff0c\u6b22\u8fce\u60a8\u53d1PR\u6765\u6dfb\u52a0\u5b83\u3002 \n \u6346\u7ed1\u4ea4\u6613\uff08Bundle Trade\uff09 \n \u5355\u6b21\u4ea4\u6613\u4e5f\u53ef\u80fd\u5305\u542b\u591a\u4e2a\u7269\u54c1\u3002\u8fd9\u4e9b\u7269\u54c1\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u901a\u8fc7  nft_contract_address  \u548c  token_id  \u7684\u7ec4\u5408\u6765\u552f\u4e00\u6807\u8bc6\u3002\u7136\u800c\u5728\u8fd9\u4e9b\u4ea4\u6613\u4e2d\uff0c\u6ca1\u6709\u660e\u786e\u7684\u65b9\u6cd5\u6765\u786e\u5b9a\u6bcf\u4e2a\u7269\u54c1\u5bf9\u5e94\u7684  usd_amount  \u3002\u4e00\u79cd\u53ef\u80fd\u7684\u89e3\u51b3\u65b9\u6cd5\u662f\u5c06\u5546\u54c1\u6570\u91cf\u9664\u4ee5\u6346\u7ed1\u5546\u54c1\u7684\u4ed8\u6b3e\u91d1\u989d\uff0c\u4f46\u662f\u5f53\u975e\u5b9e\u7269/\u4ef7\u503c\u7684\u5546\u54c1\u6346\u7ed1\u51fa\u552e\u65f6\uff0c\u8fd9\u79cd\u903b\u8f91\u5c31\u4e0d\u6210\u7acb\u4e86\u3002\u6211\u4eec\u5efa\u8bae\u4ece\u60a8\u6b63\u5728\u4f7f\u7528\u7684\u6570\u636e\u96c6\u4e2d\u5220\u9664\u6346\u7ed1\u8f6c\u79fb\uff0c\u56e0\u4e3a\u5b83\u4f1a\u4e25\u91cd\u5f71\u54cd\u4efb\u4e00\u65b9\u5411\u7684\u7ed3\u679c\u3002\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u5728\u540c\u4e00\u4ea4\u6613\u4e2d\u8f6c\u79fb\u5177\u6709\u4e0d\u540cToken ID \u6216 erc \u7c7b\u578b\u7684\u4ee3\u5e01\uff0c\u5219  token_id  \u548c  erc_standard  \u5c06\u4e3a\u7a7a\uff08Null\uff09\u3002 \n \u805a\u5408\u8d38\u6613\uff08Aggregator Trade\uff09 \n \u5728\u4f7f\u7528 NFT \u805a\u5408\u5668\u5e73\u53f0\u65f6\uff0c\u4e5f\u4f1a\u51fa\u73b0\u5355\u6b21\u4ea4\u6613\u5305\u542b\u591a\u4e2a\u7269\u54c1\u7684\u60c5\u51b5\u3002\u6211\u4eec\u7684\u65b9\u6cd5\u662f\u5206\u89e3\u805a\u5408\u5668\u4ea4\u6613\uff0c\u4ee5\u4fbf\u6bcf\u4e00\u884c\u5bf9\u5e94\u4e00\u4e2a\u88ab\u4ea4\u6613\u7684\u552f\u4e00\u5546\u54c1\uff0c\u53ca\u5176\u5173\u8054\u7684 ID\u3001\u4ef7\u683c\u3001\u5206\u7c7b\u7b49\u3002\u91cd\u8981\u7684\u662f\uff0c trade_type  \u5c06\u6307\u793a\u4e3a \u805a\u5408\u8d38\u6613  \uff0c\u5e73\u53f0\u540d\u79f0\u548c\u5730\u5740\u53ef\u4ee5\u5728  nft.aggregators   \u6570\u636e\u8868  (https://github.com/duneanalytics/abstractions/blob/master/ethereum/nft/aggregators.sql)  \u4e2d\u627e\u5230\u3002\u5982\u679c\u8be5\u8868\u4e2d\u7f3a\u5c11\u60a8\u7684\u805a\u5408\u5e73\u53f0\uff0c\u6b22\u8fce\u60a8\u63d0\u4ea4 PR \u4ee5\u6dfb\u52a0\u5b83\u3002 \n \u5e73\u53f0\u548c\u7248\u7a0e\u8d39\u7528 \n \u5728\u6700\u65b0\u7248\u672c\u7684  nft.trades  \u4e2d\uff0c\u5982\u679c\u9500\u552e\u8bb8\u53ef\u8d39(royalty fees)\u7684\u539f\u59cb\u91d1\u989d\uff0c\u7f8e\u5143\u91d1\u989d\u4ee5\u53ca\u767e\u5206\u6bd4\u7684\u4fe1\u606f\u5728\u6570\u636e\u5e93\u4e2d\u5b58\u5728\uff0c\u90a3\u4e48\u68c0\u7d22\u65f6\u662f\u4e00\u5e76\u63d0\u4f9b\u7684\u3002\u7248\u7a0e\u5f52\u521b\u4f5c\u8005\u6240\u6709\uff0c\u5e73\u53f0\u8d39\u7528\u7531 NFT \u5e73\u53f0\u6536\u53d6\u3002\u8bf7\u6ce8\u610f\uff0c\u7248\u7a0e\u8d39\u7528\u5e76\u975e\u603b\u662f\u80fd\u68c0\u7d22\uff0c\u6240\u4ee5\u9ed8\u8ba4\u8bbe\u7f6e\u4e3a null\u3002 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/nft.trading/#_2"}
{"content": "\u793a\u4f8b\u770b\u677f \u00b6 \n \u5229\u7528\u53c2\u6570\u7684\u770b\u677f \n https://dune.xyz/0xBoxer/NFT  (https://dune.xyz/0xBoxer/NFT) \n https://dune.xyz/rantum/NFT-Sales-Overview-by-Project  (https://dune.xyz/rantum/NFT-Sales-Overview-by-Project) \n \u6db5\u76d6\u6574\u4e2a\u751f\u6001\u7cfb\u7edf\u7684\u770b\u677f \n https://dune.xyz/rantum/NFT-Collection-Dashboard  (https://dune.xyz/rantum/NFT-Collection-Dashboard) \n https://dune.xyz/masquot/NFT-Sales-Trends  (https://dune.xyz/masquot/NFT-Sales-Trends) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/nft.trading/#_3"}
{"content": "\u60a8\u597d\uff0c\u6211\u7684\u5e73\u53f0\u6ca1\u6709\u88ab\u7d22\u5f15 \u00b6 \n \u5904\u7406\u6bcf\u4e2a\u5e02\u573a\u6570\u636e\u7684 SQL \u4ee3\u7801\u662f\u5f00\u6e90\u7684\uff0c\u53ef\u5728\u6211\u4eec\u7684  github \u5b58\u50a8\u5e93  (https://github.com/duneanalytics/abstractions/tree/master/ethereum/nft/trades)  \u4e2d\u627e\u5230\u3002\u6bcf\u4e2a\u4eba\u90fd\u53ef\u4ee5\u67e5\u770b\u4ee3\u7801\u3001\u63d0\u4ea4\u62c9\u53d6\u8bf7\u6c42\u5e76\u63d0\u4ea4\u4ee3\u7801\u4ee5\u6dfb\u52a0\u66f4\u591a\u4ea4\u6613\u5e02\u573a\u3002 \n \u53e6\u8bf7\u9605\u8bfb\u6709\u5173\u6b64\u4e3b\u9898\u7684\u201c \u6570\u636e\u62bd\u8c61  (../) \u201d\u90e8\u5206\u3002 \n \u6570\u636e\u8868\u5185\u5bb9 \n \n \n \n \u5217\u540d \n \u6570\u636e\u7c7b\u578b \n \u8bf4\u660e \n \n \n \n \n block_time \n timestamp with time zone \n \u8be5\u4ea4\u6613\u4f55\u65f6\u6267\u884c\u7684 \n \n \n nft_project_name \n text \n NFT \u9879\u76ee\u540d\u79f0\uff08\u4f8b\u5982\u201cthe dudes\u201d\uff09 \n \n \n nft_token_id \n text \n \u4ea4\u6613\u7684 token_id\uff08\u4f8b\u5982 235\uff09 \n \n \n erc_standard \n text \n \u4ea4\u6613\u4ee3\u5e01\u7684\u4ee3\u5e01\u6807\u51c6 \n \n \n platform \n text \n \u8be5\u4ea4\u6613\u662f\u5728\u54ea\u4e2a\u5e73\u53f0\u4e0a\u6267\u884c\u7684\uff1f \n \n \n platform_version \n text \n \u4f7f\u7528\u4e86\u8be5\u5e73\u53f0\u7684\u54ea\u4e2a\u7248\u672c\uff1f \n \n \n trade_type \n text \n \u201c\u5355\u54c1\u9500\u552e\u201d\u8fd8\u662f\u201c\u6346\u7ed1\u9500\u552e\u201d\uff1f \n \n \n number_of_items \n integer \n \u672c\u6b21\u4ea4\u6613\u4e00\u5171\u4ea4\u6613\u4e86\u591a\u5c11\u4e2a NFT\uff1f \n \n \n category \n text \n \u8fd9\u662f\u62cd\u5356\uff08auction\uff09\u8fd8\u662f\u76f4\u9500\uff08direct sale\uff09\uff1f \n \n \n evt_type \n text \n \u5f53\u524d\u672a\u4f7f\u7528\uff0c\u9ed8\u8ba4\u201cTrade\u201d \n \n \n aggregator \n text \n \u6b64\u4ea4\u6613\u662f\u5426\u4f7f\u7528\u805a\u5408\u5668\u8fdb\u884c\uff08\u662f\uff1a\u805a\u5408\u5668\u540d\u79f0\uff0c\u5426\uff1aNULL\uff09 \n \n \n usd_amount \n numeric \n \u6267\u884c\u65f6\u4ea4\u6613\u7684\u7f8e\u5143\u4ef7\u503c \n \n \n seller \n bytea \n NFT \u5356\u5bb6\u5730\u5740 \n \n \n buyer \n bytea \n NFT \u4e70\u5bb6\u5730\u5740 \n \n \n original_amount \n numeric \n \u6b63\u786e\u683c\u5f0f\u7684\u91d1\u989d \n \n \n original_amount_raw \n numeric \n \u8d27\u5e01\u7684\u539f\u59cb\u91d1\u989d \n \n \n eth_amount \n numeric \n \u6267\u884c\u65f6\u4ea4\u6613\u7684 ETH \u4ef7\u503c \n \n \n royalty_fees_percent \n numeric \n \u652f\u4ed8\u7ed9\u521b\u4f5c\u8005\u7684\u7248\u7a0e\uff08\u767e\u5206\u6bd4\uff09 \n \n \n original_royalty_fees \n numeric \n \u4ea4\u6613\u6240\u7528\u8d27\u5e01\u7684\u7279\u8bb8\u6743\u4f7f\u7528\u8d39 \n \n \n usd_royalty_fees \n numeric \n \u6267\u884c\u65f6\u7279\u8bb8\u6743\u4f7f\u7528\u8d39\u7684\u7f8e\u5143\u4ef7\u503c \n \n \n platform_fees_percent \n numeric \n \u5e73\u53f0\u8d39\u7528\uff08\u767e\u5206\u6bd4\uff09 \n \n \n original_platform_fees \n numeric \n \u7528\u4e8e\u6b64\u4ea4\u6613\u7684\u8d27\u5e01\u7684\u5e73\u53f0\u8d39\u7528 \n \n \n usd_platform_fees \n numeric \n \u6267\u884c\u65f6\u5e73\u53f0\u8d39\u7528\u7684\u7f8e\u5143\u4ef7\u503c \n \n \n original_currency \n text \n \u7528\u4e8e\u6b64\u4ea4\u6613\u7684\u8d27\u5e01 \n \n \n original_currency_contract \n bytea \n \u672c\u6b21\u4ea4\u6613\u6240\u7528\u5e01\u79cd\u7684 erc20 \u5730\u5740\uff08\u4e0d\u9002\u7528\u4e8e\u539f\u59cbETH\uff09 \n \n \n currency_contract \n bytea \n \u4fee\u6b63\u540e\u7684\u8d27\u5e01\u5408\u7ea6 \n \n \n nft_contract_address \n bytea \n \u4ea4\u6613\u7684 NFT \u5408\u7ea6\u5730\u5740 \n \n \n exchange_contract_address \n bytea \n \u4fc3\u6210\u6b64\u4ea4\u6613\u7684\u5e73\u53f0\u5408\u7ea6 \n \n \n tx_hash \n bytea \n \u672c\u6b21\u4ea4\u6613\u7684\u54c8\u5e0c \n \n \n block_number \n integer \n \u8be5\u4ea4\u6613\u6267\u884c\u5b8c\u6210\u7684\u533a\u5757\u7f16\u53f7 \n \n \n tx_from \n bytea \n \u53d1\u8d77\u672c\u6b21\u4ea4\u6613\u7684\u5730\u5740 \n \n \n tx_to \n bytea \n \u63a5\u6536\u8fd9\u7b14\u4ea4\u6613\u7684\u5730\u5740 \n \n \n trace_address \n ARRAY \n n/a \n \n \n evt_index \n integer \n \u4e8b\u4ef6\u7d22\u5f15 \n \n \n trade_id \n integer \n n/a", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/nft.trading/#_4"}
{"content": "\u501f\u8d37\u534f\u8bae\u8868 \u00b6 \n \u6b63\u5728\u6784\u5efa\u4e2d", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/lending-tables/#_1"}
{"content": "Please wait \n This application is starting, you will be redirected once it is ready. \n If your are the application owner, check your logs for details.", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/polygon/transactions/"}
{"content": "\u6807\u7b7e\uff08Labels\uff09 \u00b6 \n \u60a8\u662f\u5426\u66fe\u7ecf\u5728Dune\u4e0a\u67e5\u8be2\u5f97\u5230\u4e00\u5806\u5730\u5740\u5217\u8868\u4ee5\u53ca\u60f3\u77e5\u9053\u8fd9\u4e9b\u7f8e\u5999\u7684\u968f\u673a\u5341\u516d\u8fdb\u5236\u7f16\u7801\u5b57\u7b26\u4e32\u80cc\u540e\u662f\u4ec0\u4e48\u4e1c\u897f\uff1f\u6211\u4eec\u4e5f\u9047\u5230\u8fc7\u8fd9\u79cd\u60c5\u51b5\u3002 \n \u5730\u5740\u6807\u7b7e  \u662fDune \u4e0a\u7684\u4e00\u9879\u529f\u80fd\uff0c\u60a8\u4f5c\u4e3a\u7528\u6237\u53ef\u4ee5\u4e3a\u4efb\u4f55\u5730\u5740\u6dfb\u52a0\u3001\u66f4\u65b0\u6807\u7b7e\u6570\u636e\u6216\u8005\u67e5\u8be2\u8fd9\u4e9b\u6807\u7b7e \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/labels/#labels"}
{"content": "\u4ec0\u4e48\u662f\u6807\u7b7e\uff1f \u00b6 \n \u6807\u7b7e\u662f \u5173\u4e8e\u67d0\u4e2a\u5730\u5740\u7684\u5143\u6570\u636e \u3001\u6216\u8005\u8bf4\u662f\u4e00\u4e2a\u6807\u8bb0\u6216\u5143\u6570\u636e\u3002\u5b83\u4ee5\u952e\u503c\u5bf9\u7684\u5f62\u5f0f\u51fa\u73b0\u3002\u952e\u662f\u6807\u7b7e\u7684\u7c7b\u578b\uff0c\u503c\u662f\u6807\u7b7e\u540d\u79f0\u3002 \n \u5728  \u6807\u7b7e\u9875\u9762  (https://dune.xyz/labels)  \u6d4f\u89c8\u5730\u5740\u548c\u6807\u7b7e\u3002 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/labels/#_1"}
{"content": "\u6807\u7b7e\u770b\u957f\u4ec0\u4e48\u6837\u5b50\uff1f \u00b6 \n \u67e5\u770b  \u8fd9\u4e2a\u770b\u677f  (https://dune.xyz/hagaetc/labels)  \u4e86\u89e3\u53ef\u4ee5\u4f7f\u7528\u6807\u7b7e\u521b\u5efa\u7684\u793a\u4f8b\u3002 \n \u5730\u5740\u6807\u7b7e\u793a\u4f8b \n \u5730\u5740  0xD551234Ae421e3BCBA99A0Da6d736074f22192FF  (https://dune.xyz/ethereum/address/0xD551234Ae421e3BCBA99A0Da6d736074f22192FF)  \u53ef\u4ee5\u88ab\u8fd9\u6837\u6807\u8bb0\uff1a \n \n \n \n type \n name \n \n \n \n \n owner \n binance \n \n \n wallet type \n exchange \n \n \n \n \u6b64\u5730\u5740\u5f52\u5c5e\u4ea4\u6613\u6240Binance\u3002 \n \u5730\u5740  0xe65040f61701940b62e18da7a53126a58525588b  (https://dune.com/ethereum/address/0xe65040f61701940b62e18da7a53126a58525588b)  \u53ef\u4ee5\u88ab\u8fd9\u6837\u6807\u8bb0\uff1a \n \n \n \n type \n name \n \n \n \n \n dapp usage \n uniswap user \n \n \n activity \n dex trader \n \n \n \n \u8fd9\u4e2a\u5730\u5740\u66fe\u7ecf\u4e0e Uniswap \u8fdb\u884c\u8fc7\u4ea4\u4e92\u3002 \n \u60a8\u53ef\u4ee5\u968f\u610f\u60f3\u51fa\u65b0\u7684\u7c7b\u578b\u548c\u6807\u7b7e\u540d\u79f0\uff0c\u56e0\u4e3a Dune \u4e0a\u7684\u6807\u7b7e\u662f\u5f00\u653e\u5f0f\u7684\u5e76\u4e14 \u4f17\u5305 \u7684\u3002 \n \u6dfb\u52a0\u6807\u7b7e\u7684\u65b9\u6cd5\u6709\u4e24\u79cd\uff1a \n \u4f7f\u7528 Dune \u67e5\u8be2\u6765\u6807\u8bb0\u5730\u5740\u3002\u4e00\u79cd\u975e\u5e38\u5f3a\u5927\u4e14\u53ef\u6269\u5c55\u7684\u65b9\u5f0f\u6765\u6dfb\u52a0\u6807\u7b7e\uff0c\u4f8b\u5982\u201c\u6240\u6709\u8fd9\u4e9b\u5730\u5740\u90fd\u4f7f\u7528\u8fc7 Uniswap\u201d\u7b49\u7b49\u3002 \n \u8bf7\u53c2\u9605\u6211\u4eec\u7684  Github  (https://github.com/duneanalytics/abstractions/tree/master/labels) \uff0c\u4e86\u89e3\u4f7f\u7528\u60a8\u81ea\u5df1\u7684\u67e5\u8be2\u548cPR \u521b\u5efa\u6807\u7b7e\u7684\u793a\u4f8b\uff01 \n Examples of what you can do: \n \n \u6807\u8bb0\u6240\u6709\u4f7f\u7528\u67d0\u4e2aDapp\u7684\u5730\u5740 \n \u6807\u8bb0\u6240\u6709\u6301\u6709\u4e00\u5b9a\u6570\u91cf\u67d0\u79cd\u4ee3\u5e01\u7684\u5730\u5740 \n \u6807\u8bb0\u6bcf\u6708\u4f7f\u7528\u67d0\u4e2aDapp\u8d85\u8fc7X\u6b21\u7684\u6240\u6709\u5730\u5740 \n \u6807\u8bb0\u6240\u6709\u5411Binance\u8f6c\u8d26\u7684\u5730\u5740 \n Label all addresses that use a dapp more than X times per month \n \n \u60a8\u8fd8\u53ef\u4ee5\u56f4\u7ed5\u7528\u6237\u6a21\u5f0f\u505a\u66f4\u591a\u65b0\u9896\u548c\u590d\u6742\u7684\u4e8b\u60c5\uff0c\u4f8b\u5982\u8c01\u8fdb\u884c\u4e86\u5957\u5229\u4ea4\u6613\u6216\u4ece\u95ea\u7535\u8d37\u6b3e\u4e2d\u83b7\u5229\u7b49\u7b49\u3002 \n \u8bf7\u6ce8\u610f\uff0c\u5728  dune.xyz  (http://dune.xyz/)  \u4e0a\u6dfb\u52a0\u6807\u7b7e\u540e\uff0c\u5728\u60a8\u53ef\u4ee5\u5728 SQL \u4e2d\u67e5\u8be2\u5b83\u4e4b\u524d\u53ef\u80fd\u4f1a\u6709\u51e0\u5206\u949f\u5ef6\u8fdf\u3002 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/labels/#_2"}
{"content": "\u6807\u7b7e\u8868 \u00b6 \n \u6807\u7b7e\u5b58\u50a8\u5728\u65b0\u7684  labels.labels  \u8868\u4e2d\uff0c\u8be5\u8868\u5177\u6709\u4ee5\u4e0b\u56fe\u5f0f\uff1a \n \n \n \n \u5217\u540d \n \u6570\u636e\u7c7b\u578b \n \u8bf4\u660e \n \n \n \n \n id \n int \n \u81ea\u589e\u6574\u6570 \n \n \n address \n bytea \n \u6b64\u6807\u7b7e\u63cf\u8ff0\u7684\u5408\u7ea6\u6216\u94b1\u5305\u7684\u5730\u5740 \n \n \n name \n text \n \u6807\u7b7e\u540d\u79f0 \n \n \n type \n text \n \u6807\u7b7e\u7c7b\u578b \n \n \n author \n text \n \u521b\u5efa\u6b64\u6807\u7b7e\u7684\u7528\u6237\u7684\u7528\u6237\u540d \n \n \n source \n text \n \u6b64\u6807\u7b7e\u7684\u6765\u6e90\uff0c\u7531 Dune \u81ea\u52a8\u586b\u5145 \n \n \n updated_at \n timestamptz \n \u6700\u8fd1\u66f4\u6539\u6b64\u6807\u7b7e\u7684\u65f6\u95f4 \n \n \n \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/labels/#_3"}
{"content": "\u4f7f\u7528\u6807\u7b7e \u00b6 \n \u8bf7\u6ce8\u610f\uff0c\u8be5\u8868\u4e3a\u6bcf\u4e2a\u5730\u5740\u4e2d\u5305\u542b\u591a\u884c\u8bb0\u5f55\uff0c\u56e0\u6b64\u5bf9\u5b83\u8fdb\u884c\u8fde\u63a5\u53ef\u80fd\u4f1a\u5f88\u68d8\u624b\u3002\u51fa\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0c\u6211\u4eec\u5236\u4f5c\u4e86\u65b9\u4fbf\u7684\u529f\u80fd\uff1a \n labels.get(address bytea, type text default null) RETURNS text[] \n \u6211\u4eec\u9884\u8ba1\u8fd9\u5c06\u662f\u4f7f\u7528\u6807\u7b7e\u7684\u4e3b\u8981\u65b9\u5f0f\u3002\u8bf7\u53c2\u9605\u4e0b\u9762\u7684\u793a\u4f8b\u3002 \n \u901a\u5e38\uff0c\u5982\u679c\u60a8\u6267\u884c\u8fd4\u56de  address  \u7684\u67e5\u8be2\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528  labels.get(address)  \u6765\u83b7\u53d6\u8be5\u5730\u5740\u7684\u6240\u6709\u6807\u7b7e\uff0c\u800c\u4e0e\u6807\u7b7e\u7c7b\u578b\u65e0\u5173\u3002\u5982\u679c\u60a8\u60f3\u67e5\u770b  owner  \u7c7b\u578b\u7684\u6807\u7b7e\uff0c\u53ef\u4ee5\u6267\u884c   labels.get(address, 'owner')  \u3002\u60a8\u8fd8\u53ef\u4ee5\u5c06\u6b64\u51fd\u6570\u4f20\u9012\u7ed9\u60a8\u60f3\u8981\u5305\u542b\u7684\u51e0\u79cd\u6807\u7b7e\u7c7b\u578b\uff0c\u4f8b\u5982\uff1a labels.get(address, 'owner', 'project')  \u3002 \n \u6211\u4eec\u8fd8\u6dfb\u52a0\u4e86\u51fd\u6570  labels.url(address bytea)  \u3002\u4ece\u60a8\u7684\u67e5\u8be2\u4e2d\u4f20\u9012\u7ed9\u8be5\u51fd\u6570\u4e00\u4e2a\u5730\u5740\uff0c\u60a8\u7684\u7ed3\u679c\u8868\u5c06\u5305\u542b\u4e00\u4e2a\u53ef\u70b9\u51fb\u7684\u94fe\u63a5\uff0c\u4f8b\u5982\uff1a \n https://dune.xyz/ethereum/address/0xD551234Ae421e3BCBA99A0Da6d736074f22192FF  (https://dune.xyz/ethereum/address/0xD551234Ae421e3BCBA99A0Da6d736074f22192FF) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/labels/#_4"}
{"content": "\u7528\u4f8b\uff1a\u6211\u60f3\u663e\u793a\u5730\u5740\u5217\u8868\u7684\u6807\u7b7e  \u00b6 \n \n \u6211\u4eec\u9f13\u52b1\u60a8\u5728\u9605\u8bfb\u672c\u6587\u65f6\u5728 Dune \u4e2d\u8fd0\u884c\u8fd9\u4e9b\u67e5\u8be2 \n \n \u5047\u8bbe\u60a8\u6b63\u5728\u67e5\u770b\u8fc7\u53bb 24 \u5c0f\u65f6\u5185\u6240\u6709 dex \u4e2d DAI \u7684\u524d 10 \u540d\u4ea4\u6613\u8005\uff1a \n  (#__codelineno-0-1) SELECT   trader_a ,   SUM ( token_a_amount ) \n  (#__codelineno-0-2) FROM   dex . trades \n  (#__codelineno-0-3) WHERE   token_a_symbol   =   'DAI' \n  (#__codelineno-0-4) AND   block_time   >   now ()   -   interval   '24 hours' \n  (#__codelineno-0-5) GROUP   BY   1 \n  (#__codelineno-0-6) ORDER   BY   3   DESC \n  (#__codelineno-0-7) LIMIT   10 ; \n \n \u5982\u679c\u60a8\u60f3\u4e3a\u8fd9\u4e9b\u5730\u5740\u6dfb\u52a0\u6807\u7b7e\uff0c\u53ea\u9700\u5c06  trader_a  \u5217\u66f4\u6539\u4e3a  labels.get(trader_a)  \u3002 \n \n \u6ce8\u610f\uff1a\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c ---  \u8868\u793a\u5220\u9664\u7684\u884c\uff0c\u800c  +++  \u8868\u793a\u6dfb\u52a0\u7684\u884c\u3002 \n \n  (#__codelineno-1-1) SELECT   trader_a ,   labels . get ( trader_a )   as   label ,   SUM ( token_a_amount ) \n  (#__codelineno-1-2)      FROM   dex . trades \n  (#__codelineno-1-3)      WHERE   token_a_symbol   =   'DAI' \n  (#__codelineno-1-4)      AND   block_time   >   now ()   -   interval   '24 hours' \n  (#__codelineno-1-5)      and   not   labels . get ( trader_a )   isnull \n  (#__codelineno-1-6)      GROUP   BY   1 \n  (#__codelineno-1-7)      ORDER   BY   2   DESC \n  (#__codelineno-1-8)      LIMIT   100 ; \n \n \u73b0\u5728\u60a8\u5df2\u5c06\u5730\u5740\u66ff\u6362\u4e3a\u4ea4\u6613\u8005a\uff08trader_a\uff09\u7684\u6240\u6709\u6807\u7b7e\u5217\u8868\u3002\u6709\u65f6\u60a8\u53ea\u5bf9\u6807\u7b7e\u7684\u4e00\u4e2a\u5b50\u96c6\u611f\u5174\u8da3\uff1a labels.get  \u63a5\u53d7\u4e00\u4e2a\u53ef\u9009\u7684\u7c7b\u578b\u540d\u79f0\u5217\u8868\uff0c\u7528\u4e8e\u8fc7\u6ee4\u60a8\u83b7\u5f97\u7684\u6807\u7b7e\u7c7b\u578b\u3002\u5047\u8bbe\u60a8\u53ea\u5bf9  \u2018activity\u2019  \u6807\u7b7e\u611f\u5174\u8da3\uff1a \n  (#__codelineno-2-1)   SELECT   trader_a ,   labels . get ( trader_a ,   'activity' )   as   label ,   SUM ( token_a_amount ) \n  (#__codelineno-2-2)      FROM   dex . trades \n  (#__codelineno-2-3)      WHERE   token_a_symbol   =   'DAI' \n  (#__codelineno-2-4)      AND   block_time   >   now ()   -   interval   '24 hours' \n  (#__codelineno-2-5)      and   not   labels . get ( trader_a )   isnull \n  (#__codelineno-2-6)      GROUP   BY   1 \n  (#__codelineno-2-7)      ORDER   BY   2   DESC \n  (#__codelineno-2-8)      LIMIT   100 ; \n \n \u5f53\u7136\u60a8\u4e5f\u53ef\u4ee5\u663e\u793a\u5730\u5740\uff0c\u540c\u65f6\u8fc7\u6ee4\u591a\u79cd\u6807\u7b7e\u7c7b\u578b \n  (#__codelineno-3-1)      SELECT   trader_a ,   labels . get ( trader_a ,   'activity' ,   'project' ,   'contract_name' )   as   label ,   SUM ( token_a_amount ) \n  (#__codelineno-3-2)      FROM   dex . trades \n  (#__codelineno-3-3)      WHERE   token_a_symbol   =   'DAI' \n  (#__codelineno-3-4)      AND   block_time   >   now ()   -   interval   '24 hours' \n  (#__codelineno-3-5)      and   not   labels . get ( trader_a )   isnull \n  (#__codelineno-3-6)      GROUP   BY   1 \n  (#__codelineno-3-7)      ORDER   BY   2   DESC \n  (#__codelineno-3-8)      LIMIT   100 ; \n \n \u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528  labels.url  \u4f7f\u5730\u5740\u53ef\u70b9\u51fb\uff1a \n  (#__codelineno-4-1) SELECT   labels . url ( trader_a ),   labels . get ( trader_a ,   'activity' )   as   labels ,   SUM ( token_a_amount ) \n  (#__codelineno-4-2)      FROM   dex . trades \n  (#__codelineno-4-3)      WHERE   token_a_symbol   =   'DAI' \n  (#__codelineno-4-4)      AND   block_time   >   now ()   -   interval   '24 hours' \n  (#__codelineno-4-5) GROUP   BY   1 ,   2 \n  (#__codelineno-4-6)      ORDER   BY   3   DESC \n  (#__codelineno-4-7)      LIMIT   10 ; \n \n \u8fd9\u6837\uff0c\u67e5\u770b\u60a8\u7684\u770b\u677f\u7684\u4eba\u53ef\u4ee5\u8f7b\u677e\u5730\u4e3a\u5176\u6dfb\u52a0\u66f4\u597d\u7684\u6807\u7b7e\uff01 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/labels/#_5"}
{"content": "\u7528\u4f8b\uff1a\u6211\u60f3\u6309\u5b58\u5728\u7684\u6807\u7b7e\u8fc7\u6ee4\u6211\u7684\u67e5\u8be2\u3002 \u00b6 \n \u5728\u8fd9\u4e2a\u7528\u4f8b\u4e2d\uff0c\u60a8\u4e0d\u60f3\u4f7f\u7528  labels.get \uff0c\u56e0\u4e3a\u5b83\u64cd\u4f5c\u8d77\u6765\u53ef\u80fd\u5f88\u6162\u3002\u76f8\u53cd\uff0c\u60a8\u5c06\u5728 SQL \u4e2d\u4f7f\u7528\u5947\u5999\u7684  EXISTS  \u51fd\u6570\u3002 \n \u4f8b\u5982\uff1a\u60a8\u6b63\u5728\u67e5\u8be2  Uniswap \uff0c\u4f46\u5bf9\u4e4b\u524d\u5728  1inch  \u4e0a\u4ea4\u6613\u8fc7\u7684\u7528\u6237\u7684\u884c\u4e3a\u611f\u5174\u8da3\u3002\u4ee5\u4e0b\u662f\u60a8\u7684\u5904\u7406\u65b9\u5f0f\uff1a \n  (#__codelineno-5-1) SELECT   \"to\" \n  (#__codelineno-5-2) FROM   uniswap_v2 . \"Pair_evt_Swap\"   \n  (#__codelineno-5-3) WHERE   EXISTS ( \n  (#__codelineno-5-4)              SELECT   * \n  (#__codelineno-5-5)              FROM   labels . labels \n  (#__codelineno-5-6)              WHERE   address = \"to\" \n  (#__codelineno-5-7)              AND   type = 'dapp usage' \n  (#__codelineno-5-8)              AND   name = '1inch user' \n  (#__codelineno-5-9)              ) \n  (#__codelineno-5-10) LIMIT   10 ; \n \n \u4e0a\u9762\u7684\u67e5\u8be2\u5c06\u4e3a\u60a8\u63d0\u4f9b 10 \u4e2a\u5728 Uniswap \u4e0a\u4ea4\u6362\u5e76\u5728 1inch \u4e0a\u4ea4\u6613\u8fc7\u7684\u5730\u5740\u3002 \n \u5f53\u7136\uff0c\u60a8\u53ef\u4ee5\u7ed3\u5408\u4f7f\u7528\u8fd9\u4e24\u79cd\u6a21\u5f0f\uff01 \u5982\u679c\u60a8\u786e\u5b9e\u5bf9\u8fd9\u4e9b\u5730\u5740\u4e0a\u7684\u6807\u7b7e\u611f\u5174\u8da3\uff0c\u8bf7\u7ee7\u7eed\u4f7f\u7528  labels.get  \u548c  WHERE EXISTS  \u6a21\u5f0f\uff1a \n  (#__codelineno-6-1) --- SELECT \"to\" \n  (#__codelineno-6-2) +++   SELECT   \"to\" ,   labels . get ( \"to\" ) \n  (#__codelineno-6-3)      FROM   uniswap_v2 . \"Pair_evt_Swap\"   \n  (#__codelineno-6-4)      WHERE   EXISTS ( SELECT   *   FROM   labels . labels   WHERE   address = \"to\"   AND   type = 'dapp usage'   AND   name = '1inch user' ) \n  (#__codelineno-6-5)      LIMIT   10 ; \n \n \u60a8\u5f97\u5230\uff1a\u60a8\u770b\u5230\u5728 Uniswap \u548c 1inch \u4e0a\u4ea4\u6613\u7684\u5730\u5740_\u4ee5\u53ca_\u6240\u6709\u76f8\u5173\u7684\u5730\u5740\u6807\u7b7e\u3002", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/labels/#_6"}
{"content": "ERC-20 \u4ee3\u5e01\u4f59\u989d \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/erc-20-balances/#erc-20"}
{"content": "\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u8f7b\u677e\u8ddf\u8e2a\u94b1\u5305\u548c\u4ee3\u5e01\u4f59\u989d \u00b6 \n \u4e0b\u5217\u8868\u683c\u5141\u8bb8\u968f\u65f6\u95f4\u53d8\u5316\u6216\u6309\u5feb\u7167\u683c\u5f0f\u8f7b\u677e\u8ddf\u8e2a\u94b1\u5305\u4f59\u989d\u3001\u4ee3\u5e01\u5206\u914d\u6216\u4ee3\u5e01\u4f9b\u5e94\u91cf\u3002 \n \u5728\u539f\u59cb\u6570\u636e\u7ea7\u522b\u4e0a\uff0c\u4f7f\u7528 erc20 \u4ee3\u5e01\u975e\u5e38\u56f0\u96be\uff0c\u56e0\u4e3a\u60a8\u9700\u8981\u5bf9\u6240\u6709\u5730\u5740\u7684\u6240\u6709\u4ee3\u5e01\u8f6c\u79fb\u8fdb\u884c\u6c47\u603b\u3002\u8fd9\u4e0d\u5fc5\u8981\u5730\u4f7f\u67e5\u8be2\u81a8\u80c0\u5e76\u8fc5\u901f\u5bfc\u81f4\u4eba\u4e3a\u9519\u8bef\u3002\u4e3a\u4e86\u9632\u6b62\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\uff0c\u6211\u4eec\u6784\u5efa\u4e86\u51e0\u4e2a\u89c6\u56fe\u548c\u8868\uff0c\u53ef\u4ee5\u5e2e\u52a9\u60a8\u8f7b\u677e\u67e5\u8be2 erc20 \u4ee3\u5e01\u6570\u636e\u3002 \n \u8fd9\u4e9b\u8868\u53ef\u7528\u4e8e\u5404\u79cd\u6709\u8da3\u7684\u5206\u6790\uff0c\u4f46\u5728\u4f7f\u7528\u5b83\u4eec\u65f6\u60a8\u4ecd\u9700\u8981\u6ce8\u610f\u4e00\u4e9b\u4e8b\u9879\uff1a \n \n \u94f8\u9020/\u71c3\u70e7\u5730\u5740  \u6ca1\u6709\u6807\u51c6\u5316\uff0c\u56e0\u6b64\u60a8\u9700\u8981\u627e\u51fa\u8fd9\u4e9b\u5730\u5740\u5e76\u5728\u67e5\u8be2\u4e2d\u624b\u52a8\u5e94\u7528\u4fee\u590d\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u7528\u4e8e\u94f8\u9020\u548c\u71c3\u70e7\u7684\u5c06\u662f  x0000000000000000000000000000000000000000  \uff0c\u4f46\u8bf7\u59cb\u7ec8\u786e\u4fdd\u786e\u5b9e\u5982\u6b64\u3002\u5728\u4e0b\u9762\u7ed9\u51fa\u7684\u793a\u4f8b\u4e2d\uff0c\u60c5\u51b5\u5e76\u975e\u5982\u6b64\u3002 \n \n \u793a\u4f8b: \n  (#__codelineno-0-1) Select   \n  (#__codelineno-0-2)      wallet_address ,   \n  (#__codelineno-0-3)      amount , \n  (#__codelineno-0-4)      day , \n  (#__codelineno-0-5)      token_symbol \n  (#__codelineno-0-6) from   erc20 . \"view_token_balances_daily\" \n  (#__codelineno-0-7) where   token_address   =   '\\x429881672B9AE42b8EbA0E26cD9C73711b891Ca5' \n  (#__codelineno-0-8) and   wallet_address   !=   '\\x0000000000000000000000000000000000000000'   --mint address \n  (#__codelineno-0-9) and   wallet_address   !=   '\\x000000000000000000000000000000000000dead'   --burn address \n \n \n \u4f7f\u7528\u8fd9\u4e9b\u8868\u683c\u5de5\u4f5c\u4f1a\u5f88\u5feb\u4ea7\u751f\u5f88\u591a\u5355\u72ec\u7684\u6570\u636e\u70b9\uff0c\u6211\u4eec\u7684\u53ef\u89c6\u5316\u5f15\u64ce\u5e76\u4e0d\u603b\u662f\u80fd\u591f\u5b8c\u7f8e\u5904\u7406\u8fd9\u4e9b\u6570\u636e\u70b9\u3002\u4e0e\u5176\u5c1d\u8bd5\u663e\u793a\u6bcf\u4e2a\u552f\u4e00\u7684\u6301\u6709\u8005\uff0c\u4e0d\u5982\u5c06\u5b83\u4eec\u6309\u7279\u5b9a\u6807\u51c6\u5206\u7ec4\u5e76\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u663e\u793a\u6570\u636e\u96c6\u3002\u8fd9\u5bf9\u4e8e\u6bcf\u4e2a\u4ee3\u5e01\u90fd\u662f\u552f\u4e00\u7684\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u8bd5\u9a8c\u4ee5\u67e5\u770b\u4ec0\u4e48\u5206\u7c7b\u65b9\u5f0f\u80fd\u5728\u60a8\u7684\u67e5\u8be2\u4e2d\u6709\u6548\u5de5\u4f5c\u3002 \n \n  (#__codelineno-1-1) Select   \n  (#__codelineno-1-2) \n  (#__codelineno-1-3)       CASE     WHEN   wallet_address   =   '\\xbBCf169eE191A1Ba7371F30A1C344bFC498b29Cf'   then   'dill' \n  (#__codelineno-1-4)              WHEN   wallet_address   =   '\\xdc98556Ce24f007A5eF6dC1CE96322d65832A819'   then   'uniswap' \n  (#__codelineno-1-5)              WHEN   wallet_address   =   '\\xC52139a20A57c9002e9F5188901EF0ffC63c7205'   then   'smart_treasury' \n  (#__codelineno-1-6)              WHEN   wallet_address   =   '\\x40ec5b33f54e0e8a33a975908c5ba1c14e5bbbdf'   then   'polygon' \n  (#__codelineno-1-7)              WHEN   wallet_address   =   '\\x6cc5f688a315f3dc28a7781717a9a798a59fda7b'   then   'OKEX' \n  (#__codelineno-1-8)              WHEN   amount       between    0        and   10          then   'Plankton(0-10)' \n  (#__codelineno-1-9)              WHEN   amount       between   10       and   100          then   'shrimp(10-100)' \n  (#__codelineno-1-10)              WHEN   amount       between   100      and   1000         then   'fish(100-1,000)' \n  (#__codelineno-1-11)              WHEN   amount       between   1000      and   10000       then   'dolphin(1,000-10,000)' \n  (#__codelineno-1-12)              WHEN   amount       >   10000                         then   'whale (>10000)'   \n  (#__codelineno-1-13)             --\u8bf7\u6ce8\u610f\uff0ccase \u8868\u8ff0\u7684\u987a\u5e8f\u5728\u8fd9\u91cc\u5f88\u91cd\u8981 \n  (#__codelineno-1-14)      end   as   classification , \n  (#__codelineno-1-15) \n  (#__codelineno-1-16) sum ( amount )   as   amount , \n  (#__codelineno-1-17) token_symbol \n  (#__codelineno-1-18) from   erc20 . \"view_token_balances_latest\" \n  (#__codelineno-1-19) where   token_address   =   '\\x429881672B9AE42b8EbA0E26cD9C73711b891Ca5' \n  (#__codelineno-1-20) and   wallet_address   !=   '\\x0000000000000000000000000000000000000000' \n  (#__codelineno-1-21) and   wallet_address   !=   '\\x000000000000000000000000000000000000dead' \n  (#__codelineno-1-22) and   amount   >   0 . 1   --\u8fc7\u6ee4\u6389\u6781\u5c0f\u7684\u4ea4\u6613\uff0c\u53ef\u80fd\u9700\u8981\u6839\u636e\u4ee3\u5e01\u7684\u4e0d\u540c\u8fdb\u884c\u8c03\u6574 \n  (#__codelineno-1-23) group   by   1 , 3 \n \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/erc-20-balances/#_1"}
{"content": "\u770b\u677f\u793a\u4f8b: \u00b6 \n \u6b64\u770b\u677f\u5305\u542b\u4e0e\u7528\u4f5c\u6cbb\u7406\u4ee3\u5e01\u7684\u5355\u4e2a erc20 \u4ee3\u5e01\u76f8\u5173\u7684\u6700\u91cd\u8981\u7528\u4f8b\u3002\n https://dune.xyz/0xBoxer/pickle-finance_1  (https://dune.xyz/0xBoxer/pickle-finance_1) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/erc-20-balances/#_2"}
{"content": "erc20.view_token_balances_latest \u00b6 \n \u6b64\u89c6\u56fe\u4f9d\u8d56\u4e8e erc20.token_balances \u8868\uff0c\u5e76\u4e3a\u60a8\u63d0\u4f9b\u8be5\u4ee3\u5e01\u7684\u6700\u65b0\u5206\u5e03\u4fe1\u606f\u3002 \n \n \n \n column name \n data type \n description \n \n \n \n \n amount \n numeric \n \u8be5\u4ee3\u5e01\u7684\u6b63\u786e\u663e\u793a\u683c\u5f0f\u7684\u91d1\u989d \n \n \n amount_raw \n numeric \n \u8be5\u4ee3\u5e01\u7684\u539f\u59cb\u91d1\u989d\uff08\u9700\u8981\u9664\u4ee5\u5c0f\u6570\u4f4d\u6570\uff01\uff09 \n \n \n amount_usd \n float8 \n \u5f53\u524d\u4ef7\u683c\uff08\u5982\u679c\u6211\u4eec\u6709\u4ef7\u683c\u6570\u636e\uff09 \n \n \n last_transfer___timestamp \n timestamptz \n \u6b64\u7279\u5b9a\u94b1\u5305\u5730\u5740\u4e2d\u6b64\u4ee3\u5e01\u4f59\u989d\u6700\u540e\u66f4\u6539\u7684\u65e5\u671f \n \n \n token_address \n bytea \n \u4ee3\u5e01\u5730\u5740 \n \n \n token_symbol \n text \n \u4ee3\u5e01\u7b26\u53f7 \n \n \n wallet_address \n bytea \n \u6301\u6709\u8be5\u4ee3\u5e01\u7684\u94b1\u5305\u5730\u5740 \n \n \n \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/erc-20-balances/#erc20view_token_balances_latest"}
{"content": "erc20.view_token_balances_hourly \u00b6 \n \u6b64\u8868\u5c06\u6309\u5c0f\u65f6\u63d0\u4f9b\u6709\u5173\u6240\u6709\u4ee3\u5e01\u4f59\u989d\u7684\u4fe1\u606f\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5b83\u8fd8\u5df2\u7ecf\u5305\u542b\u5c0f\u6570\u548c\u4ef7\u683c\uff0c\u56e0\u6b64\u5b83\u4eec\u5df2\u7ecf\u51c6\u5907\u597d\u53ef\u5f00\u7bb1\u5373\u7528\u3002 \n \n \n \n \u5217\u540d \n \u6570\u636e\u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n amount \n numeric \n \u8be5\u4ee3\u5e01\u7684\u6b63\u786e\u663e\u793a\u683c\u5f0f\u7684\u91d1\u989d \n \n \n amount_raw \n numeric \n \u8be5\u4ee3\u5e01\u7684\u539f\u59cb\u91d1\u989d\uff08\u9700\u8981\u9664\u4ee5\u7cbe\u5ea6\uff01\uff09 \n \n \n amount_usd \n float8 \n \u5f53\u524d\u4ef7\u683c\uff08\u5982\u679c\u6211\u4eec\u6709\u4ef7\u683c\u6570\u636e\uff09 \n \n \n hour \n timestamptz \n \u4ee5\u5c0f\u65f6\u4e3a\u5355\u4f4d\u7684\u65f6\u95f4 \n \n \n token_address \n bytea \n \u4ee3\u5e01\u5408\u7ea6\u5730\u5740 \n \n \n token_symbol \n text \n \u4ee3\u5e01\u7b26\u53f7 \n \n \n wallet_address \n bytea \n \u6301\u6709\u8be5\u4ee3\u5e01\u7684\u94b1\u5305\u5730\u5740 \n \n \n \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/erc-20-balances/#erc20view_token_balances_hourly"}
{"content": "erc20.view_token_balances_daily \u00b6 \n \u6b64\u8868\u7684\u6027\u80fd\u5c06\u6bd4  erc20.view_token_balances_hourly  \u597d\u5f97\u591a\uff0c\u56e0\u4e3a\u5b83\u4ec5\u6309\u5929\u67e5\u8be2\u6570\u636e \u3002\u5982\u679c\u60a8\u60f3\u8fdb\u884c\u9ad8\u9636\u5206\u6790\uff0c\u8fd9\u662f\u60a8\u5e94\u8be5\u9009\u62e9\u7684\u8868\u3002 \n \n \n \n \u5217\u540d \n \u6570\u636e\u7c7b\u578b \n \u63cf\u8ff0 \n \n \n \n \n amount \n numeric \n \u8be5\u4ee3\u5e01\u7684\u6b63\u786e\u663e\u793a\u683c\u5f0f\u7684\u91d1\u989d \n \n \n amount_raw \n numeric \n \u8be5\u4ee3\u5e01\u7684\u539f\u59cb\u91d1\u989d\uff08\u9700\u8981\u9664\u4ee5\u7cbe\u5ea6\uff01\uff09 \n \n \n amount_usd \n float8 \n \u5f53\u524d\u4ef7\u683c\uff08\u5982\u679c\u6211\u4eec\u6709\u4ef7\u683c\u6570\u636e\uff09 \n \n \n day \n timestamptz \n \u4ee5\u5929\u4e3a\u5355\u4f4d\u7684\u65f6\u95f4 \n \n \n token_address \n bytea \n \u4ee3\u5e01\u5408\u7ea6\u5730\u5740 \n \n \n token_symbol \n text \n \u4ee3\u5e01\u7b26\u53f7 \n \n \n wallet_address \n bytea \n \u6301\u6709\u8be5\u4ee3\u5e01\u7684\u94b1\u5305\u5730\u5740 \n \n \n \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/erc-20-balances/#erc20view_token_balances_daily"}
{"content": "erc20.token_balances \u00b6 \n \u8be5\u8868\u5305\u542b\u6240\u6709 erc20 \u4ee3\u5e01\u5728\u8fd9\u4e9b\u4ee3\u5e01\u5b58\u5728\u671f\u95f4\u7684\u6bcf\u5c0f\u65f6\u4f59\u989d\u3002\u5982\u679c\u6211\u4eec\u4e0a\u9762\u63d0\u4f9b\u7684\u89c6\u56fe\u4e0d\u8db3\u4ee5\u6ee1\u8db3\u60a8\u5c1d\u8bd5\u5efa\u7acb\u7684\u7528\u4f8b\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u6b64\u8868\u4f5c\u4e3a\u5907\u7528\u9009\u9879\u3002\n| \u5217\u540d     | \u6570\u636e\u7c7b\u578b   | \u63cf\u8ff0                                                |\n| --------------- | ----------- | ---------------------------------------------------------- |\n| amount          | numeric     | \u8be5\u4ee3\u5e01\u7684\u6b63\u786e\u663e\u793a\u683c\u5f0f\u7684\u91d1\u989d                  |\n| amount_raw     | numeric     | \u8be5\u4ee3\u5e01\u7684\u539f\u59cb\u91d1\u989d\uff08\u9700\u8981\u9664\u4ee5\u7cbe\u5ea6\uff09 |\n| timestamp       | timestamptz | \u4ee5\u5c0f\u65f6\u4e3a\u5355\u4f4d\u7684\u65f6\u95f4                        |\n| token_address  | bytea       | \u4ee3\u5e01\u5408\u7ea6\u5730\u5740                                        |\n| token_symbol   | text        | \u4ee3\u5e01\u7b26\u53f7                                    |\n| wallet_address | bytea       | \u6301\u6709\u8be5\u4ee3\u5e01\u7684\u94b1\u5305\u5730\u5740               |", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/erc-20-balances/#erc20token_balances"}
{"content": "dex.trades \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/dex.trades/#dextrades"}
{"content": "\u53bb\u4e2d\u5fc3\u5316\u4ea4\u6613\u6240\u7684\u4ea4\u6613\u6570\u636e \u00b6 \n \u53bb\u4e2d\u5fc3\u5316\u4ea4\u6613\u6240\u662f\u8be5\u884c\u4e1a\u7684\u8109\u640f\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u667a\u80fd\u5408\u7ea6\u5c06\u4efb\u4f55ERC20\u4ee3\u5e01\u6362\u6210\u4efb\u4f55ERC20\u4ee3\u5e01\u3002\u4f46\u662f\u8fd9\u91cc\u7684\u95ee\u9898\u662f\uff1a\u8fd9\u91cc\u6709\u592a\u591adex\u4e86\uff0c\u4ee5\u51e0\u4e4e\u6ca1\u6709\u4eba\u80fd\u62ff\u5230\u6240\u6709\u8fd9\u4e9bdex\u667a\u80fd\u5408\u7ea6\u7684\u5b8c\u6574\u6570\u636e\u3002\u8fd9\u5c31\u662f\u6211\u4eec\u521b\u5efadex.trades\u7684\u539f\u56e0\u3002 \n \u8be5\u8868\u5bf9\u51e0\u4e4e\u6240\u6709\u7684\u53bb\u4e2d\u5fc3\u5316\u4ea4\u6613\u6240\u7684\u4ea4\u6613\u6570\u636e\u8fdb\u884c\u4e86\u6807\u51c6\u5316\u548c\u89c4\u8303\u5316\u3002\u8fd9\u5c06\u4f7f\u60a8\u53ef\u4ee5\u8f7b\u677e\u67e5\u8be2\u60a8\u559c\u6b22\u7684\u4ee3\u5e01\u7684\u4ea4\u6613\u6570\u636e\uff0c\u800c\u65e0\u9700\u81ea\u5df1\u5904\u7406\u6240\u6709\u4e0d\u540c\u7684dex\u667a\u80fd\u5408\u7ea6\u3002 \n \u751f\u6210\u8868dex.trades\u7684\u811a\u672c\u53ef\u4ee5\u5728\u8fd9\u4e2a \u516c\u5171github  (https://github.com/duneanalytics/spellbook/tree/master/ethereum/dex)  \u5b58\u50a8\u5e93\u4e2d\u627e\u5230\u3002 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/dex.trades/#_1"}
{"content": "dex.trades \u00b6 \n \n \n \n block_time \n timestamptz \n \u4ea4\u6613\u7684\u65f6\u95f4\u6233 \n \n \n \n \n token_a_symbol \n text \n \u53c2\u4e0e\u4ea4\u6613\u76842\u4e2a\u4ee3\u5e01\u4e2d\u7684\u5176\u4e2d1\u4e2a\u7684\u7b26\u53f7 \n \n \n token_b_symbol \n text \n \u53c2\u4e0e\u4ea4\u6613\u76842\u4e2a\u4ee3\u5e01\u4e2d\u7684\u5176\u4e2d1\u4e2a\u7684\u7b26\u53f7 \n \n \n token_a_amount \n numeric \n \u88ab\u4ea4\u6613\u7684\u4ee3\u5e01A\u7684\u6570\u91cf \n \n \n token_b_amount \n numeric \n \u88ab\u4ea4\u6613\u7684\u4ee3\u5e01B\u7684\u6570\u91cf \n \n \n project \n text \n \u4ea4\u6613\u662f\u5728\u54ea\u4e2adex\u4e0a\u53d1\u751f\u7684 \n \n \n version \n text \n dex\u7684\u7248\u672c \n \n \n category \n text \n \u8fd9\u662f\u4e00\u4e2a\u805a\u5408\u5668\u6216\u8005\u662f\u4e00\u4e2a\u5355\u7eaf\u7684dex \n \n \n trader_a \n bytea \n \u54ea\u4e2a\u5730\u5740\u8bf7\u6c42\u4e86dex \u7684\u667a\u80fd\u5408\u7ea6 \n \n \n trader_b \n bytea \n \u5728\u67d0\u4e9b\u7279\u6b8a\u60c5\u51b5\u4e0b\uff0c\u5b9e\u9645\u4e0a\u4ea4\u6613\u7684\u5bf9\u624b\u65b9\uff0c\u5982\u679c\u6709\u4f1a\u663e\u793a\u5728\u8fd9\u91cc \n \n \n token_a_amount_raw \n numeric \n \u88ab\u4ea4\u6613\u7684\u4ee3\u5e01A\u7684\u539f\u59cb\u6570\u91cf \n \n \n token_b_amount_raw \n numeric \n \u88ab\u4ea4\u6613\u7684\u4ee3\u5e01B\u7684\u539f\u59cb\u6570\u91cf \n \n \n usd_amount \n numeric \n \u8be5\u7b14\u4ea4\u6613\u7684USD\u4ef7\u503c \n \n \n token_a_address \n bytea \n \u4ee3\u5e01A\u7684ERC20\u5408\u7ea6\u5730\u5740 \n \n \n token_b_address \n bytea \n \u4ee3\u5e01B\u7684ERC20\u5408\u7ea6\u5730\u5740 \n \n \n exchange_contract_address \n bytea \n Dex\u7684\u667a\u80fd\u5408\u7ea6\u5730\u5740 \n \n \n tx_hash \n bytea \n \u5305\u542b\u7740\u7b14\u4ea4\u6613\u7684\u54c8\u5e0c \n \n \n tx_from \n bytea \n \u4ea4\u6613\u7684\u53d1\u8d77\u8005 \n \n \n tx_to \n bytea \n \u8fd9\u4e2atx\u8c03\u7528\u7684\u7b2c\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6 \n \n \n trace_address \n ARRAY \n \u4ea4\u6613\u6267\u884c\u5728\u56fe\u6811\u4e2d\u7684\u54ea\u4e2a\u4f4d\u7f6e\uff1f \n \n \n evt_index \n integer \n \u5728\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e\uff08\u6309\u6267\u884c\u6392\u5e8f\u7684\u7d2f\u8ba1\u65e5\u5fd7\u91cf\uff09 \n \n \n trade_id \n integer \n \u51fa\u4e8edatabase magic\u7684\u9700\u8981", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/dex.trades/#dextrades_1"}
{"content": "\u884c\u4e1a\u6570\u636e\u62bd\u8c61 \u00b6 \n \u884c\u4e1a\u6570\u636e\u62bd\u8c61\u662f\u6307 dex.trades\u3001erc20.stablecoins\u3001lending.borrow \u7b49\u8868\u3002 \n \u8fd9\u4e9b\u6570\u636e\u62bd\u8c61\u4ece\u591a\u4e2a\u5408\u7ea6\u548c\u9879\u76ee\u4e2d\u83b7\u53d6\u6570\u636e\uff0c\u6807\u51c6\u5316\u5b83\u4eec\u4e4b\u95f4\u7684\u6570\u636e\uff0c\u56e0\u6b64\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u67e5\u8be2\u8fd9\u4e9b\u6570\u636e\u5e76\u6bd4\u8f83\u4e0d\u540c\u9879\u76ee\u7684\u6307\u6807\u3002 \n \u5927\u591a\u6570 \u884c\u4e1a  (../../../../getting-started/use-cases/sector-dashboards/)  \u770b\u677f\u90fd\u4f9d\u8d56\u4e8e\u884c\u4e1a\u6570\u636e\u62bd\u8c61\u3002\u8fd9\u5f15\u5165\u4e86\u4e00\u4e2a\u6709\u8da3\u7684\u52a8\u6001\uff0c\u9879\u76ee\u53ef\u4ee5\u901a\u8fc7\u5411\u6211\u4eec\u7684\u516c\u5171  github \u8d44\u6e90\u5e93  (https://github.com/duneanalytics/abstractions) \u53d1\u51fa\u62c9\u53d6\u8bf7\u6c42\u8f7b\u677e\u5730\u5c06\u5176\u6570\u636e\u653e\u5165\u8fd9\u4e9b\u770b\u677f\u3002\nDune \u56e2\u961f\u548c\u793e\u533a\u4e00\u76f4\u5728\u6539\u8fdb\u8fd9\u4e9b\u7ec6\u5206\u884c\u4e1a\u6570\u636e\u62bd\u8c61\uff0c\u6211\u4eec\u603b\u662f\u6b22\u8fce\u5bf9\u73b0\u6709\u6570\u636e\u7684\u6240\u6709\u65b0\u6dfb\u52a0\u3002 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/#_1"}
{"content": "\u9879\u76ee\u6570\u636e\u62bd\u8c61 \u00b6 \n \u6211\u4eec\u5f80\u5f80\u6709\u9700\u6c42\u53bb\u5c06\u67d0\u4e2a\u9879\u76ee\u6240\u9700\u8981\u7684\u6240\u6709\u7684\u6570\u636e\u6c47\u96c6\u5230\u4e00\u5f20\u7b80\u6d01\u7684\u8868\u4e2d\u3002\u60a8\u53ef\u4ee5\u5728\u6211\u4eec\u7684\u6570\u636e\u62bd\u8c61\u4e2d\u6784\u9020\u89c6\u56fe\u6216\u8868\u6765\u5b9e\u73b0\u5b83\n\u4e0e\u4ec5\u6784\u5efa\u89c6\u56fe\u76f8\u6bd4\u3002 \n \u8fd9\u91cc\u7684\u4e3b\u8981\u4f18\u52bf\u662f\u60a8\u53ef\u4ee5\u5728\u6211\u4eec\u7684\u6570\u636e\u62bd\u8c61\u4e2d\u5904\u7406\u5927\u91cf\u6570\u636e\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u6bcf\u9694\u51e0\u4e2a\u5c0f\u65f6\u5728\u540e\u53f0\u81ea\u52a8\u8fd0\u884c\u5b83\u4eec\u3002 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/#_2"}
{"content": "\u4e3a\u6570\u636e\u62bd\u8c61\u505a\u8d21\u732e \u00b6 \n \u6211\u4eec\u4e0d\u518d\u5bf9 v1 \u7684\u6570\u636e\u62bd\u8c61\u5f00\u653e\u8d21\u732e\u3002 \n \u5982\u679c\u60a8\u60f3\u4e3a Dune \u6570\u636e\u62bd\u8c61\u505a\u51fa\u8d21\u732e\uff0c\u8bf7\u67e5\u770b \u9b54\u6cd5\u4e66  (../../../../spellbook/) \u3002", "url": "https://dune.com/docs/zh/reference/tables/v1/abstractions/#_3"}
{"content": "\u4e8b\u4ef6\u65e5\u5fd7 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/decoded/event-logs/#_1"}
{"content": "\u4e8b\u4ef6\u65e5\u5fd7 \u00b6 \n \u5f53\u67d0\u4e9b\u9884\u5148\u5b9a\u4e49\u7684\u64cd\u4f5c\u5b8c\u6210\u65f6\uff0c\u667a\u80fd\u5408\u7ea6\u4f1a\u4ea7\u751f \u4e8b\u4ef6\u65e5\u5fd7 \u3002\u8fd9\u4e9b\u65e5\u5fd7\u7684\u4ea7\u51fa\u7ed3\u6784\u662f\u7531\u667a\u80fd\u5408\u7ea6\u7684\u5f00\u53d1\u8005\u9884\u5148\u5b9a\u4e49\u7684\uff0c\u65e5\u5fd7\u7684\u5185\u5bb9\u662f\u5728\u4ea4\u6613\u8fc7\u7a0b\u4e2d\u52a8\u6001\u751f\u6210\u7684\u3002 \n \u65e5\u5fd7\u5bf9\u4e8e\u76d1\u63a7\u3001\u8b66\u62a5\u548c\u65e5\u5e38\u8ddf\u8e2a\u667a\u80fd\u5408\u7ea6\u5185\u90e8\u53d1\u751f\u7684\u4e8b\u60c5\u5f88\u6709\u7528\u3002\u4f5c\u4e3a\u6570\u636e\u5206\u6790\u5e08\uff0c\u65e5\u5fd7\u662f\u60a8\u6700\u597d\u7684\u670b\u53cb\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e3a\u60a8\u63d0\u4f9b\u4e86\u7528\u4e8e\u4e8b\u540e\u5206\u6790\u7684\u53ef\u9760\u7684\u6570\u636e\u3002\u5982\u679c\u60a8\u60f3\u67e5\u770b\u67d0\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6\u53ef\u4ee5\u4ea7\u751f\u54ea\u4e9b\u65e5\u5fd7\uff0c\u60a8\u53ea\u9700\u5728\u667a\u80fd\u5408\u7ea6\u7684\u6e90\u4ee3\u7801\u4e2d\u641c\u7d22\u5173\u952e\u5b57  emit  \u5373\u53ef\u3002 \n \u6211\u4eec\u4f1a\u5c06\u667a\u80fd\u5408\u7ea6\u6240\u6709\u4e8b\u4ef6\u7684\u65e5\u5fd7\u89e3\u7801\u4e3a\u4ee5\u5165\u4e0b\u65b9\u5f0f\u547d\u540d\u7684\u8868\uff1a projectname_blockchain.contractName_evt_eventName  \u3002 \n \u8ba9\u6211\u4eec\u56de\u5230  uniswap v3 factory  (https://etherscan.io/address/0x1f98431c8ad98523631ae4a59f267346ea31f984#code) \u7684\u4ee3\u7801\u4e0a\u4e0b\u6587\u4e2d\uff0c\u53bb\u5bfb\u627e\u5728\u521b\u5efa\u65b0\u6c60\u5b50\u7684\u65f6\u5019\u6240\u89e6\u53d1\u7684\u4e8b\u4ef6\u3002\u8be5\u4e8b\u4ef6\u88ab\u79f0\u4e3a  PoolCreated  \uff0c\u6bcf\u6b21\u6709\u4eba\u901a\u8fc7\u8c03\u7528  createPool  \u51fd\u6570\u6210\u529f\u90e8\u7f72\u65b0\u7684 Uniswap V3 \u6c60\u5b50\u7684\u65f6\u5019\u90fd\u4f1a\u89e6\u53d1\u8be5\u4e8b\u4ef6\u3002\u8be5\u4e8b\u4ef6\u5c06\u5f88\u5bb9\u6613\u5730\u4e3a\u6211\u4eec\u63d0\u4f9b\u65b0\u591a\u4fe1\u606f\uff0c\u4f8b\u5982\u6c60\u5b50\u4e2d\u662f\u662f\u4ec0\u4e48\u4ee3\u5e01\u3001\u6c60\u5b50\u7684\u8d39\u7387\u7b49\u7ea7\u4ee5\u53catick spacing\u7b49\u3002\u5728 Etherscan \u4e2d\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee  Log \u9009\u9879\u5361  (https://etherscan.io/tx/0xdeb368592f3de0f2840754bce61d2c3f29cdb3407c63c699052e68a854c71eaa#eventlog)  \u8f7b\u677e\u5730\u627e\u5230\u4e8b\u4ef6\u7684\u65e5\u5fd7\u3002\u5728Dune\u4e2d\uff0c\u8fd9\u79cd\u7279\u5b9a\u7684\u4e8b\u4ef6\u5c06\u88ab\u5b58\u50a8\u5728\u8868  uniswap_v3_ethereum.Factory_evt_PoolCreated  (https://dune.com/queries/757381)  \u4e2d\u3002 \n \u591a\u4e2a\u5b9e\u4f8b \n \u5982\u679c\u5408\u7ea6\u6709\u591a\u4e2a\u5b9e\u4f8b\uff0c\u6211\u4eec\u5c06\u5728\u540c\u4e00\u5f20\u8868\u4e2d\u6536\u96c6\u6b64\u667a\u80fd\u5408\u7ea6\u6240\u6709\u5b9e\u4f8b\u7684\u6240\u6709\u4e8b\u4ef6\u65e5\u5fd7\u3002 \u4f8b\u5982\uff0c\u6240\u6709 uniswap v3 \u6c60\u5b50\u7684  swap  \u4e8b\u4ef6\uff08\u4ee5\u592a\u574a\u4e0a\u7684\uff09\u90fd\u5b58\u50a8\u5728\u8868  uniswap_v3_ethereum.Pair_evt_Swap  (https://dune.com/queries/742037) \u4e2d\u3002 contract_address  \u5217\u8868\u660e\u4e86\u662f\u54ea\u4e2a\u667a\u80fd\u5408\u7ea6\u89e6\u53d1\u4e86\u6b64\u4e8b\u4ef6\u3002 \n \u5ef6\u4f38\u9605\u8bfb: \n \u4e86\u89e3\u4ee5\u592a\u574a\u4e0a\u7684\u4e8b\u4ef6\u65e5\u5fd7  (https://medium.com/mycrypto/understanding-event-logs-on-the-ethereum-blockchain-f4ae7ba50378) \n \u5173\u4e8e\u4ee5\u592a\u574a\u4e0a\u7684\u4e8b\u4ef6\u548c\u65e5\u5fd7\u60a8\u60f3\u77e5\u9053\u7684\u4e00\u5207  (https://medium.com/linum-labs/everything-you-ever-wanted-to-know-about-events-and-logs-on-ethereum%20-fec84ea7d0a5)", "url": "https://dune.com/docs/zh/reference/tables/v1/decoded/event-logs/#_2"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v1/raw/polygon/traces.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/polygon/traces/"}
{"content": "\u8c03\u7528\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/decoded/call-tables/#_1"}
{"content": "\u5bf9\u667a\u80fd\u5408\u7ea6\u7684\u8c03\u7528\u4ee5\u53ca\u53d1\u8d77\u7684\u4ea4\u6613 \u00b6 \n \u667a\u80fd\u5408\u7ea6\u901a\u5e38\u5177\u6709\u53ef\u7531\u5916\u90e8\u8d26\u6237(EOA)\u6216\u5176\u4ed6\u667a\u80fd\u5408\u7ea6\u8c03\u7528\u7684\u51fd\u6570\u3002\u51fd\u6570\u53ef\u4ee5\u6709\u4efb\u4f55\u529f\u80fd\uff0c\u4ece\u7b80\u5355\u7684\u72b6\u6001\u8bfb\u53d6\u3001\u8fd4\u56de\u5230\u66f4\u6539\u591a\u4e2a\u72b6\u6001\u548c\u8c03\u7528\u5176\u4ed6\u667a\u80fd\u5408\u7ea6\u7684\u6d88\u606f\u3002 \n \u5728Dune\u4e0a\uff0c\u6211\u4eec\u5728\u76f8\u5e94\u7684\u8868\u4e2d\u89e3\u6790\u5bf9\u667a\u80fd\u5408\u7ea6\u8fdb\u884c\u7684\u6240\u6709\u6d88\u606f\u8c03\u7528\u548c\u4ea4\u6613\u3002\u8fd9\u4e9b\u8868\u88ab\u76f8\u5e94\u5730\u547d\u540d\u4e3a  projectname_blockchain.contractName_call_functionName  \u3002 \n \u8fd9\u53ef\u4ee5\u5728\u5355\u4e2a\u667a\u80fd\u5408\u7ea6\u7ea7\u522b\uff08\u5982 uniswap v3 factory\uff09\u6216\u4e00\u7c7b\u5408\u7ea6\uff08\u5982 uniswap v3 pairs\uff09\u4e0a\u5b8c\u6210\u3002 \n \u4f8b\u5982\uff0c\u5f53\u6211\u4eec\u901a\u8fc7  uniswap v3 factory  (https://etherscan.io/address/0x1f98431c8ad98523631ae4a59f267346ea31f984#code)  \u5408\u7ea6\u4e2d\u7684\u51fd\u6570  createPool  \uff08\u5728\u4ee5\u592a\u574a\u4e0a\uff09\u521b\u5efa uniswap v3 \u6c60\u5b50\u7684\u65f6\u5019\uff0cDune \u5c06\u5728\u8868    uniswap_v3_ethereum.Factory_call_createPool  (https://dune.com/queries/735856)  \u4e2d\u8bb0\u5f55\u8be5\u4ea4\u6613\u3002\u65e0\u8bba\u662f\u5916\u90e8\u8d26\u6237 (EOA) \u901a\u8fc7\u4ea4\u6613\u8fd8\u662f\u667a\u80fd\u5408\u7ea6\u901a\u8fc7\u6d88\u606f\u8c03\u7528\uff0c\u8fd9\u4e9b\u884c\u4e3a\u90fd\u4f1a\u88ab\u8bb0\u5f55\u3002 \n \u591a\u4e2a\u5b9e\u4f8b \n \u5bf9\u4e8e\u5b58\u5728\u591a\u4e2a\u5b9e\u4f8b\u7684\u667a\u80fd\u5408\u7ea6\uff0c\u5bf9\u8be5\u667a\u80fd\u5408\u7ea6\u6240\u6709\u5b9e\u4f8b\u7684\u6240\u6709\u8c03\u7528\u90fd\u4f1a\u88ab\u6211\u4eec\u89e3\u7801\u5230\u4e00\u5f20\u8868\u4e2d\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6709\u4ea4\u6613\u8c03\u7528\u4e86  uniswap v3 pairs  (https://etherscan.io/address/0x8f8ef111b67c04eb1641f5ff19ee54cda062f163#writeContract)  \u8fd9\u4e2a\u667a\u80fd\u5408\u7ea6\u4efb\u4f55\u5b9e\u4f8b\u7684  swap  \u51fd\u6570\uff0c\u6211\u4eec\u5c06\u5728   uniswap_v3_ethereum.Pair_call_swap  \u8868\u4e2d\u8bb0\u5f55\u6b64\u6570\u636e \u3002 \n \u5e38\u89c1\u7684\u8bef\u533a \n \u5982\u679c\u6709\u4eba\u901a\u8fc7  web3.js  (https://web3js.readthedocs.io)  \u3001 web3.py  (https://web3py.readthedocs.io/en/stable)  \u6216\u8005\u5176\u4ed6\u6240\u6709\u65b9\u5f0f\u5728\uff08\u672c\u5730\uff09\u8c03\u7528  pure  ,  read  ,\u6216\u8005  constant  \u51fd\u6570\uff0c\u8fd9\u5c06\u4e0d\u4f1a\u5728\u533a\u5757\u94fe\u4e0a\u5e7f\u64ad\u6216\u4efb\u4f55\u5185\u5bb9\uff0c\u56e0\u6b64\u8fd9\u4e9b\u884c\u4e3a\u4e5f\u4e0d\u4f1a\u88ab\u8bb0\u5f55\u5728Dune\u4e2d\u3002 \n \u7b80\u800c\u8a00\u4e4b\uff1a \u5b58\u50a8\u5728\u667a\u80fd\u5408\u7ea6\u5185\u5b58\u4e2d\u7684\u72b6\u6001\u6570\u636e\u5728Dune\u4e0a\u83b7\u53d6\u4e0d\u5230\uff01 \n \u4e00\u4e2a\u6b63\u9762\u7684\u4f8b\u5b50\u662f  erc20 \u4ee3\u5e01\u5408\u7ea6 Uni  (https://etherscan.io/token/0x1f9840a85d5af5bf1d1762f925bdaddc4201f984#readContract)  \u7684\u51fd\u6570  decimals  \uff0c\u5b83\u662f\u4e00\u4e2a  constant  \u72b6\u6001\u53d8\u91cf\uff0c\u901a\u8fc7\u81ea\u52a8\u751f\u6210\u7684\u201c getter \u51fd\u6570  (https://docs.soliditylang.org/en/v0.7.4/contracts.html#getter-functions) \u201d\u53ef\u4ee5\u8bbf\u95ee\u3002\u5982\u679c\u667a\u80fd\u5408\u7ea6\u5728\u4ea4\u6613\u4e2d\u8c03\u7528\u6b64\u51fd\u6570\uff0c\u5219\u6b64\u6d88\u606f\u8c03\u7528\u5c06\u8bb0\u5f55\u5728Dune\u7684\u8868 uniswap.\"UNI_call_decimals\"  (https://dune.com/queries/741354) \u4e2d\u3002 \n \u8fd9\u4e0e\u4f7f\u7528 web3.py/web3.js \u5728\u672c\u5730\u8c03\u7528\u6b64\u51fd\u6570\u6216\u4f7f\u7528Etherscan\u524d\u7aef\u8bbf\u95ee\u6b64\u72b6\u6001\u7684\u60c5\u51b5\u5f62\u6210\u5bf9\u6bd4\uff0c\u8fd9\u4e9b\u672c\u5730\u8c03\u7528\u4e0d\u4f1a\u8bb0\u5f55\u5728Dune\u4e2d\u3002 \n \u8fdb\u4e00\u6b65\u9605\u8bfb\uff1a   \n \u4ea4\u6613\u548c\u8c03\u7528\u6709\u4ec0\u4e48\u533a\u522b\uff1f  (https://ethereum.stackexchange.com/questions/765/what-is-the-difference-between-a-transaction-and-a-call) \n Soliditylang.org \u6587\u6863  (https://docs.soliditylang.org/en/v0.8.13/contracts.html#function-visibility)", "url": "https://dune.com/docs/zh/reference/tables/v1/decoded/call-tables/#_2"}
{"content": "\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/polygon/traces/#_1"}
{"content": "polygon.traces \u00b6 \n Traces\u662f\u4ea4\u6613\u4e2d\u53ef\u4ee5\u6539\u53d8\u4ee5\u592a\u574a\u865a\u62df\u673a\u72b6\u6001\u7684\u6700\u5c0f\u539f\u5b50\u64cd\u4f5c\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u7684\u4fe1\u606f\u4f1a\u88ab\u8bb0\u5f55\u4e0b\u6765\uff0c\u5e76\u4e14\u53ef\u4ee5\u5b58\u50a8\u4e3aEVM\u6267\u884c\u8ddf\u8e2a\uff0c\u6216\u8005\u7b80\u79f0  \u8ddf\u8e2a\uff08trace\uff09 \uff0c\u5728Etherscan\u4e0a\u79f0\u4e3a\u201d\u5185\u90e8\u4ea4\u6613\u201c\u3002 \n \u66f4\u591a\u5185\u5bb9\u8bf7\u9605\u8bfb \u8fd9\u91cc  (https://medium.com/chainalysis/ethereum-traces-not-transactions-3f0533d26aa) . \n \n \n \n \u5217\u540d \n \u6570\u636e\u7c7b\u578b \n \u8bf4\u660e \n \n \n \n \n block_time \n timestamptz \n \u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n tx_success \n boolean \n \u663e\u793a\u4ea4\u6613\u662f\u5426\u6210\u529f\u7684\u771f/\u5047\u503c \n \n \n success \n boolean \n \u663e\u793a\u8ddf\u8e2a\u64cd\u4f5c\u662f\u5426\u6210\u529f\u7684\u771f/\u5047\u503c \n \n \n block_hash \n bytea \n \u8be5\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n block_number \n int8 \n \u533a\u5757\u94fe\u7684\u957f\u5ea6\uff08\u4ee5\u5757\u4e3a\u5355\u4f4d\uff09 \n \n \n tx_hash \n bytea \n \u4e8b\u4ef6\u7684\u4ea4\u6613\u54c8\u5e0c \n \n \n from \n bytea \n \u53d1\u9001\u8005\u7684\u5730\u5740 \n \n \n to \n bytea \n \u63a5\u6536\u8005\u7684\u5730\u5740\u3002\u5f53\u662f\u5408\u7ea6\u521b\u5efa\u4ea4\u6613\u65f6\u4e3aNULL \n \n \n value \n numeric \n \u5728\u6b64\u4ea4\u6613\u4e2d\u53d1\u9001\u7684\u4ee5 wei \u4e3a\u5355\u4f4d\u7684\u4ee5\u592a\u5e01\u6570\u91cf\u3002 \n \n \n gas \n numeric \n gas \u9650\u5236 \n \n \n gas_used \n numeric \n \u4ee5 wei \u4e3a\u5355\u4f4d\u7684\u4ea4\u6613\u6d88\u8017\u7684 gas \n \n \n tx_index \n numeric \n \u4ea4\u6613\u7d22\u5f15 \n \n \n trace_address \n array \n \u8c03\u7528\u56fe\u68ee\u6797\u4e2d\u7684\u8ddf\u8e2a\u5730\u5740\u3002\u4f8b\u5982\uff0c[0, 2, 1] \u662f [0, 2, 1, 0] \u7684\u7236\u7ea7\u3002 \n \n \n sub_traces \n numeric \n \u5b50\u8ddf\u8e2a(trace)\u7684\u6570\u91cf \n \n \n type \n text \n \u63cf\u8ff0\u5728\u6b64trace\u4e2d\u6267\u884c\u7684\u64cd\u4f5c\u7c7b\u578b\uff0c\u53ef\u4ee5\u662f  reward ,  create ,  call  or  suicide \u3002 \n \n \n address \n bytea \n \u5f53\u7c7b\u578btype\u662f suicide  or  create \u88ab\u8c03\u7528\u7684\u5408\u7ea6 \n \n \n code \n bytea \n \u90e8\u7f72\u65b0\u5408\u7ea6\u7684\u5b50\u8282\u4ee3\u7801\u6570\u636e\uff0c\u53ea\u5305\u62ectype\u662f create \u7684\u6570\u636e\u3002 \n \n \n call_type \n bytea \n \u53ef\u4ee5\u662f  staticcall ,  delegatecall  or  call . \u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u8003  \u8fd9\u91cc  (https://medium.com/coinmonks/delegatecall-calling-another-contract-function-in-solidity-b579f804178c) .  \n \n \n input \n bytea \n \u5bf9\u53e6\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6\u7684\u8c03\u7528\u7684\u5b57\u8282\u7801 \n \n \n output \n bytea \n \u88ab\u8c03\u7528\u7684\u667a\u80fd\u5408\u7ea6\u7684\u5b57\u8282\u7801 \n \n \n refund_address \n bytea \n \u5305\u62ec\u7c7b\u578b type  \u662f  suicide \u7684\u6570\u636e\uff0c\u7528\u4e8e\u6307\u5b9a\u5c06\u4ee5\u592a\u574a\u4f59\u989d\u53d1\u9001\u5230\u54ea\u91cc \n \n \n \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/polygon/traces/#polygontraces"}
{"content": "traces\u4e2d\u7684gas\u4f7f\u7528 \u00b6 \n \n \u4e00\u4e2atrace\u4e2d\u7684 gas_used \u5305\u62ec\u8be5trace\u548c\u5b83\u6240\u6709\u7684\u5b50trace\u6240\u6d88\u8017\u7684gas\u3002 \n \u6700\u521d\u8c03\u7528\u7684 gas_used \u4e0d\u5305\u62ec\u9996\u5148\u8fdb\u884c\u8c03\u7528\u7684\u8d39\u7528\u3002 \n \u60a8\u9700\u8981\u628a21000\u4e2agas\u5355\u4f4d+\u53d1\u90010\u7684\u8d39\u7528+\u975e\u96f6\u5b57\u8282\u7684\u8d39\u7528\u52a0\u5230\u9876\u90e8trace\u7684 gas_used \u503c\u4e2d\uff0c\u4ee5\u5f97\u51fa\"\u771f\u6b63\u7684\" gas_used \u503c\u3002 \n \u5173\u4e8e\u8fd9\u4e2a\u95ee\u9898\u7684\u66f4\u591a\u9605\u8bfb\u8bf7\u53c2\u8003\u8fd9\u4e2a stackexchange\u6761\u76ee  (https://ethereum.stackexchange.com/questions/31443/what-do-the-response-values-of-a-parity-trace-transaction-call-actually-repres) \n \u5728dune\u4e2d\u505a\u7684\u4e00\u4e2a\u67e5\u8be2\u3002 https://dune.com/queries/895857  (https://dune.com/queries/895857)", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/polygon/traces/#tracesgas"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v1/raw/polygon/event-logs.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/polygon/event-logs/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v1/raw/polygon/blocks.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/polygon/blocks/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#polygon-pos) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v1/raw/polygon/index.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/polygon/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v1/raw/optimism/transactions.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/optimism/transactions/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v1/raw/optimism/traces.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/optimism/traces/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v1/raw/optimism/event-logs.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/optimism/event-logs/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v1/raw/optimism/blocks.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/optimism/blocks/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v1/raw/gnosis-chain-xdai/transactions.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/gnosis-chain-xdai/transactions/"}
{"content": "\u4e8b\u4ef6\u65e5\u5fd7\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/polygon/event-logs/#_1"}
{"content": "polygon.logs \u00b6 \n \u8be5\u8868\u5b58\u50a8\u6240\u6709\u7531\u667a\u80fd\u5408\u7ea6\u4ea7\u751f\u7684\u65e5\u5fd7\u3002\u5b83\u5bf9\u67e5\u8be2\u5c1a\u672a\u89e3\u6790\u7684\u5408\u7ea6\u5f88\u6709\u7528\uff0c\u5305\u62ec\u90a3\u4e9b\u56e0\u4e3a\u4ee3\u7801\u672a\u516c\u5f00\u7684\u667a\u80fd\u5408\u7ea6\u3002 \n \u65e5\u5fd7\u662f\u4e00\u79cd\u4f18\u96c5\u7684\u65b9\u5f0f\uff0c\u53ef\u4ee5\u7528\u6781\u5c11\u91cf\u7684\u624b\u7eed\u8d39\uff0c\u5728EVM\u533a\u5757\u94fe\u4e0a\u5b58\u50a8\u6781\u5c11\u91cf\u7684\u6570\u636e\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u4e8b\u4ef6\u65e5\u5fd7\u5bf9\u4e8e\u8ba9\u5176\u4ed6\u4eba\u77e5\u9053\u53d1\u751f\u4e86\u4ec0\u4e48\u4e8b\u662f\u5f88\u6709\u7528\u7684\uff0c\u800c\u4e0d\u9700\u8981\u4ed6\u4eec\u5355\u72ec\u67e5\u8be2\u5408\u7ea6\u3002 \n \u66f4\u591a\u4fe1\u606f\u8bf7\u9605\u8bfb  \u8fd9\u7bc7\u6587\u6863  (https://medium.com/mycrypto/understanding-event-logs-on-the-ethereum-blockchain-f4ae7ba50378) . \n Note: \u6211\u4eec\u7684topic\u7d22\u5f15\u4f1a\u4fbf\u5b9c, \u6240\u4ee5  topic0  \u4f1a\u663e\u793a\u6210  topic1 ,  topic1  \u663e\u793a\u6210  topic2  \uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \n \n \n \n \u5217\u540d \n \u6570\u636e\u7c7b\u578b \n \u8bf4\u660e \n \n \n \n \n block_hash \n bytea \n \u8be5\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n block_number \n int8 \n \u533a\u5757\u94fe\u7684\u9ad8\u5ea6\uff08\u4ee5\u5757\u4e3a\u5355\u4f4d\uff09 \n \n \n block_time \n timestamptz \n \u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n contract_address \n bytea \n \u53d1\u51fa\u65e5\u5fd7\u7684\u5408\u7ea6\u5730\u5740 \n \n \n topic1 \n bytea \n \u5bf9\u4e8b\u4ef6\u58f0\u660e\u51fd\u6570\u7528keccak256\u51fd\u6570\u8fd0\u7b97\u540e\u7684\u54c8\u5e0c\u503c \n \n \n topic2 \n bytea \n \u4e8b\u4ef6\u7684\u7d22\u5f15\u4e3b\u98982 \n \n \n topic3 \n bytea \n \u4e8b\u4ef6\u7684\u7d22\u5f15\u4e3b\u98983 \n \n \n topic4 \n bytea \n \u4e8b\u4ef6\u7684\u7d22\u5f15\u4e3b\u98984 \n \n \n data \n bytea \n \u4e8b\u4ef6\u4e2d\u672a\u7d22\u5f15\u7684\u6570\u636e\u503c \n \n \n tx_hash \n bytea \n \u4e8b\u4ef6\u7684\u4ea4\u6613\u54c8\u5e0c \n \n \n index \n numeric \n \u8fd9\u4e2alog\u5728\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e (\u6309\u65e5\u5fd7\u6267\u884c\u7684\u987a\u5e8f\u7d2f\u8ba1) \n \n \n tx_index \n numeric \n \u6539transaction\u4ea4\u6613\u5728\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e\uff08 \u6309\u4ea4\u6613\u6267\u884c\u7684\u987a\u5e8f\u7d2f\u8ba1)", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/polygon/event-logs/#polygonlogs"}
{"content": "\u533a\u5757\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/polygon/blocks/#_1"}
{"content": "polygon.blocks \u00b6 \n \u533a\u5757\u662f\u533a\u5757\u94fe\u7684\u57fa\u672c\u5355\u5143\uff0c\u4e00\u4e2a\u533a\u5757\u5305\u542b\u7684\u4ea4\u6613\u8bb0\u5f55\u4f1a\u589e\u91cf\u7684\u6539\u53d8EVM\u7684\u72b6\u6001\uff0c\u4e00\u4e2a\u5757\u4e2d\u7684\u4ea4\u6613\u53ea\u80fd\u4e00\u4e2a\u63a5\u4e00\u4e2a\u5730\u6267\u884c\uff0c\u4e0d\u80fd\u5e76\u884c\u6267\u884c\u3002 \n \n \n \n \u5217\u540d \n \u6570\u636e\u7c7b\u578b \n \u8bf4\u660e \n \n \n \n \n time \n timestamptz \n \u533a\u5757\u88ab\u77ff\u5de5\u9a8c\u8bc1\u7684\u65f6\u95f4. \n \n \n number \n numeric \n \u533a\u5757\u7684\u9ad8\u5ea6 \n \n \n hash \n bytea \n \u533a\u5757\u7684\u552f\u4e00id \n \n \n parent hash \n bytea \n \u524d\u4e00\u4e2a\u533a\u5757\u7684\u552f\u4e00id \n \n \n gas_limit \n numeric \n \u5f53\u524d\u533a\u5757\u7684gas\u9650\u5236 \n \n \n gas_used \n numeric \n \u5f53\u524d\u533a\u5757\u4e2d\u4f7f\u7528\u7684gas \n \n \n miner \n bytea \n \u77ff\u5de5\u7684\u5730\u5740 \n \n \n difficulty \n numeric \n \u5f00\u91c7\u533a\u5757\u6240\u9700\u7684\u96be\u5ea6\u503c \n \n \n total_difficulty \n numeric \n \u76f4\u5230\u8fd9\u4e2a\u533a\u5757\u7684\u603b\u96be\u5ea6\u503c \n \n \n nonce \n bytea \n \u533a\u5757\u968f\u673a\u6570\uff0c\u7528\u4e8e\u5c55\u793a\u6316\u77ff\u8fc7\u7a0b\u4e2d\u7684\u5de5\u4f5c\u91cf\u8bc1\u660e \n \n \n size \n numeric \n \u6b64\u5757\u7684\u5927\u5c0f\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\uff08\u53d7\u9650\u4e8e gas limit\uff09 \n \n \n base_fee_per_gas \n numeric \n \u6b64\u533a\u5757\u7684\u57fa\u672c\u8d39\u7528 (\u7531  EIP1559  (https://eips.ethereum.org/EIPS/eip-1559) \u5f15\u5165)", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/polygon/blocks/#polygonblocks"}
{"content": "Polygon POS \u00b6 \n Polygon\uff08\u539fMATIC\uff09\u662f\u4e00\u4e2a\u7531Polygon\u79d1\u6280\u516c\u53f8\u6258\u7ba1\u548c\u7ef4\u62a4\u7684\u4ee5\u592a\u574a\u4fa7\u94fe\uff0cPolygon PoS\u662f\u4e00\u4e2a\u901a\u8fc7\u5229\u7528POS\u7f51\u7edc\u5b9e\u73b0\u4ea4\u6613\u901f\u5ea6\u548c\u6210\u672c\u8282\u7ea6\u7684\u89e3\u51b3\u65b9\u6848\uff0cPolygon\u7684\u8282\u70b9\u8981\u6c42\u660e\u663e\u9ad8\u4e8eEthereum Mainnet\u7684\u8981\u6c42\uff0c\u56e0\u4e3aPolygon\u6709\u8f83\u9ad8\u7684gas\u9650\u5236\u548c\u8f83\u77ed\u7684\u51fa\u5757\u65f6\u95f4\u3002 \n \u60a8\u53ef\u4ee5\u5728\u4ed6\u4eec\u7684[\u6587\u4ef6]\uff08https://docs.polygon.technology\uff09\u4e2d\u4e86\u89e3\u66f4\u591a\u5173\u4e8ePolygon\u548c\u4ed6\u4eec\u6269\u5c55EVM\u7684\u65b9\u6cd5\u3002 \n Polygon\u9075\u5faaETH\u4e3b\u7f51\u7684\u6240\u6709\u89c4\u5219\uff0c\u5728Dune\u4e0a\u7684\u67e5\u8be2\u5de5\u4f5c\u4e5f\u5b8c\u5168\u76f8\u540c\u3002 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/polygon/#polygon-pos"}
{"content": "Raw data tables \u00b6 \n \n \n Blocks  (blocks/) \n Transactions  (transactions/) \n Event logs  (event-logs/) \n Traces  (traces/)", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/polygon/#raw-data-tables"}
{"content": "\u4ea4\u6613\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/optimism/transactions/#_1"}
{"content": "optimism.transactions \u00b6 \n \u4ea4\u6613\u662f\u7531\u7528\u6237\u8d26\u6237\u53d1\u9001\u7684\u4ea4\u6613\u7b7e\u540d\u89e6\u53d1\u7684\uff0c\u4e00\u4e2a\u8d26\u6237\u4f1a\u53d1\u8d77\u4e00\u4e2a\u4ea4\u6613\u6765\u66f4\u65b0\u4ee5\u592a\u574a\u7f51\u7edc\u7684\u72b6\u6001\uff0c\u4ea4\u6613\u603b\u662f\u6765\u81ea\u5916\u90e8\u8d26\u6237\uff08EOA\uff09\u7684\u6388\u6743\uff0c\u667a\u80fd\u5408\u7ea6\u4e0d\u80fd\u53d1\u8d77\u4ea4\u6613\u3002 \n \u4ea4\u6613\u4f1a\u88ab\u5e7f\u64ad\u5230\u6574\u4e2a\u7f51\u7edc\uff0c\u4efb\u4f55\u8282\u70b9\u90fd\u53ef\u4ee5\u7528\u5e7f\u64ad\u7684\u65b9\u5f0f\uff0c\u8bf7\u6c42\u5728EVM\u4e0a\u6267\u884c\u4e8b\u52a1\uff0c\u5728\u6b64\u4e4b\u540e\uff0c\u77ff\u5de5\u5c06\u6267\u884c\u8fd9\u7b14\u4ea4\u6613\uff0c\u5e76\u5c06\u7ed3\u679c\u72b6\u6001\u4f20\u64ad\u5230\u7f51\u7edc\u4e2d\u7684\u5176\u5b83\u8282\u70b9\u3002 \n \u66f4\u591a\u4fe1\u606f\u8bf7\u9605\u8bfb\u4ee5\u592a\u574a\u5b98\u65b9\u6587\u6863  \u8fd9\u91cc  (https://ethereum.org/en/developers/docs/transactions) . \n \n \n \n \u5217\u540d \n \u6570\u636e\u7c7b\u578b \n \u8bf4\u660e \n \n \n \n \n block_time \n timestamptz \n \u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n nonce \n numeric \n \u8be5\u94b1\u5305\u72ec\u6709\u7684\u4ea4\u6613\u968f\u673a\u6570 \n \n \n index \n numeric \n \u533a\u5757\u4e2d\u7684\u4ea4\u6613\u7d22\u5f15\u4f4d\u7f6e \n \n \n success \n boolean \n \u663e\u793a\u4ee3\u4ea4\u6613\u662f\u5426\u6210\u529f\u7684\u771f/\u5047\u503c \n \n \n from \n bytea \n \u4ea4\u6613\u53d1\u9001\u8005\u7684\u5730\u5740 \n \n \n to \n bytea \n \u63a5\u6536\u8005\u7684\u5730\u5740\u3002\u5f53\u662f\u5408\u7ea6\u521b\u5efa\u4ea4\u6613\u65f6\u4e3aNULL \n \n \n value \n numeric \n \u5728\u6b64\u4ea4\u6613\u4e2d\u53d1\u9001\u7684\u4ee5 wei \u4e3a\u5355\u4f4d\u7684\u4ee5\u592a\u5e01\u6570\u91cf\u3002\u8bf7\u6ce8\u610f\uff0cerc20 \u4ee3\u5e01\u4e0d\u4f1a\u51fa\u73b0\u5728\u8fd9\u91cc\u3002 \n \n \n block_number \n int8 \n \u533a\u5757\u94fe\u7684\u9ad8\u5ea6\uff08\u4ee5\u5757\u4e3a\u5355\u4f4d\uff09 \n \n \n block_hash \n bytea \n \u8be5\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n gas_limit \n numeric \n \u4ee5 wei \u4e3a\u5355\u4f4d\u7684 gas \u9650\u5236 \n \n \n gas_price \n numeric \n \u4ee5 wei \u4e3a\u5355\u4f4d\u7684 gas \u4ef7\u683c \n \n \n gas_used \n numeric \n \u4ee5 wei \u4e3a\u5355\u4f4d\u7684\u4ea4\u6613\u6d88\u8017\u7684 gas \n \n \n data \n bytea \n \u4e00\u4e2a16\u8fdb\u5236\u7684\u7f16\u7801\u540e\u7684\u6570\u636e\uff0c\u6216\u8005\u667a\u80fd\u5408\u7ea6\u6307\u4ee4\u8bf4\u660e\uff0c\u53ef\u4ee5\u4e3a\u7a7a \n \n \n hash \n bytea \n \u4ea4\u6613\u54c8\u5e0c \n \n \n type \n text \n \u4ea4\u6613\u7c7b\u578b\uff1a Legacy ,  AccessList , \u6216\u8005 DynamicFee \n \n \n access_list \n jsonb \n n/a \n \n \n max_fee_per_gas \n numeric \n n/a \n \n \n max_priority_fee_per_gas \n numeric \n n/a \n \n \n priority_fee_per_gas \n numeric \n n/a \n \n \n l1_gas_used \n numeric \n \u53d1\u9001\u8f93\u5165\u6570\u636e\u5230L1\u7684\u8d39\u7528 \n \n \n l1_gas_price \n numeric \n L1\u7684gas\u4ef7\u683c \n \n \n l1_fee \n numeric \n \u4ee5wei\u4e3a\u5355\u4f4d\u7684L1 gas\u8d39\u7528 \n \n \n l1_fee_scalar \n numeric \n \u8d39\u7528\u6bd4\u4f8b\u7cfb\u6570\uff0c\u53ef\u53d8\u53c2\u6570\uff0c\u786e\u4fddL1\u4e0a\u7684gas\u82b1\u8d39\u548c\u5229\u6da6\u80fd\u591f\u8986\u76d6 \n \n \n l1_block_\\number \n numeric \n \u8be5\u7b14\u4ea4\u6613\u88ab\u5408\u5e76\u5230L1\u4e3b\u94fe\u4e0a\u65f6\uff0cL1\u7684block_number \n \n \n l1_timestamp \n numeric \n \u8be5\u7b14\u4ea4\u6613\u88ab\u5408\u5e76\u5230L1\u4e3b\u94fe\u4e0a\u65f6\uff0cL1\u4e0a\u7684\u65f6\u95f4 \n \n \n l1_tx_origin \n numeric \n ??", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/optimism/transactions/#optimismtransactions"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v1/raw/gnosis-chain-xdai/traces.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/gnosis-chain-xdai/traces/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v1/raw/gnosis-chain-xdai/event-logs.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/gnosis-chain-xdai/event-logs/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v1/raw/gnosis-chain-xdai/blocks.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/gnosis-chain-xdai/blocks/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#gnosis-chain-xdai) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v1/raw/gnosis-chain-xdai/index.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/gnosis-chain-xdai/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v1/raw/ethereum-mainnet/transactions.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/ethereum-mainnet/transactions/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v1/raw/ethereum-mainnet/traces.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/ethereum-mainnet/traces/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v1/raw/ethereum-mainnet/event-logs.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/ethereum-mainnet/event-logs/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v1/raw/ethereum-mainnet/blocks.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/ethereum-mainnet/blocks/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v1/raw/ethereum-mainnet/index.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/ethereum-mainnet/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v1/raw/bnb-chain-bsc/transactions.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/bnb-chain-bsc/transactions/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v1/raw/bnb-chain-bsc/traces.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/bnb-chain-bsc/traces/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v1/raw/bnb-chain-bsc/event-logs.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/bnb-chain-bsc/event-logs/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v1/raw/bnb-chain-bsc/blocks.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/bnb-chain-bsc/blocks/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#bnb-chain-bsc) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v1/raw/bnb-chain-bsc/index.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/bnb-chain-bsc/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#evm) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/v1/raw/index.md) \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/user-generated.md) \n \u7528\u6237\u751f\u6210\u8868 \n \n Note \n V2 \u73b0\u5728\u5c1a\u672a\u652f\u6301\u7528\u6237\u81ea\u5236\u8868\u3002 \n \n \u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e9b\u8868\u4e0d\u80fd\u4fdd\u8bc1\u6570\u636e\u7684\u51c6\u786e\u6027\uff0c\u5982\u679c\u4e0d\u662f\u7531\u60a8\u81ea\u5df1\u521b\u5efa\uff0c\u8bf7\u8c28\u614e\u4f7f\u7528\u3002 \n \u8bf7\u968f\u65f6\u4fdd\u5b58\u89c6\u56fe\u7684\u6784\u9020\u51fd\u6570\u53c2\u6570\u3002\u6709\u65f6\u6211\u4eec\u5fc5\u987b\u5220\u9664\u89c6\u56fe\uff0c\u4ee5\u4fbf\u80fd\u591f\u66f4\u6539\u67d0\u4e9b\u89e3\u7801\u8868\u6216\u4ee3\u7406\u4f9d\u8d56\u5173\u7cfb\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u91cd\u65b0\u90e8\u7f72\u89c6\u56fe\u3002 \n ", "url": "https://dune.com/docs/zh/reference/tables/user-generated/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/prices.md) \n \u4ef7\u683c\u8868 \n ", "url": "https://dune.com/docs/zh/reference/tables/prices/"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/community.md) \n \u793e\u533a\u6765\u6e90\u8868 \n \n \u6ce8\u610f \n \u793e\u533a\u6570\u636e\u4ec5\u5728V2\u5f15\u64ce\u63d0\u4f9b\u3002 \n \n \u867d\u7136\u533a\u5757\u94fe\u6570\u636e\u672c\u8eab\u5f88\u9177\uff0c\u6211\u4eec\u5c3d\u6700\u5927\u52aa\u529b\u51c6\u5907\u3001\u6807\u51c6\u5316\u548c\u5904\u7406\u8fd9\u4e9b\u6570\u636e\uff0c\u4f46\u6709\u65f6\u4e5f\u9700\u8981\u4e00\u4e9b\u94fe\u4e0b\u6570\u636e\u6216\u94fe\u4e0a\u6570\u636e\u7684\u589e\u5f3a\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9009\u5b9a\u4e86\u4e00\u4e9b\u7ec4\u7ec7\u5408\u4f5c\u65b9\uff0c\u5c06\u6570\u636e\u76f4\u63a5\u4f20\u8f93\u5230Dune\u3002 \n \u6211\u4eec\u4ecd\u5728\u4e3a\u6b64\u52aa\u529b\u6784\u5efa\u57fa\u7840\u8bbe\u65bd\uff0c\u56e0\u6b64\u76ee\u524d\u65e0\u6cd5\u652f\u6301\u66f4\u591a\u7684\u6570\u636e\u96c6\u3002 \n \n \n Flashbots  (../v2/community/flashbots/) \n Reservoir  (../v2/community/reservoir/)", "url": "https://dune.com/docs/zh/reference/tables/community/"}
{"content": "Skip to content\n          (#press-kit) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/resources/press-kit.md) \n ", "url": "https://dune.com/docs/resources/press-kit/"}
{"content": "Skip to content\n          (#the-problem-wizards-projects) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/resources/dune-bounties.md) \n Find a Wizard \n While Dune has created the tools to make extract knowledge from crypto data, it's through the skills and bravery of our community of Wizards that data is surfaced and made understandable for projects and the public alike. \n Many of our Wizards are looking for ways to earn money and build their reputation in the space. \n ", "url": "https://dune.com/docs/resources/dune-bounties/"}
{"content": "\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/optimism/traces/#_1"}
{"content": "optimism.traces \u00b6 \n Traces\u662f\u4ea4\u6613\u4e2d\u53ef\u4ee5\u6539\u53d8\u4ee5\u592a\u574a\u865a\u62df\u673a\u72b6\u6001\u7684\u6700\u5c0f\u539f\u5b50\u64cd\u4f5c\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u7684\u4fe1\u606f\u4f1a\u88ab\u8bb0\u5f55\u4e0b\u6765\uff0c\u5e76\u4e14\u53ef\u4ee5\u5b58\u50a8\u4e3aEVM\u6267\u884c\u8ddf\u8e2a\uff0c\u6216\u8005\u7b80\u79f0  \u8ddf\u8e2a\uff08trace\uff09 \uff0c\u5728Etherscan\u4e0a\u79f0\u4e3a\u201d\u5185\u90e8\u4ea4\u6613\u201c\u3002 \n \u66f4\u591a\u5185\u5bb9\u8bf7\u9605\u8bfb \u8fd9\u91cc  (https://medium.com/chainalysis/ethereum-traces-not-transactions-3f0533d26aa) . \n \n \n \n \u5217\u540d \n \u6570\u636e\u7c7b\u578b \n \u8bf4\u660e \n \n \n \n \n block_time \n timestamptz \n \u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n tx_success \n boolean \n \u663e\u793a\u4ea4\u6613\u662f\u5426\u6210\u529f\u7684\u771f/\u5047\u503c \n \n \n success \n boolean \n \u663e\u793a\u8ddf\u8e2a\u64cd\u4f5c\u662f\u5426\u6210\u529f\u7684\u771f/\u5047\u503c \n \n \n block_hash \n bytea \n \u8be5\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n block_number \n int8 \n \u533a\u5757\u94fe\u7684\u957f\u5ea6\uff08\u4ee5\u5757\u4e3a\u5355\u4f4d\uff09 \n \n \n tx_hash \n bytea \n \u4e8b\u4ef6\u7684\u4ea4\u6613\u54c8\u5e0c \n \n \n from \n bytea \n \u53d1\u9001\u8005\u7684\u5730\u5740 \n \n \n to \n bytea \n \u63a5\u6536\u8005\u7684\u5730\u5740\u3002\u5f53\u662f\u5408\u7ea6\u521b\u5efa\u4ea4\u6613\u65f6\u4e3aNULL \n \n \n value \n numeric \n \u5728\u6b64\u4ea4\u6613\u4e2d\u53d1\u9001\u7684\u4ee5 wei \u4e3a\u5355\u4f4d\u7684\u4ee5\u592a\u5e01\u6570\u91cf\u3002 \n \n \n gas \n numeric \n gas \u9650\u5236 \n \n \n gas_used \n numeric \n \u4ee5 wei \u4e3a\u5355\u4f4d\u7684\u4ea4\u6613\u6d88\u8017\u7684 gas \n \n \n tx_index \n numeric \n \u4ea4\u6613\u7d22\u5f15 \n \n \n trace_address \n array \n \u8c03\u7528\u56fe\u68ee\u6797\u4e2d\u7684\u8ddf\u8e2a\u5730\u5740\u3002\u4f8b\u5982\uff0c[0, 2, 1] \u662f [0, 2, 1, 0] \u7684\u7236\u7ea7\u3002 \n \n \n sub_traces \n numeric \n \u5b50\u8ddf\u8e2a(trace)\u7684\u6570\u91cf \n \n \n type \n text \n \u63cf\u8ff0\u5728\u6b64trace\u4e2d\u6267\u884c\u7684\u64cd\u4f5c\u7c7b\u578b\uff0c\u53ef\u4ee5\u662f  reward ,  create ,  call  or  suicide \u3002 \n \n \n address \n bytea \n \u5f53\u7c7b\u578btype\u662f suicide  or  create \u88ab\u8c03\u7528\u7684\u5408\u7ea6 \n \n \n code \n bytea \n \u90e8\u7f72\u65b0\u5408\u7ea6\u7684\u5b50\u8282\u4ee3\u7801\u6570\u636e\uff0c\u53ea\u5305\u62ectype\u662f create \u7684\u6570\u636e\u3002 \n \n \n call_type \n bytea \n \u53ef\u4ee5\u662f  staticcall ,  delegatecall  or  call . \u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u8003  \u8fd9\u91cc  (https://medium.com/coinmonks/delegatecall-calling-another-contract-function-in-solidity-b579f804178c) .  \n \n \n input \n bytea \n \u5bf9\u53e6\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6\u7684\u8c03\u7528\u7684\u5b57\u8282\u7801 \n \n \n output \n bytea \n \u88ab\u8c03\u7528\u7684\u667a\u80fd\u5408\u7ea6\u7684\u5b57\u8282\u7801 \n \n \n refund_address \n bytea \n \u5305\u62ec\u7c7b\u578b type  \u662f  suicide \u7684\u6570\u636e\uff0c\u7528\u4e8e\u6307\u5b9a\u5c06\u4ee5\u592a\u574a\u4f59\u989d\u53d1\u9001\u5230\u54ea\u91cc \n \n \n \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/optimism/traces/#optimismtraces"}
{"content": "traces\u4e2d\u7684gas\u4f7f\u7528 \u00b6 \n \n \u4e00\u4e2atrace\u4e2d\u7684 gas_used \u5305\u62ec\u8be5trace\u548c\u5b83\u6240\u6709\u7684\u5b50trace\u6240\u6d88\u8017\u7684gas\u3002 \n \u6700\u521d\u8c03\u7528\u7684 gas_used \u4e0d\u5305\u62ec\u9996\u5148\u8fdb\u884c\u8c03\u7528\u7684\u8d39\u7528\u3002 \n \u60a8\u9700\u8981\u628a21000\u4e2agas\u5355\u4f4d+\u53d1\u90010\u7684\u8d39\u7528+\u975e\u96f6\u5b57\u8282\u7684\u8d39\u7528\u52a0\u5230\u9876\u90e8trace\u7684 gas_used \u503c\u4e2d\uff0c\u4ee5\u5f97\u51fa\"\u771f\u6b63\u7684\" gas_used \u503c\u3002 \n \u5173\u4e8e\u8fd9\u4e2a\u95ee\u9898\u7684\u66f4\u591a\u9605\u8bfb\u8bf7\u53c2\u8003\u8fd9\u4e2a stackexchange\u6761\u76ee  (https://ethereum.stackexchange.com/questions/31443/what-do-the-response-values-of-a-parity-trace-transaction-call-actually-repres) \n \u5728dune\u4e2d\u505a\u7684\u4e00\u4e2a\u67e5\u8be2\u3002 https://dune.com/queries/895857  (https://dune.com/queries/895857)", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/optimism/traces/#tracesgas"}
{"content": "\u4e8b\u4ef6\u65e5\u5fd7\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/optimism/event-logs/#_1"}
{"content": "optimism.logs \u00b6 \n \u8be5\u8868\u5b58\u50a8\u6240\u6709\u7531\u667a\u80fd\u5408\u7ea6\u4ea7\u751f\u7684\u65e5\u5fd7\u3002\u5b83\u5bf9\u67e5\u8be2\u5c1a\u672a\u89e3\u6790\u7684\u5408\u7ea6\u5f88\u6709\u7528\uff0c\u5305\u62ec\u90a3\u4e9b\u56e0\u4e3a\u4ee3\u7801\u672a\u516c\u5f00\u7684\u667a\u80fd\u5408\u7ea6\u3002 \n \u65e5\u5fd7\u662f\u4e00\u79cd\u4f18\u96c5\u7684\u65b9\u5f0f\uff0c\u53ef\u4ee5\u7528\u6781\u5c11\u91cf\u7684\u624b\u7eed\u8d39\uff0c\u5728EVM\u533a\u5757\u94fe\u4e0a\u5b58\u50a8\u6781\u5c11\u91cf\u7684\u6570\u636e\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u4e8b\u4ef6\u65e5\u5fd7\u5bf9\u4e8e\u8ba9\u5176\u4ed6\u4eba\u77e5\u9053\u53d1\u751f\u4e86\u4ec0\u4e48\u4e8b\u662f\u5f88\u6709\u7528\u7684\uff0c\u800c\u4e0d\u9700\u8981\u4ed6\u4eec\u5355\u72ec\u67e5\u8be2\u5408\u7ea6\u3002 \n \u66f4\u591a\u4fe1\u606f\u8bf7\u9605\u8bfb  \u8fd9\u7bc7\u6587\u6863  (https://medium.com/mycrypto/understanding-event-logs-on-the-ethereum-blockchain-f4ae7ba50378) . \n Note: \u6211\u4eec\u7684topic\u7d22\u5f15\u4f1a\u4fbf\u5b9c, \u6240\u4ee5  topic0  \u4f1a\u663e\u793a\u6210  topic1 ,  topic1  \u663e\u793a\u6210  topic2  \uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \n \n \n \n \u5217\u540d \n \u6570\u636e\u7c7b\u578b \n \u8bf4\u660e \n \n \n \n \n block_hash \n bytea \n \u8be5\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n block_number \n int8 \n \u533a\u5757\u94fe\u7684\u9ad8\u5ea6\uff08\u4ee5\u5757\u4e3a\u5355\u4f4d\uff09 \n \n \n block_time \n timestamptz \n \u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n contract_address \n bytea \n \u53d1\u51fa\u65e5\u5fd7\u7684\u5408\u7ea6\u5730\u5740 \n \n \n topic1 \n bytea \n \u5bf9\u4e8b\u4ef6\u58f0\u660e\u51fd\u6570\u7528keccak256\u51fd\u6570\u8fd0\u7b97\u540e\u7684\u54c8\u5e0c\u503c \n \n \n topic2 \n bytea \n \u4e8b\u4ef6\u7684\u7d22\u5f15\u4e3b\u98982 \n \n \n topic3 \n bytea \n \u4e8b\u4ef6\u7684\u7d22\u5f15\u4e3b\u98983 \n \n \n topic4 \n bytea \n \u4e8b\u4ef6\u7684\u7d22\u5f15\u4e3b\u98984 \n \n \n data \n bytea \n \u4e8b\u4ef6\u4e2d\u672a\u7d22\u5f15\u7684\u6570\u636e\u503c \n \n \n tx_hash \n bytea \n \u4e8b\u4ef6\u7684\u4ea4\u6613\u54c8\u5e0c \n \n \n index \n numeric \n \u8fd9\u4e2alog\u5728\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e (\u6309\u65e5\u5fd7\u6267\u884c\u7684\u987a\u5e8f\u7d2f\u8ba1) \n \n \n tx_index \n numeric \n \u6539transaction\u4ea4\u6613\u5728\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e\uff08 \u6309\u4ea4\u6613\u6267\u884c\u7684\u987a\u5e8f\u7d2f\u8ba1)", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/optimism/event-logs/#optimismlogs"}
{"content": "\u533a\u5757\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/optimism/blocks/#_1"}
{"content": "optimism.blocks \u00b6 \n \u533a\u5757\u662f\u533a\u5757\u94fe\u7684\u57fa\u672c\u5355\u5143\uff0c\u4e00\u4e2a\u533a\u5757\u5305\u542b\u7684\u4ea4\u6613\u8bb0\u5f55\u4f1a\u589e\u91cf\u7684\u6539\u53d8EVM\u7684\u72b6\u6001\uff0c\u4e00\u4e2a\u5757\u4e2d\u7684\u4ea4\u6613\u53ea\u80fd\u4e00\u4e2a\u63a5\u4e00\u4e2a\u5730\u6267\u884c\uff0c\u4e0d\u80fd\u5e76\u884c\u6267\u884c\u3002 \n \n \n \n \u5217\u540d \n \u6570\u636e\u7c7b\u578b \n \u8bf4\u660e \n \n \n \n \n time \n timestamptz \n \u533a\u5757\u88ab\u77ff\u5de5\u9a8c\u8bc1\u7684\u65f6\u95f4. \n \n \n number \n numeric \n \u533a\u5757\u7684\u9ad8\u5ea6 \n \n \n hash \n bytea \n \u533a\u5757\u7684\u552f\u4e00id \n \n \n parent hash \n bytea \n \u524d\u4e00\u4e2a\u533a\u5757\u7684\u552f\u4e00id \n \n \n gas_limit \n numeric \n \u5f53\u524d\u533a\u5757\u7684gas\u9650\u5236 \n \n \n gas_used \n numeric \n \u5f53\u524d\u533a\u5757\u4e2d\u4f7f\u7528\u7684gas \n \n \n miner \n bytea \n n/a \n \n \n difficulty \n numeric \n \u5f00\u91c7\u533a\u5757\u6240\u9700\u7684\u96be\u5ea6\u503c \n \n \n total_difficulty \n numeric \n \u76f4\u5230\u8fd9\u4e2a\u533a\u5757\u7684\u603b\u96be\u5ea6\u503c \n \n \n nonce \n bytea \n n/a \n \n \n size \n numeric \n \u6b64\u5757\u7684\u5927\u5c0f\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\uff08\u53d7\u9650\u4e8e gas limit\uff09 \n \n \n base_fee_per_gas \n numeric \n n/a", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/optimism/blocks/#optimismblocks"}
{"content": "\u4ea4\u6613\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/gnosis-chain-xdai/transactions/#_1"}
{"content": "gnosis.transactions \u00b6 \n \u4ea4\u6613\u662f\u7531\u7528\u6237\u8d26\u6237\u53d1\u9001\u7684\u4ea4\u6613\u7b7e\u540d\u89e6\u53d1\u7684\uff0c\u4e00\u4e2a\u8d26\u6237\u4f1a\u53d1\u8d77\u4e00\u4e2a\u4ea4\u6613\u6765\u66f4\u65b0\u4ee5\u592a\u574a\u7f51\u7edc\u7684\u72b6\u6001\uff0c\u4ea4\u6613\u603b\u662f\u6765\u81ea\u5916\u90e8\u8d26\u6237\uff08EOA\uff09\u7684\u6388\u6743\uff0c\u667a\u80fd\u5408\u7ea6\u4e0d\u80fd\u53d1\u8d77\u4ea4\u6613\u3002 \n \u4ea4\u6613\u4f1a\u88ab\u5e7f\u64ad\u5230\u6574\u4e2a\u7f51\u7edc\uff0c\u4efb\u4f55\u8282\u70b9\u90fd\u53ef\u4ee5\u7528\u5e7f\u64ad\u7684\u65b9\u5f0f\uff0c\u8bf7\u6c42\u5728EVM\u4e0a\u6267\u884c\u4e8b\u52a1\uff0c\u5728\u6b64\u4e4b\u540e\uff0c\u77ff\u5de5\u5c06\u6267\u884c\u8fd9\u7b14\u4ea4\u6613\uff0c\u5e76\u5c06\u7ed3\u679c\u72b6\u6001\u4f20\u64ad\u5230\u7f51\u7edc\u4e2d\u7684\u5176\u5b83\u8282\u70b9\u3002 \n \u66f4\u591a\u4fe1\u606f\u8bf7\u9605\u8bfb\u4ee5\u592a\u574a\u5b98\u65b9\u6587\u6863  \u8fd9\u91cc  (https://ethereum.org/en/developers/docs/transactions) . \n \n \n \n \u5217\u540d \n \u6570\u636e\u7c7b\u578b \n \u8bf4\u660e \n \n \n \n \n block_time \n timestamptz \n \u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n nonce \n numeric \n \u8be5\u94b1\u5305\u72ec\u6709\u7684\u4ea4\u6613\u968f\u673a\u6570 \n \n \n index \n numeric \n \u533a\u5757\u4e2d\u7684\u4ea4\u6613\u7d22\u5f15\u4f4d\u7f6e \n \n \n success \n boolean \n \u663e\u793a\u4ee3\u4ea4\u6613\u662f\u5426\u6210\u529f\u7684\u771f/\u5047\u503c \n \n \n from \n bytea \n \u4ea4\u6613\u53d1\u9001\u8005\u7684\u5730\u5740 \n \n \n to \n bytea \n \u63a5\u6536\u8005\u7684\u5730\u5740\u3002\u5f53\u662f\u5408\u7ea6\u521b\u5efa\u4ea4\u6613\u65f6\u4e3aNULL \n \n \n value \n numeric \n \u5728\u6b64\u4ea4\u6613\u4e2d\u53d1\u9001\u7684\u4ee5 wei \u4e3a\u5355\u4f4d\u7684\u4ee5\u592a\u5e01\u6570\u91cf\u3002\u8bf7\u6ce8\u610f\uff0cerc20 \u4ee3\u5e01\u4e0d\u4f1a\u51fa\u73b0\u5728\u8fd9\u91cc \n \n \n block_number \n int8 \n \u533a\u5757\u94fe\u7684\u9ad8\u5ea6\uff08\u4ee5\u5757\u4e3a\u5355\u4f4d\uff09 \n \n \n block_hash \n bytea \n \u8be5\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n gas_limit \n numeric \n \u4ee5 wei \u4e3a\u5355\u4f4d\u7684 gas \u9650\u5236 \n \n \n gas_price \n numeric \n \u4ee5 wei \u4e3a\u5355\u4f4d\u7684 gas \u4ef7\u683c \n \n \n gas_used \n numeric \n \u4ee5 wei \u4e3a\u5355\u4f4d\u7684\u4ea4\u6613\u6d88\u8017\u7684 gas \n \n \n data \n bytea \n \u4e00\u4e2a16\u8fdb\u5236\u7684\u7f16\u7801\u540e\u7684\u6570\u636e\uff0c\u6216\u8005\u667a\u80fd\u5408\u7ea6\u6307\u4ee4\u8bf4\u660e\uff0c\u53ef\u4ee5\u4e3a\u7a7a \n \n \n hash \n bytea \n \u4ea4\u6613\u54c8\u5e0c \n \n \n type \n text \n \u4ea4\u6613\u7c7b\u578b\uff1a Legacy ,  AccessList , \u6216\u8005 DynamicFee \n \n \n access_list \n jsonb \n \u4ea4\u6613\u6253\u7b97\u8bbf\u95ee\u7684\u5730\u5740\u548c\u5b58\u50a8\u5bc6\u94a5\u7684\u5217\u8868\uff0c\u53c2\u89c1  EIP2930  (https://eips.ethereum.org/EIPS/eip-2930) \u3002\u9002\u7528\u4e8e\u4ea4\u6613\u7c7b\u578b\u4e3a  AccessLis t \u6216  DynamicFee  \u7684\u60c5\u51b5 \n \n \n max_fee_per_gas \n numeric \n \u4ea4\u6613\u53d1\u9001\u8005\u613f\u610f\u652f\u4ed8\u7684\u6bcf\u5355\u4f4d gas \u7684\u6700\u9ad8\u8d39\u7528\u603b\u989d\uff08\u7531  EIP1559  (https://eips.ethereum.org/EIPS/eip-1559) \u5f15\u5165) \n \n \n max_priority_fee_per_gas \n numeric \n \u4ea4\u6613\u53d1\u9001\u8005\u613f\u610f\u5411\u77ff\u5de5\u652f\u4ed8\u7684\u6bcf\u5355\u4f4d gas \u7684\u6700\u9ad8\u8d39\u7528\uff0c\u4ee5\u6fc0\u52b1\u4ed6\u4eec\u5305\u542b\u4ed6\u4eec\u7684\u4ea4\u6613 \uff08\u7531  EIP1559  (https://eips.ethereum.org/EIPS/eip-1559) \u5f15\u5165) \n \n \n priority_fee_per_gas \n numeric \n \u672c\u6b21\u4ea4\u6613\u652f\u4ed8\u7ed9\u77ff\u5de5\u7684\u4f18\u5148\u6743\u8d39\u7528 \uff08\u7531  EIP1559  (https://eips.ethereum.org/EIPS/eip-1559) \u5f15\u5165)", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/gnosis-chain-xdai/transactions/#gnosistransactions"}
{"content": "Skip to content\n          (#citing-dune) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/resources/citing-dune.md) \n ", "url": "https://dune.com/docs/resources/citing-dune/"}
{"content": "\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/gnosis-chain-xdai/traces/#_1"}
{"content": "gnosis.traces \u00b6 \n Traces\u662f\u4ea4\u6613\u4e2d\u53ef\u4ee5\u6539\u53d8\u4ee5\u592a\u574a\u865a\u62df\u673a\u72b6\u6001\u7684\u6700\u5c0f\u539f\u5b50\u64cd\u4f5c\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u7684\u4fe1\u606f\u4f1a\u88ab\u8bb0\u5f55\u4e0b\u6765\uff0c\u5e76\u4e14\u53ef\u4ee5\u5b58\u50a8\u4e3aEVM\u6267\u884c\u8ddf\u8e2a\uff0c\u6216\u8005\u7b80\u79f0  \u8ddf\u8e2a\uff08trace\uff09 \uff0c\u5728Etherscan\u4e0a\u79f0\u4e3a\u201d\u5185\u90e8\u4ea4\u6613\u201c\u3002 \n \u66f4\u591a\u5185\u5bb9\u8bf7\u9605\u8bfb \u8fd9\u91cc  (https://medium.com/chainalysis/ethereum-traces-not-transactions-3f0533d26aa) . \n \n \n \n \u5217\u540d \n \u6570\u636e\u7c7b\u578b \n \u8bf4\u660e \n \n \n \n \n block_time \n timestamptz \n \u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n tx_success \n boolean \n \u663e\u793a\u4ea4\u6613\u662f\u5426\u6210\u529f\u7684\u771f/\u5047\u503c \n \n \n success \n boolean \n \u663e\u793a\u8ddf\u8e2a\u64cd\u4f5c\u662f\u5426\u6210\u529f\u7684\u771f/\u5047\u503c \n \n \n block_hash \n bytea \n \u8be5\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n block_number \n int8 \n \u533a\u5757\u94fe\u7684\u957f\u5ea6\uff08\u4ee5\u5757\u4e3a\u5355\u4f4d\uff09 \n \n \n tx_hash \n bytea \n \u4e8b\u4ef6\u7684\u4ea4\u6613\u54c8\u5e0c \n \n \n from \n bytea \n \u53d1\u9001\u8005\u7684\u5730\u5740 \n \n \n to \n bytea \n \u63a5\u6536\u8005\u7684\u5730\u5740\u3002\u5f53\u662f\u5408\u7ea6\u521b\u5efa\u4ea4\u6613\u65f6\u4e3aNULL \n \n \n value \n numeric \n \u5728\u6b64\u4ea4\u6613\u4e2d\u53d1\u9001\u7684\u4ee5 wei \u4e3a\u5355\u4f4d\u7684\u4ee5\u592a\u5e01\u6570\u91cf\u3002 \n \n \n gas \n numeric \n gas \u9650\u5236 \n \n \n gas_used \n numeric \n \u4ee5 wei \u4e3a\u5355\u4f4d\u7684\u4ea4\u6613\u6d88\u8017\u7684 gas \n \n \n tx_index \n numeric \n \u4ea4\u6613\u7d22\u5f15 \n \n \n trace_address \n array \n \u8c03\u7528\u56fe\u68ee\u6797\u4e2d\u7684\u8ddf\u8e2a\u5730\u5740\u3002\u4f8b\u5982\uff0c[0, 2, 1] \u662f [0, 2, 1, 0] \u7684\u7236\u7ea7\u3002 \n \n \n sub_traces \n numeric \n \u5b50\u8ddf\u8e2a(trace)\u7684\u6570\u91cf \n \n \n type \n text \n \u63cf\u8ff0\u5728\u6b64trace\u4e2d\u6267\u884c\u7684\u64cd\u4f5c\u7c7b\u578b\uff0c\u53ef\u4ee5\u662f  reward ,  create ,  call  or  suicide \u3002 \n \n \n address \n bytea \n \u5f53\u7c7b\u578btype\u662f suicide  or  create \u88ab\u8c03\u7528\u7684\u5408\u7ea6 \n \n \n code \n bytea \n \u90e8\u7f72\u65b0\u5408\u7ea6\u7684\u5b50\u8282\u4ee3\u7801\u6570\u636e\uff0c\u53ea\u5305\u62ectype\u662f create \u7684\u6570\u636e\u3002 \n \n \n call_type \n bytea \n \u53ef\u4ee5\u662f  staticcall ,  delegatecall  or  call . \u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u8003  \u8fd9\u91cc  (https://medium.com/coinmonks/delegatecall-calling-another-contract-function-in-solidity-b579f804178c) .  \n \n \n input \n bytea \n \u5bf9\u53e6\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6\u7684\u8c03\u7528\u7684\u5b57\u8282\u7801 \n \n \n output \n bytea \n \u88ab\u8c03\u7528\u7684\u667a\u80fd\u5408\u7ea6\u7684\u5b57\u8282\u7801 \n \n \n refund_address \n bytea \n \u5305\u62ec\u7c7b\u578b type  \u662f  suicide \u7684\u6570\u636e\uff0c\u7528\u4e8e\u6307\u5b9a\u5c06\u4ee5\u592a\u574a\u4f59\u989d\u53d1\u9001\u5230\u54ea\u91cc \n \n \n \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/gnosis-chain-xdai/traces/#gnosistraces"}
{"content": "traces\u4e2d\u7684gas\u4f7f\u7528 \u00b6 \n \n \u4e00\u4e2atrace\u4e2d\u7684 gas_used \u5305\u62ec\u8be5trace\u548c\u5b83\u6240\u6709\u7684\u5b50trace\u6240\u6d88\u8017\u7684gas\u3002 \n \u6700\u521d\u8c03\u7528\u7684 gas_used \u4e0d\u5305\u62ec\u9996\u5148\u8fdb\u884c\u8c03\u7528\u7684\u8d39\u7528\u3002 \n \u60a8\u9700\u8981\u628a21000\u4e2agas\u5355\u4f4d+\u53d1\u90010\u7684\u8d39\u7528+\u975e\u96f6\u5b57\u8282\u7684\u8d39\u7528\u52a0\u5230\u9876\u90e8trace\u7684 gas_used \u503c\u4e2d\uff0c\u4ee5\u5f97\u51fa\"\u771f\u6b63\u7684\" gas_used \u503c\u3002 \n \u5173\u4e8e\u8fd9\u4e2a\u95ee\u9898\u7684\u66f4\u591a\u9605\u8bfb\u8bf7\u53c2\u8003\u8fd9\u4e2a stackexchange\u6761\u76ee  (https://ethereum.stackexchange.com/questions/31443/what-do-the-response-values-of-a-parity-trace-transaction-call-actually-repres) \n \u5728dune\u4e2d\u505a\u7684\u4e00\u4e2a\u67e5\u8be2\u3002 https://dune.com/queries/895857  (https://dune.com/queries/895857)", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/gnosis-chain-xdai/traces/#tracesgas"}
{"content": "Skip to content\n          (#citing-dune) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/resources/index.md) \n Resources \n A collection of resources for the Dune community. \n \n \n \n Citing Dune \u00b6  (#citing-dune) \n A guide to citing Dune in your research papers or projects. \n \u2192 Citing Dune  (citing-dune/) \n \n \n Find a Wizard \u00b6  (#find-a-wizard) \n Discover and connect with skilled builders and researchers in the Ethereum ecosystem. \n \u2192 Find a Wizard  (dune-bounties/) \n \n \n Press Kit \u00b6  (#press-kit) \n Logos, images, and other resources to use when writing about or promoting Dune Analytics. \n \u2192 Press Kit  (press-kit/) \n \n \n Support & Feedback \u00b6  (#support-feedback) \n Have questions or feedback about Dune Analytics? Get in touch with the team here. \n \u2192 Support & Feedback  (support-feedback/)", "url": "https://dune.com/docs/resources/"}
{"content": "Skip to content\n          (#prerequisite) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/learning/conduct-network-analysis.md) \n Farcaster Social Network Analysis \n \n Create an API key  (#environment-setup-for-dune-api-python-client)  to follow along the guide. \n To obtain an API key: \n \n Go to Settings \u2192 API. \n Select \"Create new API key\". \n Copy the entire key. \n \n \n \n In the age of digital interconnectivity, platforms like Facebook and Instagram leverage the intricate webs of user relationships to drive their strategies, from identifying top influencers to deploying targeted ads to deciding what content to recommend on user's feed. Yet, obtaining and analyzing real-world social network data is no small feat. For those with a budding interest in graph theory or network analysis, this guide will pave your path. Delve deep as we walk you through analyzing data from Farcaster, a fully decentralized social network, using Python and the Dune API. It's a unique opportunity that many platforms guard closely. \n \ud83d\udc63 In this guide, we'll cover the basics of network analysis in four parts: (1) \ud83d\udcca summary statistics, (2) \ud83d\udccf centrality measures, (3) \ud83d\udd0d graph sampling, and (4) \ud83c\udfd8\ufe0f community detection. \n \ud83d\udccc Dive into our  Github notebook  (https://github.com/duneanalytics/python-notebook-examples/blob/main/social_network/Farcaster%20Network%20Analysis%20(Summary%20Stats%2C%20Centrality%20Measures%2C%20Sampling%2C%20%26%20Community%20Detection).ipynb)  to actively follow the code as you navigate this guide. \n \n Note \n \n \n This example uses the Dune Python client, a framework for interacting with Dune's official API. Dune Client can  be found here  (https://github.com/duneanalytics/dune-client)  and installed by doing  pip install dune-client \n \n \n Credit consumption for each Dune API action is estimated and printed out with a \u26fd symbol. To learn more about credit,  please visit this page  (../how-tos/credit-system-on-dune/) . \n \n \n The network was constructed using one month of Farcaster data, ending on October 23, 2023. \n \n \n \n ", "url": "https://dune.com/docs/learning/conduct-network-analysis/"}
{"content": "Skip to content\n          (#what-is-a-sankey-diagram) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/learning/create-sankey-diagram.md) \n Create Sankey Diagram \n While Dune's ability to easily execute queries and make visualizations are pretty neat, as of today (Sep. 29, 2023), you are not able to create Sankey diagrams on Dune yet. So in this guide, we will quickly show you how to use Dune API to fetch data and Python libraries to make Sankey diagrams. \n \n Note \n This example uses the Dune Python client, which can  be found here  (https://github.com/duneanalytics/dune-client)  and installed by doing  pip install dune-client \n \n ", "url": "https://dune.com/docs/learning/create-sankey-diagram/"}
{"content": "Skip to content\n          (#transferring-query-ownership) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/learning/how-tos/transfer-ownership.md) \n Transfer Ownership \n This guide explains how to transfer ownership of content, including queries and dashboards, among different users and team accounts. \n ", "url": "https://dune.com/docs/learning/how-tos/transfer-ownership/"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/learning/how-tos/share-your-query.md) \n Share your query \n \ud83d\udcca Eureka! With your sparkling query results and radiant charts in hand, it's showtime! Ready to dazzle your teammates or light up social media? \n \n Sharing is easy. Head to the bottom right, hit the \"embed\" button, snatch up that URL, and sprinkle your query wizardry wherever your heart desires! \ud83c\udf0c", "url": "https://dune.com/docs/learning/how-tos/share-your-query/"}
{"content": "Skip to content\n          (#via-url) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/learning/how-tos/share-dune-content.md) \n Share Dune Content \n In this guide, we'll outline various methods to share your Dune content. \n ", "url": "https://dune.com/docs/learning/how-tos/share-dune-content/"}
{"content": "Skip to content\n          (#discover-page) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/learning/how-tos/search-for-content.md) \n Search for Content on Dune \n With over 100K dashboards, 700 saved queries, and a continuous influx of new content each week, navigating Dune can sometimes feel overwhelming. However, with a grasp of the basics, finding what you need becomes a breeze. \n In this guide, we'll walk you through the essentials of searching for content on Dune, focusing on three primary areas: \n \n Discover page \n Global search bar \n Library \n \n ", "url": "https://dune.com/docs/learning/how-tos/search-for-content/"}
{"content": "\u4e8b\u4ef6\u65e5\u5fd7\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/gnosis-chain-xdai/event-logs/#_1"}
{"content": "gnosis.logs \u00b6 \n \u8be5\u8868\u5b58\u50a8\u6240\u6709\u7531\u667a\u80fd\u5408\u7ea6\u4ea7\u751f\u7684\u65e5\u5fd7\u3002\u5b83\u5bf9\u67e5\u8be2\u5c1a\u672a\u89e3\u6790\u7684\u5408\u7ea6\u5f88\u6709\u7528\uff0c\u5305\u62ec\u90a3\u4e9b\u56e0\u4e3a\u4ee3\u7801\u672a\u516c\u5f00\u7684\u667a\u80fd\u5408\u7ea6\u3002 \n \u65e5\u5fd7\u662f\u4e00\u79cd\u4f18\u96c5\u7684\u65b9\u5f0f\uff0c\u53ef\u4ee5\u7528\u6781\u5c11\u91cf\u7684\u624b\u7eed\u8d39\uff0c\u5728EVM\u533a\u5757\u94fe\u4e0a\u5b58\u50a8\u6781\u5c11\u91cf\u7684\u6570\u636e\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u4e8b\u4ef6\u65e5\u5fd7\u5bf9\u4e8e\u8ba9\u5176\u4ed6\u4eba\u77e5\u9053\u53d1\u751f\u4e86\u4ec0\u4e48\u4e8b\u662f\u5f88\u6709\u7528\u7684\uff0c\u800c\u4e0d\u9700\u8981\u4ed6\u4eec\u5355\u72ec\u67e5\u8be2\u5408\u7ea6\u3002 \n \u66f4\u591a\u4fe1\u606f\u8bf7\u9605\u8bfb  \u8fd9\u7bc7\u6587\u6863  (https://medium.com/mycrypto/understanding-event-logs-on-the-ethereum-blockchain-f4ae7ba50378) . \n Note: \u6211\u4eec\u7684topic\u7d22\u5f15\u4f1a\u4fbf\u5b9c, \u6240\u4ee5  topic0  \u4f1a\u663e\u793a\u6210  topic1 ,  topic1  \u663e\u793a\u6210  topic2  \uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \n \n \n \n \u5217\u540d \n \u6570\u636e\u7c7b\u578b \n \u8bf4\u660e \n \n \n \n \n block_hash \n bytea \n \u8be5\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n block_number \n int8 \n \u533a\u5757\u94fe\u7684\u9ad8\u5ea6\uff08\u4ee5\u5757\u4e3a\u5355\u4f4d\uff09 \n \n \n block_time \n timestamptz \n \u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n contract_address \n bytea \n \u53d1\u51fa\u65e5\u5fd7\u7684\u5408\u7ea6\u5730\u5740 \n \n \n topic1 \n bytea \n \u5bf9\u4e8b\u4ef6\u58f0\u660e\u51fd\u6570\u7528keccak256\u51fd\u6570\u8fd0\u7b97\u540e\u7684\u54c8\u5e0c\u503c \n \n \n topic2 \n bytea \n \u4e8b\u4ef6\u7684\u7d22\u5f15\u4e3b\u98982 \n \n \n topic3 \n bytea \n \u4e8b\u4ef6\u7684\u7d22\u5f15\u4e3b\u98983 \n \n \n topic4 \n bytea \n \u4e8b\u4ef6\u7684\u7d22\u5f15\u4e3b\u98984 \n \n \n data \n bytea \n \u4e8b\u4ef6\u4e2d\u672a\u7d22\u5f15\u7684\u6570\u636e\u503c \n \n \n tx_hash \n bytea \n \u4e8b\u4ef6\u7684\u4ea4\u6613\u54c8\u5e0c \n \n \n index \n numeric \n \u8fd9\u4e2alog\u5728\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e (\u6309\u65e5\u5fd7\u6267\u884c\u7684\u987a\u5e8f\u7d2f\u8ba1) \n \n \n tx_index \n numeric \n \u6539transaction\u4ea4\u6613\u5728\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e\uff08 \u6309\u4ea4\u6613\u6267\u884c\u7684\u987a\u5e8f\u7d2f\u8ba1)", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/gnosis-chain-xdai/event-logs/#gnosislogs"}
{"content": "\u533a\u5757\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/gnosis-chain-xdai/blocks/#_1"}
{"content": "gnosis.blocks \u00b6 \n \u533a\u5757\u662f\u533a\u5757\u94fe\u7684\u57fa\u672c\u5355\u5143\uff0c\u4e00\u4e2a\u533a\u5757\u5305\u542b\u7684\u4ea4\u6613\u8bb0\u5f55\u4f1a\u589e\u91cf\u7684\u6539\u53d8EVM\u7684\u72b6\u6001\uff0c\u4e00\u4e2a\u5757\u4e2d\u7684\u4ea4\u6613\u53ea\u80fd\u4e00\u4e2a\u63a5\u4e00\u4e2a\u5730\u6267\u884c\uff0c\u4e0d\u80fd\u5e76\u884c\u6267\u884c\u3002 \n \n \n \n \u5217\u540d \n \u6570\u636e\u7c7b\u578b \n \u8bf4\u660e \n \n \n \n \n time \n timestamptz \n \u533a\u5757\u88ab\u77ff\u5de5\u9a8c\u8bc1\u7684\u65f6\u95f4. \n \n \n number \n numeric \n \u533a\u5757\u7684\u9ad8\u5ea6 \n \n \n hash \n bytea \n \u533a\u5757\u7684\u552f\u4e00id \n \n \n parent hash \n bytea \n \u524d\u4e00\u4e2a\u533a\u5757\u7684\u552f\u4e00id \n \n \n gas_limit \n numeric \n \u5f53\u524d\u533a\u5757\u7684gas\u9650\u5236 \n \n \n gas_used \n numeric \n \u5f53\u524d\u533a\u5757\u4e2d\u4f7f\u7528\u7684gas \n \n \n miner \n bytea \n \u77ff\u5de5\u7684\u5730\u5740 \n \n \n difficulty \n numeric \n \u5f00\u91c7\u533a\u5757\u6240\u9700\u7684\u96be\u5ea6\u503c \n \n \n total_difficulty \n numeric \n \u76f4\u5230\u8fd9\u4e2a\u533a\u5757\u7684\u603b\u96be\u5ea6\u503c \n \n \n nonce \n bytea \n n/a \n \n \n size \n numeric \n \u6b64\u5757\u7684\u5927\u5c0f\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\uff08\u53d7\u9650\u4e8e gas limit\uff09 \n \n \n base_fee_per_gas \n numeric \n \u6b64\u533a\u5757\u7684\u57fa\u672c\u8d39\u7528 (\u7531  EIP1559  (https://eips.ethereum.org/EIPS/eip-1559) \u5f15\u5165)", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/gnosis-chain-xdai/blocks/#gnosisblocks"}
{"content": "Gnosis Chain (xDai) \u00b6 \n Gnosis Chain\u7684\u524d\u751f\u662fxDAI\uff0c\u8fd9\u662f\u4e00\u4e2a\u72ec\u7279\u7684\u7cfb\u7edf\uff0c\u5176\u4e2d\u539f\u751f\u6536\u8d39\u8d27\u5e01\u662f\u7a33\u5b9a\u5e01 \u7684 \u6865 \u63a5 \u7248 \u672c \u3002 \u8be5 \u94fe \u91c7 \u7528 \u72ec \u7279 \u7684 \u53cc \u4ee3 \u5e01 \u6a21 \u5f0f \uff1b \u662f \u7528 \u4e8e \u4ea4 \u6613 \u3001 \u652f \u4ed8 \u548c \u6536 \u8d39 \u7684 \u7a33 \u5b9a \u4ee3 \u5e01 \uff1b \u7531 \u7684 \u6865 \u63a5 \u7248 \u672c \u3002 \u8be5 \u94fe \u91c7 \u7528 \u72ec \u7279 \u7684 \u53cc \u4ee3 \u5e01 \u6a21 \u5f0f \uff1b \u662f \u7528 \u4e8e \u4ea4 \u6613 \u3001 \u652f \u4ed8 \u548c \u6536 \u8d39 \u7684 \u7a33 \u5b9a \u4ee3 \u5e01 \uff1b \u7531 D A I \u7684 \u6865 \u63a5 \u7248 \u672c \u3002 \u8be5 \u94fe \u91c7 \u7528 \u72ec \u7279 \u7684 \u53cc \u4ee3 \u5e01 \u6a21 \u5f0f \uff1b x D a i \u662f \u7528 \u4e8e \u4ea4 \u6613 \u3001 \u652f \u4ed8 \u548c \u6536 \u8d39 \u7684 \u7a33 \u5b9a \u4ee3 \u5e01 \uff1b P O S \u7531 GNO\u4e0e\u5171\u8bc6\u5c42Gnosis Beacon Chain\u63d0\u4f9b\u3002 \n Gnosis Chain\u8fd8\u6ca1\u6709\u5b8c\u6210\u5411POS\u7cfb\u7edf\u7684\u8fc7\u6e21\uff0c\u4e0e\u6b64\u540c\u65f6\uff0c\u8be5\u94fe\u7531POSDAO\u7ef4\u62a4\u3002\u60a8\u53ef\u4ee5\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u8fd9\u4e2a\u8fc7\u6e21\u72b6\u6001\u7684\u4fe1\u606f \u8fd9\u91cc  (https://developers.gnosischain.com/for-validators/consensus) \u3002 \n Gnosis Chain\u5c06\u7ee7\u7eed\u63a8\u8fdbxDai\u7684\u89c4\u5212\uff0c\u5c3d\u53ef\u80fd\u5730\u9075\u5faaEthereum\u7684\u8def\u7ebf\u56fe\uff0c\u672a\u6765\u7684\u76ee\u6807\u5305\u62ec\uff1a \n \n \u5728Gnosis Chain\u548cEthereum\u4e4b\u95f4\u63d0\u4f9b\u6700\u9ad8\u7a0b\u5ea6\u7684\u517c\u5bb9\u6027 \n \u5efa\u7acb\u4e00\u4e2aGnosis Beacon Chain\uff08\u4e3a\u4ee5\u540e\u7684\u5408\u5e76\u505a\u51c6\u5907\uff09 \n \u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u53d1\u5c55\u4e00\u4e2a\u7c7b\u4f3c\u4e8eKusama\u5bf9Polkadot\u7684\u4f5c\u7528\u3002 \n \n Gnosis Chain\u9075\u5faaEthereum Mainnet\u7684\u6240\u6709\u6807\u51c6\u548c\u5347\u7ea7\uff0c\u5728Dune\u4e0a\u7684\u67e5\u8be2\u662f\u5b8c\u5168\u4e00\u6837\u7684\u3002 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/gnosis-chain-xdai/#gnosis-chain-xdai"}
{"content": "Raw data tables \u00b6 \n \n \n Blocks  (blocks/) \n Transactions  (transactions/) \n Event logs  (event-logs/) \n Traces  (traces/)", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/gnosis-chain-xdai/#raw-data-tables"}
{"content": "\u4ea4\u6613\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/ethereum-mainnet/transactions/#_1"}
{"content": "ethereum.transactions \u00b6 \n \u4ea4\u6613\u662f\u7531\u7528\u6237\u8d26\u6237\u53d1\u9001\u7684\u4ea4\u6613\u7b7e\u540d\u89e6\u53d1\u7684\uff0c\u4e00\u4e2a\u8d26\u6237\u4f1a\u53d1\u8d77\u4e00\u4e2a\u4ea4\u6613\u6765\u66f4\u65b0\u4ee5\u592a\u574a\u7f51\u7edc\u7684\u72b6\u6001\uff0c\u4ea4\u6613\u603b\u662f\u6765\u81ea\u5916\u90e8\u8d26\u6237\uff08EOA\uff09\u7684\u6388\u6743\uff0c\u667a\u80fd\u5408\u7ea6\u4e0d\u80fd\u53d1\u8d77\u4ea4\u6613\u3002 \n \u4ea4\u6613\u4f1a\u88ab\u5e7f\u64ad\u5230\u6574\u4e2a\u7f51\u7edc\uff0c\u4efb\u4f55\u8282\u70b9\u90fd\u53ef\u4ee5\u7528\u5e7f\u64ad\u7684\u65b9\u5f0f\uff0c\u8bf7\u6c42\u5728EVM\u4e0a\u6267\u884c\u4e8b\u52a1\uff0c\u5728\u6b64\u4e4b\u540e\uff0c\u77ff\u5de5\u5c06\u6267\u884c\u8fd9\u7b14\u4ea4\u6613\uff0c\u5e76\u5c06\u7ed3\u679c\u72b6\u6001\u4f20\u64ad\u5230\u7f51\u7edc\u4e2d\u7684\u5176\u5b83\u8282\u70b9\u3002 \n \u66f4\u591a\u4fe1\u606f\u8bf7\u9605\u8bfb\u4ee5\u592a\u574a\u5b98\u65b9\u6587\u6863  \u8fd9\u91cc  (https://ethereum.org/en/developers/docs/transactions) . \n \n \n \n \u5217\u540d \n \u6570\u636e\u7c7b\u578b \n \u8bf4\u660e \n \n \n \n \n block_time \n timestamptz \n \u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n nonce \n numeric \n \u8be5\u94b1\u5305\u72ec\u6709\u7684\u4ea4\u6613\u968f\u673a\u6570 \n \n \n index \n numeric \n \u533a\u5757\u4e2d\u7684\u4ea4\u6613\u7d22\u5f15\u4f4d\u7f6e \n \n \n success \n boolean \n \u663e\u793a\u4ee3\u4ea4\u6613\u662f\u5426\u6210\u529f\u7684\u771f/\u5047\u503c \n \n \n from \n bytea \n \u4ea4\u6613\u53d1\u9001\u8005\u7684\u5730\u5740 \n \n \n to \n bytea \n \u63a5\u6536\u8005\u7684\u5730\u5740\u3002\u5f53\u662f\u5408\u7ea6\u521b\u5efa\u4ea4\u6613\u65f6\u4e3aNULL \n \n \n value \n numeric \n \u5728\u6b64\u4ea4\u6613\u4e2d\u53d1\u9001\u7684\u4ee5 wei \u4e3a\u5355\u4f4d\u7684\u4ee5\u592a\u5e01\u6570\u91cf\u3002\u8bf7\u6ce8\u610f\uff0cerc20 \u4ee3\u5e01\u4e0d\u4f1a\u51fa\u73b0\u5728\u8fd9\u91cc\u3002 \n \n \n block_number \n int8 \n \u533a\u5757\u94fe\u7684\u9ad8\u5ea6\uff08\u4ee5\u5757\u4e3a\u5355\u4f4d\uff09 \n \n \n block_hash \n bytea \n \u8be5\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n gas_limit \n numeric \n \u4ee5 wei \u4e3a\u5355\u4f4d\u7684 gas \u9650\u5236 \n \n \n gas_price \n numeric \n \u4ee5 wei \u4e3a\u5355\u4f4d\u7684 gas \u4ef7\u683c \n \n \n gas_used \n numeric \n \u4ee5 wei \u4e3a\u5355\u4f4d\u7684\u4ea4\u6613\u6d88\u8017\u7684 gas \n \n \n data \n bytea \n \u4e00\u4e2a16\u8fdb\u5236\u7684\u7f16\u7801\u540e\u7684\u6570\u636e\uff0c\u6216\u8005\u667a\u80fd\u5408\u7ea6\u6307\u4ee4\u8bf4\u660e\uff0c\u53ef\u4ee5\u4e3a\u7a7a \n \n \n hash \n bytea \n \u4ea4\u6613\u54c8\u5e0c \n \n \n type \n text \n \u4ea4\u6613\u7c7b\u578b\uff1a Legacy ,  AccessList , \u6216\u8005 DynamicFee \n \n \n access_list \n jsonb \n \u4ea4\u6613\u6253\u7b97\u8bbf\u95ee\u7684\u5730\u5740\u548c\u5b58\u50a8\u5bc6\u94a5\u7684\u5217\u8868\uff0c\u53c2\u89c1  EIP2930  (https://eips.ethereum.org/EIPS/eip-2930) \u3002\u9002\u7528\u4e8e\u4ea4\u6613\u7c7b\u578b\u4e3a  AccessLis t \u6216  DynamicFee  \u7684\u60c5\u51b5 \n \n \n max_fee_per_gas \n numeric \n \u4ea4\u6613\u53d1\u9001\u8005\u613f\u610f\u652f\u4ed8\u7684\u6bcf\u5355\u4f4d gas \u7684\u6700\u9ad8\u8d39\u7528\u603b\u989d\uff08\u7531  EIP1559  (https://eips.ethereum.org/EIPS/eip-1559) \u5f15\u5165) \n \n \n max_priority_fee_per_gas \n numeric \n \u4ea4\u6613\u53d1\u9001\u8005\u613f\u610f\u5411\u77ff\u5de5\u652f\u4ed8\u7684\u6bcf\u5355\u4f4d gas \u7684\u6700\u9ad8\u8d39\u7528\uff0c\u4ee5\u6fc0\u52b1\u4ed6\u4eec\u5305\u542b\u4ed6\u4eec\u7684\u4ea4\u6613 \uff08\u7531  EIP1559  (https://eips.ethereum.org/EIPS/eip-1559) \u5f15\u5165) \n \n \n priority_fee_per_gas \n numeric \n \u672c\u6b21\u4ea4\u6613\u652f\u4ed8\u7ed9\u77ff\u5de5\u7684\u4f18\u5148\u6743\u8d39\u7528 \uff08\u7531  EIP1559  (https://eips.ethereum.org/EIPS/eip-1559) \u5f15\u5165)", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/ethereum-mainnet/transactions/#ethereumtransactions"}
{"content": "\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/ethereum-mainnet/traces/#_1"}
{"content": "ethereum.traces \u00b6 \n Traces\u662f\u4ea4\u6613\u4e2d\u53ef\u4ee5\u6539\u53d8\u4ee5\u592a\u574a\u865a\u62df\u673a\u72b6\u6001\u7684\u6700\u5c0f\u539f\u5b50\u64cd\u4f5c\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u7684\u4fe1\u606f\u4f1a\u88ab\u8bb0\u5f55\u4e0b\u6765\uff0c\u5e76\u4e14\u53ef\u4ee5\u5b58\u50a8\u4e3aEVM\u6267\u884c\u8ddf\u8e2a\uff0c\u6216\u8005\u7b80\u79f0  \u8ddf\u8e2a\uff08trace\uff09 \uff0c\u5728Etherscan\u4e0a\u79f0\u4e3a\u201d\u5185\u90e8\u4ea4\u6613\u201c\u3002 \n \u66f4\u591a\u5185\u5bb9\u8bf7\u9605\u8bfb \u8fd9\u91cc  (https://medium.com/chainalysis/ethereum-traces-not-transactions-3f0533d26aa) . \n \n \n \n \u5217\u540d \n \u6570\u636e\u7c7b\u578b \n \u8bf4\u660e \n \n \n \n \n block_time \n timestamptz \n \u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n tx_success \n boolean \n \u663e\u793a\u4ea4\u6613\u662f\u5426\u6210\u529f\u7684\u771f/\u5047\u503c \n \n \n success \n boolean \n \u663e\u793a\u8ddf\u8e2a\u64cd\u4f5c\u662f\u5426\u6210\u529f\u7684\u771f/\u5047\u503c \n \n \n block_hash \n bytea \n \u8be5\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n block_number \n int8 \n \u533a\u5757\u94fe\u7684\u957f\u5ea6\uff08\u4ee5\u5757\u4e3a\u5355\u4f4d\uff09 \n \n \n tx_hash \n bytea \n \u4e8b\u4ef6\u7684\u4ea4\u6613\u54c8\u5e0c \n \n \n from \n bytea \n \u53d1\u9001\u8005\u7684\u5730\u5740 \n \n \n to \n bytea \n \u63a5\u6536\u8005\u7684\u5730\u5740\u3002\u5f53\u662f\u5408\u7ea6\u521b\u5efa\u4ea4\u6613\u65f6\u4e3aNULL \n \n \n value \n numeric \n \u5728\u6b64\u4ea4\u6613\u4e2d\u53d1\u9001\u7684\u4ee5 wei \u4e3a\u5355\u4f4d\u7684\u4ee5\u592a\u5e01\u6570\u91cf\u3002 \n \n \n gas \n numeric \n gas \u9650\u5236 \n \n \n gas_used \n numeric \n \u4ee5 wei \u4e3a\u5355\u4f4d\u7684\u4ea4\u6613\u6d88\u8017\u7684 gas \n \n \n tx_index \n numeric \n \u4ea4\u6613\u7d22\u5f15 \n \n \n trace_address \n array \n \u8c03\u7528\u56fe\u68ee\u6797\u4e2d\u7684\u8ddf\u8e2a\u5730\u5740\u3002\u4f8b\u5982\uff0c[0, 2, 1] \u662f [0, 2, 1, 0] \u7684\u7236\u7ea7\u3002 \n \n \n sub_traces \n numeric \n \u5b50\u8ddf\u8e2a(trace)\u7684\u6570\u91cf \n \n \n type \n text \n \u63cf\u8ff0\u5728\u6b64trace\u4e2d\u6267\u884c\u7684\u64cd\u4f5c\u7c7b\u578b\uff0c\u53ef\u4ee5\u662f  reward ,  create ,  call  or  suicide \u3002 \n \n \n address \n bytea \n \u5f53\u7c7b\u578btype\u662f suicide  or  create \u88ab\u8c03\u7528\u7684\u5408\u7ea6 \n \n \n code \n bytea \n \u90e8\u7f72\u65b0\u5408\u7ea6\u7684\u5b50\u8282\u4ee3\u7801\u6570\u636e\uff0c\u53ea\u5305\u62ectype\u662f create \u7684\u6570\u636e\u3002 \n \n \n call_type \n bytea \n \u53ef\u4ee5\u662f  staticcall ,  delegatecall  or  call . \u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u8003  \u8fd9\u91cc  (https://medium.com/coinmonks/delegatecall-calling-another-contract-function-in-solidity-b579f804178c) .  \n \n \n input \n bytea \n \u5bf9\u53e6\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6\u7684\u8c03\u7528\u7684\u5b57\u8282\u7801 \n \n \n output \n bytea \n \u88ab\u8c03\u7528\u7684\u667a\u80fd\u5408\u7ea6\u7684\u5b57\u8282\u7801 \n \n \n refund_address \n bytea \n \u5305\u62ec\u7c7b\u578b type  \u662f  suicide \u7684\u6570\u636e\uff0c\u7528\u4e8e\u6307\u5b9a\u5c06\u4ee5\u592a\u574a\u4f59\u989d\u53d1\u9001\u5230\u54ea\u91cc \n \n \n \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/ethereum-mainnet/traces/#ethereumtraces"}
{"content": "traces\u4e2d\u7684gas\u4f7f\u7528 \u00b6 \n \n \u4e00\u4e2atrace\u4e2d\u7684 gas_used \u5305\u62ec\u8be5trace\u548c\u5b83\u6240\u6709\u7684\u5b50trace\u6240\u6d88\u8017\u7684gas\u3002 \n \u6700\u521d\u8c03\u7528\u7684 gas_used \u4e0d\u5305\u62ec\u9996\u5148\u8fdb\u884c\u8c03\u7528\u7684\u8d39\u7528\u3002 \n \u60a8\u9700\u8981\u628a21000\u4e2agas\u5355\u4f4d+\u53d1\u90010\u7684\u8d39\u7528+\u975e\u96f6\u5b57\u8282\u7684\u8d39\u7528\u52a0\u5230\u9876\u90e8trace\u7684 gas_used \u503c\u4e2d\uff0c\u4ee5\u5f97\u51fa\"\u771f\u6b63\u7684\" gas_used \u503c\u3002 \n \u5173\u4e8e\u8fd9\u4e2a\u95ee\u9898\u7684\u66f4\u591a\u9605\u8bfb\u8bf7\u53c2\u8003\u8fd9\u4e2a stackexchange\u6761\u76ee  (https://ethereum.stackexchange.com/questions/31443/what-do-the-response-values-of-a-parity-trace-transaction-call-actually-repres) \n \u5728dune\u4e2d\u505a\u7684\u4e00\u4e2a\u67e5\u8be2\u3002 https://dune.com/queries/895857  (https://dune.com/queries/895857)", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/ethereum-mainnet/traces/#tracesgas"}
{"content": "\u4e8b\u4ef6\u65e5\u5fd7\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/ethereum-mainnet/event-logs/#_1"}
{"content": "ethereum.logs \u00b6 \n \u8be5\u8868\u5b58\u50a8\u6240\u6709\u7531\u667a\u80fd\u5408\u7ea6\u4ea7\u751f\u7684\u65e5\u5fd7\u3002\u5b83\u5bf9\u67e5\u8be2\u5c1a\u672a\u89e3\u6790\u7684\u5408\u7ea6\u5f88\u6709\u7528\uff0c\u5305\u62ec\u90a3\u4e9b\u56e0\u4e3a\u4ee3\u7801\u672a\u516c\u5f00\u7684\u667a\u80fd\u5408\u7ea6\u3002 \n \u65e5\u5fd7\u662f\u4e00\u79cd\u4f18\u96c5\u7684\u65b9\u5f0f\uff0c\u53ef\u4ee5\u7528\u6781\u5c11\u91cf\u7684\u624b\u7eed\u8d39\uff0c\u5728EVM\u533a\u5757\u94fe\u4e0a\u5b58\u50a8\u6781\u5c11\u91cf\u7684\u6570\u636e\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u4e8b\u4ef6\u65e5\u5fd7\u5bf9\u4e8e\u8ba9\u5176\u4ed6\u4eba\u77e5\u9053\u53d1\u751f\u4e86\u4ec0\u4e48\u4e8b\u662f\u5f88\u6709\u7528\u7684\uff0c\u800c\u4e0d\u9700\u8981\u4ed6\u4eec\u5355\u72ec\u67e5\u8be2\u5408\u7ea6\u3002 \n \u66f4\u591a\u4fe1\u606f\u8bf7\u9605\u8bfb  \u8fd9\u7bc7\u6587\u6863  (https://medium.com/mycrypto/understanding-event-logs-on-the-ethereum-blockchain-f4ae7ba50378) . \n Note: \u6211\u4eec\u7684topic\u7d22\u5f15\u4f1a\u4fbf\u5b9c, \u6240\u4ee5  topic0  \u4f1a\u663e\u793a\u6210  topic1 ,  topic1  \u663e\u793a\u6210  topic2  \uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \n \n \n \n \u5217\u540d \n \u6570\u636e\u7c7b\u578b \n \u8bf4\u660e \n \n \n \n \n block_hash \n bytea \n \u8be5\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n block_number \n int8 \n \u533a\u5757\u94fe\u7684\u9ad8\u5ea6\uff08\u4ee5\u5757\u4e3a\u5355\u4f4d\uff09 \n \n \n block_time \n timestamptz \n \u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n contract_address \n bytea \n \u53d1\u51fa\u65e5\u5fd7\u7684\u5408\u7ea6\u5730\u5740 \n \n \n topic1 \n bytea \n \u5bf9\u4e8b\u4ef6\u58f0\u660e\u51fd\u6570\u7528keccak256\u51fd\u6570\u8fd0\u7b97\u540e\u7684\u54c8\u5e0c\u503c \n \n \n topic2 \n bytea \n \u4e8b\u4ef6\u7684\u7d22\u5f15\u4e3b\u98982 \n \n \n topic3 \n bytea \n \u4e8b\u4ef6\u7684\u7d22\u5f15\u4e3b\u98983 \n \n \n topic4 \n bytea \n \u4e8b\u4ef6\u7684\u7d22\u5f15\u4e3b\u98984 \n \n \n data \n bytea \n \u4e8b\u4ef6\u4e2d\u672a\u7d22\u5f15\u7684\u6570\u636e\u503c \n \n \n tx_hash \n bytea \n \u4e8b\u4ef6\u7684\u4ea4\u6613\u54c8\u5e0c \n \n \n index \n numeric \n \u8fd9\u4e2alog\u5728\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e (\u6309\u65e5\u5fd7\u6267\u884c\u7684\u987a\u5e8f\u7d2f\u8ba1) \n \n \n tx_index \n numeric \n \u6539transaction\u4ea4\u6613\u5728\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e\uff08 \u6309\u4ea4\u6613\u6267\u884c\u7684\u987a\u5e8f\u7d2f\u8ba1)", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/ethereum-mainnet/event-logs/#ethereumlogs"}
{"content": "\u533a\u5757\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/ethereum-mainnet/blocks/#_1"}
{"content": "ethereum.blocks \u00b6 \n \u533a\u5757\u662f\u533a\u5757\u94fe\u7684\u57fa\u672c\u5355\u5143\uff0c\u4e00\u4e2a\u533a\u5757\u5305\u542b\u7684\u4ea4\u6613\u8bb0\u5f55\u4f1a\u589e\u91cf\u7684\u6539\u53d8EVM\u7684\u72b6\u6001\uff0c\u4e00\u4e2a\u5757\u4e2d\u7684\u4ea4\u6613\u53ea\u80fd\u4e00\u4e2a\u63a5\u4e00\u4e2a\u5730\u6267\u884c\uff0c\u4e0d\u80fd\u5e76\u884c\u6267\u884c\u3002 \n \n \n \n \u5217\u540d \n \u6570\u636e\u7c7b\u578b \n \u8bf4\u660e \n \n \n \n \n time \n timestamptz \n \u533a\u5757\u88ab\u77ff\u5de5\u9a8c\u8bc1\u7684\u65f6\u95f4. \n \n \n number \n numeric \n \u533a\u5757\u7684\u9ad8\u5ea6 \n \n \n hash \n bytea \n \u533a\u5757\u7684\u552f\u4e00id \n \n \n parent hash \n bytea \n \u524d\u4e00\u4e2a\u533a\u5757\u7684\u552f\u4e00id \n \n \n gas_limit \n numeric \n \u5f53\u524d\u533a\u5757\u7684gas\u9650\u5236 \n \n \n gas_used \n numeric \n \u5f53\u524d\u533a\u5757\u4e2d\u4f7f\u7528\u7684gas \n \n \n miner \n bytea \n \u77ff\u5de5\u7684\u5730\u5740 \n \n \n difficulty \n numeric \n \u5f00\u91c7\u533a\u5757\u6240\u9700\u7684\u96be\u5ea6\u503c \n \n \n total_difficulty \n numeric \n \u76f4\u5230\u8fd9\u4e2a\u533a\u5757\u7684\u603b\u96be\u5ea6\u503c \n \n \n nonce \n bytea \n \u533a\u5757\u968f\u673a\u6570\uff0c\u7528\u4e8e\u5c55\u793a\u6316\u77ff\u8fc7\u7a0b\u4e2d\u7684\u5de5\u4f5c\u91cf\u8bc1\u660e \n \n \n size \n numeric \n \u6b64\u5757\u7684\u5927\u5c0f\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\uff08\u53d7\u9650\u4e8e gas limit\uff09 \n \n \n base_fee_per_gas \n numeric \n \u6b64\u533a\u5757\u7684\u57fa\u672c\u8d39\u7528 (\u7531  EIP1559  (https://eips.ethereum.org/EIPS/eip-1559) \u5f15\u5165)", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/ethereum-mainnet/blocks/#ethereumblocks"}
{"content": "\u4ee5\u592a\u574a\u4e3b\u7f51 \u00b6 \n \u4ee5\u592a\u574a\u4e8e2015\u5e74\u9996\u6b21\u63a8\u51fa\uff0c\u662f\u7b2c\u4e00\u4e2a\u53d1\u660e\u5e76\u5b9e\u73b0\u4e86\u4ee5\u592a\u574a\u865a\u62df\u673a\u7684\u533a\u5757\u94fe\u3002\u4ee5\u592a\u574a\u81f3\u4eca\u4ecd\u662f\u4e00\u4e2a\"\u771f\u6b63\u7684\"\u53bb\u4e2d\u5fc3\u5316\u5e73\u53f0\uff0c\u4e16\u754c\u5404\u5730\u7684\u8bb8\u591a\u8282\u70b9\u8fd0\u8425\u5546\u90fd\u5728\u786e\u4fdd\u533a\u5757\u94fe\u7684\u5b89\u5168\u3002\u4ee5\u592a\u574a\u662f\u7531\u4e16\u754c\u5404\u5730\u7684\u72ec\u7acb\u5f00\u53d1\u8005\u7ef4\u62a4\u548c\u5f00\u53d1\u7684\u3002 \n \u81ea2015\u5e74\u6210\u7acb\u4ee5\u6765\uff0c\u4ee5\u592a\u574a\u5df2\u7ecf\u7ecf\u5386\u4e86\u4e00\u7cfb\u5217\u7684\u66f4\u65b0\u3002 \n \u89e3\u91ca\u4ee5\u592a\u574a\u7684\u5386\u53f2\u3001\u8def\u7ebf\u56fe\u548c\u6280\u672f\u7ec6\u8282\u8d85\u51fa\u4e86\u672c\u6587\u6863\u7684\u8303\u56f4\uff0c\u56e0\u6b64\u6211\u4eec\u63a8\u8350\u60a8\u5728 Ethereum.org  (https://ethereum.org/en/developers/docs) \u9605\u8bfb\u4ee5\u4e0b\u6587\u6863 \n \n \n \u4ee5\u592a\u574a\u5f00\u53d1\u8005\u6587\u6863  (https://ethereum.org/en/developers/docs) \n \n \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/ethereum-mainnet/#_1"}
{"content": "\u539f\u59cb\u6570\u636e\u8868 \u00b6 \n \n \n Blocks  (blocks/) \n Transactions  (transactions/) \n Event logs  (event-logs/) \n Traces  (traces/)", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/ethereum-mainnet/#_2"}
{"content": "\u4ea4\u6613\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/bnb-chain-bsc/transactions/#_1"}
{"content": "bnb.transactions \u00b6 \n \u4ea4\u6613\u662f\u7531\u7528\u6237\u8d26\u6237\u53d1\u9001\u7684\u4ea4\u6613\u7b7e\u540d\u89e6\u53d1\u7684\uff0c\u4e00\u4e2a\u8d26\u6237\u4f1a\u53d1\u8d77\u4e00\u4e2a\u4ea4\u6613\u6765\u66f4\u65b0\u4ee5\u592a\u574a\u7f51\u7edc\u7684\u72b6\u6001\uff0c\u4ea4\u6613\u603b\u662f\u6765\u81ea\u5916\u90e8\u8d26\u6237\uff08EOA\uff09\u7684\u6388\u6743\uff0c\u667a\u80fd\u5408\u7ea6\u4e0d\u80fd\u53d1\u8d77\u4ea4\u6613\u3002 \n \u4ea4\u6613\u4f1a\u88ab\u5e7f\u64ad\u5230\u6574\u4e2a\u7f51\u7edc\uff0c\u4efb\u4f55\u8282\u70b9\u90fd\u53ef\u4ee5\u7528\u5e7f\u64ad\u7684\u65b9\u5f0f\uff0c\u8bf7\u6c42\u5728EVM\u4e0a\u6267\u884c\u4e8b\u52a1\uff0c\u5728\u6b64\u4e4b\u540e\uff0c\u77ff\u5de5\u5c06\u6267\u884c\u8fd9\u7b14\u4ea4\u6613\uff0c\u5e76\u5c06\u7ed3\u679c\u72b6\u6001\u4f20\u64ad\u5230\u7f51\u7edc\u4e2d\u7684\u5176\u5b83\u8282\u70b9\u3002 \n \u66f4\u591a\u4fe1\u606f\u8bf7\u9605\u8bfb\u4ee5\u592a\u574a\u5b98\u65b9\u6587\u6863  \u8fd9\u91cc  (https://ethereum.org/en/developers/docs/transactions) . \n \n \n \n \u5217\u540d \n \u6570\u636e\u7c7b\u578b \n \u8bf4\u660e \n \n \n \n \n block_time \n timestamptz \n \u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n nonce \n numeric \n \u8be5\u94b1\u5305\u72ec\u6709\u7684\u4ea4\u6613\u968f\u673a\u6570 \n \n \n index \n numeric \n \u533a\u5757\u4e2d\u7684\u4ea4\u6613\u7d22\u5f15\u4f4d\u7f6e \n \n \n success \n boolean \n \u663e\u793a\u4ee3\u4ea4\u6613\u662f\u5426\u6210\u529f\u7684\u771f/\u5047\u503c \n \n \n from \n bytea \n \u4ea4\u6613\u53d1\u9001\u8005\u7684\u5730\u5740 \n \n \n to \n bytea \n \u63a5\u6536\u8005\u7684\u5730\u5740\u3002\u5f53\u662f\u5408\u7ea6\u521b\u5efa\u4ea4\u6613\u65f6\u4e3aNULL \n \n \n value \n numeric \n \u5728\u6b64\u4ea4\u6613\u4e2d\u53d1\u9001\u7684\u4ee5 wei \u4e3a\u5355\u4f4d\u7684\u4ee5\u592a\u5e01\u6570\u91cf\u3002\u8bf7\u6ce8\u610f\uff0cerc20 \u4ee3\u5e01\u4e0d\u4f1a\u51fa\u73b0\u5728\u8fd9\u91cc\u3002 \n \n \n block_number \n int8 \n \u533a\u5757\u94fe\u7684\u9ad8\u5ea6\uff08\u4ee5\u5757\u4e3a\u5355\u4f4d\uff09 \n \n \n block_hash \n bytea \n \u8be5\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n gas_limit \n numeric \n \u4ee5 jager \u4e3a\u5355\u4f4d\u7684 gas \u9650\u5236 \n \n \n gas_price \n numeric \n \u4ee5 jager \u4e3a\u5355\u4f4d\u7684 gas \u4ef7\u683c \n \n \n gas_used \n numeric \n \u4ee5 jager \u4e3a\u5355\u4f4d\u7684\u4ea4\u6613\u6d88\u8017\u7684 gas \n \n \n data \n bytea \n \u4e00\u4e2a16\u8fdb\u5236\u7684\u7f16\u7801\u540e\u7684\u6570\u636e\uff0c\u6216\u8005\u667a\u80fd\u5408\u7ea6\u6307\u4ee4\u8bf4\u660e\uff0c\u53ef\u4ee5\u4e3a\u7a7a \n \n \n hash \n bytea \n \u4ea4\u6613\u54c8\u5e0c \n \n \n type \n text \n \u603b\u662f  legacy \uff0c\u56e0\u4e3aBNB\u94fe\u6ca1\u6709 eip1559 \n \n \n access_list \n jsonb \n n/a \n \n \n max_fee_per_gas \n numeric \n n/a \n \n \n max_priority_fee_per_gas \n numeric \n n/a \n \n \n priority_fee_per_gas \n numeric \n n/a", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/bnb-chain-bsc/transactions/#bnbtransactions"}
{"content": "\u5185\u90e8\u5408\u7ea6\u8c03\u7528\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/bnb-chain-bsc/traces/#_1"}
{"content": "bnb.traces \u00b6 \n Traces\u662f\u4ea4\u6613\u4e2d\u53ef\u4ee5\u6539\u53d8\u4ee5\u592a\u574a\u865a\u62df\u673a\u72b6\u6001\u7684\u6700\u5c0f\u539f\u5b50\u64cd\u4f5c\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u7684\u4fe1\u606f\u4f1a\u88ab\u8bb0\u5f55\u4e0b\u6765\uff0c\u5e76\u4e14\u53ef\u4ee5\u5b58\u50a8\u4e3aEVM\u6267\u884c\u8ddf\u8e2a\uff0c\u6216\u8005\u7b80\u79f0  \u8ddf\u8e2a\uff08trace\uff09 \uff0c\u5728Etherscan\u4e0a\u79f0\u4e3a\u201d\u5185\u90e8\u4ea4\u6613\u201c\u3002 \n \u66f4\u591a\u5185\u5bb9\u8bf7\u9605\u8bfb \u8fd9\u91cc  (https://medium.com/chainalysis/ethereum-traces-not-transactions-3f0533d26aa) . \n \n \n \n \u5217\u540d \n \u6570\u636e\u7c7b\u578b \n \u8bf4\u660e \n \n \n \n \n block_time \n timestamptz \n \u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n tx_success \n boolean \n \u663e\u793a\u4ea4\u6613\u662f\u5426\u6210\u529f\u7684\u771f/\u5047\u503c \n \n \n success \n boolean \n \u663e\u793a\u8ddf\u8e2a\u64cd\u4f5c\u662f\u5426\u6210\u529f\u7684\u771f/\u5047\u503c \n \n \n block_hash \n bytea \n \u8be5\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n block_number \n int8 \n \u533a\u5757\u94fe\u7684\u957f\u5ea6\uff08\u4ee5\u5757\u4e3a\u5355\u4f4d\uff09 \n \n \n tx_hash \n bytea \n \u4e8b\u4ef6\u7684\u4ea4\u6613\u54c8\u5e0c \n \n \n from \n bytea \n \u53d1\u9001\u8005\u7684\u5730\u5740 \n \n \n to \n bytea \n \u63a5\u6536\u8005\u7684\u5730\u5740\u3002\u5f53\u662f\u5408\u7ea6\u521b\u5efa\u4ea4\u6613\u65f6\u4e3aNULL \n \n \n value \n numeric \n \u5728\u6b64\u4ea4\u6613\u4e2d\u53d1\u9001\u7684\u4ee5 jager \u4e3a\u5355\u4f4d\u7684BNB\u6570\u91cf\u3002 \n \n \n gas \n numeric \n gas \u9650\u5236 \n \n \n gas_used \n numeric \n \u4ee5 jager \u4e3a\u5355\u4f4d\u7684\u4ea4\u6613\u6d88\u8017\u7684 gas \n \n \n tx_index \n numeric \n \u4ea4\u6613\u7d22\u5f15\u3002 \n \n \n trace_address \n array \n \u8c03\u7528\u56fe\u68ee\u6797\u4e2d\u7684\u8ddf\u8e2a\u5730\u5740\u3002\u4f8b\u5982\uff0c[0, 2, 1] \u662f [0, 2, 1, 0] \u7684\u7236\u7ea7\u3002 \n \n \n sub_traces \n numeric \n \u5b50\u8ddf\u8e2a(trace)\u7684\u6570\u91cf \n \n \n type \n text \n \u63cf\u8ff0\u5728\u6b64trace\u4e2d\u6267\u884c\u7684\u64cd\u4f5c\u7c7b\u578b\uff0c\u53ef\u4ee5\u662f  reward ,  create ,  call  or  suicide \u3002 \n \n \n address \n bytea \n \u5f53\u7c7b\u578btype\u662f suicide  or  create \u88ab\u8c03\u7528\u7684\u5408\u7ea6 \n \n \n code \n bytea \n \u90e8\u7f72\u65b0\u5408\u7ea6\u7684\u5b50\u8282\u4ee3\u7801\u6570\u636e\uff0c\u53ea\u5305\u62ectype\u662f create \u7684\u6570\u636e\u3002 \n \n \n call_type \n bytea \n \u53ef\u4ee5\u662f  staticcall ,  delegatecall  or  call . \u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u8003  \u8fd9\u91cc  (https://medium.com/coinmonks/delegatecall-calling-another-contract-function-in-solidity-b579f804178c) .  \n \n \n input \n bytea \n \u5bf9\u53e6\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6\u7684\u8c03\u7528\u7684\u5b57\u8282\u7801 \n \n \n output \n bytea \n \u88ab\u8c03\u7528\u7684\u667a\u80fd\u5408\u7ea6\u7684\u5b57\u8282\u7801 \n \n \n refund_address \n bytea \n \u5305\u62ec\u7c7b\u578b type  \u662f  suicide \u7684\u6570\u636e\uff0c\u7528\u4e8e\u6307\u5b9a\u5c06\u4ee5\u592a\u574a\u4f59\u989d\u53d1\u9001\u5230\u54ea\u91cc \n \n \n \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/bnb-chain-bsc/traces/#bnbtraces"}
{"content": "traces\u4e2d\u7684gas\u4f7f\u7528 \u00b6 \n \n \u4e00\u4e2atrace\u4e2d\u7684 gas_used \u5305\u62ec\u8be5trace\u548c\u5b83\u6240\u6709\u7684\u5b50trace\u6240\u6d88\u8017\u7684gas\u3002 \n \u6700\u521d\u8c03\u7528\u7684 gas_used \u4e0d\u5305\u62ec\u9996\u5148\u8fdb\u884c\u8c03\u7528\u7684\u8d39\u7528\u3002 \n \u60a8\u9700\u8981\u628a21000\u4e2agas\u5355\u4f4d+\u53d1\u90010\u7684\u8d39\u7528+\u975e\u96f6\u5b57\u8282\u7684\u8d39\u7528\u52a0\u5230\u9876\u90e8trace\u7684 gas_used \u503c\u4e2d\uff0c\u4ee5\u5f97\u51fa\"\u771f\u6b63\u7684\" gas_used \u503c\u3002 \n \u5173\u4e8e\u8fd9\u4e2a\u95ee\u9898\u7684\u66f4\u591a\u9605\u8bfb\u8bf7\u53c2\u8003\u8fd9\u4e2a stackexchange\u6761\u76ee  (https://ethereum.stackexchange.com/questions/31443/what-do-the-response-values-of-a-parity-trace-transaction-call-actually-repres) \n \u5728dune\u4e2d\u505a\u7684\u4e00\u4e2a\u67e5\u8be2\u3002 https://dune.com/queries/895857  (https://dune.com/queries/895857)", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/bnb-chain-bsc/traces/#tracesgas"}
{"content": "\u4e8b\u4ef6\u65e5\u5fd7\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/bnb-chain-bsc/event-logs/#_1"}
{"content": "bnb.logs \u00b6 \n \u8be5\u8868\u5b58\u50a8\u6240\u6709\u7531\u667a\u80fd\u5408\u7ea6\u4ea7\u751f\u7684\u65e5\u5fd7\u3002\u5b83\u5bf9\u67e5\u8be2\u5c1a\u672a\u89e3\u6790\u7684\u5408\u7ea6\u5f88\u6709\u7528\uff0c\u5305\u62ec\u90a3\u4e9b\u56e0\u4e3a\u4ee3\u7801\u672a\u516c\u5f00\u7684\u667a\u80fd\u5408\u7ea6\u3002 \n \u65e5\u5fd7\u662f\u4e00\u79cd\u4f18\u96c5\u7684\u65b9\u5f0f\uff0c\u53ef\u4ee5\u7528\u6781\u5c11\u91cf\u7684\u624b\u7eed\u8d39\uff0c\u5728EVM\u533a\u5757\u94fe\u4e0a\u5b58\u50a8\u6781\u5c11\u91cf\u7684\u6570\u636e\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u4e8b\u4ef6\u65e5\u5fd7\u5bf9\u4e8e\u8ba9\u5176\u4ed6\u4eba\u77e5\u9053\u53d1\u751f\u4e86\u4ec0\u4e48\u4e8b\u662f\u5f88\u6709\u7528\u7684\uff0c\u800c\u4e0d\u9700\u8981\u4ed6\u4eec\u5355\u72ec\u67e5\u8be2\u5408\u7ea6\u3002 \n \u66f4\u591a\u4fe1\u606f\u8bf7\u9605\u8bfb  \u8fd9\u7bc7\u6587\u6863  (https://medium.com/mycrypto/understanding-event-logs-on-the-ethereum-blockchain-f4ae7ba50378) . \n Note: \u6211\u4eec\u7684topic\u7d22\u5f15\u4f1a\u4fbf\u5b9c, \u6240\u4ee5  topic0  \u4f1a\u663e\u793a\u6210  topic1 ,  topic1  \u663e\u793a\u6210  topic2  \uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \n \n \n \n \u5217\u540d \n \u6570\u636e\u7c7b\u578b \n \u8bf4\u660e \n \n \n \n \n block_hash \n bytea \n \u8be5\u533a\u5757\u7684\u552f\u4e00\u6807\u8bc6\u7b26 \n \n \n block_number \n int8 \n \u533a\u5757\u94fe\u7684\u9ad8\u5ea6\uff08\u4ee5\u5757\u4e3a\u5355\u4f4d\uff09 \n \n \n block_time \n timestamptz \n \u533a\u5757\u88ab\u5f00\u91c7\u7684\u65f6\u95f4 \n \n \n contract_address \n bytea \n \u53d1\u51fa\u65e5\u5fd7\u7684\u5408\u7ea6\u5730\u5740 \n \n \n topic1 \n bytea \n \u5bf9\u4e8b\u4ef6\u58f0\u660e\u51fd\u6570\u7528keccak256\u51fd\u6570\u8fd0\u7b97\u540e\u7684\u54c8\u5e0c\u503c \n \n \n topic2 \n bytea \n \u4e8b\u4ef6\u7684\u7d22\u5f15\u4e3b\u98982 \n \n \n topic3 \n bytea \n \u4e8b\u4ef6\u7684\u7d22\u5f15\u4e3b\u98983 \n \n \n topic4 \n bytea \n \u4e8b\u4ef6\u7684\u7d22\u5f15\u4e3b\u98984 \n \n \n data \n bytea \n \u4e8b\u4ef6\u4e2d\u672a\u7d22\u5f15\u7684\u6570\u636e\u503c \n \n \n tx_hash \n bytea \n \u4e8b\u4ef6\u7684\u4ea4\u6613\u54c8\u5e0c \n \n \n index \n numeric \n \u8fd9\u4e2alog\u5728\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e (\u6309\u65e5\u5fd7\u6267\u884c\u7684\u987a\u5e8f\u7d2f\u8ba1) \n \n \n tx_index \n numeric \n \u6539transaction\u4ea4\u6613\u5728\u533a\u5757\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e\uff08 \u6309\u4ea4\u6613\u6267\u884c\u7684\u987a\u5e8f\u7d2f\u8ba1)", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/bnb-chain-bsc/event-logs/#bnblogs"}
{"content": "\u533a\u5757\u8868 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/bnb-chain-bsc/blocks/#_1"}
{"content": "bnb.blocks \u00b6 \n \u533a\u5757\u662f\u533a\u5757\u94fe\u7684\u57fa\u672c\u5355\u5143\uff0c\u4e00\u4e2a\u533a\u5757\u5305\u542b\u7684\u4ea4\u6613\u8bb0\u5f55\u4f1a\u589e\u91cf\u7684\u6539\u53d8EVM\u7684\u72b6\u6001\uff0c\u4e00\u4e2a\u5757\u4e2d\u7684\u4ea4\u6613\u53ea\u80fd\u4e00\u4e2a\u63a5\u4e00\u4e2a\u5730\u6267\u884c\uff0c\u4e0d\u80fd\u5e76\u884c\u6267\u884c\u3002 \n \n \n \n \u5217\u540d \n \u6570\u636e\u7c7b\u578b \n \u8bf4\u660e \n \n \n \n \n time \n timestamptz \n \u533a\u5757\u88ab\u77ff\u5de5\u9a8c\u8bc1\u7684\u65f6\u95f4. \n \n \n number \n numeric \n \u533a\u5757\u7684\u9ad8\u5ea6 \n \n \n hash \n bytea \n \u533a\u5757\u7684\u552f\u4e00id \n \n \n parent hash \n bytea \n \u524d\u4e00\u4e2a\u533a\u5757\u7684\u552f\u4e00id \n \n \n gas_limit \n numeric \n \u5f53\u524d\u533a\u5757\u7684gas\u9650\u5236 \n \n \n gas_used \n numeric \n \u5f53\u524d\u533a\u5757\u4e2d\u4f7f\u7528\u7684gas \n \n \n miner \n bytea \n \u77ff\u5de5\u7684\u5730\u5740 \n \n \n difficulty \n numeric \n \u5f00\u91c7\u533a\u5757\u6240\u9700\u7684\u96be\u5ea6\u503c \n \n \n total_difficulty \n numeric \n \u76f4\u5230\u8fd9\u4e2a\u533a\u5757\u7684\u603b\u96be\u5ea6\u503c \n \n \n nonce \n bytea \n \u533a\u5757\u968f\u673a\u6570\uff0c\u7528\u4e8e\u5c55\u793a\u6316\u77ff\u8fc7\u7a0b\u4e2d\u7684\u5de5\u4f5c\u91cf\u8bc1\u660e \n \n \n size \n numeric \n \u6b64\u5757\u7684\u5927\u5c0f\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\uff08\u53d7\u9650\u4e8e gas limit\uff09 \n \n \n base_fee_per_gas \n numeric \n n/a", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/bnb-chain-bsc/blocks/#bnbblocks"}
{"content": "BNB Chain (BSC) \u00b6 \n BNB\u94fe(\u4e4b\u524d\u53eb\u5e01\u5b89\u667a\u80fd\u94fe\uff0cBSC)\u662f\u4e00\u4e2a\u4ee5\u592a\u574a\u865a\u62df\u673a\u7684\u5b9e\u4f8b\uff0c\u7531\u6d41\u884c\u7684\u52a0\u5bc6\u8d27\u5e01\u4ea4\u6613\u6240 Binance  (https://binance.com) \u7684\u56e2\u961f\u5efa\u7acb\u548c\u7ef4\u62a4\u3002BNB\u94fe\u9075\u5faa\u4ee5\u592a\u574a\u4e3b\u7f51\u7684\u5927\u90e8\u5206\u89c4\u5219\uff0c\u4f46\u6ca1\u6709\u5b9e\u65bdEIP1559\u3002\u76f8\u53cd\uff0c\u5b83\u4f9d\u9760 BEP-95  (https://github.com/bnb-chain/BEPs/blob/master/BEP95.md) \u6765\u71c3\u70e7\u5e73\u53f0\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u7d2f\u79ef\u7684\u8d39\u7528\u3002\u6b64\u5916\uff0c\u6bcf\u4e2a\u533a\u5757\u7684gas\u9650\u5236\u88ab\u8bbe\u7f6e\u4e3a100 mio\uff0c\u4f7f\u66f4\u591a\u7684\u4ea4\u6613\u80fd\u591f\u5728\u4e00\u4e2a\u7ed9\u5b9a\u7684\u533a\u5757\u4e2d\u88ab\u5904\u7406\u3002\u4ea4\u6613\u8d39\u7528\u662f\u4ee5 \u800c \u4e0d \u662f \u800c \u4e0d \u662f B N B \u800c \u4e0d \u662f ETH\u652f\u4ed8\u7684\u3002 \n \u60a8\u53ef\u4ee5\u5728[\u6587\u6863]\uff08https://docs.bnbchain.org/docs/bnbIntro\uff09\u4e2d\u9605\u8bfb\u66f4\u591a\u5173\u4e8eBNB\u94fe\u7684\u4fe1\u606f\u3002 \n \u5728Dune\u4e0a\uff0c\u8fd9\u610f\u5473\u7740EIP1559\u4ea4\u6613\u7684gas\u5b57\u6bb5\u4fdd\u6301\u4e3a\u7a7a\uff0c\u5176\u4ed6\u90fd\u662f\u4e00\u6837\u7684\u3002 \n \n \n BNB\u94fe\u6587\u6863  (https://docs.bnbchain.org/docs/bnbIntro) \n \n \n ", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/bnb-chain-bsc/#bnb-chain-bsc"}
{"content": "Raw data tables \u00b6 \n \n \n Blocks  (blocks/) \n Transactions  (transactions/) \n Event logs  (event-logs/) \n Traces  (traces/)", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/bnb-chain-bsc/#raw-data-tables"}
{"content": "EVM\u94fe \u00b6 \n \u6574\u4e2a EVM \u94fe\u9075\u5faa\u76f8\u540c\u7684\u6267\u884c\u6a21\u578b\uff0c\u4f46\u6709\u65f6\u5728\u5171\u8bc6\u7b97\u6cd5\u3001gas\u82b1\u8d39\uff0c\u4ee5\u53ca\u751a\u81f3gas\u6210\u672c\u7684\u8ba1\u7b97\u65b9\u9762\u5b58\u5728\u5dee\u5f02\u3002 \n \u60a8\u53ef\u4ee5\u5728\u6587\u6863\u7684\u7279\u5b9a\u90e8\u5206\u4e2d\u627e\u5230\u6709\u5173\u5404\u4e2a\u94fe\u7684\u4fe1\u606f\uff1a \n \n \n BNB Chain (BSC)  (bnb-chain-bsc/) \n Ethereum Mainnet  (ethereum-mainnet/) \n Gnosis Chain (xDai)  (gnosis-chain-xdai/) \n Optimism  (optimism/) \n Polygon  (polygon/)", "url": "https://dune.com/docs/zh/reference/tables/v1/raw/#evm"}
{"content": "\u4f7f\u7528\u6848\u4f8b \u00b6 \n \u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5229\u7528Dune\u5185\u90e8\u7684\u89c6\u56fe\u548c\u8868\uff0c\u4f7f\u5728Dune\u4e0a\u5904\u7406\u6570\u636e\u66f4\u52a0\u5bb9\u6613\u3002 \n \u60a8\u81ea\u5df1\u7684\u8868\u3001\u89c6\u56fe\u548c\u51fd\u6570\u5728Dune\u4e0a\u521b\u5efa\u5185\u5bb9\u65f6\u90fd\u8d77\u7740\u91cd\u8981\u4f5c\u7528\uff0c\u5982\u679c\u6b63\u786e\u4f7f\u7528\uff0c\u53ef\u4ee5\u4f7f\u770b\u677f\u548c\u67e5\u8be2\u7684\u7ef4\u62a4\u66f4\u5bb9\u6613\u3002 \n \u5982\u679c\u60a8\u4e0d\u719f\u6089\u8868\u3001\u89c6\u56fe\u3001\u7269\u5316\u89c6\u56fe\u548c\u51fd\u6570\uff0c\u8bf7\u53c2\u9605  pgSQL \u6587\u6863  (https://www.postgresqltutorial.com/postgresql-views)  \u6216\u67e5\u770b\u6211\u4eec\u7684 \u5165\u95e8\u6307\u5357  (../../../getting-started/) . \n ", "url": "https://dune.com/docs/zh/reference/tables/user-generated/#_1"}
{"content": "\u5b58\u50a8\u4fe1\u606f \u00b6 \n \u6709\u65f6\uff0c\u6570\u636e\u63d0\u53d6\u6240\u9700\u7684\u67d0\u4e9b\u4fe1\u606f\u6ca1\u6709\u6b63\u786e\u5b58\u50a8\u5728\u53ef\u7528\u7684\u8868\u4e2d\u6216\u5b58\u50a8\u5728\u8bb8\u591a\u4e0d\u540c\u7684\u8868\u4e2d\uff0c\u8fd9\u5c06\u4f7f\u67e5\u8be2\u5f88\u96be\u5904\u7406\u3002\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6700\u597d\u5c06\u5fc5\u8981\u7684\u4fe1\u606f\u5b58\u50a8\u5728\u89c6\u56fe\u4e2d\u5e76\u5f15\u7528\u8be5\u89c6\u56fe\u3002 \n \u8fd9\u65b9\u9762\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f\u5c06\u67d0\u4e9b\u8d44\u91d1\u5e93\u6216\u501f\u8d37\u4ee3\u5e01\u6620\u5c04\u5230\u5176\u5404\u81ea\u7684\u57fa\u7840\u4ee3\u5e01\u3002 \n  (#__codelineno-0-1) CREATE   OR   REPLACE   VIEW   dune_user_generated . view_test   ( symbol ,   contract_address ,   decimals ,   underlying_token_address )   AS   VALUES \n  (#__codelineno-0-2) ( 'iETH' :: text ,   '\\x9Dde7cdd09dbed542fC422d18d89A589fA9fD4C0' :: bytea ,   18 :: numeric ,   '\\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' :: bytea ), \n  (#__codelineno-0-3) ( 'yDAI' :: text ,   '\\x9D25057e62939D3408406975aD75Ffe834DA4cDd' :: bytea ,   18 :: numeric ,   '\\x6B175474E89094C44Da98b954EedeAC495271d0F' :: bytea ), \n  (#__codelineno-0-4) ( 'yUSDC' :: text ,   '\\xa2609b2b43ac0f5ebe27deb944d2a399c201e3da' :: bytea ,   6 :: numeric ,   '\\xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48' :: bytea ), \n  (#__codelineno-0-5) ( 'ySUSD' :: text ,   '\\x36324b8168f960A12a8fD01406C9C78143d41380' :: bytea ,   18 :: numeric ,   '\\x57Ab1ec28D129707052df4dF418D58a2D46d5f51' :: bytea ), \n  (#__codelineno-0-6) ( 'yUSDT' :: text , '\\xa1787206d5b1bE0f432C4c4f96Dc4D1257A1Dd14' :: bytea ,   6 :: numeric ,   '\\xdAC17F958D2ee523a2206206994597C13D831ec7' :: bytea ), \n  (#__codelineno-0-7) ( 'yCRV' :: text , '\\x9Ce551A9D2B1A4Ec0cc6eB0E0CC12977F6ED306C' :: bytea ,   18 :: numeric ,   '\\x6B175474E89094C44Da98b954EedeAC495271d0F' :: bytea ), \n  (#__codelineno-0-8) ( 'yBTC' :: text ,   '\\x04EF8121aD039ff41d10029c91EA1694432514e9' :: bytea ,   8 :: numeric ,   '\\x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599' :: bytea ) \n \n \u6b64\u8868\u751f\u6210\u4e00\u4e2a\u89c6\u56fe\uff0c\u53ef\u7528\u4e8e\u8054\u63a5\u67e5\u8be2\u3002 \n \u8bf7\u770b\u8fd9\u4e2a\u6570\u636e\u8868  (https://dune.com/queries/41577) . \n ", "url": "https://dune.com/docs/zh/reference/tables/user-generated/#_2"}
{"content": "\u6574\u5408\u6570\u636e \u00b6 \n \u89c6\u56fe\u8fd8\u53ef\u4ee5\u7528\u4e8e\u5c06\u591a\u4e2a\u667a\u80fd\u5408\u7ea6\u7684\u64cd\u4f5c\u805a\u5408\u5230\u4e00\u4e2a\u5305\u542b\u6240\u6709\u5fc5\u8981\u6570\u636e\u7684\u89c6\u56fe\u4e2d\u3002 \n \u5982\u679c\u60a8\u9700\u8981\u53cd\u590d\u4f7f\u7528\u540c\u4e00\u6570\u636e\u96c6\uff0c\u5e76\u4e14\u53ea\u66f4\u6539\u663e\u793a\u6216\u805a\u5408\u6570\u636e\u7684\u65b9\u5f0f\uff0c\u8fd9\u4e00\u70b9\u5c24\u5176\u6709\u7528\u3002\u8fd9\u6837\uff0c\u60a8\u5c31\u4e0d\u5fc5\u4e00\u6b21\u53c8\u4e00\u6b21\u5730\u67e5\u8be2\u6570\u636e\u96c6\uff0c\u53ea\u9700\u5c06\u5176\u653e\u5165\u4e00\u4e2a\u89c6\u56fe\u4e2d\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u5f00\u59cb\u5f15\u7528\u8be5\u89c6\u56fe\u3002 \n \u8fd9\u5c06\u5141\u8bb8\u60a8\u66f4\u6539\u6784\u5efa\u6570\u636e\u96c6\u7684\u57fa\u672c\u67e5\u8be2\uff0c\u800c\u65e0\u9700\u904d\u5386\u67e5\u8be2\u3002\u60a8\u53ef\u5c06\u6b64\u60f3\u8c61\u6210\uff0c\u5c06\u6570\u636e\u6536\u96c6\u548c\u5b9e\u9645\u5de5\u4f5c/\u663e\u793a\u62c6\u5206\u4e3a\u4e24\u4e2a\u72ec\u7acb\u5de5\u4f5c\u7684\u4e0d\u540c\u90e8\u5206\u3002 \n \u5229\u7528\u8fd9\u4e00\u70b9\u5c06\u4f7f\u4eea\u8868\u677f\u7684\u7ef4\u62a4\u53d8\u5f97\u66f4\u52a0\u5bb9\u6613\uff0c\u56e0\u4e3a\u60a8\u53ea\u9700\u66f4\u6539  dune_user_generated  \u89c6\u56fe\uff0c\u800c\u4e0d\u5fc5\u9010\u4e00\u67e5\u770b\u6240\u6709\u67e5\u8be2\u3002 \n \u8fd9\u65b9\u9762\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\u662f \u8fd9\u4e2a\u770b\u677f  (https://dune.com/keeganead/cryptoart_1) \u3002\u521b\u5efa\u8005\u5728 dune_user_generated \u6a21\u5f0f\u4e2d\u521b\u5efa\u4e86\u4e00\u4e2a\u57fa\u672c\u6570\u636e\u96c6\uff0c\u5e76\u4f7f\u7528\u8be5\u6570\u636e\u96c6\u4f5c\u4e3a\u6240\u6709\u67e5\u8be2\u7684\u57fa\u7840\u3002 \n \u8bf7\u6ce8\u610f\uff0c\u867d\u7136\u8fd9\u79cd\u65b9\u6cd5\u9002\u7528\u4e8e\u5927\u591a\u6570\u60c5\u51b5\uff0c\u4f46\u89c6\u56fe\u7684\u8ba1\u7b97\u6210\u672c\u53ef\u80fd\u975e\u5e38\u9ad8\uff0c\u60a8\u6700\u597d\u5728\u6211\u4eec\u7684  Spells  (../spells/)  \u4e2d\u6784\u9020\u4e00\u4e2a\u5177\u4f53\u7684\u89c6\u56fe\u6216\u6570\u636e\u8868\u3002 \n \u672c\u4f8b\u4ece Uniswap_v3 \u4e2d\u83b7\u53d6\u6570\u636e\uff0c\u5e76\u5bf9\u7d22\u5f15\u7684\u6570\u636e\u8fdb\u884c\u6807\u51c6\u5316\u83b7\u5f97 dex.trades table\u3002 \n  (#__codelineno-1-1) CREATE   OR   REPLACE   view   dune_user_generated . uniswap_v3   as   \n  (#__codelineno-1-2) \n  (#__codelineno-1-3)      SELECT \n  (#__codelineno-1-4)          dexs . block_time , \n  (#__codelineno-1-5)          erc20a . symbol   AS   token_a_symbol , \n  (#__codelineno-1-6)          erc20b . symbol   AS   token_b_symbol , \n  (#__codelineno-1-7)          token_a_amount_raw   /   10   ^   erc20a . decimals   AS   token_a_amount , \n  (#__codelineno-1-8)          token_b_amount_raw   /   10   ^   erc20b . decimals   AS   token_b_amount , \n  (#__codelineno-1-9)          project , \n  (#__codelineno-1-10)          version , \n  (#__codelineno-1-11)          category , \n  (#__codelineno-1-12)          coalesce ( trader_a ,   tx . \"from\" )   as   trader_a ,   -- subqueries rely on this COALESCE to avoid redundant joins with the transactions table \n  (#__codelineno-1-13)          trader_b , \n  (#__codelineno-1-14)          token_a_amount_raw , \n  (#__codelineno-1-15)          token_b_amount_raw , \n  (#__codelineno-1-16)          coalesce ( \n  (#__codelineno-1-17)              usd_amount , \n  (#__codelineno-1-18)              token_a_amount_raw   /   10   ^   erc20a . decimals   *   pa . price , \n  (#__codelineno-1-19)              token_b_amount_raw   /   10   ^   erc20b . decimals   *   pb . price \n  (#__codelineno-1-20)          )   as   usd_amount , \n  (#__codelineno-1-21)          token_a_address , \n  (#__codelineno-1-22)          token_b_address , \n  (#__codelineno-1-23)          exchange_contract_address , \n  (#__codelineno-1-24)          tx_hash , \n  (#__codelineno-1-25)          tx . \"from\"   as   tx_from , \n  (#__codelineno-1-26)          tx . \"to\"   as   tx_to , \n  (#__codelineno-1-27)          trace_address , \n  (#__codelineno-1-28)          evt_index , \n  (#__codelineno-1-29)          row_number ()   OVER   ( PARTITION   BY   tx_hash ,   evt_index ,   trace_address )   AS   trade_id \n  (#__codelineno-1-30)      FROM   ( \n  (#__codelineno-1-31) \n  (#__codelineno-1-32)          --Uniswap v3 \n  (#__codelineno-1-33)          SELECT \n  (#__codelineno-1-34)              t . evt_block_time   AS   block_time , \n  (#__codelineno-1-35)              'Uniswap'   AS   project , \n  (#__codelineno-1-36)              '3'   AS   version , \n  (#__codelineno-1-37)              'DEX'   AS   category , \n  (#__codelineno-1-38)              t . \"recipient\"   AS   trader_a , \n  (#__codelineno-1-39)              NULL :: bytea   AS   trader_b , \n  (#__codelineno-1-40)              abs ( amount0 )   AS   token_a_amount_raw , \n  (#__codelineno-1-41)              abs ( amount1 )   AS   token_b_amount_raw , \n  (#__codelineno-1-42)              NULL :: numeric   AS   usd_amount , \n  (#__codelineno-1-43)              f . token0   AS   token_a_address , \n  (#__codelineno-1-44)              f . token1   AS   token_b_address , \n  (#__codelineno-1-45)              t . contract_address   as   exchange_contract_address , \n  (#__codelineno-1-46)              t . evt_tx_hash   AS   tx_hash , \n  (#__codelineno-1-47)              NULL :: integer []   AS   trace_address , \n  (#__codelineno-1-48)              t . evt_index \n  (#__codelineno-1-49)          FROM \n  (#__codelineno-1-50)              uniswap_v3 . \"Pair_evt_Swap\"   t \n  (#__codelineno-1-51)          INNER   JOIN   uniswap_v3 . \"Factory_evt_PoolCreated\"   f   ON   f . pool   =   t . contract_address \n  (#__codelineno-1-52) \n  (#__codelineno-1-53)          )   dexs \n  (#__codelineno-1-54)      INNER   JOIN   ethereum . transactions   tx \n  (#__codelineno-1-55)          ON   dexs . tx_hash   =   tx . hash \n  (#__codelineno-1-56)      LEFT   JOIN   erc20 . tokens   erc20a   ON   erc20a . contract_address   =   dexs . token_a_address \n  (#__codelineno-1-57)      LEFT   JOIN   erc20 . tokens   erc20b   ON   erc20b . contract_address   =   dexs . token_b_address \n  (#__codelineno-1-58)      LEFT   JOIN   prices . usd   pa   ON   pa . minute   =   date_trunc ( 'minute' ,   dexs . block_time ) \n  (#__codelineno-1-59)          AND   pa . contract_address   =   dexs . token_a_address \n  (#__codelineno-1-60)      LEFT   JOIN   prices . usd   pb   ON   pb . minute   =   date_trunc ( 'minute' ,   dexs . block_time ) \n  (#__codelineno-1-61)          AND   pb . contract_address   =   dexs . token_b_address \n \n https://dune.com/queries/42779  (https://dune.com/queries/42779) \n ", "url": "https://dune.com/docs/zh/reference/tables/user-generated/#_3"}
{"content": "\u6d4b\u8bd5\u62bd\u8c61\u8868 \u00b6 \n \"create\"\u51fd\u6570\u7684\u53e6\u4e00\u4e2a\u5f88\u597d\u7684\u7528\u9014\u662f\u6d4b\u8bd5GitHub\u53d1\u51fa\u7684Pull Request\u662f\u5426\u5bf9\u6211\u4eec\u7684\u62bd\u8c61\u8868\u4ea7\u751f\u4e86\u9884\u671f\u7684\u7ed3\u679c\u3002\u60a8\u53ea\u9700\u5c1d\u8bd5\u4f7f\u7528\u6a21\u5f0f dune_user_generated \u800c\u9700\u8981\u5728GitHub\u4e2d\u6240\u9700\u7684\u5b9e\u9645\u6a21\u5f0f\u8fd0\u884c\u67e5\u8be2\u3002 \n \u5982\u679c\u6d4b\u8bd5\u6210\u529f\uff0c\u60a8\u53ef\u4ee5\u7ee7\u7eed\u8fdb\u884cPull Request\u3002\u5982\u679c\u53ef\u4ee5\uff0c\u8bf7\u5c06\u201c\u6d4b\u8bd5\u8868/\u89c6\u56fe\u201d\u9644\u52a0\u5230Pull Request\u4e2d\u3002 \n ", "url": "https://dune.com/docs/zh/reference/tables/user-generated/#_4"}
{"content": "\u89c6\u56fe\u5b9a\u4e49 \u00b6 \n \u8981\u4e86\u89e3\u7279\u5b9a\u89c6\u56fe\u662f\u5982\u4f55\u521b\u5efa\u7684\uff0c\u53ef\u4ee5\u5bf9PostgreSQL\u57fa\u8868\u8fd0\u884c\u67e5\u8be2\u3002 \n \u4e00\u4e2a\u7279\u5b9a\u7684\u89c6\u56fe \n  (#__codelineno-2-1) select   definition   from   pg_views   \n  (#__codelineno-2-2) where   viewname   =   'view_name_here' \n \n \u6240\u6709\u89c6\u56fe \n  (#__codelineno-3-1) select   *   from   pg_views   \n  (#__codelineno-3-2) where   schemaname   =   'dune_user_generated' \n \n ", "url": "https://dune.com/docs/zh/reference/tables/user-generated/#_5"}
{"content": "\u89c6\u56fe\u4f9d\u5c5e \u00b6 \n \u5982\u679c\u751f\u6210\u591a\u4e2a\u76f8\u4e92\u4f9d\u8d56\u7684\u89c6\u56fe\uff0c\u6709\u65f6\u53ef\u80fd\u4f1a\u53d1\u751f\u65e0\u6cd5\u66f4\u6539 view1 \u7684\u60c5\u51b5\uff0c\u56e0\u4e3a view2 \u4f9d\u8d56\u4e8e view1 \u3002\u53ef\u4ee5\u901a\u8fc7\u8fd0\u884c\u4e0b\u9762\u7684\u67e5\u8be2\u6765\u89e3\u51b3\u4efb\u4f55\u89c6\u56fe\u95f4\u7684\u4f9d\u5c5e\u95ee\u9898\u3002 \n  (#__codelineno-4-1) -- source: https://stackoverflow.com/a/48770535/1838257 \n  (#__codelineno-4-2) \n  (#__codelineno-4-3) --CREATE OR REPLACE VIEW dune_user_generated.gosuto_view_dependencies AS \n  (#__codelineno-4-4) SELECT   DISTINCT   srcobj . oid   AS   src_oid , \n  (#__codelineno-4-5)      srcnsp . nspname   AS   src_schemaname , \n  (#__codelineno-4-6)      srcobj . relname   AS   src_objectname , \n  (#__codelineno-4-7)      tgtobj . oid   AS   dependent_viewoid , \n  (#__codelineno-4-8)      tgtnsp . nspname   AS   dependant_schemaname , \n  (#__codelineno-4-9)      tgtobj . relname   AS   dependant_objectname \n  (#__codelineno-4-10) FROM   pg_class   srcobj \n  (#__codelineno-4-11)    JOIN   pg_depend   srcdep   ON   srcobj . oid   =   srcdep . refobjid \n  (#__codelineno-4-12)    JOIN   pg_depend   tgtdep   ON   srcdep . objid   =   tgtdep . objid \n  (#__codelineno-4-13)    JOIN   pg_class   tgtobj   ON   tgtdep . refobjid   =   tgtobj . oid   AND   srcobj . oid   <>   tgtobj . oid \n  (#__codelineno-4-14)    LEFT   JOIN   pg_namespace   srcnsp   ON   srcobj . relnamespace   =   srcnsp . oid \n  (#__codelineno-4-15)    LEFT   JOIN   pg_namespace   tgtnsp   ON   tgtobj . relnamespace   =   tgtnsp . oid \n  (#__codelineno-4-16) WHERE   tgtdep . deptype   =   'i' :: \"char\"   AND   tgtobj . relkind   =   'v' :: \"char\" \n  (#__codelineno-4-17) \n  (#__codelineno-4-18) -- filter like so: \n  (#__codelineno-4-19) -- SELECT * FROM dune_user_generated.gosuto_view_dependencies \n  (#__codelineno-4-20) -- WHERE src_objectname LIKE '%filter_word%' \n \n \u60a8\u9700\u8981\u6682\u65f6\u4e2d\u65ad\u4f9d\u5c5e\u5173\u7cfb\u624d\u80fd\u66f4\u6539 view1 \u3002 \n \u60a8\u53ef\u4ee5\u5728  \u8fd9\u91cc  (https://dune.com/queries/70916) \u627e\u5230\u8be5\u68c0\u7d22\u3002 \u611f\u8c22  @gosuto  (https://dune.com/gosuto)  \u53d1\u73b0\u8fd9\u4e2a\u95ee\u9898\u3002", "url": "https://dune.com/docs/zh/reference/tables/user-generated/#_6"}
{"content": "\u6765\u81ea\u7b2c\u4e09\u65b9\u6570\u636e\u4f9b\u5e94\u65b9\u7684\u4ef7\u683c\u6570\u636e  \u00b6 \n \u6211\u4eec\u901a\u8fc7 coinpaprika  (https://coinpaprika.com)  \u7684API\u83b7\u53d6\u4ef7\u683c\u6570\u636e\u3002 \n \u4ef7\u683c\u662f\u57fa\u4e8e\u5b9e\u65f6\u5e02\u573a\u6570\u636e\u7684\u6210\u4ea4\u91cf\u52a0\u6743\u4ef7\u683c\uff0c\u6362\u7b97\u6210\u7f8e\u5143\u3002 \n ", "url": "https://dune.com/docs/zh/reference/tables/prices/#_1"}
{"content": "prices.usd \u00b6 \n \u8fd9\u4e2a\u8868\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5217\u7684erc20.tokens\u3002 \n \u5982\u679c\u60a8\u60f3\u8981\u7684\u4ee3\u5e01\u6ca1\u6709\u5728\u8fd9\u91cc\u5217\u51fa\uff0c\u8bf7\u5411\u6211\u4eec\u7684  GitHub repository  (https://github.com/duneanalytics/spellbook/blob/main/models/prices/prices_tokens.sql) \u63d0\u4ea4\u4e00\u4e2apull request\u3002 (\u5bf9\u4e8eV1\u5f15\u64ce\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u6765\u81ea\u53bb\u4e2d\u5fc3\u5316\u4ea4\u6613\u6240\u7684\u4ef7\u683c  dex.view_token_prices. ) \n \n \n \n \u53d8\u91cf\u540d \n \u63cf\u8ff0 \n \n \n \n \n contract_address \n erc20\u4ee3\u5e01\u7684\u5408\u7ea6\u5730\u5740 \n \n \n symbol \n \u8d44\u4ea7\u7684\u6807\u8bc6\u7b26\uff08\u4ee3\u5e01\u4ee3\u7801\u3001\u73b0\u91d1\u6807\u7b7e\uff09 \n \n \n price \n \u4efb\u610f\u4e00\u5206\u949f\u5185\u8d44\u4ea7\u7684\u4ef7\u683c \n \n \n minute \n \u8fd9\u4e2a\u8868\u7684\u65f6\u95f4\u5c3a\u5ea6\u662f\u6bcf\u5206\u949f \n \n \n \n \u8bf7\u6ce8\u610f  WETH \u4f1a\u7528\u505a ETH \u7684\u4ef7\u683c\uff0c\u56e0\u4e3a\u5b83\u7684\u4ea4\u6613\u4ef7\u683c\u76f8\u540c\u3002 \n ", "url": "https://dune.com/docs/zh/reference/tables/prices/#pricesusd"}
{"content": "prices.layer_usd \u00b6 \n \u6b64\u8868\u652f\u6301\u5176\u4ed6\u533a\u5757\u94fe\u4e0a\u7684\u4e00\u5c42\u8d44\u4ea7\u3002 \n \n \n \n contract_address \n erc20\u4ee3\u5e01\u7684\u5408\u7ea6\u5730\u5740 \n \n \n \n \n symbol \n \u8d44\u4ea7\u7684\u6807\u8bc6\u7b26\uff08\u4ee3\u5e01\u4ee3\u7801\u3001\u73b0\u91d1\u6807\u7b7e\uff09 \n \n \n price \n \u4efb\u610f\u4e00\u5206\u949f\u5185\u8d44\u4ea7\u7684\u4ef7\u683c \n \n \n minute \n \u8fd9\u4e2a\u8868\u7684\u65f6\u95f4\u5c3a\u5ea6\u662f\u6bcf\u5206\u949f", "url": "https://dune.com/docs/zh/reference/tables/prices/#priceslayer_usd"}
{"content": "Press Kit \u00b6 \n ", "url": "https://dune.com/docs/resources/press-kit/#press-kit"}
{"content": "Primary - Standard Logo \u00b6 \n This is the primary Dune logo. It should be used in this format whenever possible. \n \n \n \n dune-standard-logo.svg  (../images/dune-standard-logo.svg) \n dune-standard-logo@2x.png  (../images/dune-standard-logo%402x.png) \n dune-standard-logo-dark.svg  (../images/dune-standard-logo-dark.svg) \n dune-standard-logo-dark@2x.png  (../images/dune-standard-logo-dark%402x.png) \n \n \n ", "url": "https://dune.com/docs/resources/press-kit/#primary-standard-logo"}
{"content": "Vertical logo \u00b6 \n \n \n \n dune-vertical-logo.svg  (../images/dune-vertical-logo.svg) \n dune-vertical-logo@2x.png  (../images/dune-vertical-logo%402x.png) \n dune-vertical-logo-dark.svg  (../images/dune-vertical-logo.svg) \n dune-vertical-logo-dark@2x.png  (../images/dune-vertical-logo-dark%402x.png) \n \n \n ", "url": "https://dune.com/docs/resources/press-kit/#vertical-logo"}
{"content": "Icon only \u00b6 \n \n \n \n dune-icon-only.svg  (../images/dune-icon-only.svg) \n dune-icon-only@2x.png  (../images/dune-icon-only%402x.png) \n \n \n ", "url": "https://dune.com/docs/resources/press-kit/#icon-only"}
{"content": "Complete set of all logos \u00b6 \n \n \n Dune-logo-Full.zip  (../images/Dune-logo-Full.zip)", "url": "https://dune.com/docs/resources/press-kit/#complete-set-of-all-logos"}
{"content": "The problem: Wizards + Projects != \u2728\ud83d\udcca \u00b6 \n Projects need data, Wizards want jobs. It's hard for one to find the other. \n Analytics tasks have been spread out between Twitter, Discord, Gitcoin, Layer3, Notion boards and a few other dark and hidden places.  \n It's hard for  Wizards  to keep track of all these locations they should look for jobs and there's unnecessary friction in the application and work-delivery process.  \n For  Projects , the lack of organization makes it exceedingly hard to find the right Wizard for the job and introduces unnecessary overhead in the management process. \n Fundamentally, this problem is solved through the creation of one marketplace for helping Wizards and Projects make the data flow. \n This one solution should be able to handle: \n \n task creation  \n the application process \n communication \n reputation \n payments \n \n and it should be web3 native. \n Thankfully this marketplace exists! \n ", "url": "https://dune.com/docs/resources/dune-bounties/#the-problem-wizards-projects"}
{"content": "The solution: Dune Bounties \u00b6 \n Leveraging  dework.xyz  (https://www.dework.xyz) , we've set up a bounty board to manage our Dune internal bounty programs - and we've set it up so it's accessible for other projects and organizations to make use of this infrastructure! \n Dework describes itself as a \u201cweb3 native Trello with payments and credentialing\".  \n What exactly does that mean? \n Let's hear what Lonis, co-founder of Dework, has to say: \n \n Dework offers infrastructure for us to write out tasks on our own  board  (https://app.dework.xyz/dune/board)  and allows other organizations to seamlessly connect with Dune Wizards by simply specifying \u201cDune Analytics\u201d as Skill. \n All open tasks that have the Dune Analytics Skill attached will appear in the  Dune hub  (https://app.dework.xyz/hubs/dune) , making it easy for Wizards to find tasks that need their skills. \n ", "url": "https://dune.com/docs/resources/dune-bounties/#the-solution-dune-bounties"}
{"content": "For projects in need of Wizards \u00b6 \n If you are an organization in need of web3 analytics, it\u2019s now easier than ever to connect with Dune Wizards! \n Self Serve  (#__tabbed_1_1) Supported approach  (#__tabbed_1_2) \n \n \n Dework's Documentation  (https://dework.gitbook.io/product-docs/guides-for-orgs/getting-started-on-dework)  is the best in-depth resource for getting started, but here's a short breakdown for convenience: \n \n \n Create an organization \n If you don\u2019t have a Dework organization yet, the first step is to create one. \n At a minimum, we recommend including a description, an icon and a link to your socials so Wizards know who they are working with. \n We also strongly recommend setting up the  Discord integrations  (https://dework.gitbook.io/product-docs/guides-for-orgs/connecting-to-discord)  to allow for easy communication with the chosen Applicants. \n \n \n Define tasks \n After completing the initial setup, you can start creating tasks for anything, but to work with Dune Wizards, you'll want to define tasks with the  \"Dune Analytics\" Skill\" . \n Once you have created a task, the task will be:  \n \n in your board \n in the  Dune hub  (https://app.dework.xyz/hubs/dune) .  \n \n From there on out, people can find your open task and apply or compete.\nAdditionally, you should share the task link with your community to get more applicants. \n \n \n Choose an applicant \n If you have defined a task that needs to be assigned to someone, you will get notifications within Dework and can vet the applicant using their work history, GitHub profile and any other attached information on their profile. \n We strongly recommend spending time and effort vetting your applicants to have a smooth bounty process. \n Once you choose an applicant to work with, they'll become a Dework \"contributor\" to your project. \n \n \n Review the work \n Once the Wizard applicant you have chosen has submitted their work, you can start reviewing the completed task. If it is satisfactory, you mark the task as done and initiate the payment process. \n \n \n Pay your contributor \n Dework integrates with Metamask, Gnosis Safe, Utopia Labs and even Phantom wallet for Solana based payments. You can choose whatever works best for you and your Wizard contributor here. \n \n \n \n \n \n Fill in this Typeform   \n \n We know setting up Dework, defining bounties, and managing your contributors can be quite a challenge. \n Reach out to us by clicking the button below and filling out our Typeform and we'll happily assist you in onboarding and running successful bounties. \n Typeform \n \n \n \n ", "url": "https://dune.com/docs/resources/dune-bounties/#for-projects-in-need-of-wizards"}
{"content": "For Wizards looking for work \u00b6 \n If you are a Wizard or a aspiring Wizard, join the Dune Analytics organization on Dework and start looking for tasks: \n \n On our board  (https://app.dework.xyz/dune/board) \n On the Dune hub  (https://app.dework.xyz/hubs/dune) \n \n Be sure to complete your profile with relevant links to your socials, GitHub and Dune profile so organizations can easily assess your skills and decide you're a perfect fit (the easier it is for them to see what you can do, the more likely they'll hire you!). \n ", "url": "https://dune.com/docs/resources/dune-bounties/#for-wizards-looking-for-work"}
{"content": "Some notes about working on Dune \u00b6 \n Dune can roughly be separated into two parts: \n \n The  App Layer \n The  Data Layer .  \n \n In the  App Layer , you can find  Queries  (../../app/query-editor/) ,  Visualizations  (../../app/visualizations/)  and  Dashboards  (../../app/dashboards/) .  \n Everything in the App Layer is public by default and can be utilized by other Wizards, but the work produced in the App Layer is not very persistent and most importantly doesn't enable other Wizard analysts to easily build on top of this work. \n Dune's  Data Layer  allows you and the Wizards you work with to produce scalable and persistent work by standardizing and normalizing data.  \n We call this data layer  Spellbook  (../../data-tables/spellbook/) .   \n A good example of the power of working in the Dune  Data Layer  is OpenSea's standardization and normalization of  all NFT trades across all chains and versions  (https://dune.com/spellbook#!/model/model.spellbook.opensea_trades) . \n By transforming their raw data and adding it to the  opensea.trades  table inside of Spellbook, 2 things can happen: \n \n Every Dune Wizard can easily work with OpenSea's data as it's cleaned and standardized. \n The data can be referenced in other Spellbook tables (\"Spells\") like  nft.trades ; this makes it even more likely that Wizards will incorporate OpenSea data into their work as the  nft.trades  table contains data from all marketplaces across all chains. \n \n In this way, a project like yours working in the Spellbook Data Layer can get a lot of leverage not only from whatever data analysis projects and visualizations you commission, but by making it more likely other Wizards will find and use your data, build it into their Dashboards, and generate interest in your project.  \n Though not necessarily required for your project, getting your data normalized, standardized and possibly inserted into one of our sector level tables like  nft.trades  is definitely recommended! \n Once that is done, people working in the  App layer  will have a much easier time building good queries, visualizations and dashboards since the hardest data engineering parts are already taken care of.   \n If this all sounds confusing to you, don't worry we can advise you in this process! \n Reach out via the  Typeform  (https://form.typeform.com/to/DtX4jqkd)  in the \"Supported approach\" tab above, or ask about building your project in Spellbook in our  #spellbook Discord channel  (https://discord.com/channels/757637422384283659/999683200563564655) ! \n TL;DR \nWe suggest working in this order so your data flows efficiently: \n \n Build Spells in the Data Layer to take care of the data engineering \n Build cool stuff in the App Layer to surface findings \n \n ", "url": "https://dune.com/docs/resources/dune-bounties/#some-notes-about-working-on-dune"}
{"content": "Dune Bounties FAQ \u00b6 \n \n I want to create a requests but how much should I pay/offer? \n Dune is an open platform on which you can build all kinds of analysis, Dashboards and Spells, so the official answer here is the dreaded \"it depends.\" \n Going rates for Freelance Dune Wizards seem to be anywhere between $30-$100 per hour. \n And you can always ask in our  #bounty-questions Discord  (https://discord.com/channels/757637422384283659/1025371996277706792)  or fill out the  Typeform  (https://form.typeform.com/to/DtX4jqkd)  in the \"Supported approach\" tab above to get some help on this!  \n \n \n Does Dune take a cut of bounty payments? \n Dune does not take a cut in any bounty payments. \n \n \n I don't have time/capacity to do this myself, can you run this for me? \n In some cases, the Dune team can actually run entire bounty campaigns/contests for you, but we can't offer this for every organization. \n Fill out the  Typeform  (https://form.typeform.com/to/DtX4jqkd)  in the \"Supported approach\" tab above and we'll let you know what we can do to help!  \n \n \n How do Wizards get paid for bounties? \n Dework has a native payment feature. Wizards simply connect their wallet in their Dework profile and will get paid as soon as the bounty is paid out by the Project that created the task. \n \n \n Can I run contests on Dework? \n You can indeed run contests on Dework, they are called \"multiple submissions.\" \n You can learn more in  Dework's documentation  (https://dework.gitbook.io/product-docs/fundamentals/task-types-and-assignee-gating#multiple-submissions) . \n After running contests it often makes sense to give one of the winners a follow-up task to reconcile the best ideas of all submitted dashboards into one final version. \n \n \n Is all of this public? \n Dework allows you to define tasks privately and publicly, if you wanted to you could for example limit tasks for only members of your Discord. \n \n \n How do I choose the right applicant? \n You can click on any profile in Dework to see what the Credentials of the person are. \n For example: \n https://app.dework.xyz/profile/hamzat_iii  (https://app.dework.xyz/profile/hamzat_iii) \n \n \n What's your recommend approach to organizing bounties for my Project and needs? \n Our advice is to first run specific tasks for adding your data to  Spellbook  (../../data-tables/spellbook/)  first and run a    Dashboard design contest afterwards. \n This way, your data will be easily accessible to any Dune Wizard in any Queries and Dashboards they imagine \n Then, by running a contest for Dashboard designs using Dework's \"multiple submissions\" feature, you'll ensure specific  Dashboards you want are created while also leaving room to be surprised by our Wizard's creativity.", "url": "https://dune.com/docs/resources/dune-bounties/#dune-bounties-faq"}
{"content": "Skip to content\n          (#left-sidebar) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/learning/how-tos/navigate-query-editor.md) \n Navigate the Query Editor \n In this guide, we'll provide an overview of the Dune Query Editor and its features. \n ", "url": "https://dune.com/docs/learning/how-tos/navigate-query-editor/"}
{"content": "Citing Dune \u00b6 \n \n \n Be the Galaxy Brain! \n \n Content on Dune is first and foremost the product of the creators (\"Wizards\") who build the Queries, Visualizations, and Dashboards we reference and share. \n Any mention or use of data or Visualizations you find on our platform should reference Dune as the source of such information and include a Dune logo, a direct link to dune.com and a reference to credit the creator(s) of the specific Query, Dashboard, or Data. \n Crediting should be done as follows: \n \" @rchen8  (https://dune.com/rchen8)  via   OpenSea monthly volume (Ethereum)  (https://dune.com/queries/3469/6913) \". \n If you're referencing a Dashboard, you can find the creator's User Name as well as the Dashboard's name at the top left of the page. \n The link to the users profile can be found by clicking their User Name: \n \n Likewise, you can find their User Name/Profile link and the Query/Visualization name at the top left side of a Query page: \n \n ", "url": "https://dune.com/docs/resources/citing-dune/#citing-dune"}
{"content": "Limitations of Commercial Use \u00b6 \n Do note that any form of copying, transmitting, transferring, modifying or creating derivative works from the original Queries and the public Dashboard or wrapping them in a white label manner for free or resale is strictly prohibited. \n Similarly, reproducing, sublicensing, transferring, duplicating, copying, selling, reselling, or any other forms of exploiting any portion, use or access to Dune without the express written permission by Dune is not allowed.", "url": "https://dune.com/docs/resources/citing-dune/#limitations-of-commercial-use"}
{"content": "Prerequisite \u00b6 \n \n This guide assumes you have basic understanding of what a graph, or a network is, including terminology like nodes, edges, weights, and directions.  \n If you need help here, please try resources like Medium and YouTube, which are just a Google search away.  \n If you need a specific recommendation, check this out, in both  written format  (https://towardsdatascience.com/social-network-analysis-from-theory-to-applications-with-python-d12e9a34c2c7)  and  video format  (https://www.youtube.com/watch?v=px7ff2_Jeqw)   \n \n ", "url": "https://dune.com/docs/learning/conduct-network-analysis/#prerequisite"}
{"content": "Setups and Dataset \u00b6 \n ", "url": "https://dune.com/docs/learning/conduct-network-analysis/#setups-and-dataset"}
{"content": "Construct Dataset \u00b6 \n To build a network, we need nodes and their relationships. Refer to  this Dune query  (https://dune.com/queries/3078764?category=third_party_data&schema=neynar&catalog=dune)  for data required. \n \n Nodes are identified by a unique \"fid\" (Farcaster ID). \n Relationships (edges) between nodes are based on four actions: follow, like, repost, and comment. \n Interaction weights are: follow = 5, like = 1, repost = 3, comment = 2. They consider directionality. \n These interactions as parameterized variables, adjust as needed. \n \n ", "url": "https://dune.com/docs/learning/conduct-network-analysis/#construct-dataset"}
{"content": "Packages and Imports \u00b6 \n Install required packages with: \n  (#__codelineno-0-1) pip   install   -r   requirements.txt\n \n This is the content in  requirements.txt  (https://github.com/duneanalytics/python-notebook-examples/blob/main/social_network/requirements.txt) :\n  (#__codelineno-1-1) pandas\n  (#__codelineno-1-2) networkx\n  (#__codelineno-1-3) python-louvain\n  (#__codelineno-1-4) matplotlib\n  (#__codelineno-1-5) plotly\n  (#__codelineno-1-6) python-dotenv\n  (#__codelineno-1-7) dune-client\n  (#__codelineno-1-8) nltk\n \n Then, load necessary libraries: \n  (#__codelineno-2-1) import   pandas   as   pd  \n  (#__codelineno-2-2) import   networkx   as   nx  \n  (#__codelineno-2-3) import   community   as   community_louvain \n  (#__codelineno-2-4) from   networkx   import   community \n  (#__codelineno-2-5) import   matplotlib.pyplot   as   plt  \n  (#__codelineno-2-6) import   plotly.graph_objects   as   go \n  (#__codelineno-2-7) import   dotenv ,   os ,   json \n  (#__codelineno-2-8) from   dune_client.types   import   QueryParameter \n  (#__codelineno-2-9) from   dune_client.client   import   DuneClient \n  (#__codelineno-2-10) from   dune_client.query   import   QueryBase \n  (#__codelineno-2-11) from   multiprocessing   import   Pool \n  (#__codelineno-2-12) import   nltk \n  (#__codelineno-2-13) from   nltk.tokenize   import   word_tokenize \n  (#__codelineno-2-14) from   nltk.corpus   import   stopwords \n  (#__codelineno-2-15) from   collections   import   Counter \n  (#__codelineno-2-16) import   random \n  (#__codelineno-2-17) import   itertools \n  (#__codelineno-2-18) import   warnings \n  (#__codelineno-2-19) \n  (#__codelineno-2-20) nltk . download ( 'stopwords' ) \n  (#__codelineno-2-21) nltk . download ( 'punkt' ) \n \n ", "url": "https://dune.com/docs/learning/conduct-network-analysis/#packages-and-imports"}
{"content": "Environment Setup for Dune API Python Client \u00b6 \n For the Dune API, obtain an API key: \n \n Go to Settings \u2192 API. \n Select \"Create new API key\". \n Copy the entire key. \n \n \n Set up a .env file and paste in your API key:\n  (#__codelineno-3-1) DUNE_API_KEY=<insert your key>\n  (#__codelineno-3-2) DUNE_API_REQUEST_TIMEOUT=120\n \nAdjust the timeout as necessary.\n ", "url": "https://dune.com/docs/learning/conduct-network-analysis/#environment-setup-for-dune-api-python-client"}
{"content": "Import Data into Notebook and Construct the DiGraph \u00b6 \n There are two methods to export data from Dune and into notebook: \n Get Latest Result  (#__tabbed_1_1) Query a Query  (#__tabbed_1_2) \n \n \n Retrieve the latest result, which is faster as it bypasses execution. \n  (#__codelineno-4-1) query_result   =   pd . DataFrame ( dune . get_latest_result ( 3078764 ,   max_age_hours = 72 ) . result . rows ) \n  (#__codelineno-4-2) # can call get_latest_result_dataframe once newest version of Dune Client is released \n \n \n \n Trigger a new execution, allowing flexible parameter adjustments directly from the notebook. \n  (#__codelineno-5-1) query   =   QueryBase ( \n  (#__codelineno-5-2)      name = \"Farcaster Centrality Measures\" , \n  (#__codelineno-5-3)      query_id = 3078764 , \n  (#__codelineno-5-4)      params = [ \n  (#__codelineno-5-5)          # Here we can play with different weights we are assigning to each type of reaction in this directed graph \n  (#__codelineno-5-6)          QueryParameter . number_type ( name = \"follow_points\" ,   value = 5 ), \n  (#__codelineno-5-7)          QueryParameter . number_type ( name = \"like_points\" ,   value = 1 ), \n  (#__codelineno-5-8)          QueryParameter . number_type ( name = \"recast_points\" ,   value = 3 ), \n  (#__codelineno-5-9)          QueryParameter . number_type ( name = \"reply_points\" ,   value = 2 ), \n  (#__codelineno-5-10)          QueryParameter . number_type ( name = \"past_n_months\" ,   value = 1 ), \n  (#__codelineno-5-11)      ], \n  (#__codelineno-5-12) ) \n  (#__codelineno-5-13) query_result   =   dune . run_query_dataframe ( query = query ,   performance = \"large\" )   # specify large cluster for faster runtime \n \n \n \n \n To build a  DiGraph  (https://networkx.org/documentation/stable/reference/classes/digraph.html#networkx.DiGraph)  (graph with directed edges), simply use  NetworkX 's  from_pandas_edgelist  function  (https://networkx.org/documentation/stable/reference/generated/networkx.convert_matrix.from_pandas_edgelist.html) . \n  (#__codelineno-6-1) G   =   nx . from_pandas_edgelist ( query_result ,  \n  (#__codelineno-6-2)                              source = 'from_user' , \n  (#__codelineno-6-3)                              target = 'to_user' , \n  (#__codelineno-6-4)                              edge_attr = 'total_points' , \n  (#__codelineno-6-5)                              create_using = nx . DiGraph ()) \n \n With our setup complete, let's dive into the summary statistics of the social network we've constructed. \n ", "url": "https://dune.com/docs/learning/conduct-network-analysis/#import-data-into-notebook-and-construct-the-digraph"}
{"content": "\ud83d\udcca Part 1: Summary Statistics \u00b6 \n Let's start by assessing our graph's summary statistics such as density and average degree. Through metrics like density and average degree, we see Farcaster users are sparsely connected. A plotted degree distribution and number of strongly connected components reveal few highly connected users and significant segmentation into isolated clusters. \n Here's a brief code snippet. For the comprehensive version, visit the  Github notebook  (https://github.com/duneanalytics/python-notebook-examples/blob/main/social_network/Farcaster%20Network%20Analysis%20(Summary%20Stats%2C%20Centrality%20Measures%2C%20Sampling%2C%20%26%20Community%20Detection).ipynb) . \n Density  (#__tabbed_2_1) Avg Degree  (#__tabbed_2_2) Degree Distribution  (#__tabbed_2_3) Strongly Connected Components  (#__tabbed_2_4) \n \n \n  (#__codelineno-7-1) density   =   nx . density ( G ) \n  (#__codelineno-7-2) print ( f \"Density:  { density : .4f } \" ) \n \n \n \n  (#__codelineno-8-1) avg_degree   =   sum ( dict ( G . degree ()) . values ())   /   float ( len ( G . nodes )) \n  (#__codelineno-8-2) print ( f \"Average Degree:  { avg_degree : .4f } \" ) \n \n \n \n  (#__codelineno-9-1) degree_sequence   =   sorted ([ d   for   n ,   d   in   G . degree ()],   reverse = True ) \n  (#__codelineno-9-2) \n  (#__codelineno-9-3) plt . hist ( degree_sequence ,   bins = 20 ) \n  (#__codelineno-9-4) plt . title ( \"Degree Distribution\" ) \n  (#__codelineno-9-5) plt . xlabel ( \"Degree\" ) \n  (#__codelineno-9-6) plt . ylabel ( \"Count\" ) \n \n \n \n  (#__codelineno-10-1) num_strongly_conn_comp   =   nx . number_strongly_connected_components ( G ) \n  (#__codelineno-10-2) print ( f \"Number of Strongly Connected Components:  { num_strongly_conn_comp } \" ) \n \n \n \n \n ", "url": "https://dune.com/docs/learning/conduct-network-analysis/#part-1-summary-statistics"}
{"content": "\ud83d\udccf Part 2: Centrality Measures \u00b6 \n Centrality measures identify important nodes in a network, but \"importance\" can be defined in many ways. In this guide, we will explore:  \n \n Degree Centrality : Gauges a node's exposure by counting its connected edges.\n  (#__codelineno-11-1) degree_centrality   =   nx . degree_centrality ( G ) \n \n Betweenness Centrality : Measures a node's control over communication between others.\n  (#__codelineno-12-1) betweenness_centrality   =   nx . betweenness_centrality ( G ,   normalized = True )   # can add k=1000 when optimization is needed \n \n Closeness Centrality : Assesses how fast information spreads from one node to all others.\n  (#__codelineno-13-1) closeness_centrality   =   nx . closeness_centrality ( G ) \n \n Eigenvector Centrality : Evaluates influence based on the importance of connected nodes.\n  (#__codelineno-14-1) eigenvector_centrality   =   nx . eigenvector_centrality ( G ,   max_iter = 200 ) \n \n PageRank : Used by Google, it considers the structure of incoming links.\n  (#__codelineno-15-1) pagerank   =   nx . pagerank ( G ,   alpha = 0.85 ) \n \n \n Again, above is a brief code snippet. For the comprehensive version, visit the  Github notebook  (https://github.com/duneanalytics/python-notebook-examples/blob/main/social_network/Farcaster%20Network%20Analysis%20(Summary%20Stats%2C%20Centrality%20Measures%2C%20Sampling%2C%20%26%20Community%20Detection).ipynb) . \n \ud83d\udc51 And the influencer crown? Unsurprisingly, it goes to Farcaster's founder, Dan (dwr.eth). Of course, who else could it be? \ud83d\ude09 \n ", "url": "https://dune.com/docs/learning/conduct-network-analysis/#part-2-centrality-measures"}
{"content": "\ud83c\udfa8 Bonus part: Visualizing Networks \u00b6 \n Visualization enhances any analysis, but visualizing extensive networks like ours can be a maze. Let's navigate two visualization paths you can adapt further: \n \n \n In Gephi:  Gephi  (https://gephi.org/)  is a good tool to presenting large networks comprehensively. Export the graph from Python with nx.write_gml(G, \"file_name.gml\") and dive into Gephi. Tweak node sizes, colors, and labels to distill insights. \n \n \n In Python notebook: for a more focused lens, visualize the top 200 nodes by degree with NetworkX. Node color denotes out-degree: a blue node engages less, while a red one is more active. Node size illustrates in-degree, reflecting the interactions received. \n \n \n Static  (#__tabbed_3_1) Interactive  (#__tabbed_3_2) \n \n \n  (#__codelineno-16-1) # Layout \n  (#__codelineno-16-2) pos   =   nx . spring_layout ( G ) \n  (#__codelineno-16-3) \n  (#__codelineno-16-4) # Node Colors (heatmap-style based on out-degree) \n  (#__codelineno-16-5) out_degrees   =   [ G . out_degree ( n )   for   n   in   G . nodes ()] \n  (#__codelineno-16-6) max_out_degree   =   max ( out_degrees ) \n  (#__codelineno-16-7) colors   =   plt . cm . coolwarm ([ d / max_out_degree   for   d   in   out_degrees ]) \n  (#__codelineno-16-8) \n  (#__codelineno-16-9) # Adjusting alpha for visibility \n  (#__codelineno-16-10) alpha_values   =   [ 0.7   +   0.3   *   ( d / max_out_degree )   for   d   in   out_degrees ] \n  (#__codelineno-16-11) \n  (#__codelineno-16-12) # Node Sizes (based on in-degree) \n  (#__codelineno-16-13) in_degrees   =   [ G . in_degree ( n )   for   n   in   G . nodes ()] \n  (#__codelineno-16-14) size_factor   =   10    # adjust this value to fit your needs \n  (#__codelineno-16-15) sizes   =   [ d   *   size_factor   for   d   in   in_degrees ] \n  (#__codelineno-16-16) \n  (#__codelineno-16-17) # Set the figure size \n  (#__codelineno-16-18) plt . figure ( figsize = ( 15 ,   10 )) \n  (#__codelineno-16-19) \n  (#__codelineno-16-20) # Draw Nodes and Edges \n  (#__codelineno-16-21) nx . draw_networkx_nodes ( G ,   pos ,   node_color = colors ,   node_size = sizes ,   alpha = alpha_values )  \n  (#__codelineno-16-22) nx . draw_networkx_edges ( G ,   pos ,   edge_color = 'gray' ,   alpha = 0.5 )    # Set edge color to gray or any distinct color you prefer \n  (#__codelineno-16-23) nx . draw_networkx_labels ( G ,   pos )    # Optional: if you want labels on nodes \n  (#__codelineno-16-24) \n  (#__codelineno-16-25) plt . title ( \"Top 200 influential users in Farcaster network\" ) \n  (#__codelineno-16-26) plt . show () \n \n \n \n  (#__codelineno-17-1) # Layout \n  (#__codelineno-17-2) pos   =   nx . kamada_kawai_layout ( G ) \n  (#__codelineno-17-3) \n  (#__codelineno-17-4) # Node Colors (heatmap-style based on out-degree) \n  (#__codelineno-17-5) out_degrees   =   [ G . out_degree ( n )   for   n   in   G . nodes ()] \n  (#__codelineno-17-6) max_out_degree   =   max ( out_degrees ) \n  (#__codelineno-17-7) colorscale   =   [[ 0 ,   'blue' ],   [ 1 ,   'red' ]] \n  (#__codelineno-17-8) node_colors   =   [ d / max_out_degree   for   d   in   out_degrees ] \n  (#__codelineno-17-9) \n  (#__codelineno-17-10) # Node Sizes (adjusted for better visibility) \n  (#__codelineno-17-11) size_factor   =   0.5 \n  (#__codelineno-17-12) sizes   =   [ d   *   size_factor   +   5   for   d   in   in_degrees ]    # Added a constant to ensure even nodes with 0 in-degrees are visible \n  (#__codelineno-17-13) \n  (#__codelineno-17-14) # Edge coordinates for plotting \n  (#__codelineno-17-15) edge_x   =   [] \n  (#__codelineno-17-16) edge_y   =   [] \n  (#__codelineno-17-17) for   edge   in   G . edges (): \n  (#__codelineno-17-18)      x0 ,   y0   =   pos [ edge [ 0 ]] \n  (#__codelineno-17-19)      x1 ,   y1   =   pos [ edge [ 1 ]] \n  (#__codelineno-17-20)      edge_x . extend ([ x0 ,   x1 ,   None ]) \n  (#__codelineno-17-21)      edge_y . extend ([ y0 ,   y1 ,   None ]) \n  (#__codelineno-17-22) \n  (#__codelineno-17-23) # Node coordinates for plotting \n  (#__codelineno-17-24) node_x   =   [ pos [ node ][ 0 ]   for   node   in   G . nodes ()] \n  (#__codelineno-17-25) node_y   =   [ pos [ node ][ 1 ]   for   node   in   G . nodes ()] \n  (#__codelineno-17-26) \n  (#__codelineno-17-27) # Node Labels \n  (#__codelineno-17-28) labels   =   list ( G . nodes ()) \n  (#__codelineno-17-29) \n  (#__codelineno-17-30) # Create the plot using Plotly \n  (#__codelineno-17-31) edge_trace   =   go . Scatter ( x = edge_x ,   y = edge_y ,   mode = 'lines' ,   line = dict ( color = 'gray' ,   width = 0.5 ),   opacity = 0.7 ) \n  (#__codelineno-17-32) node_trace   =   go . Scatter ( x = node_x ,   y = node_y ,   mode = 'markers+text' ,   marker = dict ( size = sizes ,   color = node_colors ,   colorscale = colorscale ,   showscale = True ,   opacity = 0.8 ),   text = labels ,   textposition = \"top center\" ,   hoverinfo = 'text' ) \n  (#__codelineno-17-33) \n  (#__codelineno-17-34) fig   =   go . Figure ( data = [ edge_trace ,   node_trace ]) \n  (#__codelineno-17-35) \n  (#__codelineno-17-36) # Adjusting layout for better visualization \n  (#__codelineno-17-37) fig . update_layout ( showlegend = False ,   hovermode = 'closest' ,   width = 1000 ,   height = 1000 ) \n  (#__codelineno-17-38) \n  (#__codelineno-17-39) fig . show () \n \n \n \n \n In our interactive plot, briang (large, blue) contrasts with n (smaller, red). It suggests briang attracts more interactions, whereas n is the initiator in recent activity. \n ", "url": "https://dune.com/docs/learning/conduct-network-analysis/#bonus-part-visualizing-networks"}
{"content": "\ud83d\udd0d Part 3: Graph Sampling \u00b6 \n Graph sampling is essential for handling large networks. Random Node Sampling (RNS) and Random Walk Sampling (RWS) are two simple methods we will cover here. \n Again, below is a brief code snippet. For the comprehensive version, visit the  Github notebook  (https://github.com/duneanalytics/python-notebook-examples/blob/main/social_network/Farcaster%20Network%20Analysis%20(Summary%20Stats%2C%20Centrality%20Measures%2C%20Sampling%2C%20%26%20Community%20Detection).ipynb) . \n Random Node Sampling  (#__tabbed_4_1) Random Walk Sampling  (#__tabbed_4_2) \n \n \n  (#__codelineno-18-1) def   random_node_sampling ( graph ,   num_nodes ,   seed = None ): \n  (#__codelineno-18-2)      if   seed   is   not   None : \n  (#__codelineno-18-3)          random . seed ( seed )    # Set the random seed if provided \n  (#__codelineno-18-4) \n  (#__codelineno-18-5)      sampled_nodes   =   random . sample ( graph . nodes (),   num_nodes ) \n  (#__codelineno-18-6)      return   graph . subgraph ( sampled_nodes ) \n \n \n \n Note that we need to pick a node to start this random walk. \n  (#__codelineno-19-1) def   random_walk_sampling ( graph ,   start_node ,   num_nodes ,   seed = None ): \n  (#__codelineno-19-2)      if   seed   is   not   None : \n  (#__codelineno-19-3)          random . seed ( seed )    # Set the random seed if provided \n  (#__codelineno-19-4) \n  (#__codelineno-19-5)      sampled_nodes   =   set ([ start_node ]) \n  (#__codelineno-19-6)      current_node   =   start_node \n  (#__codelineno-19-7) \n  (#__codelineno-19-8)      while   len ( sampled_nodes )   <   num_nodes : \n  (#__codelineno-19-9)          neighbors   =   list ( graph . neighbors ( current_node )) \n  (#__codelineno-19-10) \n  (#__codelineno-19-11)          # If there are no neighbors, backtrack to a previously visited node \n  (#__codelineno-19-12)          if   not   neighbors : \n  (#__codelineno-19-13)              previous_nodes   =   list ( sampled_nodes ) \n  (#__codelineno-19-14)              random . shuffle ( previous_nodes ) \n  (#__codelineno-19-15)              for   previous_node   in   previous_nodes : \n  (#__codelineno-19-16)                  neighbors   =   list ( graph . neighbors ( previous_node )) \n  (#__codelineno-19-17)                  if   neighbors : \n  (#__codelineno-19-18)                      current_node   =   random . choice ( neighbors ) \n  (#__codelineno-19-19)                      break \n  (#__codelineno-19-20) \n  (#__codelineno-19-21)          # If there are neighbors, choose a random one \n  (#__codelineno-19-22)          else : \n  (#__codelineno-19-23)              current_node   =   random . choice ( neighbors ) \n  (#__codelineno-19-24) \n  (#__codelineno-19-25)          sampled_nodes . add ( current_node ) \n  (#__codelineno-19-26) \n  (#__codelineno-19-27)      return   graph . subgraph ( sampled_nodes ) \n \n \n \n \n ", "url": "https://dune.com/docs/learning/conduct-network-analysis/#part-3-graph-sampling"}
{"content": "\ud83c\udfd8\ufe0f Part 4: Community Detection \u00b6 \n Community detection, akin to clustering in traditional data analysis, reveals hidden structures within our sampled graph. While you might lean towards classic algorithms like k-means, specialized methods like the Louvain, which focuses on modularity, offer tailored insights. But remember, there's no universal solution\u2014your choice should resonate with your graph's nature and your objectives. \n Here we illustrate how to use Louvain and Girvan-Newman methods to perform community detection on our sampled network (derived by doing random node sampling). \n Louvain  (#__tabbed_5_1) Girvan-Newman  (#__tabbed_5_2) Example community detection  (#__tabbed_5_3) \n \n \n  (#__codelineno-20-1) def   louvain_community ( G ,   n = 3 ,   draw = True ): \n  (#__codelineno-20-2)      partition   =   community_louvain . best_partition ( G ) \n  (#__codelineno-20-3)      pos   =   nx . spring_layout ( G ) \n  (#__codelineno-20-4)      draw_communities ( G ,   partition ,   pos ,   draw ) \n  (#__codelineno-20-5)      num_communities ,   average_size ,   sorted_communities   =   get_community_stats ( partition ) \n  (#__codelineno-20-6)      print ( f \"Number of detected communities:  { num_communities } \" ) \n  (#__codelineno-20-7)      print ( f \"Average community size:  { average_size : .2f }  nodes \\n \" ) \n  (#__codelineno-20-8)      print_top_communities ( n ,   sorted_communities ) \n  (#__codelineno-20-9)      return   sorted_communities [: n ]   if   n   else   sorted_communities \n \n \n \n  (#__codelineno-21-1) def   girvan_newman_community ( G ,   n = 3 ,   draw = True ): \n  (#__codelineno-21-2)      communities_generator   =   community . girvan_newman ( G ) \n  (#__codelineno-21-3)      top_level_communities   =   next ( communities_generator ) \n  (#__codelineno-21-4)      partition_gn   =   { node :   cid   +   1   for   cid ,   community   in   enumerate ( top_level_communities )   for   node   in   community } \n  (#__codelineno-21-5)      pos   =   nx . spring_layout ( G ) \n  (#__codelineno-21-6)      draw_communities ( G ,   partition_gn ,   pos ,   draw ) \n  (#__codelineno-21-7)      num_communities ,   average_size ,   sorted_communities   =   get_community_stats ( partition_gn ) \n  (#__codelineno-21-8)      print ( f \"Number of detected communities:  { num_communities } \" ) \n  (#__codelineno-21-9)      print ( f \"Average community size:  { average_size : .2f }  nodes \\n \" ) \n  (#__codelineno-21-10)      print ( f \"Top  { n }  Communities:\" ) \n  (#__codelineno-21-11)      print_top_communities ( n ,   sorted_communities ) \n  (#__codelineno-21-12)      return   sorted_communities [: n ]   if   n   else   sorted_communities \n \n \n \n  (#__codelineno-22-1) result_louvain_random_node   =   louvain_community ( random_node_sampling ( G ,   500 ,   11 ) . to_undirected ()) \n \n \n \n \n With these communities in hand, it's time to dig deeper.  Here we illustrate how to take the top 3 communities detected in above steps, use  Dune API and parameters to retrieve social posts of these communities  (https://dune.com/queries/3128246) , and perform a word frequency analysis. This will shed light on the unique conversational nuances of each group. \n  (#__codelineno-23-1) # Create a figure and a grid of subplots \n  (#__codelineno-23-2) fig ,   axs   =   plt . subplots ( 3 ,   1 ,   figsize = ( 20 ,   15 )) \n  (#__codelineno-23-3) \n  (#__codelineno-23-4) for   idx ,   result_list   in   enumerate ( result_louvain_random_node ):   # replace the results here \n  (#__codelineno-23-5)      # Joining items and formatting string \n  (#__codelineno-23-6)      quoted_items   =   \"', '\" . join ( result_list ) \n  (#__codelineno-23-7)      formatted_string   =   f \"' { quoted_items } '\" \n  (#__codelineno-23-8) \n  (#__codelineno-23-9)      # Define the query \n  (#__codelineno-23-10)      query   =   QueryBase ( \n  (#__codelineno-23-11)          name = \"Farcaster texts lookup by handles\" , \n  (#__codelineno-23-12)          query_id = 3128246 ,   # https://dune.com/queries/3128246 \n  (#__codelineno-23-13)          params = [ \n  (#__codelineno-23-14)              QueryParameter . text_type ( name = \"farcaster_handles\" ,   value = formatted_string ), \n  (#__codelineno-23-15)              QueryParameter . number_type ( name = \"past_n_months\" ,   value = 1 ), \n  (#__codelineno-23-16)          ], \n  (#__codelineno-23-17)      ) \n  (#__codelineno-23-18)      query_result   =   dune . run_query_dataframe ( query = query ,   performance = \"large\" )    # Specify large cluster for faster runtime \n  (#__codelineno-23-19) \n  (#__codelineno-23-20)      est_credits   =   query_result . size / 1_000   +   20   # 20 credits for large cluster \n  (#__codelineno-23-21)      print ( f \"\u26fd Estimated credit consumption from this run is  { est_credits : ,.1f } \" ) \n  (#__codelineno-23-22) \n  (#__codelineno-23-23) \n  (#__codelineno-23-24)      # Concatenating all text data from the 'text' column into a single string \n  (#__codelineno-23-25)      text_data   =   query_result [ 'text' ] . str . cat ( sep = ' ' ) \n  (#__codelineno-23-26) \n  (#__codelineno-23-27)      # Tokenization \n  (#__codelineno-23-28)      tokens   =   word_tokenize ( text_data . lower ())    # Converts to lowercase \n  (#__codelineno-23-29) \n  (#__codelineno-23-30)      # Removing stopwords \n  (#__codelineno-23-31)      tokens   =   [ word   for   word   in   tokens   if   word . isalpha ()   and   word   not   in   stopwords . words ( 'english' )] \n  (#__codelineno-23-32) \n  (#__codelineno-23-33)      # Word frequency \n  (#__codelineno-23-34)      word_freq   =   Counter ( tokens ) \n  (#__codelineno-23-35) \n  (#__codelineno-23-36)      # Get the most common words and their counts \n  (#__codelineno-23-37)      words ,   counts   =   zip ( * word_freq . most_common ( 10 )) \n  (#__codelineno-23-38) \n  (#__codelineno-23-39)      # Plotting on the corresponding subplot \n  (#__codelineno-23-40)      axs [ idx ] . bar ( words ,   counts ) \n  (#__codelineno-23-41)      axs [ idx ] . set_xlabel ( 'Words' ) \n  (#__codelineno-23-42)      axs [ idx ] . set_ylabel ( 'Frequency' ) \n  (#__codelineno-23-43)      axs [ idx ] . set_title ( f 'Word Frequency Analysis - List  { idx   +   1 } ' ) \n  (#__codelineno-23-44) \n  (#__codelineno-23-45)      # Set the font size of the x-axis labels \n  (#__codelineno-23-46)      axs [ idx ] . tick_params ( axis = 'x' ,   labelsize = 15 )    # Change 12 to the desired font size \n  (#__codelineno-23-47) \n  (#__codelineno-23-48) \n  (#__codelineno-23-49) # Adjust the spacing between the plots \n  (#__codelineno-23-50) plt . tight_layout () \n  (#__codelineno-23-51) plt . show () \n \n But of course, with text analysis, you can venture into topic modeling or sentiment analysis. There's a universe of analytical adventures waiting! \n ", "url": "https://dune.com/docs/learning/conduct-network-analysis/#part-4-community-detection"}
{"content": "Conclusion \u00b6 \n We've crafted a primer on conducting social network analysis using Farcaster with the Dune API and Python. Farcaster's decentralized data offers a unique perspective, especially when mainstream platforms like Facebook restrict access, and even Twitter is tightening its grip. Dive into summary statistics, centrality measures, graph sampling, and community detection using real-world data. \n Explore how to interact with Dune's data via its API and seamlessly export for your analysis endeavors. If your curiosity beckons and you're keen to experiment, let this guide be your helper companion. \n Let's get connected! Any questions or thoughts about this guide or ideas for future guide, let me know via  LinkedIn  (https://www.linkedin.com/in/jackieyingzhuzhang/) ,  Twitter  (https://twitter.com/agaperste)  or  Warpcast  (https://warpcast.com/agaperste-) !", "url": "https://dune.com/docs/learning/conduct-network-analysis/#conclusion"}
{"content": "\ud83c\udf93 What is a Sankey Diagram? \u00b6 \n Sankey diagrams are flow diagrams in which the width of the arrows or lines are proportional to the flow quantity they represent. They're commonly used to depict the flow of energy, material, or costs between stages. So if you've been longing to visualize the movement of tokens between wallets, or how users transition between different app states, a Sankey diagram is your weapon of choice! \n For a deeper dive,  check this article  (https://medium.com/@twelsh37/understanding-plotly-sankey-charting-3ee263a81549) . \n ", "url": "https://dune.com/docs/learning/create-sankey-diagram/#what-is-a-sankey-diagram"}
{"content": "Expected Data Input: \u00b6 \n The key components for a Sankey are: \n \n Source & Target: Indexes of where the flow starts and where it ends. \n Value: The quantity of flow between the source and target. \n \n ", "url": "https://dune.com/docs/learning/create-sankey-diagram/#expected-data-input"}
{"content": "\u26f2 Let's Generate that Sankey! \u00b6 \n Here, we will walk through two examples. Example 1 is to graph a Sankey for a certain subset of RabbitHole Quests with Optimism grant, see how the questors are retained after 1 month period. Example 2 is to graph a Sankey for the token flow when swapping USDC for WETH using Uniswap if the swap is not direct.  \n We will show you different ways to fetch data from Dune API in the process as well.  \n ", "url": "https://dune.com/docs/learning/create-sankey-diagram/#lets-generate-that-sankey"}
{"content": "1. Setup \u00b6 \n Import all necessary libraries and authenticate to set up DuneClient. \n \n Note \n \n Make sure you create have a .env file created with your 'DUNE_API_KEY' in it!  \n Replace the path to your own directory in  os.chdir(...) \n \n \n  (#__codelineno-0-1) import   pandas   as   pd \n  (#__codelineno-0-2) import   plotly.graph_objects   as   go \n  (#__codelineno-0-3) import   colorlover   as   cl \n  (#__codelineno-0-4) import   pandas   as   pd \n  (#__codelineno-0-5) import   dotenv ,   os ,   json \n  (#__codelineno-0-6) from   dune_client.types   import   QueryParameter \n  (#__codelineno-0-7) from   dune_client.client   import   DuneClient \n  (#__codelineno-0-8) from   dune_client.query   import   QueryBase \n  (#__codelineno-0-9) \n  (#__codelineno-0-10) # change the current working directory where .env file lives \n  (#__codelineno-0-11) os . chdir ( \"...\" )   # please replace with path to your own current directory \n  (#__codelineno-0-12) # load .env file \n  (#__codelineno-0-13) dotenv . load_dotenv ( \".env\" ) \n  (#__codelineno-0-14) # setup Dune Python client \n  (#__codelineno-0-15) dune   =   DuneClient . from_env () \n \n ", "url": "https://dune.com/docs/learning/create-sankey-diagram/#1-setup"}
{"content": "2. Fetch the data for Sankey \u00b6 \n Example 1:  Get query result by fetching the latest result executed  (#__tabbed_1_1) Example 2: Run query execution with param to get query result  (#__tabbed_1_2) \n \n \n  (#__codelineno-1-1)      query_result   =   dune . get_latest_result ( 3055630 ,   max_age_hours = 72 ) \n  (#__codelineno-1-2)      query_result   =   pd . DataFrame ( query_result . result . rows ) \n \n \n \n  (#__codelineno-2-1)      query   =   QueryBase ( \n  (#__codelineno-2-2)          name = \"Flow of tokens when swapping on Uniswap (Ethereum chain)\" , \n  (#__codelineno-2-3)          query_id = 3062941 , \n  (#__codelineno-2-4)          params = [ \n  (#__codelineno-2-5)              QueryParameter . text_type ( name = \"include_direct_swap\" ,   value = \"false\" ), \n  (#__codelineno-2-6)              QueryParameter . number_type ( name = \"threshold\" ,   value = 50 ), \n  (#__codelineno-2-7)              QueryParameter . text_type ( \n  (#__codelineno-2-8)                  name = \"token_A_address\" ,   value = \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\"   # USDC address \n  (#__codelineno-2-9)              ), \n  (#__codelineno-2-10)              QueryParameter . text_type ( \n  (#__codelineno-2-11)                  name = \"token_B_address\" ,   value = \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\"   # WETH address \n  (#__codelineno-2-12)              ), \n  (#__codelineno-2-13)          ], \n  (#__codelineno-2-14)      ) \n  (#__codelineno-2-15)      query_result   =   dune . run_query_dataframe ( query = query ,   performance = \"large\" )   # specify large cluster for faster runtime \n \n \n \n \n ", "url": "https://dune.com/docs/learning/create-sankey-diagram/#2-fetch-the-data-for-sankey"}
{"content": "3. Customize colors, if needed \u00b6 \n Example 1  (#__tabbed_2_1) Example 2  (#__tabbed_2_2) \n \n \n  (#__codelineno-3-1)      predefined_colors   =   { \n  (#__codelineno-3-2)          'velodrome' :   'rgb(66, 135, 245)' , \n  (#__codelineno-3-3)          'beethoven' :   'rgb(245, 66, 78)' , \n  (#__codelineno-3-4)          'clipper' :   'rgb(226, 194, 88)' , \n  (#__codelineno-3-5)          'matcha' :   'rgb(156, 217, 177)' , \n  (#__codelineno-3-6)          'uniswap' :   'rgb(209, 21, 102)' , \n  (#__codelineno-3-7)          'rabbithole' :   'rgb(112, 24, 225)' \n  (#__codelineno-3-8)      } \n \n \n \n  (#__codelineno-4-1)      predefined_colors   =   { \n  (#__codelineno-4-2)          \"USDC\" :   \"rgb(38, 112, 196)\" , \n  (#__codelineno-4-3)          \"USDT\" :   \"rgb(0, 143, 142)\" , \n  (#__codelineno-4-4)          \"WETH\" :   \"rgb(144, 144, 144)\" , \n  (#__codelineno-4-5)          \"WBTC\" :   \"rgb(247, 150, 38)\" , \n  (#__codelineno-4-6)          \"COMP\" :   \"rgb(32, 217, 152)\" , \n  (#__codelineno-4-7)          \"DAI\" :   \"rgb(254, 175, 48)\" , \n  (#__codelineno-4-8)          \"MKR\" :   \"rgb(38, 173, 158)\" , \n  (#__codelineno-4-9)          \"UNI\" :   \"rgb(255, 21, 126)\" , \n  (#__codelineno-4-10)      } \n \n \n \n \n ", "url": "https://dune.com/docs/learning/create-sankey-diagram/#3-customize-colors-if-needed"}
{"content": "4. Define the function to make Sankey diagram \u00b6 \n  (#__codelineno-5-1) # function to create Sankey diagram \n  (#__codelineno-5-2) def   create_sankey ( \n  (#__codelineno-5-3)      query_result :   pd . DataFrame , \n  (#__codelineno-5-4)      predefined_colors :   dict , \n  (#__codelineno-5-5)      columns :   dict , \n  (#__codelineno-5-6)      viz_config :   dict , \n  (#__codelineno-5-7)      title :   str   =   \"unnamed\" , \n  (#__codelineno-5-8) ): \n  (#__codelineno-5-9)      \"\"\" \n  (#__codelineno-5-10)     Creates a Sankey diagram based on input query_result \n  (#__codelineno-5-11)     , which must contain source, target, value columns \n  (#__codelineno-5-12)     \"\"\" \n  (#__codelineno-5-13)      # Check if the dataframe contains required columns \n  (#__codelineno-5-14)      required_columns   =   [ columns [ \"source\" ],   columns [ \"target\" ],   columns [ \"value\" ]] \n  (#__codelineno-5-15)      for   col   in   required_columns : \n  (#__codelineno-5-16)          if   col   not   in   query_result . columns : \n  (#__codelineno-5-17)              raise   ValueError ( f \"Error: The dataframe is missing the ' { col } ' column\" ) \n  (#__codelineno-5-18) \n  (#__codelineno-5-19)      # Check if 'value' column is numeric \n  (#__codelineno-5-20)      if   not   pd . api . types . is_numeric_dtype ( query_result [ columns [ \"value\" ]]): \n  (#__codelineno-5-21)          raise   ValueError ( \"Error: The 'value' column must be numeric\" ) \n  (#__codelineno-5-22) \n  (#__codelineno-5-23)      # preprocess query result dataframe \n  (#__codelineno-5-24)      all_nodes   =   list ( \n  (#__codelineno-5-25)          pd . concat ( \n  (#__codelineno-5-26)              [ query_result [ columns [ \"source\" ]],   query_result [ columns [ \"target\" ]]] \n  (#__codelineno-5-27)          ) . unique () \n  (#__codelineno-5-28)      ) \n  (#__codelineno-5-29)      # In Sankey, 'source' and 'target' must be indices. Thus, you need to map projects to indices. \n  (#__codelineno-5-30)      query_result [ \"source_idx\" ]   =   query_result [ columns [ \"source\" ]] . map ( all_nodes . index ) \n  (#__codelineno-5-31)      query_result [ \"target_idx\" ]   =   query_result [ columns [ \"target\" ]] . map ( all_nodes . index ) \n  (#__codelineno-5-32) \n  (#__codelineno-5-33)      # create color map for Sankey \n  (#__codelineno-5-34)      colors   =   cl . scales [ \"12\" ][ \"qual\" ][ \"Set3\" ]    # default color \n  (#__codelineno-5-35)      color_map   =   {} \n  (#__codelineno-5-36)      for   node   in   all_nodes : \n  (#__codelineno-5-37)          for   name ,   color   in   predefined_colors . items (): \n  (#__codelineno-5-38)              if   name . lower ()   in   node . lower ():    # check if name exists in the node name \n  (#__codelineno-5-39)                  color_map [ node ]   =   color \n  (#__codelineno-5-40)                  break \n  (#__codelineno-5-41)          else : \n  (#__codelineno-5-42)              color_map [ node ]   =   colors [ \n  (#__codelineno-5-43)                  len ( color_map )   %   len ( colors ) \n  (#__codelineno-5-44)              ]    # default color assignment \n  (#__codelineno-5-45) \n  (#__codelineno-5-46)      fig   =   go . Figure ( \n  (#__codelineno-5-47)          go . Sankey ( \n  (#__codelineno-5-48)              node = dict ( \n  (#__codelineno-5-49)                  pad = viz_config [ \"node_pad\" ], \n  (#__codelineno-5-50)                  thickness = viz_config [ \"node_thickness\" ], \n  (#__codelineno-5-51)                  line = dict ( color = \"black\" ,   width = viz_config [ \"node_line_width\" ]), \n  (#__codelineno-5-52)                  label = all_nodes , \n  (#__codelineno-5-53)                  color = [ \n  (#__codelineno-5-54)                      color_map . get ( node ,   \"blue\" )   for   node   in   all_nodes \n  (#__codelineno-5-55)                  ],    # customize node color \n  (#__codelineno-5-56)              ), \n  (#__codelineno-5-57)              link = dict ( \n  (#__codelineno-5-58)                  source = query_result [ \"source_idx\" ], \n  (#__codelineno-5-59)                  target = query_result [ \"target_idx\" ], \n  (#__codelineno-5-60)                  value = query_result [ columns [ \"value\" ]], \n  (#__codelineno-5-61)                  color = [ \n  (#__codelineno-5-62)                      color_map . get ( query_result [ columns [ \"source\" ]] . iloc [ i ],   \"black\" ) \n  (#__codelineno-5-63)                      for   i   in   range ( len ( query_result )) \n  (#__codelineno-5-64)                  ],    # customize link color \n  (#__codelineno-5-65)              ), \n  (#__codelineno-5-66)          ) \n  (#__codelineno-5-67)      ) \n  (#__codelineno-5-68)      fig . update_layout ( \n  (#__codelineno-5-69)          title_text = title , \n  (#__codelineno-5-70)          font_size = viz_config [ \"font_size\" ], \n  (#__codelineno-5-71)          height = viz_config [ \"figure_height\" ], \n  (#__codelineno-5-72)          width = viz_config [ \"figure_width\" ], \n  (#__codelineno-5-73)      ) \n  (#__codelineno-5-74) \n  (#__codelineno-5-75)      return   fig \n \n ", "url": "https://dune.com/docs/learning/create-sankey-diagram/#4-define-the-function-to-make-sankey-diagram"}
{"content": "5. Plot the Sankey! \u00b6 \n Example 1  (#__tabbed_3_1) Example 2  (#__tabbed_3_2) \n \n \n  (#__codelineno-6-1)      create_sankey ( \n  (#__codelineno-6-2)          query_result = query_result , \n  (#__codelineno-6-3)          predefined_colors = predefined_colors , \n  (#__codelineno-6-4)          columns = { \"source\" :   \"source\" ,   \"target\" :   \"target\" ,   \"value\" :   \"value\" }, \n  (#__codelineno-6-5)          viz_config = { \n  (#__codelineno-6-6)              \"node_pad\" :   15 , \n  (#__codelineno-6-7)              \"node_thickness\" :   20 , \n  (#__codelineno-6-8)              \"node_line_width\" :   0.5 , \n  (#__codelineno-6-9)              \"font_size\" :   12 , \n  (#__codelineno-6-10)              \"figure_height\" :   800 , \n  (#__codelineno-6-11)              \"figure_width\" :   1000    \n  (#__codelineno-6-12)          }, \n  (#__codelineno-6-13)          title = \"RabbitHole OP Grant questors to retained users after 1 month by project\" \n  (#__codelineno-6-14)      ) . show () \n \n \n \n  (#__codelineno-7-1)      create_sankey ( \n  (#__codelineno-7-2)          query_result = query_result , \n  (#__codelineno-7-3)          predefined_colors = predefined_colors , \n  (#__codelineno-7-4)          columns = { \"source\" :   \"source\" ,   \"target\" :   \"target\" ,   \"value\" :   \"value\" }, \n  (#__codelineno-7-5)          viz_config = { \n  (#__codelineno-7-6)              \"node_pad\" :   15 , \n  (#__codelineno-7-7)              \"node_thickness\" :   20 , \n  (#__codelineno-7-8)              \"node_line_width\" :   0.5 , \n  (#__codelineno-7-9)              \"font_size\" :   12 , \n  (#__codelineno-7-10)              \"figure_height\" :   800 , \n  (#__codelineno-7-11)              \"figure_width\" :   1000    \n  (#__codelineno-7-12)          }, \n  (#__codelineno-7-13)          title = \"Flow of tokens when swapping on Uniswap (Ethereum chain)\" \n  (#__codelineno-7-14)      ) . show ()", "url": "https://dune.com/docs/learning/create-sankey-diagram/#5-plot-the-sankey"}
{"content": "Transferring Query Ownership \u00b6 \n \n Click the cogwheel button to access settings. \n In the \"Owner\" dropdown, select the new owner, be it another team you're part of or a teammate within the current team. \n \n \n ", "url": "https://dune.com/docs/learning/how-tos/transfer-ownership/#transferring-query-ownership"}
{"content": "Viewing Ownership Changes \u00b6 \n Click the \"Version history\" button to see changes in ownership. \n \n ", "url": "https://dune.com/docs/learning/how-tos/transfer-ownership/#viewing-ownership-changes"}
{"content": "Transferring Dashboard Ownership \u00b6 \n \n Click \"Edit\" then \"Settings\" to open the modal. \n Follow the same steps as above to transfer ownership of your dashboard.", "url": "https://dune.com/docs/learning/how-tos/transfer-ownership/#transferring-dashboard-ownership"}
{"content": "Via URL \u00b6 \n Simply copy and share the URL of your query or dashboard.  \n \n Note \n Even private dashboards can be shared by directly providing their URLs. \n \n \n ", "url": "https://dune.com/docs/learning/how-tos/share-dune-content/#via-url"}
{"content": "Embed Visualizations \u00b6 \n \n Instead of capturing screenshots, directly embed visualizations. \n Click the embed button to obtain the link. \n For detailed steps on embedding Dune charts across social platforms,  click here  (../../../app/embeds/#using-embeds-on-different-platforms) . \n \n \n ", "url": "https://dune.com/docs/learning/how-tos/share-dune-content/#embed-visualizations"}
{"content": "Invite to Your Team \u00b6 \n For consistent collaboration,  invite colleagues to your team  (../create-and-manage-teams/#inviting-members-assigning-roles)  as viewers or editors.", "url": "https://dune.com/docs/learning/how-tos/share-dune-content/#invite-to-your-team"}
{"content": "Discover Page \u00b6 \n Navigate to the Discover page to begin your exploration. Here, you'll find four categories to delve into: dashboards, queries, wizards (our esteemed creators \ud83e\uddd9 on Dune), and teams. \n \n For both dashboards and queries, you can refine your search based on: \n \n Favorites: Sort by the number of stars received within a specific timeframe. \n Trending: Identify popular content within a selected period. \n New: Filter by the content's creation date. \n \n \n By default, the Discover page showcases trending dashboards from the past 4 hours. This feature offers a real-time glimpse into the crypto world, highlighting what others are currently viewing and creating. It's an invaluable resource for spotting early trends and insights. \n ", "url": "https://dune.com/docs/learning/how-tos/search-for-content/#discover-page"}
{"content": "Global Search Bar \u00b6 \n \n Click on the search bar located at the top left or use the shortcut Cmd/Ctrl + P. \n Enter your desired keywords. \n The results will display related dashboards, queries, wizards, or teams. \n Dive deeper into a category (e.g., \"Dashboards\") and select your preferred ranking criteria. \n Choose the content that best suits your needs. \n \n \n \n Tip \n When searching for a dashboard, consider the number of stars it has received and its creator. For added assurance, you can also review the query's source code to understand its logic. \n \n ", "url": "https://dune.com/docs/learning/how-tos/search-for-content/#global-search-bar"}
{"content": "Library: A Hub for Your Creations \u00b6 \n To access content you've personally created, visit your library. Here, you can find all your dashboards and queries. Enhance your organization by categorizing them into various \"Folders\". Additionally, the library allows you to search, filter, and sort your content based on different criteria. \n \n It's crucial to note that the Library's content is context-sensitive. Depending on the user or team profile you're viewing, you'll see creations specific to that account. \n \n Happy searching!", "url": "https://dune.com/docs/learning/how-tos/search-for-content/#library-a-hub-for-your-creations"}
{"content": "Left Sidebar \u00b6 \n \n Query Explorer: Search and locate relevant content for your query. \n Data Explorer: Discover the necessary data tables for your projects. \n Version History  (../../../app/query-editor/version-history/) : Review the query's edit history and, if required, revert to a previous version. \n Settings: Adjust setting for your query. \n \n \n \n Tip \n Double-click any icon to collapse or expand the sidebar. \n \n \n ", "url": "https://dune.com/docs/learning/how-tos/navigate-query-editor/#left-sidebar"}
{"content": "Central Editor \u00b6 \n This is your main workspace. Here, you can: \n \n Write SQL commands. \n View query results. \n Design visualizations. \n \n Additionally, the bottom-left corner houses icons that further enhance your editing experience. \n \n ", "url": "https://dune.com/docs/learning/how-tos/navigate-query-editor/#central-editor"}
{"content": "Right Sidebar \u00b6 \n This section offers a suite of functionalities: \n \n Schedule queries. \n Materialize query results. \n Download results as CSVs, and more. \n \n \n With these tools at your fingertips, navigating the Dune Query Editor becomes a breeze. Happy querying!", "url": "https://dune.com/docs/learning/how-tos/navigate-query-editor/#right-sidebar"}
{"content": "Skip to content\n          (#categories-of-datasets) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/learning/how-tos/find-datasets.md) \n Find Datasets on Dune \n Navigating over a million data tables on Dune might seem daunting. This guide simplifies the process, highlighting the categories of datasets available and offering tips on efficient searching. \n ", "url": "https://dune.com/docs/learning/how-tos/find-datasets/"}
{"content": "Skip to content\n          (#identify-the-dataset-for-export) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/learning/how-tos/export-data-out.md) \n Export Data Out of Dune \n This guide provides a step-by-step process on exporting data from Dune, either through CSV downloads or the API. \n ", "url": "https://dune.com/docs/learning/how-tos/export-data-out/"}
{"content": "Skip to content\n          (#what-are-credits) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/learning/how-tos/credit-system-on-dune.md) \n Credit System on Dune \n Dune's operations largely rely on a credit system. This guide will explain the concept of credits, their consumption, and management. \n ", "url": "https://dune.com/docs/learning/how-tos/credit-system-on-dune/"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/learning/how-tos/create-your-first-visualization.md) \n Create your first visualization \n After executing a query, you'll be presented with a set of results. The next logical step? Visualize that data for a clearer insight. This guide will show you how to layer a combined bar and line chart atop the data from  Create your first query  (./) . \n Here is a visual click-through version if you are more of a visual learner. Below is a written version.  \n \n \n \n Begin Visualization : Click on \"New Visualization\" and select your desired chart type. For this tutorial, initiate with a bar chart and click \"Add Visualization.\" \n \n \n Display Data : By default, the chart will showcase  monthly_gas_spent . To augment the depth of insights, include the  cumulative_gas_spent  column. \n \n \n Adjust Chart Type : Transition the representation of  cumulative_gas_spent  from a bar to a line chart, offering a more nuanced view. \n \n \n Fine-tune Your Chart : Customize the display values for a polished look. For detailed formatting guidance,  refer to this resource  (../../../app/visualizations/charts-graphs/#visualization-configuration-options) . \n \n \n \n Note \n \ud83c\udf1f Voil\u00e0! You've crafted a dazzling chart depicting your wallet's monthly gas expenditure. What's next on the agenda? How about spreading the magic? \ud83c\udf89  Share your insights  (../share-your-query/)  with a colleague or take the digital stage and showcase it on social media! \ud83d\ude80", "url": "https://dune.com/docs/learning/how-tos/create-your-first-visualization/"}
{"content": "Skip to content\n          (#getting-started) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/learning/how-tos/create-your-first-query.md) \n Create your first query \n New to Dune? Embark on your analytical adventure with us! In this guide, we provide a detailed walkthrough to craft your inaugural query, revealing your wallet's monthly gas spent in USD. \n Here is a visual click-through version if you are more of a visual learner. Below is a written version.  \n \n ", "url": "https://dune.com/docs/learning/how-tos/create-your-first-query/"}
{"content": "Skip to content\n          (#crafting-queries-dashboards-and-datasets) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/learning/how-tos/create-new-content.md) \n Create New Content \n Dive into the world of Dune and explore the myriad of content creation possibilities it offers. This guide will walk you through the various types of content you can craft on Dune and the steps to bring them to life. \n ", "url": "https://dune.com/docs/learning/how-tos/create-new-content/"}
{"content": "Skip to content\n          (#dune-for-teams) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/learning/how-tos/create-and-manage-teams.md) \n Create and Manage Teams \n ", "url": "https://dune.com/docs/learning/how-tos/create-and-manage-teams/"}
{"content": "Skip to content\n          (#create) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/learning/how-tos/create-ai-assisted-queries.md) \n Create AI-Assisted Queries \n Navigating the world of SQL can be daunting, especially if you find yourself asking, \"What's SQL?\" Fear not! Our Wand feature is here to simplify the process for both seasoned SQL veterans and newcomers alike. With capabilities ranging from AI-assisted debugging to entirely new query creation, the Wand is your trusty sidekick.  \n In this guide, we delve into the three core functionalities of the Wand: create, edit, and debug. \n ", "url": "https://dune.com/docs/learning/how-tos/create-ai-assisted-queries/"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/learning/how-tos/index.md) \n Dune 101 \n \n \n Search for content on Dune  (search-for-content/) \n Create new content on Dune  (create-new-content/) \n Create AI-assisted Queries  (create-ai-assisted-queries/) \n Navigate the Query Editor  (navigate-query-editor/) \n Find datasets on Dune  (find-datasets/) \n Export data out of Dune  (export-data-out/) \n Create and manage teams  (create-and-manage-teams/) \n Share Dune content  (share-dune-content/) \n Transfer ownership  (transfer-ownership/) \n Credit System on Dune  (credit-system-on-dune/) \n Create your first query  (create-your-first-query/) \n Create your first visualization  (create-your-first-visualization/) \n Share your query  (share-your-query/)", "url": "https://dune.com/docs/learning/how-tos/"}
{"content": "Categories of Datasets \u00b6 \n Dune processes blockchain data in several stages: ingestion, decoding, aggregation, and standardization. This results in three main categories: raw, decoded, and spellbook. Additionally, there's a community category that houses community-supported off-chain datasets like Reservoir, Snapshot, and others. \n Beyond these, Dune showcases the most frequently used datasets under the \u201cessential\u201d category. Your materialized query results are neatly categorized under \u201cmaterialized views\u201d. \n \n ", "url": "https://dune.com/docs/learning/how-tos/find-datasets/#categories-of-datasets"}
{"content": "Available Chains on Dune \u00b6 \n Currently, Dune supports 10 EVM chains and 2 non-EVM chains: Solana and Bitcoin. To view the full list of  supported chains  (../../../data-tables/) , navigate to the data explorer, select \u201cRaw\u201d, and then click the \u201cAll chains\u201d dropdown. \n \n \n ", "url": "https://dune.com/docs/learning/how-tos/find-datasets/#available-chains-on-dune"}
{"content": "Search via the Data Explorer \u00b6 \n The data explorer is an invaluable tool for pinpointing specific datasets among the vast collection. For instance, to locate datasets for Uniswap v2 within the \u201cDecoded\u201d and \u201cSpells\u201d categories, follow the steps illustrated here: \n \n Once you've identified the desired table, use the double-arrow symbol to instantly transfer the full table name to the editor. \n \n Warn \n Ensure you're at the correct search level. At times, a nested search space might yield unexpected results. We're refining this user experience. For now, the URL can help you verify your current position. \n \n \n \n Tip \n \n Starting Point: If unsure, begin with the \u201cEssentials\u201d category. \n Protocol-Specific Analysis: The \u201cDecoded projects\u201d category is ideal. Filter by a specific chain, event, or function to expedite your search. \n Ecosystem Research: The \u201cRaw\u201d category is a good starting point. Alternatively, the \u201cSpells\u201d category might have pre-aggregated data for your analysis. \n Helper Tables: Tables like  prices  (../../../data-tables/spellbook/top-tables/prices/) ,  tokens  (../../../data-tables/spellbook/top-tables/tokens/) , and  labels  (../../../data-tables/spellbook/top-tables/labels/)  are accessible under the \u201cEssentials\u201d category.", "url": "https://dune.com/docs/learning/how-tos/find-datasets/#search-via-the-data-explorer"}
{"content": "Identify the Dataset for Export \u00b6 \n Begin by pinpointing the dataset or query result you wish to export. For instance, given the recent buzz around Friend.Tech, you might want to export the results from this query: https://dune.com/queries/2945343. \n ", "url": "https://dune.com/docs/learning/how-tos/export-data-out/#identify-the-dataset-for-export"}
{"content": "Export via CSV \u00b6 \n \n Navigate to the query interface. \n Simply click the \"Export to CSV\" button. \n \n \n ", "url": "https://dune.com/docs/learning/how-tos/export-data-out/#export-via-csv"}
{"content": "Export via API \u00b6 \n Ensure you have an API key. If not, generate one: \n \n Navigate to: Settings \u2192 API. \n Click on \"Create new API key\". \n Remember to copy the entire API key before confirming. \n \n \n For this guide, we'll focus on exporting data using the  'get latest query result'  (../../../api/api-reference/get-results/)  endpoint. Here's a Python example: \n \n Note \n First, create a .env file with the API key you just created.\n  (#__codelineno-0-1) DUNE_API_KEY= <insert your key>\n \n \n  (#__codelineno-1-1) import   dotenv \n  (#__codelineno-1-2) import   os \n  (#__codelineno-1-3) import   json \n  (#__codelineno-1-4) import   requests \n  (#__codelineno-1-5) import   pandas   as   pd \n  (#__codelineno-1-6) \n  (#__codelineno-1-7) def   get_latest_query_result ( query_id ): \n  (#__codelineno-1-8)      res_df   =   pd . DataFrame () \n  (#__codelineno-1-9)      try : \n  (#__codelineno-1-10)          result_url   =   f \"https://api.dune.com/api/v1/query/ { query_id } /results\" \n  (#__codelineno-1-11)          result_response   =   requests . get ( result_url ,   headers = headers ) \n  (#__codelineno-1-12)          print ( json . loads ( result_response . text )) \n  (#__codelineno-1-13)          query_res   =   json . loads ( result_response . text )[ \"result\" ][ \"rows\" ] \n  (#__codelineno-1-14)          res_df   =   pd . DataFrame . from_dict ( query_res ) \n  (#__codelineno-1-15)      except   Exception   as   e : \n  (#__codelineno-1-16)          print ( f \"Error retrieving result for query  { query_id } :  { e } \" ) \n  (#__codelineno-1-17)      return   res_df \n  (#__codelineno-1-18) \n  (#__codelineno-1-19) dotenv . load_dotenv ( 'path_to_env_file' )    # Replace 'path_to_env_file' with your .env file path \n  (#__codelineno-1-20) api_key   =   os . getenv ( \"DUNE_API_KEY\" ) \n  (#__codelineno-1-21) query_id   =   2945343 \n  (#__codelineno-1-22) headers   =   { \"x-dune-api-key\" :   api_key } \n  (#__codelineno-1-23) latest_res   =   get_latest_query_result ( query_id ) \n  (#__codelineno-1-24) print ( latest_res ) \n \n There are multiple methods to export data via the API, and it's possible to get data in various formats like JSON and CSV. You can even integrate the data with Google Sheets. For a comprehensive guide, refer to  this page  (../../../api/api-reference/get-results/) . \n \n Tip \n Access the 'get latest result' endpoint directly from the Dune UI. When viewing a query, click the API icon in the top-right corner and copy the endpoint URL.", "url": "https://dune.com/docs/learning/how-tos/export-data-out/#export-via-api"}
{"content": "Skip to content\n          (#dune-tutorials) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/learning/index.md) \n Web3 Data & Analytics Learning Resources \n After you've gone through the  quickstart guide  (../quickstart/) , you'll be ready to really start learning how to navigate the Web3 data analytics space. \n Analyzing protocols in web3 is both really easy and really hard. It's really easy because everything is transparent and standardized - a deployed contract has a set of functions and events that are pretty much immutable. However, it's an ever expanding data arena as new protocols, tokens, and wallets join the fray.  \n To build your reputation as an expert wizard, you must stay centered on what you want to analyze and what metrics you want to present. \n ", "url": "https://dune.com/docs/learning/"}
{"content": "Skip to content\n          (#migration-tool) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/migrations/migration-tool.md) \n ", "url": "https://dune.com/docs/migrations/migration-tool/"}
{"content": "Skip to content\n          (#sparksql) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/migrations/SparkSQL.md) \n SparkSQL \n \n Warning \n Dune is sunsetting SparkSQL. Support for SparkSQL will be removed on  30/07/2023 . Please migrate your queries to DuneSQL. \n \n ", "url": "https://dune.com/docs/migrations/SparkSQL/"}
{"content": "Skip to content\n          (#postgresql) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/migrations/PostgreSQL.md) \n PostgreSQL \n \n Sunsetting PostgreSQL \n Dune is sunsetting PostgreSQL. You can no longer create or edit PostgreSQL queries. All Support for PostgreSQL will be removed on 30/07/2023. Please migrate your queries to DuneSQL. \n \n ", "url": "https://dune.com/docs/migrations/PostgreSQL/"}
{"content": "Skip to content\n          (#dunes-query-engines) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/migrations/index.md) \n Overview \n ", "url": "https://dune.com/docs/migrations/"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/abstractions.md) \n \u62bd\u8c61\u8868 \n \u62bd\u8c61\u8868\u662f\u7531Dune\u548c\u6211\u4eec\u7684\u793e\u533a\u6784\u5efa\u548c\u7ef4\u62a4\u7684\u81ea\u5b9a\u4e49\u8868 \n \u6211\u4eec\u7684\u62bd\u8c61\u8868\u662f\u5728\u8fd9\u4e2a\u516c\u5171[GitHub\u5b58\u50a8\u5e93]\u4e2d\u7ba1\u7406\u7684(https://github.com/duneanalytics/spellbook/index.md)\u3002 \u6211\u4eec\u6b22\u8fce\u63d0\u4ea4pull requests\u3002 \n \u5bf9\u4e8e\u6211\u4eec\u7684 V1\u5f15\u64ce \uff08PostgreSQL\uff09\uff0c\u62bd\u8c61\u8868\u662f\u7531\u6570\u636e\u5e73\u53f0\u6267\u884c\u7684SQL\u7247\u6bb5\u3002\u60a8\u53ef\u4ee5\u5728[GitHub]\u4e0a\u6d4f\u89c8\u73b0\u6709\u7684\u62bd\u8c61\u8868(https://github.com/duneanalytics/spellbook/tree/main/deprecated-dune-v1-abstractions)\uff0c\u5e76\u67e5\u770b\u6211\u4eec\u6700\u53d7\u6b22\u8fce\u7684\u7684\u62bd\u8c61\u8868[\u6587\u6863]\uff08v1/abstracts/index.md\uff09\u3002 \n \u5bf9\u4e8e\u6211\u4eec\u7684 V2\u5f15\u64ce \uff08Databricks SQL\uff09\uff0c\u62bd\u8c61\u8868\u73b0\u5728\u5347\u7ea7\u4e3a \u9b54\u6cd5 \uff0c\u5e76\u5728[\u9b54\u6cd5\u4e66]\uff08../Spellbook/index.md\uff09\u4e2d\u8fd0\u884c\u3002Spellbook\u662f\u7528DBT\u6784\u5efa\u7684\uff0cDBT\u662f\u4e00\u4e2a\u5f00\u6e90\u6846\u67b6\uff0c\u901a\u8fc7\u5c06SQL\u4e0eJINJA\u6a21\u677f\u6df7\u5408\uff0c\u4e3a\u7f16\u5199SQL\u6ce8\u5165\u4e86\u66f4\u591a\u7ecf\u5178\u7684\u8f6f\u4ef6\u5de5\u7a0b\u5b9e\u8df5\u3002 \n \u8981\u67e5\u770b\u53ef\u7528\u7684\u9b54\u6cd5\uff0c\u8bf7\u67e5\u770b\u6211\u4eec\u7684\u9b54\u6cd5\u4e66 \u6587\u6863  (https://spellbook-docs.dune.com) \u5e76\u5b66\u4e60\u5982\u4f55\u8d21\u732e\u65b0\u7684\u6cd5\u672f[\u6b64\u5904]\uff08../spellbook/index.md\uff09\u3002", "url": "https://dune.com/docs/zh/reference/tables/abstractions/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/decoded.md) \n \u89e3\u6790\u8868 \n \u5728 Dune \u4e0a\uff0c\u6211\u4eec\u5c06\u667a\u80fd\u5408\u7ea6\u6d3b\u52a8\u89e3\u7801\u4e3a\u6613\u8bfb\u7684\u8868\u683c\uff0c\u800c\u4e0d\u662f\u5904\u7406\u539f\u59cb\u72b6\u6001\u4e0b\u7684\u4e8b\u4ef6\u3001\u65e5\u5fd7\u548c\u8bb0\u5f55\u3002 \n \u6211\u4eec\u4e3a\u667a\u80fd\u5408\u7ea6\u7684ABI\uff08\u5e94\u7528\u7a0b\u5e8f\u4e8c\u8fdb\u5236\u63a5\u53e3\uff09\u4e2d\u5b9a\u4e49\u7684\u6bcf\u4e2a\u4e8b\u4ef6\u548c\u51fd\u6570\u521b\u5efa\u8868\u3002\u968f\u540e\uff0c\u5bf9\u8be5\u5408\u7ea6\u8fdb\u884c\u7684\u6bcf\u4e2a\u4e8b\u4ef6\u3001\u6d88\u606f\u8c03\u7528\u6216\u4ea4\u6613\u90fd\u8fdb\u884c\u89e3\u7801\uff0c\u5e76\u4f5c\u4e3a\u4e00\u884c\u63d2\u5165\u8fd9\u4e9b\u8868\u4e2d\u3002 \n \u8868\u7684\u540d\u79f0\u5982\u4e0b\uff1a \n PostgreSQL  (#__tabbed_1_1) Databricks SQL  (#__tabbed_1_2) \n \n \n \u4e8b\u4ef6:   projectname.\"contractName_evt_eventName\" \n \u529f\u80fd\u8c03\u7528:   projectname.\"contractName_call_eventName\" \n \u6bd4\u5982, uniswap V2\u4ea4\u6613\u5bf9\u5408\u7ea6\u7684 swap \u4e8b\u4ef6\u7684\u89e3\u7801\u6570\u636e\u53ef\u4ee5\u5728\u8fd9\u4e2a\u8868\u627e\u5230  uniswap_v2.\"pair_swap\"  (https://dune.com/queries/38968) . \n \n \n \u4e8b\u4ef6:   projectname_blockchain.contractName_evt_eventName \n \u529f\u80fd\u8c03\u7528:   projectname_blockchain.contractName_call_eventName \n \u6bd4\u5982, uniswap V2\u4ee5\u592a\u574a\u4ea4\u6613\u5bf9\u5408\u7ea6\u7684 swap \u4e8b\u4ef6\u7684\u89e3\u7801\u6570\u636e\u53ef\u4ee5\u5728\u8fd9\u4e2a\u8868\u627e\u5230  uniswap_v2_ethereum.Pair_evt_Swap \u3002 \n \n \n \n \u5982\u679c\u4e00\u4e2a\u5408\u540c\u6709\u591a\u4e2a\u5b9e\u4f8b\uff0c\u6211\u4eec\u5c06\u628a\u6240\u6709\u5b9e\u4f8b\u89e3\u7801\u5230\u540c\u4e00\u4e2a\u8868\u4e2d\uff0c\u60a8\u5c06\u80fd\u591f\u4f7f\u7528  contract_address  \u5217\u8bc6\u522b\u7279\u5b9a\u7684\u667a\u80fd\u5408\u7ea6\u3002 \n \u5c3d\u7ba1\u6240\u6709\u94fe\u7684\u6570\u636e\u90fd\u5b58\u50a8\u5728\u4e00\u4e2a\u6570\u636e\u5e93\u4e2d\uff0c\u4f46\u73b0\u5b9e\u4e2d\u8fd8\u662f\u591a\u94fe\u4e16\u754c\uff0cDune\u4e0a\u7684\u5408\u7ea6\u90fd\u6709\u4e00\u4e2a\u5143\u5c5e\u6027\uff0c\u6765\u63cf\u8ff0\u8fd9\u4e2a\u7279\u5b9a\u8868\u4ece\u54ea\u4e2a\u533a\u5757\u94fe\u4e2d\u63d0\u53d6\u6570\u636e\u3002 \n \u5728\u6b64\u5904\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u8c03\u7528\u548c\u4e8b\u4ef6\u4e4b\u95f4\u7684\u533a\u522b: \n PostgreSQL  (#__tabbed_2_1) \n \n \n \n \n \n \u8c03\u7528\u8868  (../v1/decoded/call-tables/) \n \u4e8b\u4ef6\u65e5\u5fd7  (../v1/decoded/event-logs/) \n \n Databricks SQL  (#__tabbed_3_1) \n \n \n \n \n \n \u8c03\u7528\u8868  (../v2/decoded/call-tables/) \n \u4e8b\u4ef6\u65e5\u5fd7  (../v2/decoded/event-logs/) \n \n ", "url": "https://dune.com/docs/zh/reference/tables/decoded/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#evm) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/raw.md) \n \u539f\u59cb\u6570\u636e\u8868 \n \u539f\u59cb\u6570\u636e\u8868\u63d0\u4f9b\u4e86\u539f\u59cb\u672a\u7ecf\u8fc7\u6ee4\u548c\u7f16\u8f91\u7684\u6570\u636e\u3002 \n \u8fd9\u5141\u8bb8\u60a8\u8de8Dune\u652f\u6301\u7684\u533a\u5757\u94fe\u67e5\u8be2\u4efb\u4f55\u4ea4\u6613\u3001\u533a\u5757\u3001\u4e8b\u4ef6\u65e5\u5fd7\u6216\u8bb0\u5f55\u3002\u539f\u59cb\u6570\u636e\u8868\u5bf9\u4e8e\u83b7\u53d6\u6709\u5173\u533a\u5757\u94fe\u3001\u4ea4\u6613\u3001\u8bb0\u5f55\u6216\u7279\u5b9a\u4e8b\u4ef6\u7684\u5143\u4fe1\u606f\u975e\u5e38\u6709\u7528\u3002 \n \u6b64\u5916\uff0c\u901a\u8fc7\u4e00\u4e9b\u6280\u5de7\uff0c\u60a8\u5b9e\u9645\u4e0a\u53ef\u4ee5\u4f7f\u7528\u7f16\u7801\u6570\u636e\u6df1\u5165\u4e86\u89e3\u667a\u80fd\u5408\u7ea6\u7cfb\u7edf\u3002 Alex Kroeger  (https://twitter.com/alex_kroeger)  \u5173\u4e8e\u8fd9\u4e2a\u8bdd\u9898\u5199\u4e86 \u4e00\u7bc7\u5f88\u68d2\u7684\u6587\u7ae0  (https://alexkroeger.mirror.xyz/0C3EQBtFqAK4k2TAGPZhg0JMY-upfTAxuTD-o91vBPc) \u3002 \n \u6211\u4eec\u6709\u51e0\u4e2a SQL\u51fd\u6570  (https://github.com/duneanalytics/spellbook/tree/master/ethereum/public) \u5728\u6211\u4eec\u7684\u6570\u636e\u5e93\u4e2d\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u5b83\u4eec\u66f4\u8f7b\u677e\u5730\u5904\u7406\u7f16\u7801\u6570\u636e\u3002 \n \u7136\u800c\uff0c\u7531\u4e8e\u8fd9\u4e9b\u8868\u4e2d\u5e38\u89c1\u7684\u7f16\u7801\u6570\u636e\u7684\u6027\u8d28\uff0c\u4f7f\u7528\u539f\u59cb\u6570\u636e\u8868\u7f16\u5199\u7684\u67e5\u8be2\u5f88\u96be\u7406\u89e3\u548c\u5ba1\u9605\u3002\u6b64\u5916\uff0c\u539f\u59cb\u6570\u636e\u8868\u5177\u6709\u975e\u5e38\u591a\u7684\u884c\uff0c\u56e0\u6b64\u67e5\u8be2\u901f\u5ea6\u53ef\u80fd\u5f88\u6162\u3002 \n \u5927\u591a\u6570\u65f6\u5019\uff0c\u60a8\u6700\u597d\u662f[\u63d0\u4ea4\u5408\u540c\u8fdb\u884c\u89e3\u7801]\uff08../features/decoded contracts.md\uff09\u548c\u4f7f\u7528[\u89e3\u7801\u6570\u636e]\uff08decoded.md\uff09\u3002 \n ", "url": "https://dune.com/docs/zh/reference/tables/raw/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#how-tables-are-generated-from-raw-ethereum-data) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/index.md) \n \u6570\u636e\u8868 \n Dune \u652f\u6301\u4ee5\u4e0d\u540c\u7684\u62bd\u8c61\u7ea7\u522b\u67e5\u8be2\u5df2\u63a5\u5165\u7684\u94fe\u4e0a\u6570\u636e\u3002 \n \u60a8\u53ef\u4ee5\u4ece\u5df2\u63a5\u5165\u7684\u533a\u5757\u94fe\u539f\u59cb\u8868\u5f00\u59cb\uff0c\u4f8b\u5982\u50cf  blocks  \u548c  transactions  \u6570\u636e\u8868\u3002\u8fd9\u4e9b\u539f\u59cb\u8868\u6709\u7740\u6700\u539f\u59cb\u7684\u94fe\u4e0a\u6570\u636e\uff0c\u53ef\u7528\u4e8e\u7075\u6d3b\u7684\u6570\u636e\u5206\u6790\u3002 \n \u4e0e\u6b64\u540c\u65f6\uff0c\u4e3a\u4e86\u66f4\u8f7b\u677e\u5730\u5206\u6790\u667a\u80fd\u5408\u7ea6\uff0cDune\u8fd8\u63d0\u4f9b\u4e86\u5177\u6709\u53ef\u8bfb\u6027\u7684\u89e3\u7801\u6570\u636e\u8868\u3002\u6211\u4eec\u4f7f\u7528\u667a\u80fd\u5408\u7ea6\u7684 ABI (Application Binary Interface) \u548c\u6807\u51c6\u5316\u4ee3\u5e01\u667a\u80fd\u5408\u7ea6\u7684\u63a5\u53e3\u6807\u51c6\uff08ERC20\u3001ERC721 \u7b49\uff09\u7528\u4e8e\u89e3\u7801\u6570\u636e\u3002\u622a\u6b62\u64b0\u5199\u6b64\u6587\u6863\u65f6\uff0c\u6211\u4eec\u5df2\u7ecf\u7d22\u5f15\u4e86\u8d85\u8fc7\u8d85\u8fc7 28 \u4e07\u4efd\u667a\u80fd\u5408\u7ea6\u3002\u60a8\u53ef\u4ee5 \u5728\u6b64\u63d0\u4ea4\u65b0\u7684\u5408\u7ea6  (../../getting-started/decoding-contracts/) \u4e0eDune\u8fdb\u884c\u89e3\u7801\u3002 \n \u6b64\u5916\uff0c\u6211\u4eec\u6b63\u5728\u5c06\u5e38\u7528\u94fe\u4e0a\u6570\u636e\uff08\u5982 NFT \u4e0e DEX \u6570\u636e\uff09\u548c\u7b2c\u4e09\u65b9\u6570\u636e\u96c6\u5171\u540c\u6784\u5efa\u7ec4\u6210\u4e00\u7cfb\u5217 \u9b54\u6cd5  (spells/) \u3002 \n \u4ee5\u4e0b\u662f\u53ef\u7528\u5185\u5bb9\u7684\u6982\u89c8\uff1a \n \n \u539f\u59cb\u6570\u636e  (raw/) : \u672a\u7ecf\u7f16\u8f91\u3001\u539f\u59cb\u7f16\u7801\u7684\u533a\u5757\u94fe\u6570\u636e \n \u5df2\u89e3\u6790\u6570\u636e  (decoded/) : ( \u76ee\u524d\u4f7f\u7528\u6700\u5e7f\u6cdb\u7684\u6570\u636e\u6e90 ) \u7ecf\u8fc7\u89e3\u7801\u540e\u7684\u667a\u80fd\u5408\u7ea6\u4e8b\u4ef6\u53ca\u8c03\u7528\u6570\u636e \n \u9b54\u6cd5  (spells/) : \u7531Dune\u548c\u793e\u533a\u4e00\u8d77\u7ef4\u62a4\u5efa\u8bbe\u7684\u6570\u636e\u8868 \n \u793e\u533a  (community/) : \u7531\u6307\u5b9a\u5408\u4f5c\u7ec4\u7ec7\u63d0\u4f9b\u7684\u94fe\u4e0b\u6570\u636e\u6e90 \n \u4ef7\u683c  (prices/) : \u7531\u7b2c\u4e09\u65b9\u6570\u636e\u6e90\u63d0\u4f9b\u7684\u4ee3\u5e01\u4ef7\u683c\u6570\u636e \n \u7528\u6237\u81ea\u5efa  (user-generated/) : \u5728\u6211\u4eec\u7684\u6570\u636e\u5e93\u4e2d\u6784\u5efa\u60a8\u81ea\u5b9a\u4e49\u7684\u89c6\u56fe\u3001\u51fd\u6570\u6216\u6570\u636e\u8868 \n \n \u6570\u636e\u6a21\u578b\u7684\u7ec6\u8282\u53d6\u51b3\u4e8e\u533a\u5757\u94fe\u548c\u5f15\u64ce\u3002 \u6211\u4eec\u5df2\u4e3a  Dune V1 \u5f15\u64ce  (v1/raw/)  (PostgreSQL) \u4ee5\u53ca  Dune V2 \u5f15\u64ce  (v2/raw/)  (Databricks SQL) \u4e0a\u7684\u6570\u636e\u7f16\u5236\u4e86\u8be6\u7ec6\u7684\u53c2\u8003\u8d44\u6599\u3002 \n ", "url": "https://dune.com/docs/zh/reference/tables/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/dune-v2/database.md) \n Database \n \u9ad8\u5ea6\u6982\u62ec\u5730\u6765\u8bf4\uff0c\u6570\u636e\u5e93\u4ece\u5b58\u50a8\u4e2d\u8bfb\u53d6\u6570\u636e\u5230\u5185\u5b58\u4e2d\uff0c\u4ee5\u4fbf\u5bf9\u8be5\u6570\u636e\u8fdb\u884c\u64cd\u4f5c\uff0c\u5728Dune\u4e2d\uff0c\u5c31\u662f\u6839\u636e\u4f60\u7684Dune\u67e5\u8be2\u7684\u903b\u8f91\uff0c\u8f6c\u6362\u548c\u8fd4\u56de\u533a\u5757\u94fe\u6570\u636e\u3002 \n \u8bfb\u53d6\u901f\u5ea6\uff0c\u5373\u628a\u6570\u636e\u4ece\u5b58\u50a8\u7a7a\u95f4\u52a0\u8f7d\u5230\u5185\u5b58\u6240\u9700\u7684\u65f6\u95f4\uff0c\u662f\u6570\u636e\u5e93\u7684\u4e00\u4e2a\u57fa\u672c\u5236\u7ea6\u56e0\u7d20\u3002\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\uff0c\u8fd9\u88ab\u79f0\u4e3a  I/O \u7ea6\u675f  (https://en.wikipedia.org/wiki/I/O_bound) , \u8fd9\u4e5f\u662f\u6211\u4eec\u5728Dune V2\u4e2d\u8fc7\u6e21\u5230\u6570\u636e\u6e56\u5e76\u5c06\u5b58\u50a8\u548c\u8ba1\u7b97\u5206\u79bb\u7684\u4e3b\u8981\u6311\u6218\u4e4b\u4e00\u3002 \n \u8ba9\u6211\u4eec\u770b\u770b\u8fd9\u662f\u5982\u4f55\u53d1\u751f\u7684\u3002 \n ", "url": "https://dune.com/docs/zh/reference/dune-v2/database/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#dunev2) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/dune-v2/query-engine.md) \n \u67e5\u8be2\u5f15\u64ce \n ", "url": "https://dune.com/docs/zh/reference/dune-v2/query-engine/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/dune-v2/index.md) \n Dune V2 \u4ecb\u7ecd \n Dune Engine V2  \u662f Dune \u7684\u65b0\u7248\u67e5\u8be2\u5f15\u64ce\uff0c\u5b83\u5c06 Dune \u7684\u6838\u5fc3\u5de5\u5177\u96c6\u7684\u6027\u80fd\u3001\u53ef\u6269\u5c55\u6027\u548c\u529f\u80fd\u5e26\u5230\u4e86\u4e00\u4e2a\u65b0\u7684\u6c34\u5e73\uff0c\u4f7f wizards \u80fd\u591f\u67e5\u8be2\u3001\u63d0\u53d6\u548c\u53ef\u89c6\u5316\u533a\u5757\u94fe\u4e0a\u7684\u5927\u91cf\u6570\u636e\u3002 \n \u5b83\u5229\u7528  Apache Spark SQL  (https://spark.apache.org/docs/latest/sql-programming-guide.html)  \u6765\u63d0\u9ad8\u590d\u6742\u67e5\u8be2\u7684\u6027\u80fd\u3001\u5904\u7406\u6570\u636e\u89c4\u6a21\u6269\u5f20\uff0c\u5e76\u80fd\u591f\u5728\u540c\u4e00\u4e2a \u67e5\u8be2\u7f16\u8f91 UI  (../../getting-started/queries/)  \u4e2d\u5b9e\u73b0\u8de8\u94fe\u67e5\u8be2\u3002 \n \u672c\u8282\u4e2d\u5305\u542b\u7684\u6240\u6709\u6570\u636e\u6e90\u73b0\u5728\u90fd\u53ef\u7528\u4e8e\u4f7f\u7528\u65b0\u7248\u67e5\u8be2\u5f15\u64ce\u8fdb\u884c\u67e5\u8be2\u3002\u76ee\u524d\u6211\u4eec\u6709\u4ee5\u4e0b\u6570\u636e\u53ef\u4f9b\u67e5\u8be2\uff1a \n \n \u539f\u59cb\u6570\u636e\u8868  (../tables/v2/raw/) \n \u5df2\u89e3\u7801\u6570\u636e\u8868  (../tables/decoded/) \n \u9b54\u6cd5  (../tables/spells/) \n \u793e\u533a\u6570\u636e\u8868  (../tables/community/) \n \n ", "url": "https://dune.com/docs/zh/reference/dune-v2/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/support-feedback.md) \n \u652f\u6301\u548c\u53cd\u9988 \n ", "url": "https://dune.com/docs/zh/reference/support-feedback/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#how-decommissioning-will-work) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/v1-sunsetting.md) \n Sunsetting Dune V1 \n With the release of the Polygon decoded tables on Dune Engine V2, we now have all  Raw  (../tables/v2/raw/)  and  Decoded  (../reference/tables/v2/decoded)  data that was on V1 on V2!  \n As a result we have started decommissioning blockchains on V1 as we transition to V2 as our primary platform. \n Here's the order in which we plan to decommission chains on V1:  \n \n BSC (decommission by Jan 31st 2023, extended from Dec 14th due to community feedback) \n Polygon (decommission by Jan 31st 2023, extended from Dec 21st due to community feedback)  \n Optimism (decommission TBD - estimate kickoff Q1 2023)  \n xDai (decommission TBD - estimated kickoff Q1 2023)  \n Ethereum (decommission TBD - estimate kickoff Q1 2023)   \n \n Please also note: \n \n No new contracts that are submitted for decoding (on all blockchains) will be decoded on V1, they will only be decoded on V2* (already decoded contracts will continue to work as normal)  \n No new Abstraction PRs will be merged on V1* (please use  Spellbook  (../../spellbook/)  on V2) \n \n *special cases can be individually reviewed  \n ", "url": "https://dune.com/docs/zh/reference/v1-sunsetting/"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/reference/index.md) \n \u6269\u5c55\u8d44\u6e90 \n Reference is the place to find answers to your \"who, what, where\" questions eg: \n \n What data exists in Dune Tables? \n What tools are helpful for building dashboards? \n Where do I find Dune events and support? \n \n We've also included a couple of supplemental resources like  Wizard Tools  (wizard-tools)  that we think you'll find helpful in your work as a Wizard! \ud83e\uddd9", "url": "https://dune.com/docs/zh/reference/"}
{"content": "What are Credits? \u00b6 \n Credits serve as Dune's platform currency, facilitating executions and data access via the API. Opting for better performance or larger data exports will consume more credits. \n Each month, based on your subscription plan, your account receives a specific credit allocation. Please note that any unused credits will not carry over to the next month. \n For those using Dune in a team account, credits are shared among all team members. \n ", "url": "https://dune.com/docs/learning/how-tos/credit-system-on-dune/#what-are-credits"}
{"content": "What Consumes Credits? \u00b6 \n \n Executing queries \n Scheduling queries  (../../../app/query-editor/query-scheduler/) \n Materializing query results  (../../../query/materialized-views/) \n Data exports via API  (../../../api/api-reference/get-results/) \n \n \n Note \n Opting for larger, more powerful engines will result in higher credit consumption. \n \n ", "url": "https://dune.com/docs/learning/how-tos/credit-system-on-dune/#what-consumes-credits"}
{"content": "Managing Your Credits \u00b6 \n To view your current credit usage, hover over the odometer icon at the top of your dashboard. Ensure you're checking within the correct context. \n \n For a detailed view of credit usage and other quotas, navigate to Settings \u2192 Subscriptions. \n \n If you need additional credits beyond your plan's allocation, utilize the \"pay-as-I-go\" feature. Adjust the \"Limit extra credits\" field to set a maximum dollar amount for additional credit purchases. By default, this limit is set to $0.", "url": "https://dune.com/docs/learning/how-tos/credit-system-on-dune/#managing-your-credits"}
{"content": "Getting Started \u00b6 \n Initiate a New Query : Begin by selecting  \"Create New Query\"  (https://dune.com/queries) . Start laying the basic structure of your query.  \n  (#__codelineno-0-1) SELECT   \n  (#__codelineno-0-2) FROM   \n  (#__codelineno-0-3) WHERE \n  (#__codelineno-0-4) GROUP   BY   \n \n ", "url": "https://dune.com/docs/learning/how-tos/create-your-first-query/#getting-started"}
{"content": "Choosing the Right Table \u00b6 \n \n \n Determine Your Data Source : Instead of delving into the intricate  raw blockchain tables  (../../../data-tables/raw/)  to fetch gas expenditures for your wallet, utilize the pre-built, analytics-ready  Spell table  (../../../data-tables/spellbook/)  named  gas.fees  (https://github.com/duneanalytics/spellbook/tree/main/models/gas) . This table facilitates an effortless aggregation of gas expenses across eight EVM chains specifically for your wallet. \n \n \n What's the Spellbook?  Think of Spellbook as a transformative layer that aggregates and standardizes blockchain data, both raw and decoded. With thousands of models both contributed by our active community and curated by the Dune team, it's an invaluable resource. For a deeper dive into Spellbook,  explore here  (../../../data-tables/spellbook/) . \n \n \n  (#__codelineno-1-1) SELECT   \n  (#__codelineno-1-2) FROM   gas . fees \n  (#__codelineno-1-3) WHERE \n  (#__codelineno-1-4) GROUP   BY   \n \n ", "url": "https://dune.com/docs/learning/how-tos/create-your-first-query/#choosing-the-right-table"}
{"content": "Crafting Your Query \u00b6 \n \n \n Identify Your Columns : Once you've zeroed in on the right table, pinpoint the  tx_fee_usd  column to track USD gas expenditures. To specify the wallet you're examining, use the  tx_sender  field. For demonstration purposes, we'll be using Vitalik's wallet (0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045). \n \n \n Aggregation & Time Period : Our goal is to get monthly gas spendings, so we need to truncate the  block_date  to month and applying the  SUM()  function, then group by each month go derive the results. \n \n \n Sum of sum was applied to get the cumulatively gas spendings. \n  (#__codelineno-2-1) SELECT \n  (#__codelineno-2-2)    DATE_TRUNC ( 'month' ,   block_date )   AS   period , \n  (#__codelineno-2-3)    SUM ( tx_fee_usd )   AS   monthly_gas_spent , \n  (#__codelineno-2-4)    SUM ( SUM ( tx_fee_usd ))   OVER   ( ORDER   BY   DATE_TRUNC ( 'month' ,   block_date ))   AS   cumulative_gas_spent \n  (#__codelineno-2-5) FROM   gas . fees \n  (#__codelineno-2-6) WHERE \n  (#__codelineno-2-7)    tx_sender   =   0 xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045   -- vitalik.eth  \n  (#__codelineno-2-8) GROUP   BY \n  (#__codelineno-2-9)    1 \n  (#__codelineno-2-10) ORDER   BY \n  (#__codelineno-2-11)    1 \n \n Here is the  link to demo query  (https://dune.com/queries/3100875) . \n ", "url": "https://dune.com/docs/learning/how-tos/create-your-first-query/#crafting-your-query"}
{"content": "Boost Flexibility with Parameters \u00b6 \n In the example, you'll see  tx_sender = {{Your Wallet Address}} -- default is vitalik.eth . This denotes the use of the parameter feature, enhancing the query's flexibility. To mark a field as a parameter, wrap it in \"{{}}\". Alternatively, activate the \"Add Parameter\" button. \n \n  (#__codelineno-3-1) SELECT \n  (#__codelineno-3-2)    DATE_TRUNC ( 'month' ,   block_date )   AS   period , \n  (#__codelineno-3-3)    SUM ( tx_fee_usd )   AS   monthly_gas_spent , \n  (#__codelineno-3-4)    SUM ( SUM ( tx_fee_usd ))   OVER   ( ORDER   BY   DATE_TRUNC ( 'month' ,   block_date ))   AS   cumulative_gas_spent \n  (#__codelineno-3-5) FROM   gas . fees \n  (#__codelineno-3-6) WHERE \n  (#__codelineno-3-7)    tx_sender   =   {{ Your   Wallet   Address }}   -- default is vitalik.eth \n  (#__codelineno-3-8) GROUP   BY \n  (#__codelineno-3-9)    DATE_TRUNC ( 'month' ,   block_date ) \n  (#__codelineno-3-10) ORDER   BY \n  (#__codelineno-3-11)    1 \n \n ", "url": "https://dune.com/docs/learning/how-tos/create-your-first-query/#boost-flexibility-with-parameters"}
{"content": "Execute & Fetch the Result \u00b6 \n All set! Click \"Run\" and behold the outcome. Kudos on crafting your first query! \ud83c\udf89 \n Now that you have successfully run your query, you can go ahead and save it so you can keep monitoring your gas usage going forward. To save, click  Save  in the upper right part of the screen. \n \n Note \n For a more intuitive insight, consider visualizing this data. Navigate to  Create your first visualization  (../create-your-first-visualization/)  and conjure up some graphical magic!", "url": "https://dune.com/docs/learning/how-tos/create-your-first-query/#execute-fetch-the-result"}
{"content": "Crafting Queries, Dashboards, and Datasets \u00b6 \n \n Navigate to the \u201c+Create\u201d button located at the top of the page. \n From the dropdown, you have the option to: \n Initiate new queries. \n Generate AI-assisted queries with the Wand feature. For a detailed walkthrough,  refer to this guide  (../create-ai-assisted-queries/) . \n Design new dashboards. \n Upload on-chain or off-chain datasets as per your requirements. \n \n \n \n \n Once uploaded, your datasets can be found under the \u201cYour Data\u201d section within the data explorer. \n \n ", "url": "https://dune.com/docs/learning/how-tos/create-new-content/#crafting-queries-dashboards-and-datasets"}
{"content": "Submitting Contracts for Decoding \u00b6 \n If you're keen on analyzing a contract or project that hasn't been decoded yet on Dune, here's what you can do: \n \n Submit the contract for decoding. \n Once submitted, the automated decoding process kicks in. \n After a brief wait, your decoded contract will appear under the \u201cDecoded Projects\u201d category. \n \n \n ", "url": "https://dune.com/docs/learning/how-tos/create-new-content/#submitting-contracts-for-decoding"}
{"content": "Create Visualization Widgets \u00b6 \n You can create visualization widgets from any existing query results, but clicking the \u201cNew visualization\u201d button and choosing the type of charts you want. Of course you can customize the charts to your liking.  \n \n ", "url": "https://dune.com/docs/learning/how-tos/create-new-content/#create-visualization-widgets"}
{"content": "Forking Queries \u00b6 \n If you stumble upon a query that almost meets your needs but requires a few tweaks: \n \n Click on the \u201cFork\u201d button located in the upper right corner. \n Modify the forked query as per your requirements. \n \n \n Harness the power of Dune to create, visualize, and analyze. Happy crafting!", "url": "https://dune.com/docs/learning/how-tos/create-new-content/#forking-queries"}
{"content": "Dune for Teams \u00b6 \n Did you know that you can create a team account on Dune? With Dune for Teams, you can benefit from a shared workspace, making collaboration on content creation a breeze. Additionally, team accounts provide access to exclusive plus/premium features and provide enhanced privacy for your content. \n In this guide, we'll walk you through the essentials of setting up and managing a team on Dune. \n ", "url": "https://dune.com/docs/learning/how-tos/create-and-manage-teams/#dune-for-teams"}
{"content": "Setting Up a Team \u00b6 \n \n Navigate to the global context switcher. \n Select \u201cCreate new team\u201d. \n Follow the on-screen instructions to complete the team creation process. \n \n \n Note \n Every account on Dune, be it individual or team-based, requires a unique identifier or slug. This means you cannot establish a new team using a handle that's already in use. \n \n \n ", "url": "https://dune.com/docs/learning/how-tos/create-and-manage-teams/#setting-up-a-team"}
{"content": "Inviting Members & Assigning Roles \u00b6 \n \n Once your team is set up, you'll have the opportunity to invite others. Click on \u201cInvite People\u201d and proceed as directed. \n During the invitation process, you can assign one of three roles to the invitee:  admin, editor, or viewer  (../../../app/teams/#adding-users) . \n Alternatively, use the provided URL to invite members. \n \n \n To add members at a later time, click on the \u201c+ Create\u201d button and select \u201cInvite Members\u201d. \n \n ", "url": "https://dune.com/docs/learning/how-tos/create-and-manage-teams/#inviting-members-assigning-roles"}
{"content": "Managing Subscriptions \u00b6 \n Navigate to the settings page of your team account to oversee subscriptions. Here, you can modify your plan, opt for annual billing, and view usage statistics related to credits, CSV, and private content quotas. \n \n This section also allows you to manage the \u201cpay-as-you-go\u201d feature. If you wish to purchase additional credits beyond your plan's allocation, adjust the \u201cLimit extra credits\u201d field. Set a maximum dollar amount for additional credits. By default, this limit is set to $0. \n \n ", "url": "https://dune.com/docs/learning/how-tos/create-and-manage-teams/#managing-subscriptions"}
{"content": "Switching Contexts \u00b6 \n Easily toggle between different team or individual accounts using the global context switcher.", "url": "https://dune.com/docs/learning/how-tos/create-and-manage-teams/#switching-contexts"}
{"content": "Create \u00b6 \n Harness the power of natural language to frame your question and let the \"Generate SQL\" button do the heavy lifting in crafting a query for you. However, it's crucial to mention the pertinent tables explicitly within your natural language question. While the Wand's creation feature is a fantastic starting point, we advise fine-tuning the generated query with the Wand's Edit tool. \n For instance, let's use Wand Create to determine the market share of all NFT marketplaces over the past week. \n \n ", "url": "https://dune.com/docs/learning/how-tos/create-ai-assisted-queries/#create"}
{"content": "Edit \u00b6 \n Modify an existing SQL query using a natural language prompt. As with Wand Create, it's essential to specify any additional tables that the query might require. \n Building on our previous example, we'll employ Wand Edit to filter out any wash trading volume, ensuring a more accurate market share calculation. \n \n For more ideas on how Edit can help you, please visit  this doc page  (../../../app/wand-llm/) .  \n ", "url": "https://dune.com/docs/learning/how-tos/create-ai-assisted-queries/#edit"}
{"content": "Debug \u00b6 \n Errors in SQL can be frustrating, especially when they arise from minor oversights like a missing comma or a forgotten 'group by' clause. Enter Wand Debug, your saving grace. Whenever your query encounters an error, simply hit the \"Fix Query\" button and let the Wand work its magic. \n \n With the Wand at your disposal, SQL queries become a breeze, allowing you to focus on deriving insights and making informed decisions. Happy querying!", "url": "https://dune.com/docs/learning/how-tos/create-ai-assisted-queries/#debug"}
{"content": "\u8df3\u8f6c\u81f3\n          (#kroeger0x) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/getting-started/use-cases/ecosystem-dashboards.md) \n \u751f\u6001\u770b\u677f \n \u7531\u4e8e Dune \u51e0\u4e4e\u628a\u6240\u6709\u533a\u5757\u94fe\u6570\u636e\u90fd\u6c47\u603b\u4e00\u8d77\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u53d1\u73b0\u548c\u63a2\u7d22\u66f4\u591a\u751f\u6001\u7cfb\u7edf\u7ea7\u522b\u7684\u603b\u4f53\u6307\u6807\u3002 \n ", "url": "https://dune.com/docs/zh/getting-started/use-cases/ecosystem-dashboards/"}
{"content": "Dune Tutorials \u00b6 \n ", "url": "https://dune.com/docs/learning/#dune-tutorials"}
{"content": "Dune 101 \u00b6 \n Speed up your learning curve and become a Dune creator. Dive into our  how-to tutorials  (how-tos/) . \n ", "url": "https://dune.com/docs/learning/#dune-101"}
{"content": "How-To Guides \u00b6 \n Eager for focused insights? Explore our curated guides: \n \n How to create Sankey diagram with Dune's data  (create-sankey-diagram/)   \n How to conduct social network analysis for Farcaster with Dune API and Python  (conduct-network-analysis/) \n \n ", "url": "https://dune.com/docs/learning/#how-to-guides"}
{"content": "Metrics-Driven Analysis \u00b6 \n \n \n Video Series: Delve deep with our end-to-end video series guides: \n \n Uniswap in 12 Days  (https://www.youtube.com/watch?v=FtnGiI9MGgA&list=PLK3b5d4iK10cIrN8c_au9RrC0_eBCOyR2&index=1&t=149s)  (includes metrics like price impact, TVL, MEV volume, liquidity stability) \n Gnosis Safe Point-in-Time  (https://www.youtube.com/watch?v=8atzYkpez5I)  (includes metrics like signers, diversification, valuations) \n \n \n \n Dashboards for Insights: \n \n \n To understand token trends and contexts, check out this  ERC20 dashboard  (https://dune.com/ilemi/Token-Overview-Metrics)  and this  NFT dashboard  (https://dune.com/rantum/NFT-Collection-Dashboard) .  \n \n \n To understand wallet/user segments, you'll need to leverage  labels  (../data-tables/spellbook/top-tables/labels/)  to enhance your analysis. \n \n \n \n \n Once you have metrics and also understand the underlying tokens and users, it will start to become clear what that real narrative is. Try and pull together a few insights, and then create a really compelling dashboard and story around them. Don't try too hard to capture everything at once - it will become overwhelming for both you those you share it with.  \n ", "url": "https://dune.com/docs/learning/#metrics-driven-analysis"}
{"content": "Analysis Tips \u00b6 \n \n \n Start with a solid foundation. Master  basic SQL and blockchain concepts  (https://web3datadegens.substack.com/p/a-basic-wizard-guide-to-dune-sql) . \n \n \n Scope Your Work:\nWhen looking into a protocol, you'll need to understand the contract architecture and context. That starts with functions, events, and wallets overviews. There is a  quickstart dashboard  (https://dune.com/ilemi/contract-quickstart)  built just for this, you can see a walkthrough analyzing Opensea  here  (https://web3datadegens.substack.com/p/how-to-start-analyzing-any-web3-protocol) .  \n \n \n Remember that no protocol lives in isolation - there is always some mix of onchain events happening. That could be some new airdrop, a new upstream/downstream protocol integration, large whales making moves, governance changes in protocol parameters, and more. Once you have a solid understanding of protocol history in usage, user, and integration trends, you're ready to start building some metrics. \n ", "url": "https://dune.com/docs/learning/#analysis-tips"}
{"content": "Engage with the Community \u00b6 \n When you're done, be sure to share your work  in the Discord  (https://discord.com/invite/ErrzwBz)   #\ud83d\udcfa\ufe31show-your-work  channel and on Twitter tagging  @duneanalytics  (https://twitter.com/DuneAnalytics) . We'll be sure to give great analysts a boost! Web3 is all about connecting with communities - your queries and dashboards will do nothing if you don't share it around. \n ", "url": "https://dune.com/docs/learning/#engage-with-the-community"}
{"content": "Special Course: OurNetwork \u00b6 \n \n Note \n This course is based on Dune's V1 engine. The domain logic still applies, but the SQL syntax has now switched from  postgreSQL to Dune SQL  (../query/syntax-differences/) . \n \n In collaboration with the Dune Team and Community, our friends at OurNetwork created a course with an ambitious goal: teach 30 people web3 data analytics in 30 days. \n Hosted by some of our community's top Wizards, you can now access the presentations for free! More details and all of the course materials can be found here: \n \n \n OurNetwork Course  (https://ournetwork.mirror.xyz/gP16wLY-9BA1E_ZuOSv1EUAgYGfK9mELNza8cfgMWPQ) \n \n \n Videos are also available on YouTube:", "url": "https://dune.com/docs/learning/#special-course-ournetwork"}
{"content": "Migration tool \u00b6 \n Migrating your queries from SparkSQL and PostgreSQL to DuneSQL can be a tedious task. The Dune Migration tool will help you migrate your queries from SparkSQL and PostgreSQL to DuneSQL.  \n The tool is open source and available in this  github repo  (https://github.com/duneanalytics/harmonizer/) . Contributions are very welcome!  If you run into issues, please let us know by  creating an issue  (https://github.com/duneanalytics/harmonizer/issues) . \n ", "url": "https://dune.com/docs/migrations/migration-tool/#migration-tool"}
{"content": "How to use the tool \u00b6 \n Whenever you are ready to migrate your queries, the tool will be available to you in the Dune Query Editor.   \n Whenever you open a query running on SparkSQL or PostgreSQL, you will see a banner at the bottom of the query editor. Simply click on \"Migrate to DuneSQL\" and the tool will automatically convert your query to DuneSQL. \n \n You can also always access the tool by opening the settings menu in the query editor and clicking on \"Migrate to DuneSQL\". \n \n ", "url": "https://dune.com/docs/migrations/migration-tool/#how-to-use-the-tool"}
{"content": "Limitations \u00b6 \n \n Warning \n The tool is still under active development and has quite a few limitations. \nWe are working hard behind the scenes to improve the tool and will share updates as we make progress.   \n \n Known issues \n \n The tool doesn't really know what your query is doing, so it will not be able to migrate all queries. \n The tool is not able to migrate queries that use UDFs. \n The tool is not able to accurately migrate queries that have a lot of casts(). \n THe tool doesn't really know about the changes in our abstractions, e.g. if you used single chain dex.trades, you will now need to specify the chain within the query with e.g.  where blockchain = 'ethereum' . \n The tool is not able to migrate queries with  dune_user_generated  tables \n \n In general, the tool is not yet able to migrate queries that are too complex. If you have a complex query, you will need to debug the outputs of the tool and make the necessary changes. \n However, the tool takes care of a lot of table name changes and other minor changes, so  it will still save you a lot of time . \n ", "url": "https://dune.com/docs/migrations/migration-tool/#limitations"}
{"content": "Further resources \u00b6 \n For guidance on how to manually migrate your queries or debug the migration tool results, you can read the following articles: \n \n SparkSQL  (../SparkSQL/) \n PostgreSQL  (../PostgreSQL/)", "url": "https://dune.com/docs/migrations/migration-tool/#further-resources"}
{"content": "SparkSQL \u00b6 \n SparkSQL is a query engine that is based on Apache Spark. \nThis Query engine already runs on our V2 database, so the data you can query is the same as with DuneSQL. \nUnfortunately SparkSQL is not a good fit for our use case and therefore we are deprecating it. \n SparkSQL is still in production and will be supported until  30/07/2023 . After that date, SparkSQL will be removed from production and all queries need to be migrated to DuneSQL. \n You can read more about SparkSQL in the  SparkSQL documentation  (https://spark.apache.org/docs/latest/sql-ref.html) . \n ", "url": "https://dune.com/docs/migrations/SparkSQL/#sparksql"}
{"content": "Migrating from SparkSQL \u00b6 \n Migrating queries from SparkSQL to DuneSQL is somewhat easy. The two query engines query the same data and therefore the queries are very similar. \n \n \n \n Description \n V2 - Spark SQL \n V2 - Dune SQL \n \n \n \n \n bytea2numeric , or casting hex/bytea to a number \n bytea2numeric_v3  (string) \n bytearray_to_integer  (hex)    bytearray_to_bigint  (hex)    bytearray_to_decimal  (hex)    bytearray_to_uint256  (hex)    bytearray_to_int256  (hex)   More details on  Byte Array to Numeric Functions  (#byte-array-to-numeric-functions) \n \n \n Doing math or numeric operations on a column, like value in ethereum.transactions \n sum(value) \n sum(cast(value as double))  soon this won't be needed as UINT and INT columns are added automatically. \n \n \n 0 vs 1 array based indexing \n 0 indexed \n 1 indexed \n \n \n Implicit type conversions between character and numeric types \n Available \n Not available  (https://trino.io/docs/current/functions/conversion.html) \n \n \n Addresses \n 0x2a7d...  (string)  Has to be lowercase in Spark.  Can be done via  lower('0x2A7D...') \n 0x2a7d...  (Byte array)    No escape quotes should be used, and the literal does  not  need to be lowercased. \n \n \n Selecting keyword columns is different \n `from` \n \"from\" \n \n \n Alias naming is different \n as `daily active user` \n as \"daily active users\" \n \n \n Exponentiation notation \n x*power(10,y)  or  x*1e123 \n x*power(10,y)  or  x * 1e123 \n \n \n Interval argument has different syntax \n Interval '1 day' \n Interval '1' day \n \n \n Generate_series () is now sequence () \n explode(sequence(to_date('2022-01-01'), to_date('2022-02-01'), interval 1 day)) \n unnest(sequence(date('2022-01-01'), date('2022-02-01'), interval '7' day))  (https://dune.com/queries/1764158?d=11)    Has a 10000 values limit, and must go in the FROM statement not the SELECT. \n \n \n Handling decimals for prices.usd \n Replaced by  prices.tokens decimals \n Replaced by  tokens_[blockchain].erc20.decimals \n \n \n Define NULL array \n CAST(NULL AS ARRAY<int>)) \n CAST(NULL AS ARRAY<int>)) \n \n \n encoding strings to hex \n hex(string) \n hex(string)   *available soon \n \n \n Get json object differences \n get_json_object(get_json_object(takerOutputUpdate,'\\(.deltaWei'),'\\).value')'0x' \n json_query(json_query(takerOutputUpdate, 'lax $.deltaWei' omit quotes), 'lax $.value') \n \n \n Group by an alias \n Same as PostgreSQL \n GROUP BY date_trunc('hour',evt_block_time) Or:  GROUP BY 1, 2 \n \n \n Explicit date/time casting \n cast('2021-08-08 17:00' as timestamp) \n cast('2021-08-08 17:00' as timestamp)   Or,  timestamp '2021-08-08 17:00'   There are  many helper functions for casting to date/time types  (https://trino.io/docs/current/functions/datetime.html?highlight=date) , such as  date(\u20182022-01-01\u2019) \n \n \n Checking if an item exists in an array \n array_contains(array, value) \n contains(array, value)  or  contains_sequence(array, array[values])  (https://trino.io/docs/current/functions/array.html#contains) \n \n \n Explode \n SELECT explode(array) FROM table \n SELECT vals.val FROM table1, unnest(arrayFromTable1) as vals(val)   you have to use  unnest  with a  cross join , as described in this  blog post  (https://theleftjoin.com/how-to-explode-arrays-with-presto/) . \n \n \n Median \n PERCENTILE_CONT(0.5) WITHIN GROUP(ORDER BY x) \n approx_percentile(x, 0.5) \n \n \n Using \u201cis True/False\u201d \n X is true \n X = true \n \n \n String Data Type \n string \n varchar \n \n \n Casting as Strings \n cast([xxx] as string) \n cast([xxx] as varchar) \n \n \n left()  is no longer a method available for returning substrings \n left([string],[length]) \n substr([string], [start], [length])   Returns varchar; Positions start with 1, so use  1  for length if you want to replicate left() functionality  (https://trino.io/docs/current/functions/string.html?highlight=substr#substring)   left(somestring, somenumber) -> substr(somestring, 0, somenumber) \n \n \n Aggregate Functions \n array_agg(col)  or  collect_list(col) ,  collect_set(col)  or  array_agg(distinct(col)) \n array_agg(col) ,  array_agg(distinct(col)) \n \n \n user generated views \n none \n each query is a view, like  query_1747157  (https://dune.com/queries/1747157) \n \n \n event logs topic indexing \n topic 1,2,3,4 \n topic 0,1,2,3", "url": "https://dune.com/docs/migrations/SparkSQL/#migrating-from-sparksql"}
{"content": "PostgreSQL \u00b6 \n Our PostgreSQL database and query engine are the oldest parts of Dune Analytics. PostgreSQL does not scale well and therefore we are deprecating it. \nPostgres is an entirely different database than our V2 database and therefore the data you can query is different.   \n PostgreSQL is still in production and will be supported until  15/08/2023 . After that date, PostgreSQL will be removed from production and all queries need to be migrated to DuneSQL. \n You can read more about PostgreSQL in the  PostgreSQL documentation  (https://www.postgresql.org/docs/) . \n ", "url": "https://dune.com/docs/migrations/PostgreSQL/#postgresql"}
{"content": "Migrating from PostgreSQL \u00b6 \n Migrating queries from PostgreSQL to DuneSQL is a bit more difficult. The two query engines query different data and therefore the queries are very different. Additionally the way you would write queries in the index-heavy PostgreSQL is very different from the way you would write queries in the columnar DuneSQL. Learn more about this in the  writing efficient queries section  (../../query/writing-efficient-queries/) . \n \n \n \n Description \n V1 - PostgreSQL \n V2 - Dune SQL \n \n \n \n \n bytea2numeric , or casting hex/bytea to a number \n bytea2numeric  (bytea) \n bytearray_to_integer  (hex)    bytearray_to_bigint  (hex)    bytearray_to_decimal  (hex)    bytearray_to_uint256  (hex)    bytearray_to_int256  (hex)   More details on  Byte Array to Numeric Functions  (#byte-array-to-numeric-functions) \n \n \n Doing math or numeric operations on a column, like value in ethereum.transactions \n sum(value) \n sum(cast(value as double))  soon this won't be needed as UINT and INT columns are added automatically. \n \n \n 0 vs 1 array based indexing \n 1 indexed \n 1 indexed \n \n \n Implicit type conversions between character and numeric types \n Available \n Not available  (https://trino.io/docs/current/functions/conversion.html) \n \n \n Addresses \n \\x2A7D... (bytea)  Works in Postgres \n 0x2a7d...  (Byte array)    No escape quotes should be used, and the literal does  not  need to be lowercased. \n \n \n Selecting keyword columns is different \n \"from\" \n \"from\" \n \n \n Alias naming is different \n as \"daily active users\" \n as \"daily active users\" \n \n \n Exponentiation notation \n x/10^y  or  x * 1e123 \n x*power(10,y)  or  x * 1e123 \n \n \n Interval argument has different syntax \n Interval '1day' \n Interval '1' day \n \n \n Generate_series () is now sequence () \n generate_series('2022-05-15', CURRENT_DATE, '1 day') \n unnest(sequence(date('2022-01-01'), date('2022-02-01'), interval '7' day))  (https://dune.com/queries/1764158?d=11)    Has a 10000 values limit, and must go in the FROM statement not the SELECT. \n \n \n Handling decimals for prices.usd \n Don\u2019t use  prices.usd decimals \n Replaced by  tokens_[blockchain].erc20.decimals \n \n \n Define NULL array \n NULL::integer[] \n CAST(NULL AS ARRAY<int>)) \n \n \n encoding strings to hex \n encode(string, 'hex') \n hex(string)   *available soon \n \n \n Get json object differences \n (takerOutputUpdate->'deltaWei'->'value') decode(substring((addressSet->'baseAsset')::TEXT, 4,40), 'hex') \n json_query(json_query(takerOutputUpdate, 'lax $.deltaWei' omit quotes), 'lax $.value') \n \n \n Group by an alias \n SELECT date_trunc('hour',evt_block_time) as col1, COUNT(*) FROM erc721_ethereum evt_Transfer GROUP BY col1 \n GROUP BY date_trunc('hour',evt_block_time) Or:  GROUP BY 1, 2 \n \n \n Explicit date/time casting \n '2021-08-08 17:00'::timestamp \n cast('2021-08-08 17:00' as timestamp)   Or,  timestamp '2021-08-08 17:00'   There are  many helper functions for casting to date/time types  (https://trino.io/docs/current/functions/datetime.html?highlight=date) , such as  date(\u20182022-01-01\u2019) \n \n \n Checking if an item exists in an array \n value = ANY (array) \n contains(array, value)  or  contains_sequence(array, array[values])  (https://trino.io/docs/current/functions/array.html#contains) \n \n \n Explode \n SELECT unnest(array) FROM table \n SELECT vals.val FROM table1, unnest(arrayFromTable1) as vals(val)   you have to use  unnest  with a  cross join , as described in this  blog post  (https://theleftjoin.com/how-to-explode-arrays-with-presto/) . \n \n \n Median \n PERCENTILE_CONT(0.5) WITHIN GROUP(ORDER BY x) \n approx_percentile(x, 0.5) \n \n \n Using \u201cis True/False\u201d \n X is true \n X = true \n \n \n String Data Type \n varchar \n varchar \n \n \n Casting as Strings \n cast([xxx] as string) \n cast([xxx] as varchar) \n \n \n left()  is no longer a method available for returning substrings \n left([string],[length]) \n substr([string], [start], [length])   Returns varchar; Positions start with 1, so use  1  for length if you want to replicate left() functionality  (https://trino.io/docs/current/functions/string.html?highlight=substr#substring)   left(somestring, somenumber) -> substr(somestring, 0, somenumber) \n \n \n Aggregate Functions \n array_agg(col) ,  array_agg(distinct(col)) \n array_agg(col) ,  array_agg(distinct(col)) \n \n \n user generated views \n create view dune_user_generated.table \n each query is a view, like  query_1747157  (https://dune.com/queries%201747157) \n \n \n event logs topic indexing \n topic 1,2,3,4 \n topic 0,1,2,3 \n \n \n \n Migrating User Generated Views \u00b6  (#migrating-user-generated-views) \n In PostgresSQL you had the ability to create views. This functionality is not available in DuneSQL.  \nInstead, each query can act as a view. You can learn about how to use the \"query a query\" feature in the  query a query section  (../../query/query-a-query/) .    \n To migrate a user generated view, you need to create a new query and copy the SQL from the user generated view into the new query. You can then use the \"query a query\" feature to query the new query. \n You can view the definiiton of a user generated view by querying for it on DuneSQL: \n  (#__codelineno-0-1) select   \n  (#__codelineno-0-2)      table_name ,   \n  (#__codelineno-0-3)      view_definition   \n  (#__codelineno-0-4) from   dunecat . v1_user_generated_views \n  (#__codelineno-0-5) where   table_name   =   'view_name' \n \n \u2192 Query link  (https://dune.com/queries/2516791)", "url": "https://dune.com/docs/migrations/PostgreSQL/#migrating-from-postgresql"}
{"content": "Dune's Query Engines \u00b6 \n Dune formerly supported three different query engines:   \n \n DuneSQL   \n SparkSQL (shut down)  \n PostgreSQL (shut down)  \n \n The SparkSQL and PostgreSQL query engines were deprecated and are replaced by DuneSQL. You can read more about the decisions to sunset the old query engines in the  announcement post  (https://dune.com/blog/introducing-dune-sql) . \n You should use the  migration tool  (migration-tool/)  to try and translate your queries. If you run into issues, please let us know by  creating an issue  (https://github.com/duneanalytics/harmonizer/issues) . \n ", "url": "https://dune.com/docs/migrations/#dunes-query-engines"}
{"content": "Sunsetting Schedule \u00b6 \n We are progressively disabling the ability to create new queries on the old query engines. You can read up on the stages of that in the table below. \nThe final date of the sunsetting was  30/07/2023 . The old query engines will no longer receive new data and there is no more executions. \n ", "url": "https://dune.com/docs/migrations/#sunsetting-schedule"}
{"content": "SparkSQL \u00b6 \n \n \n \n Date \n 11/4/2023 \n 30/05/2023 \n 15/07/2023 \n 30/07/2023 \n \n \n \n \n SparkSQL \n Sunsetting Kickoff \n no action taken \n Query creation, edits disabled \n End of Service \n \n \n \n ", "url": "https://dune.com/docs/migrations/#sparksql"}
{"content": "PostgreSQL \u00b6 \n \n \n \n Date \n 11/4/2023 \n 30/05/2023 \n 15/07/2023 \n 30/07/2023 \n \n \n \n \n PostgreSQL \n Sunsetting Kickoff \n Query creation disabled \n edits disabled \n End of Service \n \n \n \n ", "url": "https://dune.com/docs/migrations/#postgresql"}
{"content": "What this means for you \u00b6 \n You will need to migrate your queries from SparkSQL or PostgreSQL to DuneSQL. If you don't migrate your queries, you queries will cease to update on  30/07/2023  and you will no longer be able to edit or execute them without migrating them to DuneSQL.  \n ", "url": "https://dune.com/docs/migrations/#what-this-means-for-you"}
{"content": "Migrating your queries \u00b6 \n If you are using SparkSQL or PostgreSQL, you will need to migrate your queries to DuneSQL by  30/07/2023 .   \n To migrate your queries from SparkSQL or PostgreSQL to DuneSQL, you can use the  DuneSQL migration tool  (migration-tool/) . \nThis tool will automatically convert your queries to DuneSQL.\nYou can read about the Syntax differences between the engines in the respective sections of SparkSQL and PostgreSQL. \n \n \n \u2192 SparkSQL  (SparkSQL/) \n \u2192 PostgreSQL  (PostgreSQL/) \n \n \n ", "url": "https://dune.com/docs/migrations/#migrating-your-queries"}
{"content": "What happens to non-migrated queries? \u00b6 \n After  30/07/2023 , queries running on either SparkSQL or PostgreSQL will no longer be updated. You will still be able to access the data from your queries, but there won't be any new data added to your query results and they will stop executing. Query code will still be available to you, but you will not be able to edit it. \n ", "url": "https://dune.com/docs/migrations/#what-happens-to-non-migrated-queries"}
{"content": "FAQ \u00b6 \n ", "url": "https://dune.com/docs/migrations/#faq"}
{"content": "general \u00b6 \n \n What is DuneSQL? \n DuneSQL is a powerful distributed SQL query engine, based on Trino, that is designed to address the limitations of the old query engines and provide a more modern and flexible solution. \n \n \n Why another query engine? \n DuneSQL was created to address the limitations of the old query engines, such as performance and scalability issues, as well as to provide a more modern and flexible solution. DuneSQL gives Dune full control over storage, execution, and query planning, which allows us to provide a faster, more reliable, and more scalable service. \n \n \n What are the main differences between DuneSQL and the old query engines? \n Some of the main differences between DuneSQL and the old query engines are: \n \n DuneSQL is designed for scalability, whereas the old query engines have struggled with scaling issues in the past. \n with DuneSQL, we control the entire stack, from the database to the query engine, which allows us to provide a more stable and reliable service. \n DuneSQL has a simplified syntax that makes it easier to write and read queries. \n \n \n \n Why a fork of Trino? \n DuneSQL is a fork of Trino (formerly known as PrestoSQL) that has been customized to meet the specific needs of Dune. Trino is a powerful distributed SQL query engine that is widely used in the industry, and by forking it, Dune was able to leverage its proven technology while also adding its own unique features and improvements. \n \n \n What happens to the existing queries that I have already migrated? \n If you have already migrated your queries to DuneSQL, they will continue to work as before and you won't need to take any additional action. \n \n \n Will Postgres and SparkSQL still be around for a while? \n PostgreSQL and SparkSQL are being deprecated and will be replaced by DuneSQL. After  30/07/2023 , queries running on either SparkSQL or PostgreSQL will no longer be updated. You will still be able to access the last execution result from your queries, but there won't be any new data added to your query results and they will stop executing. The Query code will still be available to you, but you will not be able to edit it. \n \n \n What happens with Spellbook? Can I still contribute? \n Spellbook is still a valuable tool for Dune and will continue to be used. You can still contribute to Spellbook by submitting pull requests on the project's GitHub repository. We are working on migrating Spellbook to DuneSQL. The Spellbook code will be migrated to DuneSQL by the Dune Team. The migration to DuneSQL has started and there now is 2 spellbook repos. \n \n ", "url": "https://dune.com/docs/migrations/#general"}
{"content": "Timeline \u00b6 \n \n When do Spark Queries stop working? \n SparkSQL queries will stop being updated on  30/07/2023 . This means they will no longer receive new data and will stop executing. \n \n \n When do Postgres Queries stop working? \n PostgreSQL queries will stop being updated on  30/07/2023 . This means they will no longer receive new data and will stop executing. \n \n ", "url": "https://dune.com/docs/migrations/#timeline"}
{"content": "Migration \u00b6 \n \n How can I migrate existing Queries? \n To migrate your queries from SparkSQL or PostgreSQL to DuneSQL, you can use the  DuneSQL migration tool  (migration-tool/) . This tool will automatically convert your queries to DuneSQL.\nAdditionally, you can read about the Syntax differences between the engines in the respective sections of (SparkSQL)[sparksql.md] and (PostgreSQL)[postgresql.md]. \n \n \n Can I get help to migrate existing queries? \n Please  create an issue in the translator github  (https://github.com/duneanalytics/harmonizer/issues)  for priority support. Otherwise, you can direct your general questions in the #DuneSQL Channel in the  Dune Discord  (https://discord.gg/FjwGvbgDFS) .", "url": "https://dune.com/docs/migrations/#migration"}
{"content": "\u54ea\u4e9b\u5408\u7ea6\u6709\u89e3\u7801\u6570\u636e? \u00b6 \n PostgreSQL  (#__tabbed_4_1) Databricks SQL  (#__tabbed_4_2) \n \n \n \u60a8\u53ef\u4ee5\u901a\u8fc7\u67e5\u8be2 \"blockchain\".contracts \u6765\u68c0\u67e5\u5408\u7ea6\u662f\u5426\u5df2\u7ecf\u89e3\u7801\u6216\u4f7f\u7528  \u6b64\u4eea\u8868\u677f  (https://dune.com/0xBoxer/Is-my-Contract-decoded-yet) . \n  (#__codelineno-0-1) Select   *   from   ethereum . contracts \n  (#__codelineno-0-2) where   address   =   '\\x429881672B9AE42b8EbA0E26cD9C73711b891Ca5' \n \n \n \n \u60a8\u53ef\u4ee5\u901a\u8fc7\u67e5\u8be2_ blockchain. _ contracts  \u6765\u68c0\u67e5\u5408\u7ea6\u662f\u5426\u5df2\u7ecf\u89e3\u7801\u3002 \n  (#__codelineno-1-1) Select   *   from   ethereum . contracts \n  (#__codelineno-1-2) where   address   =   '0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5' \n  (#__codelineno-1-3) --you can change ethereum.contracts to the e.g. optimism.contracts \n \n \n \n \n \u5982\u679c\u5408\u7ea6\u5c1a\u672a\u89e3\u7801,\u60a8\u53ef\u4ee5\u5728\u8fd9\u91cc\u63d0\u4ea4\u7533\u8bf7:  dune.com/contracts/new  (https://dune.com/contracts/new) . \n \u901a\u5e38\u9700\u898124\u5c0f\u65f6\u5b8c\u6210\u89e3\u7801\u3002 \n \u8fd9\u90e8\u5206\u5185\u5bb9\u5c06\u8ba9\u60a8\u4e86\u89e3\u66f4\u591a\u63d0\u4ea4\u5408\u7ea6\u89e3\u7801\u7684\u4fe1\u606f: \n \n \n \u6dfb\u52a0\u65b0\u5408\u7ea6  (../../../getting-started/decoding-contracts/) \n \n \n ", "url": "https://dune.com/docs/zh/reference/tables/decoded/#_1"}
{"content": "\u89e3\u7801\u662f\u600e\u6837\u5b8c\u6210\u7684? \u00b6 \n \u4efb\u4f55\u57fa\u4e8eEVM\u7684\u533a\u5757\u94fe\u4e0a\u7684\u667a\u80fd\u5408\u7ea6\u5927\u591a\u4ee5\u9ad8\u7ea7\u8bed\u8a00\u7f16\u5199\uff0c\u6bd4\u5982  Solidity  (https://docs.soliditylang.org/en/v0.8.2)  or  Vyper  (https://vyper.readthedocs.io/en/stable) \u3002 \n \u4e3a\u4e86\u80fd\u591f\u5c06\u5b83\u4eec\u90e8\u7f72\u5230EVM\u6267\u884c\u73af\u5883\u4e2d\uff0c\u9700\u8981\u5c06\u5b83\u4eec\u7f16\u8bd1\u4e3aEVM\u53ef\u6267\u884c\u5b57\u8282\u7801\u3002\u4e00\u65e6\u90e8\u7f72\uff0c\u5b57\u8282\u7801\u5c31\u4e0e\u76f8\u5e94\u94fe\u4e0a\u7684\u5730\u5740\u76f8\u5173\u8054\uff0c\u5e76\u6c38\u4e45\u5b58\u50a8\u5728\u8be5\u94fe\u7684\u72b6\u6001\u5b58\u50a8\u4e2d\u3002 \n \u4e3a\u4e86\u80fd\u591f\u4e0e\u8fd9\u4e2a\u73b0\u5728\u53ea\u662f\u5b57\u8282\u7801\u7684\u667a\u80fd\u5408\u7ea6\u4ea4\u4e92\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u80fd\u591f\u8c03\u7528\u9ad8\u7ea7\u8bed\u8a00\u5b9a\u4e49\u7684\u529f\u80fd\u7684\u6307\u5357\u3002\u5c06\u540d\u79f0\u548c\u53c2\u6570\u8f6c\u6362\u4e3a\u5b57\u8282\u662f\u901a\u8fc7\u4f7f\u7528  ABI (Application Binary Interface)  \u5b8c\u6210\u7684\u3002 \n ABI\u7cbe\u786e\u5730\u8bb0\u5f55\u4e86\u540d\u79f0\u3001\u7c7b\u578b\u548c\u53c2\u6570\uff0c\u5e76\u5141\u8bb8\u6211\u4eec\u4f7f\u7528\u6613\u8bfb\u7684\u683c\u5f0f\u4e0e\u667a\u80fd\u5408\u7ea6\u8fdb\u884c\u4ea4\u4e92\u3002ABI\u53ef\u4ee5\u4f7f\u7528\u9ad8\u7ea7\u8bed\u8a00\u6e90\u4ee3\u7801\u8fdb\u884c\u7f16\u8bd1\u3002 \n ABI\u7528\u4e8e\u8c03\u7528\u667a\u80fd\u5408\u7ea6\u6216\u9610\u91ca\u5176\u53d1\u51fa\u7684\u8bb0\u5f55 \n \n \u8ba9\u6211\u4eec\u5c06\u6b64\u4ed8\u8bf8\u5b9e\u8df5\uff0c\u5e76\u770b\u4e00\u4e2a\u5b9e\u9645\u7684\u4f8b\u5b50 \n \u6211\u4eec\u6765\u770b\u4e00\u4e2aERC20\u4ee3\u5e01\u8f6c\u8d26\uff08$Pickle\uff09\u7684\u4e8b\u4ef6  \u667a\u80fd\u5408\u7ea6  (https://etherscan.io/token/0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5#readContract) \u3002 \n \u5728  Etherscan  (https://etherscan.io/tx/0x2bb7c8283b782355875fa37d05e4bd962519ea294678a3dcf2fdffbbd0761bc5#eventlog)  \u672a\u89e3\u7801\u7684\u6570\u636e\u662f\u8fd9\u6837\u7684: \n \n \u5982\u679c\u6211\u4eec\u5728  ethereum.logs  \u4e2d\u67e5\u8be2\u6b64\u4e8b\u4ef6\uff0c\u6211\u4eec\u5c06\u6536\u5230\u4e0e\u7ed3\u679c\u6570\u636e\u96c6\u76f8\u540c\u7684\u7f16\u7801\u5b57\u8282\u3002 \n PostgreSQL  (#__tabbed_5_1) Databricks SQL  (#__tabbed_5_2) \n \n \n  (#__codelineno-2-1) Select \n  (#__codelineno-2-2)    tx_hash \n  (#__codelineno-2-3)    , topic1 \n  (#__codelineno-2-4)    , topic2 \n  (#__codelineno-2-5)    , topic3 \n  (#__codelineno-2-6)    , data \n  (#__codelineno-2-7) \n  (#__codelineno-2-8)    from \n  (#__codelineno-2-9)    ethereum . logs \n  (#__codelineno-2-10) where \n  (#__codelineno-2-11) tx_hash   =   '\\x2bb7c8283b782355875fa37d05e4bd962519ea294678a3dcf2fdffbbd0761bc5' \n \n \n \n  (#__codelineno-3-1) Select \n  (#__codelineno-3-2)    tx_hash \n  (#__codelineno-3-3)    , topic1 \n  (#__codelineno-3-4)    , topic2 \n  (#__codelineno-3-5)    , topic3 \n  (#__codelineno-3-6)    , data \n  (#__codelineno-3-7) \n  (#__codelineno-3-8)    from \n  (#__codelineno-3-9)    ethereum . logs \n  (#__codelineno-3-10) where \n  (#__codelineno-3-11)    1 = 1 \n  (#__codelineno-3-12)    and   tx_hash   =   '0x2bb7c8283b782355875fa37d05e4bd962519ea294678a3dcf2fdffbbd0761bc5' \n  (#__codelineno-3-13)    and   block_numer   =   15145909 \n \n \n \n \n \u7ed3\u679c: \n \n \n \n tx_hash \n topic1 \n topic2 \n topic3 \n data \n \n \n \n \n 0x2bb7c8283b782355875fa37d05e4bd962519ea294678a3dcf2fdffbbd0761bc5 \n 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef \n 0x00000000000000000000000075e89d5979e4f6fba9f97c104c2f0afb3f1dcb88 \n 0x00000000000000000000000087d9da48db6e1f925cb67d3b7d2a292846c24cf7 \n 0x00000000000000000000000000000000000000000000001a894d51f85cb08000 \n \n \n \n \u8fd9\u5bf9\u6211\u4eec\u5206\u6790\u6570\u636e\u5e76\u6ca1\u6709\u4ec0\u4e48\u5e2e\u52a9 \n \u4f7f\u7528\u5408\u7ea6\u7684ABI\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u7f16\u7801\u7684\u5b57\u8282\u7801\u8f6c\u6362\u4e3a\u89e3\u7801\u7684\u6570\u636e\u3002 \n \u6211\u4eec\u5728\u8fd9\u91cc\u67e5\u770b\u7684\u4e8b\u4ef6\u65e5\u5fd7\u6765\u81ea$PICKLE ERC20\u4ee3\u5e01  transfer \u4e8b\u4ef6\u65e5\u5fd7\u3002 \n \u56e0\u4e3aDune\u5df2\u89e3\u7801\u8be5\u6570\u636e, \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u68c0\u7d22  pickle_finance.\"PickleToken_evt_Transfer\" \u6765\u83b7\u53d6\u89e3\u7801\u4fe1\u606f\u3002 \n PostgreSQL  (#__tabbed_6_1) Databricks SQL  (#__tabbed_6_2) \n \n \n  (#__codelineno-4-1) Select \n  (#__codelineno-4-2)    tx_hash , \n  (#__codelineno-4-3)    \"from\" , \n  (#__codelineno-4-4)    \"to\" , \n  (#__codelineno-4-5)    value \n  (#__codelineno-4-6) from \n  (#__codelineno-4-7)    pickle_finance . \"PickleToken_evt_Transfer\" \n  (#__codelineno-4-8) where \n  (#__codelineno-4-9)    tx_hash   =   '\\x2bb7c8283b782355875fa37d05e4bd962519ea294678a3dcf2fdffbbd0761bc5' \n \n \n \n  (#__codelineno-5-1) Select \n  (#__codelineno-5-2)    tx_hash , \n  (#__codelineno-5-3)    \"from\" , \n  (#__codelineno-5-4)    \"to\" , \n  (#__codelineno-5-5)    value \n  (#__codelineno-5-6) from \n  (#__codelineno-5-7)    pickle_finance_ethereum . PickleToken_evt_Transfer \n  (#__codelineno-5-8) where \n  (#__codelineno-5-9)    1 = 1 \n  (#__codelineno-5-10)    and   tx_hash   =   '0x2bb7c8283b782355875fa37d05e4bd962519ea294678a3dcf2fdffbbd0761bc5' \n  (#__codelineno-5-11)    and   block_numer   =   15145909 \n \n \n \n \n \u7ed3\u679c: \n \n \n \n evt_tx_hash \n \"from\" \n \"to\" \n value \n \n \n \n \n 0x2bb7c8283b782355875fa37d05e4bd962519ea294678a3dcf2fdffbbd0761bc5 \n 0x75e89d5979e4f6fba9f97c104c2f0afb3f1dcb88 \n 0x87d9da48db6e1f925cb67d3b7d2a292846c24cf7 \n 489509000000000000000 \n \n \n \n \u8fd9\u4e9b\u4fe1\u606f\u5bf9\u6211\u4eec\u8fdb\u884c\u5206\u6790\u5c31\u975e\u5e38\u6709\u7528\u4e86\uff01 \n \u5b83\u7a76\u7adf\u662f\u600e\u4e48\u505a\u5230\u7684\u5462? \n \u7531\u4e8e\u6211\u4eec\u77e5\u9053\u6211\u4eec\u5728\u8fd9\u91cc\u67e5\u770b\u7684\u662f\u54ea\u4e2a\u4e8b\u4ef6\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u5b57\u8282\u7801\u7684\u6570\u636e\u7c7b\u578b\u5bf9\u5176\u8fdb\u884c\u89e3\u7801\uff0c\u4ece\u800c\u5c06\u7f16\u7801\u7684\u5b57\u8282\u7801\u8f6c\u6362\u4e3a\u89e3\u7801\u7684\u6570\u636e\u3002 \n ERC20\u4ee3\u5e01\u7684 Transfer \u4e8b\u4ef6\u65e5\u5fd7\u7684\u7ed3\u6784\u662f\u8fd9\u6837\u7684: \n  (#__codelineno-6-1) Transfer ( address   from ,   address   to ,   uint256   value ) \n \n \u8fd9\u544a\u8bc9\u6211\u4eec\uff0ctopic2\u548ctopic3\u7684\u7c7b\u578b\u4e3a address \uff0832\u5b57\u8282\uff09\uff0c\u5206\u522b\u662f\u4ee3\u5e01\u7684\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u3002\u4e00\u4e2a\u4e8b\u4ef6\u65e5\u5fd7\u53ea\u67093\u4e2a\u7d22\u5f15\u5b57\u6bb5\uff0c\u56e0\u6b64 data \u5b57\u6bb5\u7528\u4e8e\u5b58\u50a8\u6709\u5173\u5728\u8be5\u4e8b\u4ef6\u4e2d\u8f6c\u79fb\u4e86\u591a\u5c11\u4ee3\u5e01\u5355\u4f4d\u7684\u4fe1\u606f\u3002\u6b64\u5b57\u6bb5\u79f0\u4e3a value \u3002 \n \u7531\u4e8e topic1 \u59cb\u7ec8\u53ea\u662f\u4e8b\u4ef6\u7b7e\u540d\u7684Keccak-256\u54c8\u5e0c\uff0c\u6211\u4eec\u53ea\u80fd\u89e3\u7801  topic2 ,  topic3  \u548c  data \u3002 \n \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u662f\u8fd9\u6837\u6620\u5c04\u7684\uff1a \n \n \n \n \u539f\u59cb\u6570\u636e\u57df \n \u89e3\u7801\u6570\u636e\u63cf\u8ff0 \n \u539f\u59cb\u6570\u636e \n \u89e3\u7801\u6570\u636e \n \n \n \n \n topic1 \n keccak256(\"Transfer(address,address,uint256)\") \n 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef \n not needed, this table only contains event logs from the  transfer  event log \n \n \n topic2 \n from \n 0x00000000000000000000000075e89d5979e4f6fba9f97c104c2f0afb3f1dcb88 \n 0x75e89d5979e4f6fba9f97c104c2f0afb3f1dcb88 \n \n \n topic3 \n to \n 0x00000000000000000000000087d9da48db6e1f925cb67d3b7d2a292846c24cf7 \n 0x87d9da48db6e1f925cb67d3b7d2a292846c24cf7 \n \n \n data \n value \n 0x00000000000000000000000000000000000000000000001a894d51f85cb08000 \n 489509000000000000000 \n \n \n \n \u603b\u7ed3: \n \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5408\u7ea6ABI\u5c06\u7f16\u7801\u6570\u636e\u8f6c\u5316\u4e3a\u89e3\u7801\u6570\u636e\u3002\u8fd9\u6709\u52a9\u4e8e\u60a8\u5feb\u901f\u9ad8\u6548\u5730\u8fd0\u884c\u5206\u6790\uff0c\u56e0\u4e3a\u89e3\u7801\u6570\u636e\u66f4\u6613\u4e8e\u5904\u7406\u3002 \n ", "url": "https://dune.com/docs/zh/reference/tables/decoded/#_2"}
{"content": "\u6211\u8be5\u5982\u4f55\u7406\u89e3\u89e3\u7801\u6570\u636e\uff1f \u00b6 \n \u89e3\u7801\u6570\u636e\u662f\u4e24\u4e2a\u8f6f\u4ef6\u901a\u8fc7\u533a\u5757\u94fe\u76f8\u4e92\u5bf9\u8bdd\u7684\u9ad8\u7ea7\u7f16\u7a0b\u8bed\u8a00\u8868\u793a\u3002\u5c3d\u7ba1\u4e0d\u662f\u5f88\u5bb9\u6613\u7406\u89e3\u8fd9\u4e9b\u4ea4\u4e92\u4e2d\u5230\u5e95\u53d1\u751f\u4e86\u4ec0\u4e48\uff0c\u4f46\u5927\u591a\u6570\u65f6\u5019\uff0c\u67e5\u770b\u5217\u540d\u548c\u5728\u5176\u4e2d\u4f20\u8f93\u7684\u6570\u636e\u5e94\u8be5\u6709\u52a9\u4e8e\u60a8\u4e86\u89e3\u7279\u5b9a\u65e5\u5fd7\u6216\u8c03\u7528\u4e2d\u53d1\u751f\u4e86\u4ec0\u4e48\u3002\n\u5982\u679c\u60a8\u4e0d\u80fd\u901a\u8fc7\u641c\u7d22\u6570\u636e\u8868\u6765\u4e86\u89e3\u6570\u636e\uff0c\u90a3\u4e48\u4f7f\u7528\u4e8b\u4ef6\u54c8\u5e0c\u548c\u4ee5\u592a\u574a\u6d4f\u89c8\u5668\u6765\u67e5\u770b\u5355\u4e2a\u4e8b\u4ef6\u901a\u5e38\u4f1a\u6709\u6240\u5e2e\u52a9\u3002\u6b64\u5916\uff0c\u67e5\u9605\u667a\u80fd\u5408\u7ea6\u4ee3\u7801\uff08\u6211\u6700\u559c\u6b22\u7684\u65b9\u6cd5\u662f  DethCode  (https://etherscan.deth.net) \uff09\u9605\u8bfb\u6ce8\u91ca\u6216\u903b\u8f91\u53ef\u4ee5\u5e2e\u52a9\u60a8\u7406\u89e3\u667a\u80fd\u5408\u7ea6\u53d1\u51fa\u7684\u6570\u636e\u3002I\n\u5982\u679c\u8fd9\u6837\u4e5f\u4e0d\u80fd\u8ba9\u60a8\u7406\u89e3\u6570\u636e\u7684\u8bdd\uff0c\u4ed4\u7ec6\u67e5\u770b\u9879\u76ee\u7684\u76f8\u5173\u6587\u6863\u548cGitHub\u6216\u8bb8\u53ef\u4ee5\u5e2e\u52a9\u60a8\u3002\u6b64\u5916\uff0c\u4e0e\u9879\u76ee\u7684\u5f00\u53d1\u4eba\u5458\u548c\u6838\u5fc3\u793e\u533a\u4e5f\u53ef\u4ee5\u5e2e\u52a9\u60a8\u4e86\u89e3\u8be5\u5408\u7ea6\u3002 \n\u5728Dune\u4e0a\u60a8\u53ef\u4ee5\u627e\u5230\u5173\u4e8e\u5982\u4f55\u5904\u7406\u89e3\u7801\u6570\u636e\u7684\u4e00\u4e9b\u5f88\u597d\u7684\u5c55\u793a\uff0c\u5c24\u5176\u662f\u6211\u4eec\u7684 \u9b54\u6cd5\u4e66\u8d44\u6e90\u5e93  (https://github.com/duneanalytics/spellbook/index.md) \u91cc\u6709\u5f88\u591a\u5f88\u68d2\u7684\u4f8b\u5b50\u3002\nS \n \u603b\u7ed3 : \n \u4f7f\u7528\u89e3\u7801\u6570\u636e\u53ef\u4ee5\u8ba9\u60a8\u6df1\u5165\u8bbf\u95ee\u5b58\u50a8\u5728\u533a\u5757\u94fe\u4e0a\u7684\u4e30\u5bcc\u4fe1\u606f\uff0c\u4f46\u4e86\u89e3\u6570\u636e\u6709\u65f6\u9700\u8981\u60a8\u4ed8\u51fa\u4e00\u4e9b\u52aa\u529b\uff0c\u56e0\u4e3a\u60a8\u662f\u4ee5\u76f4\u63a5\u65b9\u5f0f\u4e0e\u5408\u7ea6\u6570\u636e\u4ea4\u4e92\u7684\u3002 \n ", "url": "https://dune.com/docs/zh/reference/tables/decoded/#_3"}
{"content": "\u6211\u8be5\u7528\u54ea\u4e2a\u8868\u6570\u636e? \u00b6 \n \u4e8b\u4ef6 \u7528\u4e8e\u88ab\u5206\u6790\u5e76\u5b58\u50a8\u5728\u533a\u5757\u94fe\u4e0a\uff0c\u4ee5\u5141\u8bb8\u5bf9\u6b63\u5728\u53d1\u751f\u7684\u4e8b\u60c5\u8fdb\u884c\u56de\u6eaf\u5206\u6790\uff0c \u4ea4\u6613 \u548c \u547d\u4ee4\u8c03\u7528 \u7528\u4e8e\u5728\u667a\u80fd\u5408\u7ea6\u4e4b\u95f4\u4f20\u9012\u4fe1\u606f\u3002\u56e0\u6b64\uff0c\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5206\u6790\u533a\u5757\u94fe\u4e0a\u53d1\u751f\u7684\u5404\u79cd\u884c\u4e3a\u7684\u6700\u7b80\u5355\u3001\u6700\u5bb9\u6613\u7684\u65b9\u6cd5\u662f\u67e5\u770b\u4e8b\u4ef6\u3002\u7136\u800c\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4e8b\u4ef6\u53d1\u51fa\u65f6\u9519\u8fc7\u4e86\u4e00\u4e9b\u5173\u952e\u4fe1\u606f\uff0c\u6216\u8005\u6ca1\u6709\u53d1\u51fa\u4efb\u4f55\u4e8b\u4ef6\u3002\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u5c06\u4e0d\u5f97\u4e0d\u8fd4\u56de\u5230\u4e8b\u4ef6\u548c\u547d\u4ee4\u8c03\u7528\uff08\u5728\u8c03\u7528\u8868\u4e2d\u627e\u5230\uff09\u3002\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u4e8b\u4ef6\u672a\u53d1\u51fa\u7684\u60c5\u51b5\u8d8a\u6765\u8d8a\u5c11\u89c1\uff0c\u56e0\u4e3a\u5f00\u53d1\u4eba\u5458\u73b0\u5728\u5927\u591a\u90fd\u4e86\u89e3\u8fd9\u4ef6\u4e8b\u7684\u91cd\u8981\u6027\uff0c\u4f46\u8fd9\u79cd\u60c5\u51b5\u8fd8\u672a\u5b8c\u5168\u675c\u7edd\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5c06\u89e3\u7801\u540e\u7684\u6570\u636e\u4e0e[\u539f\u59cb\u6570\u636e]\uff08raw.md\uff09\u7ed3\u5408\u8d77\u6765\uff0c\u4ee5\u83b7\u53d6\u5173\u4e8e\u4e8b\u4ef6\u7684\u5143\u6570\u636e\u6216\u6df1\u5165\u7814\u7a76\uff0c\u53ef\u80fd\u662f\u6709\u6548\u7684\u529e\u6cd5\u3002 \n ", "url": "https://dune.com/docs/zh/reference/tables/decoded/#_4"}
{"content": "\u63a2\u7d22\u89e3\u7801\u5408\u7ea6\u7684\u68c0\u7d22 \u00b6 \n \u63a2\u7d22\u6211\u4eec\u5df2\u89e3\u7801\u7684\u9879\u76ee \n PostgreSQL  (#__tabbed_7_1) Databricks SQL  (#__tabbed_7_2) \n \n \n  (#__codelineno-7-1) SELECT   DISTINCT   namespace   FROM   ethereum . \"contracts\" ; \n \n \n \n  (#__codelineno-8-1) SELECT   DISTINCT   namespace   FROM   blockchain . contracts ; \n  (#__codelineno-8-2) --change blockchain.contracts to e.g. ethereum.contracts \n \n \n \n \n \u5982\u679c\u60a8\u76f4\u63a5\u5904\u7406\u4e8b\u4ef6\u6216\u8c03\u7528\u8868\uff0c\u60a8\u53ef\u4ee5\u67e5\u770b\u8be5\u67e5\u8be2\u4e2d\u662f\u5426\u5b58\u5728\u8be5\u5408\u7ea6\u7684\u591a\u4e2a\u5b9e\u4f8b\u3002  \n PostgreSQL  (#__tabbed_8_1) Databricks SQL  (#__tabbed_8_2) \n \n \n  (#__codelineno-9-1) SELECT   DISTINCT   contract_address   FROM   projectname . \"contractName_evt_eventName\" ; \n \n \n \n  (#__codelineno-10-1) SELECT   DISTINCT   contract_address   \n  (#__codelineno-10-2) FROM   projectname_blockchain . contractName_evt_eventName ; \n  (#__codelineno-10-3) --change blockchain.contracts to e.g. ethereum.contracts", "url": "https://dune.com/docs/zh/reference/tables/decoded/#_5"}
{"content": "EVM\u94fe\u7684\u5dee\u5f02 \u00b6 \n EVM\u94fe\u5927\u4f53\u4e0a\u9075\u5faa\u76f8\u540c\u7684\u6267\u884c\u6a21\u578b\uff0c\u4f46\u6709\u65f6\u5171\u8bc6\u7b97\u6cd5\u3001gas\u6210\u672c\u751a\u81f3gas\u6210\u672c\u7684\u8ba1\u7b97\u5b58\u5728\u5dee\u5f02\u3002 \n \u60a8\u53ef\u4ee5\u5728\u6587\u6863\u4e2d\u627e\u5230\u6709\u5173\u5404\u4e2a\u94fe\u7684\u4fe1\u606f\uff1a \n \n \n V1\u5f15\u64ce  (../v1/raw/)  (PostgreSQL) \n V2\u5f15\u64ce  (../v2/raw/)  (Databricks SQL)", "url": "https://dune.com/docs/zh/reference/tables/raw/#evm"}
{"content": "How Tables are Generated from Raw Ethereum Data \u00b6 \n \n Note \n Table generation is similar to this for all EVM based blockchains. The labels below follow Dune V1 naming conventions and are slightly different in Dune V2 Tables. Learn about the  differences in V2's data structure here  (../dune-v2/) . And learn  how to search V2 data here  (../../getting-started/queries/data-explorer/#v2) . \n \n There are three main tables in Dune generated from raw Ethereum data, which are the source truth for everything else on the platform. \n \n The rest of Dune's tables are built from these three: \n \n If you can't figure out the table to query from, you'll need to dig through an example transaction hash on  the relevant chain's blockchain explorer  (../wizard-tools/blockchain-explorers/)  to figure out the call/evt Contract. \n Essentially go  tx_hash  \u2192  contract  in \"to\" \u2192  code  and pull the contract name from there. If it's a proxy, the blockchain explorer should link you to an implementation address.  \n Dune V2 data also has a handy Lineage Graph that lets you explore how all of Dune's data tables are related to each other -  learn more about that in the Lineage Graph section here  (../spellbook/spellbook-model-docs/) . \n \n You should always try to use the  Decoded  (decoded/)  or  Spell  (spells/)  tables when you can as these are human-readable and pre-organized so they're much easier to use.", "url": "https://dune.com/docs/zh/reference/tables/#how-tables-are-generated-from-raw-ethereum-data"}
{"content": "\u9762\u5411\u884c\u7684\u6570\u636e\u5e93 \u00b6 \n \u6570\u636e\u5e93\u5c06\u6570\u636e\u5b58\u50a8\u5728\u9875\u9762\u4e2d\uff0c\u4f20\u7edf\u4e0a\uff0c\u8fd9\u4e9b\u9875\u9762\u5305\u542b\u4fe1\u606f\u7684\u884c\u3002 \n \u591a\u4e2a\u9875\u9762\u7ec4\u6210\u4e00\u4e2a\u6570\u636e\u6587\u4ef6\uff0c\u4e00\u4e2a\u8868\u5c06\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u6570\u636e\u6587\u4ef6\u7ec4\u6210\u3002 \n \n \u5f53\u4ece\u5b58\u50a8\u5668\u4e2d\u68c0\u7d22\u6570\u636e\u4ee5\u5bf9\u6570\u636e\u8fdb\u884c\u64cd\u4f5c\u65f6\uff0c\u6570\u636e\u5e93\u5c06\u6309\u9875\u5c06\u6570\u636e\u8bfb\u5165\u5185\u5b58\u3002\u9875\u9762\u5927\u5c0f\u548c\u52a0\u8f7d\u7684\u9875\u9762\u6570\u91cf\u662f\u67e5\u8be2\u901f\u5ea6\u7684\u5173\u952e\u74f6\u9888\uff0c\u56e0\u4e3a\u52a0\u8f7d\u7684\u9875\u9762\u6570\u91cf\u548c\u5927\u5c0f\u610f\u5473\u7740\u66f4\u957f\u7684\u8bfb\u53d6\u65f6\u95f4\u548c\u7b49\u5f85\u67e5\u8be2\u7ed3\u679c\u7684\u65f6\u95f4\u3002 \n \u7531\u4e8e\u4f20\u7edf\u7684\u6570\u636e\u5e93\u6309\u884c\u5b58\u50a8\u9875\u9762\uff0c\u5b83\u4eec\u6700\u9002\u5408\u4e8e\u68c0\u7d22\u4e00\u884c\u7684\u6240\u6709\u5217\u6216\u591a\u4e2a\u8fde\u7eed\u884c\u7684\u6570\u636e\u3002 \n \u65e0\u8bba\u6211\u4eec\u662f\u60f3\u68c0\u7d22\u7b2c10\u884c\u7684\u6240\u6709\u5217\u8fd8\u662f\u7b2c11-25\u884c\u7684\u7b2c3\u5217\uff0c\u6211\u4eec\u7684\u67e5\u8be2\u90fd\u4f1a\u5f88\u5feb\uff0c\u56e0\u4e3a\u53ea\u9700\u8981\u5c06\u4e00\u4e2a\u9875\u9762\u8bfb\u5165\u5185\u5b58\u3002 \n \u76f8\u6bd4\u4e4b\u4e0b\uff0c\u67e5\u8be2\u5b58\u50a8\u5728\u8bb8\u591a\u4e0d\u540c\u903b\u8f91\u884c\u4e2d\u7684\u6570\u636e\uff0c\u4e5f\u5c31\u662f\u4e0d\u540c\u7684\u7269\u7406\u9875\uff0c\u662f\u4e00\u4e2a\u6602\u8d35\u7684\u64cd\u4f5c\uff0c\u56e0\u4e3a\u6240\u6709\u7684\u9875\u9762\u90fd\u5fc5\u987b\u4ece\u78c1\u76d8\u4e2d\u8bfb\u53d6\u3002 \n \u4eca\u5929\uff0c\u6211\u4eec\u5728Dune\u4e0a\u8fd0\u884c\u7684\u5927\u591a\u6570\u67e5\u8be2\u90fd\u662f\u5bf9\u6570\u5343\u751a\u81f3\u6570\u767e\u4e07\u884c\u7684\u67d0\u4e00\u5217\u7684\u6570\u636e\u70b9\u8fdb\u884c\u805a\u5408\u3002 \n \u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u7684\u6bcf\u4e00\u884c\u90fd\u662f\u57fa\u4e8e\u6211\u4eec\u6240\u67e5\u8be2\u7684\u533a\u5757\u94fe\u7684\u4e00\u4e2a\u4ea4\u6613\u6216\u8ddf\u8e2a\u3002 \n \u6240\u4ee5\u4f8b\u5982\u6211\u4eec\u60f3\u770b\u5230\u4e0a\u4e2a\u6708ETH\u548cUSDC\u4e4b\u95f4\u7684\u6240\u6709\u4e92\u6362\uff0c\u4ea4\u6613\u5c06\u5206\u5e03\u5728\u6210\u5343\u4e0a\u4e07\u7684\u4ea4\u6613\u4e2d\uff0c\u56e0\u6b64\u6709\u6210\u5343\u4e0a\u4e07\u7684\u884c - \u4f46\u6570\u636e\u5c06\u5168\u90e8\u5728\u8fd9\u4e9b\u884c\u7684\u4e00\u4e2a\u5217\u4e2d\u3002 \n \u56e0\u6b64\uff0c\u5728\u9762\u5411\u884c\u7684\u6570\u636e\u5e93\u4e2d\uff0c\u6211\u4eec\u6700\u7ec8\u4f1a\u7528\u4e0d\u9700\u8981\u7684\u6570\u636e\u52a0\u8f7d\u8bb8\u591a\u9875\u9762\uff0c\u56e0\u4e3a\u6211\u4eec\u5728\u6570\u5343\u6216\u6570\u767e\u4e07\u884c\u4e2d\u67e5\u8be2\u4e00\u4e2a\u5217\u3002 \n \u5728PostgreSQL\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u7d22\u5f15\u6765\u5bfb\u627e\u7279\u5b9a\u7684\u6570\u636e\u5b50\u96c6\uff0c\u800c\u4e0d\u662f\u8bfb\u53d6\u5145\u6ee1\u4e0d\u76f8\u5e72\u6570\u636e\u7684\u6574\u4e2a\u9875\u9762/\u8868\u3002 \n \u8fd9\u4f7f\u5f97\u67e5\u8be2\u975e\u5e38\u5feb\u901f\u548c\u9ad8\u6548\uff0c\u4f46\u4ec5\u9650\u4e8e\u6709\u7d22\u5f15\u7684\u5217\u3002 \n \u7531\u4e8e\u4e3a\u4e00\u4e2a\u8868\u521b\u5efa\u7684\u6bcf\u4e00\u4e2a\u65b0\u7684\u7d22\u5f15\u90fd\u662f\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u5e93\u6587\u4ef6\uff0c\u6240\u4ee5\u5728\u89c4\u6a21\u4e0a\u66f4\u96be\u66f4\u65b0\u548c\u7ef4\u62a4\u8be5\u8868\u3002 \n \u56e0\u6b64\uff0cDune V2\u8fd0\u884c\u4e8e\u9762\u5411\u5217\u7684\u8868\uff0c\u800c\u4e0d\u662f\u9762\u5411\u884c\u7684\u8868\u3002 \n ", "url": "https://dune.com/docs/zh/reference/dune-v2/database/#_1"}
{"content": "\u9762\u5411\u5217\u7684\u6570\u636e\u5e93 \u00b6 \n \n \u5728Dune V2\u4e2d, \u6211\u4eec\u7528  parquet \u6587\u4ef6\u683c\u5f0f  (https://github.com/apache/parquet-format) \u5728AWS S3\u4e0a\u5b58\u50a8\u6211\u4eec\u7684\u6570\u636e\u3002 \n Parquet\u6709\u65f6\u88ab\u63cf\u8ff0\u4e3a\u9762\u5411\u884c\u7684\u6570\u636e\u5e93\u548c\u9762\u5411\u5217\u7684\u6570\u636e\u5e93\u4e4b\u95f4\u7684\u4e00\u79cd\u6df7\u5408\u65b9\u6cd5\uff0c\u56e0\u4e3a\u4e00\u4e2a\u8868\u4ecd\u7136\u7531\u591a\u4e2aparquet\u6587\u4ef6\u7ec4\u6210\uff0c\u800c\u8fd9\u4e9b\u6587\u4ef6\u672c\u8eab\u662f\u6309\u884c\u5212\u5206\u7684\u3002 \n \u4e0d\u8fc7\uff0c\u5728parquet\u6587\u4ef6\u5185\u90e8\uff0c\u9875\u9762\u672c\u8eab\u5305\u542b\u5217\u800c\u4e0d\u662f\u884c\u3002 \n \u9875\u9762\u88ab\u5b58\u50a8\u5728\u884c\u7ec4\u4e2d\uff0c\u800c\u884c\u7ec4\u5728parquet\u6587\u4ef6\u4e2d\u662f\u6309\u884c\u6765\u5212\u5206\u6570\u636e\u7684\u3002 \n \u56e0\u6b64\uff0c\u6570\u636e\u5e93\u4ecd\u7136\u5927\u81f4\u4ee5\u9762\u5411\u884c\u7684\u683c\u5f0f\u5b58\u50a8\uff0c\u4f46\u5404\u4e2a\u6570\u503c\u662f\u4ee5\u5217\u7684\u65b9\u5f0f\u5b58\u50a8\u5728\u9875\u9762\u5185\u3002 \n \n \u5c3d\u7ba1\u6574\u4e2a\u6570\u636e\u5e93\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u662f\u9762\u5411\u884c\u7684\uff0c\u4f46\u5f53\u6211\u4eec\u771f\u6b63\u60f3\u8981\u8bfb\u53d6\u6570\u636e\u65f6\uff0c\u6211\u4eec\u662f\u4ece\u9762\u5411\u5217\u7684\u9875\u9762\u8bfb\u53d6\u7684\uff0c\u56e0\u6b64\u662f\u6309\u5217\u5c06\u9875\u9762\u8bfb\u5165\u5185\u5b58\u3002 \n \u76f8\u53cd\uff0c\u5982\u679c\u6211\u4eec\u8bd5\u56fe\u67e5\u8be2\u7279\u5b9a\u903b\u8f91\u884c\u7684\u6240\u6709\u5217\uff0c\u6211\u4eec\u5fc5\u987b\u8bbf\u95ee\u5f88\u591a\u4e0d\u540c\u7684\u9875\u9762\uff0c\u56e0\u4e3a\u4e00\u4e2a\u903b\u8f91\u884c\u7684\u6570\u636e\u4e0d\u518d\u5b58\u50a8\u5728\u4e00\u4e2a\u9875\u9762\u4e2d\uff0c\u800c\u662f\u5206\u5e03\u5728\u5f88\u591a\u4e0d\u540c\u7684\u9875\u9762\u4e2d\u3002 \n \u4e3a\u4e86\u66f4\u597d\u5730\u7406\u89e3\u884c\u4e0e\u5217\u7684\u533a\u522b\uff0c\u8bf7\u770b\u8fd9\u4e2a\u89c6\u9891\u3002 \n \n ", "url": "https://dune.com/docs/zh/reference/dune-v2/database/#_2"}
{"content": "\u7d22\u5f15\uff0c\u8fd8\u662f\u4e0d\u7d22\u5f15\uff1f \u00b6 \n \u6211\u4eec\u6709\u65f6\u80fd\u591f\u6a21\u4effV1\u7684PostgreSQL\u4e2d\u57fa\u4e8e\u5217\u7684\u6570\u636e\u7684\u6548\u7387\uff0c\u4ee5\u7d22\u5f15\u7684\u5f62\u5f0f\u521b\u5efa\u5927\u91cf\u7684\u7ed3\u6784\u5316\u5b50\u96c6\u6570\u636e\uff0c\u4f46\u76ee\u524d\u8fd9\u8fd8\u4e0d\u80fd\u6269\u5c55\u3002 \n \u6bcf\u4e2aparquet\u6587\u4ef6\u90fd\u6709\u4e00\u4e2a\u9875\u811a\uff0c\u5305\u542b\u5b58\u50a8\u5728\u5176\u4e2d\u7684\u6bcf\u4e00\u5217\u7684  \u6700\u5c0f/\u6700\u5927  \u503c\u3002 \n \u8fd9\u79cd\u6a21\u5f0f\u5728\u5217\u5757\u5c42\u9762\u4e0a\u91cd\u590d\uff0c\u5b83\u4e3aparquet\u6587\u4ef6\u4e2d\u7279\u5b9a\u884c\u7ec4\u5185\u7684\u5217\u5b58\u50a8\u8fd9\u79cd\u5143\u6570\u636e\u3002 \n \n \u5728\u6587\u4ef6\u5c42\u9762\u548c\u5217\u5757\u5c42\u9762\u4f7f\u7528\u8fd9\u4e9b  \u6700\u5c0f/\u6700\u5927  \u503c\uff0c\u5141\u8bb8\u6570\u636e\u5e93\u5728\u626b\u63cf\u8868\u65f6\u6709\u6548\u5730\u8df3\u8fc7\u6574\u4e2aparquet\u6587\u4ef6\u6216parquet\u6587\u4ef6\u4e2d\u7684\u5217\u5757\u3002\u4e3a\u4e86\u4f7f\u6700\u5c0f/\u6700\u5927\u503c\u53d1\u6325\u4f5c\u7528\uff0c\u5e76\u4f7f\u5217\u5757\u8df3\u8fc7\u53d1\u6325\u4f5c\u7528\uff0c\u5217\u5fc5\u987b\u4e0e\u6587\u4ef6\u7684\u6392\u5e8f\u76f8\u5173\u8054\u3002 \n \u4e0d\u5e78\u7684\u662f\uff0c\u5b57\u7b26\u4e32\u7684  \u6700\u5c0f/\u6700\u5927  \u503c\u5f80\u5f80\u4e0d\u662f\u5f88\u6709\u7528\u3002 \n \u4f8b\u5982\uff0c\u533a\u5757\u94fe\u7cfb\u7edf\u4e2d\u7684  tx_hash  \u5b57\u7b26\u4e32\u548c  address  \u5b57\u7b26\u4e32\u4e0d\u9002\u5408\u8fd9\u79cd  min/max  \u6570\u636e\u6536\u96c6\uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u968f\u673a\u751f\u6210\u7684\u3002 \n \u56e0\u6b64\uff0c\u5982\u679c\u6211\u4eec\u6309  block_time  \u5bf9\u8868\u8fdb\u884c\u6392\u5e8f\uff08\u51e0\u4e4e\u5728\u6240\u6709\u60c5\u51b5\u4e0b\u90fd\u662f\u8fd9\u6837\u505a\u7684\uff09\uff0c\u6211\u4eec\u5c31\u4e0d\u80fd\u6709\u6548\u5730\u6309  tx_hash  \u6216  address  \u5b57\u7b26\u4e32\u8fdb\u884c  min/max  \uff0c\u56e0\u4e3a\u8fd9\u4e9b\u6570\u636e\u4e0d\u4f1a\u6309\u987a\u5e8f\u6392\u5217\u3002 \n \u8fd9\u610f\u5473\u7740\u6570\u636e\u5e93\u65e0\u6cd5\u6839\u636e\u8fd9\u4e9b\u5b57\u7b26\u4e32\u8df3\u8fc7\u6587\u4ef6\u6216\u5217\u5757\uff0c\u56e0\u6b64\u5f15\u7528\u8fd9\u4e9b\u5b57\u7b26\u4e32\u7684\u67e5\u8be2\u5c06\u662f\u76f8\u5f53\u4f4e\u6548\u7684\uff0c\u56e0\u4e3a\u6240\u6709\u76f8\u5173\u7684\u9875\u9762\u90fd\u9700\u8981\u88ab\u8bfb\u5165\u5185\u5b58\u3002 \n \u4e5f\u5c31\u662f\u8bf4\uff0c\u7531\u4e8e\u67e5\u8be2\u5f15\u64ce\u4ecd\u7136\u80fd\u591f\u975e\u5e38\u6709\u6548\u5730\u8bfb\u53d6\u5b58\u50a8\u8fd9\u4e9b\u5b57\u7b26\u4e32\u7684\u5404\u4e2a\u5217\uff0c\u56e0\u6b64\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e0d\u4f1a\u5bf9\u67e5\u8be2\u7684\u6267\u884c\u901f\u5ea6\u4ea7\u751f\u5f88\u5927\u5f71\u54cd \n \u6027\u80fd\u6210\u672c\u4e3b\u8981\u4e0e\u57fa\u7840\u8868\u6709\u5173\uff0c\u5982 ethereum.transactions \uff0c bnb.logs \uff0c erc20_ethereum.erc20_evt_transfer \uff0c\u7b49\u7b49\uff0c\u8fd9\u4e9b\u8868\u5305\u542b\u975e\u5e38\u5927\u7684\u6570\u636e\u96c6\uff0c\u6ca1\u6709\u9884\u5148\u8fc7\u6ee4\u3002 \n \u4e00\u4e2a\u660e\u663e\u7684\u4f8b\u5916\u662fSolana\u6570\u636e\u96c6 account_activity \uff0c  \u5b83\u662f\u6309 account_keys \u800c\u4e0d\u662f\u50cf\u57fa\u4e8eEVM\u7684\u6570\u636e\u96c6\u90a3\u6837\u6309 block_time \u6392\u5e8f\u3002 \n \u8fd9\u4f7f\u5f97\u6211\u4eec\u5728\u5efa\u7acb\u57fa\u4e8e  raw Solana data  (../tables/raw/solana/index.md) \u7684\u67e5\u8be2\u65f6\uff0c\u53ef\u4ee5\u5229\u7528 account_keys \u7684 min/max \u503c\u3002 \n ", "url": "https://dune.com/docs/zh/reference/dune-v2/database/#_3"}
{"content": "Dune V2 \u67e5\u8be2\u793a\u4f8b \u00b6 \n \u638c\u63e1\u4e86\u4e0a\u8ff0\u77e5\u8bc6\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u770bDune V2\u7684\u4e00\u4e9b\u67e5\u8be2\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002 \n \n Note \n \u8fd9\u4e9b\u4f8b\u5b50\u662f\u7528Spark SQL\u5199\u7684\u3002 \n \n ", "url": "https://dune.com/docs/zh/reference/dune-v2/database/#dune-v2"}
{"content": "\u67e5\u8be2\u4ea4\u6613\u54c8\u5e0c \u00b6 \n  (#__codelineno-0-1) Select   *   from   ethereum . transactions \n  (#__codelineno-0-2) \n  (#__codelineno-0-3) where   hash   =   '0xce1f1a2dd0c10fcf9385d14bc92c686c210e4accf00a3fe7ec2b5db7a5499cff' \n \n \u57fa\u4e8e\u6211\u4eec\u7684parquet\u6587\u4ef6\u7cfb\u7edf\u7684\u5de5\u4f5c\u65b9\u5f0f\uff0c\u8fd9\u4e2a\u67e5\u8be2\u662f\u975e\u5e38\u4f4e\u6548\u7684\u3002 \n \u6211\u4eec\u8fd9\u91cc\u552f\u4e00\u7684\u8fc7\u6ee4\u6761\u4ef6\u662f\u4e00\u4e2a hash \u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u6c42\u67e5\u8be2\u5f15\u64ce\u8bfb\u53d6\u6240\u6709\u5b58\u50a8 tx_hash \u5217\u6570\u636e\u7684\u9875\u9762\u3002 \n \u5f15\u64ce\u53ef\u4ee5\u8df3\u8fc7\u4e00\u4e9b\u5217\u5757\uff0c\u5176\u4e2d\u5b58\u50a8\u5728parquet\u6587\u4ef6\u9875\u811a\u7684  \u6700\u5c0f/\u6700\u5927 \u503c\u662f  0xa0 - 0xcd \uff0c\u4f46\u8fd9\u4e9b\u5c06\u662f\u7f55\u89c1\u7684\u4f8b\u5916\u3002 \n \u9274\u4e8e\u6211\u4eec\u6b63\u5728\u5bf9Ethereum Mainnet\u7684\u6574\u4e2a\u5386\u53f2\uff08\u6570\u5341\u4ebf\u884c\uff09\u8fdb\u884c\u5168\u9762\u626b\u63cf\uff0c\u4ee5\u641c\u7d22\u4e00\u4e2a hash \uff0c\u8fd9\u4e2a\u67e5\u8be2\u53ea\u9700\u8981\u5927\u7ea66\u5206\u949f\u5c31\u53ef\u4ee5\u8fd0\u884c\uff0c\u8fd9\u662f\u76f8\u5f53\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u7684\u3002 \n \u7531\u4e8e\u67e5\u8be2 hash \u662fWizard\u5de5\u4f5c\u6d41\u7a0b\u4e2d\u975e\u5e38\u5e38\u89c1\u7684\u4e00\u90e8\u5206\uff0c\u8ba9\u6211\u4eec\u60f3\u60f3\u5982\u4f55\u80fd\u8ba9\u5b83\u66f4\u5feb\u3002 \n \u8981\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6839\u636e\u4e00\u4e2a\u6709\u987a\u5e8f\u7684 \u6700\u5c0f/\u6700\u5927 \u503c\u7684\u5217\u8fdb\u884c\u641c\u7d22\uff0c\u8fd9\u6837\u6211\u4eec\u7684\u67e5\u8be2\u5f15\u64ce\u5c31\u53ef\u4ee5\u8df3\u8fc7\u5927\u591a\u6570\u9875\u9762/\u5217\u5757\u3002 \n \u8fd9\u5bf9 block_time \u548c block_number \u90fd\u5f88\u6709\u7528\u3002 \n  (#__codelineno-1-1) Select   *   from   ethereum . transactions \n  (#__codelineno-1-2) \n  (#__codelineno-1-3) where   block_number   =   14854616 \n  (#__codelineno-1-4) \n  (#__codelineno-1-5) and   hash   =   '0xce1f1a2dd0c10fcf9385d14bc92c686c210e4accf00a3fe7ec2b5db7a5499cff' \n \n \u8fd9\u4e2a\u67e5\u8be2\u4ecd\u7136\u6ca1\u6709PostgreSQL\u7684\u901f\u5ea6\u5feb\uff0c\u5728PostgreSQL\u4e2d\u6211\u4eec\u53ef\u4ee5\u5229\u7528 B-tree indexes  (https://en.wikipedia.org/wiki/B-tree) \uff0c\u4f46\u8fd0\u884c\u65f6\u95f4\u4e3a13\u79d2\uff0c\u6211\u4eec\u5df2\u7ecf\u5f88\u63a5\u8fd1\u3002  \n \u540c\u6837\uff0c\u901a\u8fc7\u4f7f\u7528\u6211\u4eec\u7684 where \u5b50\u53e5\u6765\u8fc7\u6ee4\u5757\u6570\uff0c\u6211\u4eec\u5229\u7528V2\u5f15\u64ce\u7684\u80fd\u529b\u6765\u8bfb\u53d6parquet\u6587\u4ef6\u9875\u811a\u7684 \u6700\u5c0f/\u6700\u5927 \u503c\uff0c\u5e76\u8df3\u8fc7\u90a3\u4e9b\u8d85\u51fa\u8303\u56f4\u7684\u503c\u3002 \n \u4e00\u65e6\u627e\u5230\u7b26\u5408\u6211\u4eec\u6761\u4ef6\u7684parquet\u6587\u4ef6\uff0c\u5f15\u64ce\u5c31\u4f1a\u7b80\u5355\u5730\u4ece\u5217\u5757\u4e2d\u52a0\u8f7d\u76f8\u5bf9\u8f83\u5c11\u7684\u9875\u9762\uff0c\u8fd9\u4e9b\u9875\u9762\u7684 \u6700\u5c0f\u503c \u6bd4\u6211\u4eec\u6307\u5b9a\u7684 \u5757\u6570 \u4f4e\uff0c \u6700\u5927\u503c \u6bd4\u6211\u4eec\u6307\u5b9a\u7684  \u5757\u6570 \u5927\uff0c\u7136\u540e\u627e\u5230\u4e0e\u6211\u4eec\u7684 hash \u6761\u4ef6\u76f8\u5339\u914d\u3002 \n \u7531\u4e8e\u6211\u4eec\u5728\u8fd9\u4e2a\u67e5\u8be2\u4e2d\u9009\u62e9\u4e86\u903b\u8f91\u884c\u4e2d\u7684\u6240\u6709\u6761\u76ee\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u4e5f\u9700\u8981\u8bbf\u95ee\u5176\u4ed6\u4e00\u4e9b\u9875\u9762\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u53ea\u5bf9\u51e0\u6761\u884c\u8fdb\u884c\u8fd9\u6837\u7684\u64cd\u4f5c\uff0c\u8fd9\u662f\u4e00\u4e2a\u5408\u7406\u6709\u6548\u7684\u64cd\u4f5c\u3002 \n \u7ecf\u9a8c:  \u4ee5\u4e00\u79cd\u6570\u636e\u5e93\u80fd\u591f\u5904\u7406\u6587\u4ef6\u548c\u5217\u5757\u7684 \u6700\u5c0f/\u6700\u5927 \u503c\u7684\u65b9\u5f0f\u6765\u5b9a\u4e49\u4f60\u7684\u6761\u4ef6\uff0c\u4ee5\u4fbf\u5b83\u80fd\u591f\u6709\u6548\u5730\u627e\u5230\u4f60\u9700\u8981\u7684\u903b\u8f91\u884c\u3002 \n ", "url": "https://dune.com/docs/zh/reference/dune-v2/database/#_4"}
{"content": "\u5bf9\u5927\u91cf\u7684\u903b\u8f91\u884c\u8fdb\u884c\u6570\u636e\u6c47\u603b \u00b6 \n \u8fd9\u4e3b\u8981\u662f\u4e00\u4e2a\u6848\u4f8b\u7814\u7a76\uff0c\u4ee5\u8bf4\u660eDuneV2\u5728\u805a\u96c6\u5927\u91cf\u903b\u8f91\u884c\u7684\u6570\u636e\u65b9\u9762\u6709\u591a\u9ad8\u6548\u3002 \n  (#__codelineno-2-1) Select   avg ( gas_used )   from   ethereum . transactions \n \n \u8fd9\u4e2a\u67e5\u8be2\u53ea\u82b1\u4e86  \u60ca\u4eba\u7684  7 \u79d2\u949f\u3002 \n \u8fd9\u4e3b\u8981\u662f\u7531\u4e8eV2\u4e0d\u9700\u8981\u8bfb\u53d6\u6574\u4e2a\u8868\uff0c\u56e0\u4e3a\u6240\u6709\u8fd9\u4e9b\u6570\u636e\u90fd\u88ab\u5b58\u50a8\u5728\u8de8parquet\u6587\u4ef6\u7684\u9762\u5411\u5217\u7684\u9875\u9762\u4e2d\u3002 \n \u5728V1\u7684PostgreSQL\u4e2d\uff0c\u6211\u4eec\u8bfb\u5165\u5185\u5b58\u7684\u6bcf\u4e00\u9875\u90fd\u4f1a\u5305\u542b\u5f88\u591a\u4e0d\u9700\u8981\u7684\u6570\u636e\u3002 \n \u5728Dune V2\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u53ea\u8bfb\u53d6\u6211\u4eec\u771f\u6b63\u9700\u8981\u7684\u6570\u636e\u3002 \n \u7ecf\u9a8c:  \u5bf9\u5927\u91cf\u903b\u8f91\u884c\u7684\u6570\u636e\u67e5\u8be2\u73b0\u5728\u53d8\u5f97\u66f4\u52a0\u9ad8\u6548\uff0c\u5f88\u591a\u4ee5\u524d\u7531\u4e8e\u8d85\u65f6\u800c\u4e0d\u53ef\u80fd\u6267\u884c\u7684\u67e5\u8be2\u73b0\u5728\u90fd\u53ef\u4ee5\u6267\u884c\u3002 \n \u53e6\u4e00\u4e2a\u5c55\u793a\u8fd9\u4e00\u7279\u70b9\u7684\u4f8b\u5b50\u662f  @hildobby's  (https://twitter.com/hildobby_)   Ethereum Overview  (https://dune.com/hildobby/Ethereum-Overview)  \u770b\u677f. \n ", "url": "https://dune.com/docs/zh/reference/dune-v2/database/#_5"}
{"content": "\u6211\u4eec\u4f1a\u7ee7\u7eed\u521b\u65b0 \u00b6 \n \u4e00\u4e9b\u5728\u6211\u4eec\u7684V1\u6570\u636e\u5e93\u4e0a\u6709\u5927\u91cf\u7d22\u5f15\u7684\u67e5\u8be2\u5728Dune V2\u4e2d\u53ef\u80fd\u4f1a\u6709\u70b9\u5c34\u5c2c\u3002 \n \u5bf9\u4e8e erc20 \u4e8b\u4ef6\u8f6c\u79fb\u8868\u3001 ethereum.transactions \u3001 ethereum.logs \u4ee5\u53ca\u5b83\u4eec\u5728\u5176\u4ed6\u533a\u5757\u94fe\u4e0a\u7684\u5bf9\u5e94\u5c24\u5176\u5982\u6b64\u3002 \n \u8fd9\u662f\u6211\u4eec\u4e3a\u4e86\u5728\u5927\u89c4\u6a21\u7684\u57fa\u7840\u4e0a\u5b9e\u73b0\u533a\u5757\u94fe\u5206\u6790\u800c\u505a\u51fa\u7684\u6743\u8861\u3002 \n \u6211\u4eec\u5c06\u7ee7\u7eed\u5bf9\u8fd9\u4e9b\u6570\u636e\u96c6\u548c\u6211\u4eec\u7684\u6570\u636e\u5e93\u67b6\u6784\u8fdb\u884c\u521b\u65b0\uff0c\u4ee5\u4f7f\u6bcf\u4e2a\u67e5\u8be2\u5728V2\u4e0a\u5c3d\u53ef\u80fd\u5feb\u5730\u8fd0\u884c\u3002\u5e0c\u671b\u4f60\u73b0\u5728\u660e\u767d\u4e3a\u4ec0\u4e48\u50cf tx_hash \u8fd9\u6837\u7684\u6570\u636e\u67e5\u8be2\u4f1a\u56e0\u4e3a\u6211\u4eec\u7684\u6743\u8861\u800c\u53d8\u5f97\u7f13\u6162\u3002 \n \u5982\u679c\u4f60\u5728\u4f7f\u7528\u65b0\u7cfb\u7edf\u65f6\u9047\u5230\u56f0\u96be\u6216\u6709\u4efb\u4f55\u53cd\u9988\uff0cGoogle\u89e3\u51b3\u4e0d\u4e86\u65f6\uff0c\u6765\u6211\u4eec\u7684#dun-sql Discord\u9891\u9053\u4ece\u6211\u4eec\u56e2\u961f\u548cWizard\u793e\u533a\u83b7\u5f97\u5e2e\u52a9\u3002 \n \u5f53\u4f60\u9047\u5230\u95ee\u9898\u6216\u53d1\u73b0\u9700\u8981\u6539\u8fdb\u7684\u5730\u65b9\u65f6\uff0c\u8bf7\u7ed9\u6211\u4eec\u53d1\u90ae\u4ef6\uff1a  dunesql-feedback@dune.com  (mailto:dunesql-feedback@dune.com)  \uff0c\u6211\u4eec\u5c06\u4e0e\u4f60\u4e00\u8d77\u66f4\u65b0\u548c\u4f18\u5316\uff01", "url": "https://dune.com/docs/zh/reference/dune-v2/database/#_6"}
{"content": "\u6b22\u8fce\u6765\u5230 DuneV2 \u00b6 \n DuneV2 \u6539\u53d8\u4e86\u6211\u4eec\u6574\u4e2a\u6570\u636e\u5e93\u7684\u67b6\u6784\u3002 \u6211\u4eec\u6b63\u5728\u4ece PostgreSQL \u6570\u636e\u5e93\u5411\u6258\u7ba1\u5728 Databricks \u4e0a\u7684  Apache Spark  (https://www.databricks.com/glossary/what-is-apache-spark)  hosted on  Databricks  (https://docs.databricks.com/getting-started/introduction/index.html) \u5b9e\u4f8b\u3002 \u4e24\u79cd\u7cfb\u7edf\u7684\u5374\u522b\u53ef\u4ee5\u603b\u7ed3\u5982\u4e0b: \n \n \u6211\u4eec\u73b0\u5728\u4f7f\u7528 Databricks SQL\uff0c\u800c\u4e0d\u662f PostgresQL\u3002SQL \u5173\u952e\u5b57\u7684\u53d8\u5316\u5f88\u5c0f\uff0c\u4f46\u53ef\u80fd\u4e0e\u60a8\u7684\u67d0\u4e9b\u67e5\u8be2\u4e66\u5199\u4e60\u60ef\u6709\u5173\u3002 \n \u4e0e PostgresQL \u7684\u9762\u5411\u884c\u7684\u65b9\u6cd5\u76f8\u53cd\uff0cSpark \u662f\u4e00\u4e2a\u9762\u5411\u5217\u7684\u6570\u636e\u5e93\u3002 \n \u4f20\u7edf\u7684\u7d22\u5f15\u88ab\u5217\u5757\u7ea7\u522b\u7684 \u6700\u5c0f/\u6700\u5927 \u503c\u66ff\u6362\u3002 \n \n \n \u6ce8\u610f \n \u4e0b\u9762\u662f\u5173\u4e8eV2\u7ed9\u6784\u5efa\u67e5\u8be2\u5e26\u6765\u7684\u53d8\u5316\u7684\u8be6\u7ec6\u4ecb\u7ecd\u3002 \u60a8\u53ef\u4ee5\u4ece\u8fd9\u91cc\u5f00\u59cb\u7ec3\u4e60  @springzhang  (https://dune.com/springzhang/) 's  Tips and Tricks for Dune V2 Queries and Visualizations  (https://dune.com/springzhang/tips-and-tricks-for-query-and-visualization-in-v2-engine) \n \n ", "url": "https://dune.com/docs/zh/reference/dune-v2/query-engine/#dunev2"}
{"content": "Databricks SQL \u4e0e PostgresSQL \u64cd\u4f5c\u7b26\u7684\u53d8\u5316 \u00b6 \n \u4e24\u79cd\u7f16\u7801\u8bed\u7801\u6108\u53d1\u548c\u5173\u952e\u5b57\u8fd0\u7b97\u7b26\u4e4b\u524d\u7684\u53d8\u5316\u975e\u5e38\u5c0f\uff0c\u4f46\u662f\u60a8\u5e94\u8be5\u6ce8\u610f\u4e0b\u9762\u8fd9\u4e9b\u5dee\u5f02: \n \n \n \n \u63cf\u8ff0 \n DuneV1 \n DuneV2 \n \n \n \n \n Spark \u4e2d\u4e0d\u5b58\u5728 bytea2numeric \n bytea2numeric(bytea) \n bytea2numeric_v2(string) \n \n \n \u57fa\u4e8e 0 \u4e0e\u57fa\u4e8e 1 \u7684\u7d22\u5f15 \n \u57fa\u4e8e1 \n \u57fa\u4e8e0 \n \n \n bytea \u4e0e string \u5b57\u7b26\u4e32\uff08\u5730\u5740\u3001tx\u54c8\u5e0c\u7b49\u2026\uff09 \n \\x2a7d.. (bytea) \n 0x2a7d... (string) \n \n \n \u5730\u5740\uff08string\uff09\u5728Dune v2 \u4e2d\u662f\u5c0f\u5199\u7684 \n \\x2A7D... (bytea) Works in Postgres \n 0x2a7d...  (string) \u5728 Spark \u4e2d\u5fc5\u987b\u5c0f\u5199\u3002 \u53ef\u4ee5\u901a\u8fc7  lower('0x2A7D...') \u5b8c\u6210\u3002 \n \n \n \u9009\u62e9\u5173\u952e\u5b57\u5217\u7684\u65b9\u6cd5\u4e0d\u540c \n \"from\" \n `from` \n \n \n \u522b\u540d\u7684\u547d\u540d\u65b9\u5f0f\u4e0d\u540c \n as \"daily active users \" \n as `daily active user ` \n \n \n \u6307\u6570\u7b26\u53f7 \n x/10^y \n x*power(10,y)  or  x*1e*y \n \n \n \u65f6\u95f4\u95f4\u9694\u53c2\u6570\u5728\u6570\u5b57\u548c\u65f6\u95f4\u5355\u4f4d\u4e4b\u95f4\u9700\u8981\u4e00\u4e2a\u7a7a\u683c \n Interval '1day' \n Interval '1 day' \n \n \n Generate_series() \u73b0\u5728\u53d8\u6210\u4e86 sequence() \n generate_series('2022-05-15', CURRENT_DATE, '1 day') \n explode(sequence(to_date('2022-01-01'), to_date('2022-02-01'), interval 1 day)) \n \n \n prices.usd \u8868\u4e0d\u518d\u5305\u542b Decimals \u5b57\u6bb5 \n \u4e0d\u8981\u4f7f\u7528 prices.usd \u7684 decimals\u5b57\u6bb5 \n \u7528  blockchain.erc20_tokens.decimals  \u66ff\u6362 \n \n \n \u5b9a\u4e49 NULL \u6570\u7ec4 \n NULL::integer[] \n CAST(NULL AS ARRAY<int>)) \n \n \n \u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u5341\u516d\u8fdb\u5236\u7f16\u7801 \n encode(string, 'hex') \n hex(string) \n \n \n \u83b7\u53d6json\u5bf9\u8c61\u7684\u5dee\u5f02 \n (\"takerOutputUpdate\"-> 'deltaWei'->'value' ) decode(substring((\"addressSet\"->'baseAsset')::TEXT, 4,40), 'hex') \n get_json_object(get_json_object(takerOutputUpdate,' \\(.deltaWei'),'\\) .value') '0x' \n \n \n \n \u5728 DuneV2 \u4e2d\u4e0d\u5efa\u8bae\u4f7f\u7528\u53cc\u5f15\u53f7\uff0c\u5373\u4f7f\u5f15\u64ce\u53ef\u4ee5\u8fd0\u884c\u67e5\u8be2\u5e76\u4e14\u6ca1\u6709\u8fd4\u56de\u9519\u8bef\u3002 \n \u8fd9\u662f\u56e0\u4e3a\u89e3\u6790\u5668\u6709\u65f6\u5c06\u53cc\u5f15\u53f7\u4e2d\u7684\u8bcd\u4f5c\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u5904\u7406\uff0c\u6709\u65f6\u5c06\u5176\u4f5c\u4e3a\u4e00\u4e2a\u5bf9\u8c61\uff08\u4f8b\u5982\u5217\u540d\uff09\u5904\u7406\u3002 \n \u4f8b\u5982\uff0c\u5728 where \u5b50\u53e5\u4e2d\u4f7f\u7528\u53cc\u5f15\u53f7\u5f15\u7528\u4e00\u4e2a\u5217\u540d\uff0c\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\u3002\u7136\u800c\uff0c\u5728 CTE \u4e2d\u7684\u540c\u4e00\u67e5\u8be2\u5c06\u5217\u540d\u89c6\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 \u5c31\u60f3\u8fd9\u91cc\u4e00\u6837  (https://dune.com/queries/1199604) . \n \u5982\u679c\u60a8\u53d1\u73b0\u6709\u4efb\u4f55\u5176\u4ed6\u9700\u8981\u6ce8\u610f\u7684\u53d8\u5316\uff0c \u8bf7\u968f\u65f6\u5411\u6211\u4eec\u7684\u6587\u6863\u63d0\u4ea4\u4e00\u4efd PR\uff0c\u6216\u5728  Discord  (https://discord.com/dunecom) \u4e2d\u5411\u6211\u4eec\u53cd\u9988! \n \u5728\u641c\u7d22 SQL \u95ee\u9898\u65f6\uff0c\u60a8\u73b0\u5728\u5e94\u8be5\u641c\u7d22   Databricks SQL median  \u800c\u4e0d\u662f\u641c\u7d22  PGSQL median . Databricks \u5728\u5176\u7f51\u7ad9\u4e0a\u6709\u4e00\u4e2a\u6709\u636e\u53ef\u67e5\u7684\u5185\u7f6e\u51fd\u6570\u7d22\u5f15\u3002 \n \n \n Databricks - Databricks SQL Language Reference  (https://docs.databricks.com/sql/language-manual/sql-ref-functions-builtin.html) \n \n \n ", "url": "https://dune.com/docs/zh/reference/dune-v2/query-engine/#databricks-sql-postgressql"}
{"content": "\u6570\u636e\u5e93\u5de5\u4f5c\u65b9\u5f0f\u7684\u53d8\u5316 \u00b6 \n ", "url": "https://dune.com/docs/zh/reference/dune-v2/query-engine/#_1"}
{"content": "\u6570\u636e\u5e93\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff1f \u00b6 \n \u5728\u975e\u5e38\u9ad8\u7684\u5c42\u6b21\u4e0a\uff0c\u6570\u636e\u5e93\u5c06\u6570\u636e\u4ece\u5b58\u50a8\u8bfb\u53d6\u5230\u5185\u5b58\u4e2d\uff0c\u4ee5\u8fd4\u56de\u60a8\u7684\u67e5\u8be2\u7ed3\u679c\u3002\u6570\u636e\u5e93\u901a\u5e38\u4f1a\u53d7\u5230\u5176\u5c06\u6570\u636e\u8bfb\u5165\u5185\u5b58\u7684\u901f\u5ea6\u7684\u9650\u5236\u3002\u8fd9\u662f\u4e00\u4e2a\u7ecf\u5178\u7684\u8ba1\u7b97\u673a\u79d1\u5b66\u95ee\u9898\uff0c\u901a\u5e38\u88ab\u79f0\u4e3a  I/O bound  (https://en.wikipedia.org/wiki/I/O_bound) . \n ", "url": "https://dune.com/docs/zh/reference/dune-v2/query-engine/#_2"}
{"content": "\u9762\u5411\u884c\u7684\u6570\u636e\u5e93 \u00b6 \n \u6570\u636e\u5e93\u5c06\u5176\u6570\u636e\u5b58\u50a8\u5728\u9875\uff08pages\uff09\u4e2d\u3002\u9875\u901a\u5e38\u5305\u542b\u591a\u884c\u4fe1\u606f\u3002 \u591a\u9875\u5c06\u7ec4\u6210\u4e00\u4e2a\u6570\u636e\u6587\u4ef6\u3002\u6570\u636e\u5e93\u4e2d\u7684\u4e00\u4e2a\u8868\u6709\u65f6\u4f1a\u5305\u542b\u591a\u4e2a\u6570\u636e\u6587\u4ef6\u3002 \n \n \u5f53\u4ece\u6570\u636e\u5e93\u68c0\u7d22\u6570\u636e\u65f6\uff0c\u6570\u636e\u5e93\u5c06\u4ee5\u9875\u7684\u5927\u5c0f\u5c06\u6570\u636e\u8bfb\u5165\u5185\u5b58/\u7f13\u5b58\u3002 \u8fd9\u662f\u6570\u636e\u5e93\u4e00\u6b21\u6027\u8bfb\u53d6\u7684\u6700\u5c0f\u6570\u636e\u91cf\uff0c\u4e5f\u662f\u4ece\u4efb\u4f55\u6570\u636e\u5e93\u8bfb\u53d6\u6570\u636e\u65f6\u7684\u4e00\u4e2a\u5e38\u89c1\u74f6\u9888\u3002\u5728\u5c06\u6570\u636e\u8bfb\u5165\u5185\u5b58\u540e\uff0c\u6570\u636e\u5e93\u6570\u636e\u5e93\u8981\u4e48\u521b\u5efa\u4e34\u65f6\u6587\u4ef6\uff0c\u8981\u4e48\u80fd\u591f\u518d\u6b21\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6\u6570\u636e\uff0c\u6700\u7ec8\u5230\u8fbe\u6240\u9700\u7684\u67e5\u8be2\u8f93\u51fa\u3002 \n \u5728\u4efb\u4f55\u6570\u636e\u5e93\u7cfb\u7edf\u4e2d\uff0c\u6211\u4eec\u90fd\u5e0c\u671b\u5728\u4ece\u6570\u636e\u5e93\u4e2d\u68c0\u7d22\u4efb\u610f\u6570\u91cf\u7684\u6570\u636e\u65f6\u51cf\u5c11\u8bfb\u53d6\u7684\u9875\u7684\u6570\u91cf\u3002 \u7531\u4e8e\u4f20\u7edf\u6570\u636e\u5e93\u5c06\u591a\u884c\u6570\u636e\u5b58\u50a8\u5728\u4e00\u9875\u4e2d\uff0c\u56e0\u6b64\u5b83\u4eec\u6700\u9002\u5408\u5728\u4e00\u4e2a\u67e5\u8be2\u4e2d\u68c0\u7d22\u4e00\u884c\u7684\u6240\u6709\u5217\u7684\u60c5\u51b5\u3002\u6570\u636e\u5e93\u5c06\u59cb\u7ec8\u5fc5\u987b\u8bfb\u53d6\u5b58\u50a8\u7279\u5b9a\u884c\u7684\u6574\u4e2a\u9875\uff0c\u56e0\u6b64\u6570\u636e\u5e93\u8fd4\u56de\u4e5f\u5b58\u50a8\u5728\u540c\u4e00\u9875\u4e2d\u7684\u5176\u4ed6\u6570\u636e\u975e\u5e38\u7b80\u5355\u3002\u67e5\u8be2\u5728\u6570\u636e\u5e93\u4e2d\u7d27\u5bc6\u5b58\u50a8\u5728\u4e00\u8d77\u7684\u5176\u4ed6\u884c\u4e5f\u662f\u5982\u6b64\u3002\u56e0\u6b64\u67e5\u8be2\u7b2c 500-600 \u884c\u662f\u975e\u5e38\u9ad8\u6548\u7684\uff0c\u67e5\u8be2\u7b2c 5\u300187\u3001789 \u548c 1050 \u884c\u5e76\u4e0d\u662f\u90a3\u4e48\u9ad8\u6548\uff0c\u4f46\u4ecd\u7136\u6ca1\u95ee\u9898\u3002 \n \u76f8\u6bd4\u4e4b\u4e0b\uff0c\u67e5\u8be2\u5b58\u50a8\u5728\u8bb8\u591a\u4e0d\u540c\u903b\u8f91\u884c\u4e2d\u7684\u6570\u636e\uff0c\u4ece\u800c\u67e5\u8be2\u4e0d\u540c\u7684\u9875\u9762\uff0c\u662f\u4e00\u4e2a\u975e\u5e38\u6602\u8d35\u7684\u64cd\u4f5c\u3002\u4eca\u5929\u6211\u4eec\u5728Dune\u4e0a\u8fd0\u884c\u7684\u5927\u591a\u6570\u67e5\u8be2\u90fd\u662f\u5bf9\u6570\u5343\u751a\u81f3\u6570\u767e\u4e07\u884c\u7684\u67d0\u4e00\u5217\u7684\u6570\u636e\u70b9\u8fdb\u884c\u805a\u5408\u3002 \u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6570\u636e\u5e93\u5c06\u8bfb\u53d6\u5b58\u50a8\u6b64\u5217\u6570\u636e\u7684\u6574\u4e2a\u9875\uff0c\u5373\u4f7f\u5b83\u53ea\u9700\u8981\u5176\u4e2d\u4e00\u5217\u7684\u6570\u636e\u3002  \u8fd9\u610f\u5473\u7740\u5e73\u5747\u800c\u8a00\uff0c\u6211\u4eec\u6b63\u5728\u8bfb\u53d6\u5927\u91cf\u8fd4\u56de\u67e5\u8be2\u7ed3\u679c\u5e76\u4e0d\u9700\u8981\u7528\u5230\u7684\u6570\u636e\uff0c\u53ea\u662f\u56e0\u4e3a\u5b83\u4e5f\u5305\u542b\u5728\u540c\u4e00\u4e2a\u9875\u4e0a\uff0c\uff0c\u5e76\u4e14\u6570\u636e\u5e93\u4e0d\u80fd\u201c\u4ec5\u201d\u8bfb\u53d6\u4e00\u5217\uff0c\u800c\u662f\u5fc5\u987b\u8bfb\u53d6\u5305\u542b\u8be5\u5217\u7684\u6574\u884c\u3002 \n \u5728 Postgres \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7d22\u5f15\u6765\u907f\u514d\u5f3a\u5236\u6570\u636e\u5e93\u8bfb\u53d6\u6574\u4e2a\u8868\uff08\u56e0\u6b64\u8bfb\u53d6\u4e86\u5f88\u591a\u9875\uff09\uff0c\u800c\u53ea\u67e5\u770b\u5176\u4e2d\u4e00\u4e2a\u7ed3\u6784\u5316\u7684\u5b50\u96c6\u3002\u8fd9\u5c06\u4f7f\u67e5\u8be2\u66f4\u52a0\u5feb\u901f\u548c\u9ad8\u6548, \u4f46\u4ec5\u9650\u4e8e\u88ab\u7d22\u5f15\u7684\u5217\u3002 \u7531\u4e8e\u4e3a\u4e00\u4e2a\u7279\u5b9a\u7684\u8868\u521b\u5efa\u7684\u6bcf\u4e00\u4e2a\u65b0\u7d22\u5f15\u90fd\u5c06\u662f\u6570\u636e\u5e93\u4e2d\u7684\u4e00\u4e2a\u65b0\u6587\u4ef6\uff0c\u5e76\u4f7f\u66f4\u65b0\u548c\u7ef4\u62a4\u8be5\u8868\u53d8\u5f97\u66f4\u52a0\u56f0\u96be\uff0c\u56e0\u6b64\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u53ef\u6301\u7eed\u7684\u6570\u636e\u5e93\u6269\u5c55\u65b9\u6cd5\u3002 \n \u6211\u4eec\u4e0d\u53ef\u80fd\u5728\u6570\u636e\u5e93\u4e2d\u7684\u6bcf\u4e00\u5217\u6216\u6bcf\u4e00\u5217\u7684\u7ec4\u5408\u4e0a\u90fd\u521b\u5efa\u4e00\u4e2a\u7d22\u5f15\uff0c\u800c\u4e0d\u81f3\u4e8e\u5728\u4e0b\u4e00\u6b65\u9047\u5230\u9ebb\u70e6\u3002\u56e0\u6b64\uff0cDune V2\u4e0d\u4f1a\u5728\u9762\u5411\u884c\u7684\u6570\u636e\u5e93\u4e0a\u8fd0\u884c\uff0c\u800c\u662f\u5728\u9762\u5411\u5217\u7684\u6570\u636e\u5e93\u4e0a\u8fd0\u884c\u3002 \n ", "url": "https://dune.com/docs/zh/reference/dune-v2/query-engine/#_3"}
{"content": "\u9762\u5411\u5217\u7684\u6570\u636e\u5e93 \u00b6 \n \u6211\u4eec\u4e0d\u5728\u9875\u4e2d\u5b58\u50a8\u884c\uff0c\u800c\u5728\u9875\u4e2d\u5b58\u50a8\u5217\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u51cf\u5c11\u4e86\u6570\u636e\u5e93\u5728\u805a\u5408\u6216\u8bfb\u53d6\u7279\u5b9a\u5217\u65f6\u9700\u8981\u8bfb\u53d6\u7684\u9875\u6570\u91cf\u3002 \n \n \u5177\u4f53\u6765\u8bf4\uff0c\u5728 Dune V2 \u4e2d\uff0c\u6211\u4eec\u5c06  parquet \u6587\u4ef6\u683c\u5f0f  (https://github.com/apache/parquet-format)  \u7528\u4e8e\u6211\u4eec\u7684\u65b0\u6570\u636e\u5e93\u3002Parquet \u6709\u65f6\u88ab\u63cf\u8ff0\u4e3a\u9762\u5411\u884c\u7684\u6570\u636e\u5e93\u548c\u9762\u5411\u5217\u7684\u6570\u636e\u5e93\u4e4b\u95f4\u7684\u6df7\u5408\u65b9\u6cd5\uff0c\u56e0\u4e3a\u6570\u636e\u5e93\u4e2d\u7684\u8868\u4ecd\u7136\u7531\u591a\u4e2a Parquet \u6587\u4ef6\u7ec4\u6210\uff0c\u8fd9\u4e9b\u6587\u4ef6\u7531\u6570\u636e\u96c6\u7684\u884c\u5206\u533a\u3002\u5728 parquet \u6587\u4ef6\u4e2d\uff0c\u5b9e\u9645\u5305\u542b\u6570\u636e\u7684\u9875\u5c06\u5305\u542b\u5217\u800c\u4e0d\u662f\u884c\uff0c\u4f46\u4ecd\u5b58\u50a8\u5728\u884c\u7ec4\u4e2d\uff0c\u8fd9\u4e9b\u884c\u7ec4\u8fdb\u4e00\u6b65\u6309\u884c\u5212\u5206\u6570\u636e\u3002\u6570\u636e\u5e93\u4ecd\u7136\u7c97\u7565\u5730\u4ee5\u9762\u5411\u884c\u7684\u683c\u5f0f\u5b58\u50a8\uff0c\u4f46\u5404\u4e2a\u503c\u4ee5\u5217\u65b9\u5411\u5b58\u50a8\u5728\u9875\u4e0a\u3002 \n \n \u8fd9\u610f\u5473\u7740\uff0c\u5373\u4f7f\u6574\u4e2a\u6570\u636e\u5e93\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u662f\u4ee5\u9762\u5411\u884c\u7684\u65b9\u5f0f\u5b9a\u5411\u7684\uff0c\u4f46\u5982\u679c\u6211\u4eec\u771f\u7684\u60f3\u8981\u8bfb\u53d6\u6570\u636e\uff0c\u6211\u4eec\u603b\u662f\u4f1a\u4ece\u9762\u5411\u5217\u7684\u9875\u4e2d\u8bfb\u53d6\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5730\u5c06\u5927\u91cf\u903b\u8f91\u884c\u4e2d\u7684\u6570\u636e\u805a\u5408\u5230\u4e00\u5217\u4e2d\uff0c\u56e0\u4e3a\u5728\u8fd9\u79cd\u5e03\u5c40\u4e2d\uff0c\u6211\u4eec\u5fc5\u987b\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u4ee5\u5b9e\u9645\u8bfb\u53d6\u6570\u636e\u7684\u9875\u7684\u6570\u91cf\u88ab\u6700\u5c0f\u5316\u4e86\u3002 \n \u76f8\u53cd\uff0c\u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u67e5\u8be2\u7279\u5b9a\u903b\u8f91\u884c\u7684\u6240\u6709\u5217\uff0c\u6211\u4eec\u5fc5\u987b\u8bbf\u95ee\u8bb8\u591a\u4e0d\u540c\u7684\u9875\uff0c\u56e0\u4e3a\u4e00\u4e2a\u903b\u8f91\u884c\u7684\u6570\u636e\u4e0d\u518d\u5b58\u50a8\u5728\u4e00\u4e2a\u9875\u4e2d\uff0c\u800c\u662f\u5206\u5e03\u5728\u8bb8\u591a\u4e0d\u540c\u7684\u9875\u4e2d\u3002 \n \u8fd9\u4e2a\u89c6\u9891\u5f88\u597d\u5730\u5411\u6211\u4eec\u89e3\u91ca\u4e86\u9762\u5411\u884c\u548c\u9762\u5411\u5217\u7684\u6570\u636e\u5e93\u7cfb\u7edf\u7684\u5dee\u5f02\u3002 \n \n \u672c\u8d28\u4e0a \uff0c\u5c06\u5217\u800c\u4e0d\u662f\u884c\u5b58\u50a8\u5728\u9875\u4e2d\u53ef\u4ee5\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u6570\u636e\u5e93\u5728\u4ece\u5927\u91cf\u903b\u8f91\u884c\u4e2d\u68c0\u7d22\u4e00\u5217\u7684\u6570\u636e\u65f6\u8bfb\u53d6\u7684\u4e0d\u9700\u8981\u7684\u6570\u636e\u91cf\u3002\u6211\u4eec\u6709\u65f6\u80fd\u591f\u5728 Postgres \u4e2d\u901a\u8fc7\u4ee5\u7d22\u5f15\u7684\u5f62\u5f0f\u521b\u5efa\u5927\u91cf\u7ed3\u6784\u5316\u7684\u5b50\u96c6\u6570\u636e\u6765\u6a21\u4eff\u8fd9\u4e00\u70b9\uff0c\u4f46\u8fd9\u5e76\u4e0d\u80fd\u6269\u5c55\u3002 \n ", "url": "https://dune.com/docs/zh/reference/dune-v2/query-engine/#_4"}
{"content": "\u7d22\u5f15\u6216\u8005\u8bf4\u6ca1\u6709\u7d22\u5f15 \u00b6 \n \u5728\u57fa\u4e8e parquet \u7684\u7cfb\u7edf\u4e2d\uff0c\u4f20\u7edf\u610f\u4e49\u4e0a\u7684\u7d22\u5f15\u5e76\u4e0d\u5b58\u5728\u3002\u4f46\u662f\uff0c\u5b83\u4eec\u57fa\u672c\u4e0a\u662f\u52a8\u6001\u521b\u5efa\u7684\uff0c\u6bcf\u4e2a parquet \u6587\u4ef6\u90fd\u6709\u4e00\u4e2a\u9875\u811a\uff0c\u5176\u4e2d\u5305\u542b\u5b58\u50a8\u5728\u8be5 parquet \u6587\u4ef6\u4e2d\u7684\u6bcf\u4e00\u5217\u7684  \u6700\u5c0f/\u6700\u5927  \u3002 \u7136\u540e\u5728\u5217\u5757\u7ea7\u522b\u4e0a\u91cd\u590d\u6b64\u6a21\u5f0f\uff0c\u5b83\u4e3a parquet \u6587\u4ef6\u4e2d\u7279\u5b9a\u884c\u7ec4\u5185\u7684\u4e0d\u540c\u5217\u5b58\u50a8\u6b64\u5143\u6570\u636e\u3002 \n \n \u5728\u6587\u4ef6\u7ea7\u522b\u548c\u5217\u5757\u7ea7\u522b\u540c\u65f6\u4f7f\u7528\u8fd9\u4e9b  \u6700\u5c0f/\u6700\u5927  \u503c, \u5141\u8bb8\u6570\u636e\u5e93\u5728\u626b\u63cf\u8868\u65f6\u9ad8\u6548\u5730\u8df3\u8fc7\u6574\u4e2a parquet \u6587\u4ef6\u6216 parquet \u6587\u4ef6\u4e2d\u7684\u5217\u5757\u3002 \n \u4e0d\u5e78\u7684\u662f\uff0c\u5b57\u7b26\u4e32\u7684  \u6700\u5c0f/\u6700\u5927  \u503c\u901a\u5e38\u4e0d\u662f\u5f88\u6709\u7528\u3002\u7279\u522b\u662f\u533a\u5757\u94fe\u7cfb\u7edf\u4e2d\u7684  tx_hash  \u5b57\u7b26\u4e32  \u5730\u5740  \u5b57\u7b26\u4e32\u4e0d\u9002\u5408\u8fd9\u79cd  \u6700\u5c0f/\u6700\u5927  \u6570\u636e\u6536\u96c6\uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u968f\u673a\u751f\u6210\u7684\u3002 \u8fd9\u610f\u5473\u7740\u6570\u636e\u5e93\u5c06\u65e0\u6cd5\u57fa\u4e8e\u8fd9\u4e9b\u5b57\u7b26\u4e32\u8df3\u8fc7\u6587\u4ef6\u6216\u5217\u5757\uff0c\u56e0\u6b64\u67e5\u8be2\u5c06\u975e\u5e38\u4f4e\u6548\uff0c\u56e0\u4e3a\u5b83\u9700\u8981\u6570\u636e\u5e93\u5b9e\u9645\u5c06\u6240\u6709\u9875\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u3002 \n \u4e5f\u5c31\u662f\u8bf4\uff0c\u7531\u4e8e\u67e5\u8be2\u5f15\u64ce\u603b\u4f53\u4e0a\u4ecd\u7136\u80fd\u591f\u975e\u5e38\u6709\u6548\u5730\u8bfb\u53d6\u5b58\u50a8\u8fd9\u4e9b\u5b57\u7b26\u4e32\u7684\u5404\u4e2a\u5217\uff0c\u56e0\u6b64\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e0d\u4f1a\u5bf9\u60a8\u7684\u67e5\u8be2\u6267\u884c\u901f\u5ea6\u4ea7\u751f\u5f88\u5927\u5f71\u54cd\u3002 \n \u8fd9\u4e3b\u8981\u4e0e  ethereum.transactions ,  bnb.logs ,  erc20_ethereum.erc20_evt_transfer \u7b49\u57fa\u8868\u76f8\u5173\uff0c\u8fd9\u4e9b\u57fa\u8868\u5305\u542b\u672a\u7ecf\u9884\u8fc7\u6ee4\u7684\u975e\u5e38\u5927\u7684\u6570\u636e\u96c6\u3002 \n \u4e00\u4e2a\u503c\u5f97\u6ce8\u610f\u7684\u4f8b\u5916\u662f solana \u6570\u636e\u96c6  account_activity  \u5b83\u4e0d\u50cf\u6211\u4eec\u7684\u5176\u4ed6\u6570\u636e\u96c6\u90a3\u6837\u6309  block_time  \u6392\u5e8f\uff0c\u800c\u662f\u6309  account_keys \u6392\u5e8f\u3002 \u8fd9\u4f7f\u6211\u4eec\u80fd\u591f\u5b9e\u9645\u5408\u7406\u5730\u5229\u7528\u6240\u4f7f\u7528\u7684\u5e10\u6237\u5bc6\u94a5\u7684  \u6700\u5c0f/\u6700\u5927  \u503c\uff0c\u4ece\u800c\u57fa\u4e8e  account_keys  \u503c\u8fd0\u884c\u6709\u6548\u7684\u67e5\u8be2\u3002 \n ", "url": "https://dune.com/docs/zh/reference/dune-v2/query-engine/#_5"}
{"content": "\u67e5\u8be2\u793a\u4f8b \u00b6 \n \u6709\u4e86\u8fd9\u4e9b\u77e5\u8bc6\uff0c\u6211\u4eec\u518d\u6765\u770b\u770b\u65b0\u7248 Dune V2 \u5f15\u64ce\u7684\u4e00\u4e9b\u67e5\u8be2\u3002 \n \u67e5\u8be2\u4ea4\u6613\u54c8\u5e0c \n  (#__codelineno-0-1) Select   *   from   ethereum . transactions \n  (#__codelineno-0-2) where   hash   =   '0xce1f1a2dd0c10fcf9385d14bc92c686c210e4accf00a3fe7ec2b5db7a5499cff' \n \n \u5982\u679c\u60a8\u7528\u6211\u4eec\u4e4b\u524d\u5b66\u5230\u7684\u6240\u6709\u77e5\u8bc6\u6765\u601d\u8003\u4e00\u4e0b\u8fd9\u4e2a\u95ee\u9898\uff0c\u60a8\u5c31\u4f1a\u660e\u767d\u8fd9\u4e2a\u67e5\u8be2\u7684\u6548\u7387\u975e\u5e38\u4f4e\u3002 \u6211\u4eec\u8fd9\u91cc\u552f\u4e00\u7684\u8fc7\u6ee4\u6761\u4ef6\u662f  hash  \u5b57\u7b26\u4e32\uff0c\u56e0\u6b64\u6211\u4eec\u57fa\u672c\u4e0a\u5f3a\u5236\u67e5\u8be2\u5f15\u64ce\u8bfb\u53d6\u6240\u6709\u5b58\u50a8\u5728  tx_hash  \u5217\u6570\u636e\u7684\u9875\u3002 \u6211\u4eec\u53ef\u80fd\u53ef\u4ee5\u8df3\u8fc7\u90a3\u4e9b\u5b58\u50a8\u5728\u6bcf\u4e2a parquet \u6587\u4ef6\u7684\u9875\u811a\u4e2d\u7684\u6700\u5c0f/\u6700\u5927\u503c\u662f  0xa0 - 0xcd \u7684\u90e8\u5206\u5217\u5757\uff0c\u4f46\u8fd9\u4e9b\u53ea\u662f\u4e00\u4e2a\u7f55\u89c1\u7684\u4f8b\u5916\u3002 \n \u9274\u4e8e\u6211\u4eec\u4e3a\u4e86\u67e5\u8be2\u4e00\u4e2a  hash  \u57fa\u672c\u4e0a\u8981\u5728\u5bf9\u4ee5\u592a\u574a\u4e3b\u7f51\u7684\u6574\u4e2a\u5386\u53f2\u8fdb\u884c\u5168\u9762\u626b\u63cf  (\u5728\u64b0\u5199\u672c\u62a5\u544a\u65f6\u670916\u4ebf\u6761\u8bb0\u5f55)\uff0c\u8fd9\u4e2a\u67e5\u8be2\u5728\u5927\u7ea6 6 \u5206\u949f\u5185\u8fd0\u884c\u5b8c\u6210\u662f\u76f8\u5f53\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u7684\u3002 \n \u9274\u4e8e\u67e5\u8be2  hash  \u662fDune\u4e0a\u7684\u5206\u6790\u5e08\u7684\u5de5\u4f5c\u6d41\u7a0b\u4e2d\u662f\u975e\u5e38\u5e38\u89c1\u7684\uff0c\u8ba9\u6211\u4eec\u8003\u8651\u4e00\u4e0b\u5982\u4f55\u624d\u80fd\u66f4\u5feb\u5730\u5b8c\u6210\u8fd9\u9879\u5de5\u4f5c\u5427\u3002 \n \u6211\u4eec\u53ea\u9700\u8981\u4f7f\u7528\u4e00\u4e2a\u5b9e\u9645\u4e0a\u5305\u542b\u6709\u7528\u7684  \u6700\u5c0f/\u6700\u5927  \u503c\u7684\u5217\uff0c\u4ee5\u4fbf\u80fd\u591f\u4e0d\u5fc5\u5b8c\u6574\u8bfb\u53d6\u6240\u6709\u9875\uff0c\u800c\u662f\u80fd\u591f\u8df3\u8fc7\u5927\u91cf\u6587\u4ef6\u548c\u5217\u5757\u3002 Both  block_time  \u548c   block_number  \u90fd\u53ef\u7528\u4e8e\u6b64\u76ee\u7684\u3002 \n  (#__codelineno-1-1) Select   *   from   ethereum . transactions \n  (#__codelineno-1-2) where   block_number   =   14854616 \n  (#__codelineno-1-3) and   hash   =   '0xce1f1a2dd0c10fcf9385d14bc92c686c210e4accf00a3fe7ec2b5db7a5499cff' \n \n \u8fd9\u4e2a\u67e5\u8be2\u4ecd\u7136\u4e0d\u5982\u5728 Postgres \u4e2d\u90a3\u4e48\u5feb,\uff08\u5728Postgres\u4e2d\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528  B-tree \u7d22\u5f15\uff09\uff0c\u4f46\u8fd0\u884c\u65f6\u95f4\u4e3a 13 \u79d2\uff0c\u6211\u4eec\u5df2\u7ecf\u975e\u5e38\u63a5\u8fd1\u4e86\u3002 \n \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5728\u67e5\u8be2\u6267\u884c\u8fc7\u7a0b\u4e2d\u53d1\u751f\u7684\u4e8b\u60c5\u662f\uff0c\u6570\u636e\u5e93\u5f15\u64ce\u80fd\u591f\u8bfb\u53d6parquet\u6587\u4ef6\u7684\u9875\u811a\uff0c\u80fd\u591f\u786e\u5b9a\u5f88\u591aparquet\u6587\u4ef6\u7684 \u6700\u5c0f/\u6700\u5927 \u503c\u4e0d\u7b26\u5408\u5b9a\u4e49\u7684\u6807\u51c6\uff0c\u5e76\u6709\u6548\u5730\u8df3\u8fc7\u5b83\u4eec\u3002\u4e00\u65e6\u6211\u4eec\u627e\u5230\u4e86\u4e00\u4e2a\u771f\u6b63\u6ee1\u8db3\u6211\u4eec\u6761\u4ef6\u7684 parquet \u6587\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u6df1\u5165\u5230\u5217\u5757\u7684 \u6700\u5c0f/\u6700\u5927 \u503c\uff0c\u627e\u5230\u5408\u9002\u7684\u5217\u5757\uff0c\u5e76\u5c06\u5269\u4e0b\u7684\u51e0\u9875\u5217\u6570\u636e\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u627e\u5230\u7b26\u5408 hash \u6761\u4ef6\u7684\u5217\u5757\u3002\u7531\u4e8e\u6211\u4eec\u5728\u8fd9\u4e2a\u67e5\u8be2\u4e2d\u9009\u62e9\u7684\u662f\u903b\u8f91\u884c\u7684\u6240\u6709\u6761\u76ee\uff0c\u5b9e\u9645\u4e0a\u6211\u4eec\u8fd8\u9700\u8981\u8bbf\u95ee\u5176\u4ed6\u51e0\u9875\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u53ea\u5bf9\u51e0\u884c\u8fdb\u884c\u8fd9\u6837\u7684\u64cd\u4f5c\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u5408\u7406\u6709\u6548\u7684\u64cd\u4f5c\u3002 \n \u7ecf\u9a8c\uff1a  \u4ee5\u4e00\u79cd\u6570\u636e\u5e93\u80fd\u591f\u5408\u7406\u5904\u7406\u6587\u4ef6\u548c\u5217\u5757\u7684  \u6700\u5c0f/\u6700\u5927  \u503c\u7684\u65b9\u5f0f\u6765\u5b9a\u4e49\u60a8\u7684\u6761\u4ef6\uff0c\u4ee5\u4fbf\u5b83\u80fd\u591f\u6709\u6548\u5730\u627e\u5230\u60a8\u9700\u8981\u7684\u903b\u8f91\u884c\u3002 \n \u5728\u5927\u91cf\u903b\u8f91\u884c\u4e0a\u805a\u5408\u6570\u636e \n \u4e0b\u9762\u662f\u4e00\u4e2a\u6848\u4f8b\u7814\u7a76\uff0c\u4ee5\u8bf4\u660eDuneV2\u5728\u805a\u96c6\u5927\u91cf\u903b\u8f91\u884c\u7684\u6570\u636e\u65b9\u9762\u6709\u591a\u9ad8\u6548\u3002 \n  (#__codelineno-2-1) Select   avg ( gas_used )   from   ethereum . transactions \n \n \u6b64\u67e5\u8be2\u5728  \u60ca\u4eba\u7684  7 \u79d2\u5185\u8fd0\u884c\u5b8c\u6210\u3002 \u8fd9\u4e3b\u8981\u662f\u56e0\u4e3a\u6211\u4eec\u73b0\u5728\u4e0d\u5fc5\u4ece\u5b57\u9762\u4e0a\u8bfb\u53d6\u6574\u4e2a\u8868\u3002 \u6211\u4eec\u73b0\u5728\u80fd\u591f\u6781\u5927\u5730\u51cf\u5c11\u6211\u4eec\u5fc5\u987b\u9605\u8bfb\u7684\u9875\u7684\u6570\u91cf\uff0c\u56e0\u4e3a\u6240\u6709\u8fd9\u4e9b\u6570\u636e\u90fd\u5b58\u50a8\u5728\u591a\u4e2a parquet \u6587\u4ef6\u4e2d\u7684\u9875\u4e2d\u3002 \u5728 Postgres \u4e2d\uff0c\u6211\u4eec\u5fc5\u987b\u8bfb\u53d6\u7684\u6bcf\u4e2a\u9875\u90fd\u5305\u542b\u5927\u91cf\u4e0d\u9700\u8981\u7684\u6570\u636e\uff0c\u5728 Dune V2 \u4e2d\uff0c\u6211\u4eec\u53ea\u8bfb\u53d6\u6211\u4eec\u5b9e\u9645\u9700\u8981\u7684\u6570\u636e\u3002 \n \u7ecf\u9a8c\uff1a  \u8de8\u5927\u91cf\u903b\u8f91\u884c\u67e5\u8be2\u6570\u636e\u73b0\u5728\u66f4\u52a0\u9ad8\u6548\uff0c\u5e76\u4e14\u8bb8\u591a\u4ee5\u524d\u7531\u4e8e\u8d85\u65f6\u800c\u5b8c\u5168\u4e0d\u53ef\u80fd\u7684\u67e5\u8be2\u73b0\u5728\u5df2\u7ecf\u53ef\u4ee5\u6b63\u5e38\u6267\u884c\u3002 \n hildobby's  (https://twitter.com/hildobby_)   Ethereum Overview  (https://dune.com/hildobby/Ethereum-Overview)  \u770b\u677f\u5c31\u662f\u8fd9\u4e00\u70b9\u7684\u5f88\u597d\u7684\u4f8b\u5b50\uff0c \u8fd9\u662f\u4e00\u4e2a\u4ee5\u524d\u4e0d\u53ef\u80fd\u5b9e\u73b0\u7684\u6570\u636e\u5904\u7406\u6c34\u5e73\u3002 \n ", "url": "https://dune.com/docs/zh/reference/dune-v2/query-engine/#_6"}
{"content": "\u7ed3\u675f\u8bed \u00b6 \n \u4e00\u4e9b\u5728\u6211\u4eec\u7684V1\u6570\u636e\u5e93\u4e0a\u6709\u5927\u91cf\u7d22\u5f15\u7684\u67e5\u8be2\u5728DuneV2\u4e2d\u53ef\u80fd\u4f1a\u611f\u5230\u6709\u70b9\u5c34\u5c2c\u3002\u5bf9\u4e8eerc20\u4e8b\u4ef6\u8f6c\u79fb\u8868(event transfer)\u3001 ethereum.transactions  \u548c  ethereum.logs \u4ee5\u53ca\u5b83\u4eec\u5728\u5176\u4ed6\u533a\u5757\u94fe\u4e0a\u7684\u5bf9\u5e94\u7269\uff0c\u60c5\u51b5\u5c24\u5176\u5982\u6b64\u3002\u8fd9\u662f\u6211\u4eec\u4e3a\u4e86\u5728\u5927\u89c4\u6a21\u57fa\u7840\u4e0a\u5b9e\u73b0\u533a\u5757\u94fe\u5206\u6790\u800c\u91c7\u53d6\u7684\u4e00\u79cd\u6743\u8861\u3002\u6211\u4eec\u5c06\u7ee7\u7eed\u5bf9\u8fd9\u4e9b\u6570\u636e\u96c6\u548c\u6211\u4eec\u7684\u6570\u636e\u5e93\u67b6\u6784\u8fdb\u884c\u521b\u65b0\uff0c\u4ee5\u4f7f\u6bcf\u4e2a\u67e5\u8be2\u5728DuneV2\u4e0a\u5c3d\u53ef\u80fd\u5feb\u5730\u8fd0\u884c\uff0c\u4f46\u50cf\u5bf9  tx_hash  \u7684\u67e5\u8be2\u5f88\u6162\u53ea\u662f\u8fd9\u4e2a\u65b0\u6570\u636e\u5e93\u7cfb\u7edf\u7684\u672c\u8d28\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u4eec\u8ba4\u4e3a\u6211\u4eec\u5df2\u7ecf\u5728\u5b9e\u73b0\u5f88\u591a\u65b0\u7684\u4f7f\u7528\u573a\u666f\uff0c\u4ee5\u53ca\u52a0\u5feb\u5927\u91cf\u73b0\u6709\u67e5\u8be2\u7684\u901f\u5ea6\u7684\u65b9\u9762\u505a\u5f97\u975e\u5e38\u597d\u4e86\uff0c\u3002 \n \u5982\u679c\u60a8\u5bf9\u65b0\u7cfb\u7edf\u6709\u4efb\u4f55\u53cd\u9988\u6216\u9047\u5230\u95ee\u9898\uff0c\u6211\u4eec\u90fd\u4f1a\u503e\u542c\u5e76\u7b49\u5f85\u60a8\u5728  Canny  (https://feedback.dune.com)  and  Discord  (https://discord.com/dunecom) \u4e0a\u7684\u53cd\u9988\u3002", "url": "https://dune.com/docs/zh/reference/dune-v2/query-engine/#_7"}
{"content": "\u65b0\u7248\u67e5\u8be2\u5f15\u64ce \u00b6 \n DuneV2 \u6539\u53d8\u4e86\u6211\u4eec\u7684\u6574\u4e2a\u6570\u636e\u5e93\u67b6\u6784\u3002 \u6211\u4eec\u6b63\u5728\u4ece PostgresQL \u6570\u636e\u5e93\u8fc7\u6e21\u5230\u6258\u7ba1\u5728 Databricks \u4e0a\u7684 Apache Spark \u5b9e\u4f8b\u3002\u4e24\u79cd\u7cfb\u7edf\u7684\u533a\u522b\u53ef\u4ee5\u603b\u7ed3\u5982\u4e0b\uff1a \n \n \u6211\u4eec\u73b0\u5728\u4f7f\u7528 Databricks SQL\uff0c\u800c\u4e0d\u662f PostgresQL\u3002SQL \u5173\u952e\u5b57\u7684\u53d8\u5316\u5f88\u5c0f\uff0c\u4f46\u53ef\u80fd\u4e0e\u60a8\u7684\u67d0\u4e9b\u67e5\u8be2\u4e66\u5199\u4e60\u60ef\u6709\u5173\u3002 \n \u4e0e PostgresQL \u7684\u9762\u5411\u884c\u7684\u65b9\u6cd5\u76f8\u53cd\uff0cSpark \u662f\u4e00\u4e2a\u9762\u5411\u5217\u7684\u6570\u636e\u5e93\u3002 \n \u4f20\u7edf\u7684\u7d22\u5f15\u88ab\u5217\u5757\u7ea7\u522b\u7684 \u6700\u5c0f/\u6700\u5927 \u503c\u66ff\u6362\u3002 \n \n \u60a8\u53ef\u4ee5\u5728\u6b64\u5904\u9605\u8bfb\u6709\u5173SQL\u53d8\u5316\u7684\u66f4\u591a\u4fe1\u606f: \n \n \n \u67e5\u8be2\u5f15\u64ce  (query-engine/) \n \n \n Or start getting your wand dirty by following along here: \n \n \n @springzhang  (https://dune.com/springzhang/) 's  Tips and Tricks for Dune V2 Queries and Visualizations  (https://dune.com/springzhang/tips-and-tricks-for-query-and-visualization-in-v2-engine) \n \n \n ", "url": "https://dune.com/docs/zh/reference/dune-v2/#_1"}
{"content": "\u9b54\u6cd5\u4e66 \u00b6 \n \u6570\u636e\u62bd\u8c61\u5df2\u88ab\u5347\u7ea7\u6210\u4e3a\u9b54\u6cd5\uff0c\u50a8\u5b58\u4e8e Dune V2 \u7684 \u9b54\u6cd5\u4e66  (../../spellbook/) \u4e2d\u3002 \n \u5b83\u4eec\u5728 \u6570\u636e\u6784\u5efa\u5de5\u5177 \uff08dbt\uff09  (https://docs.getdbt.com/docs/introduction) \u4e0a\u8fd0\u884c\u3002dbt \u4f7f\u5206\u6790\u5de5\u7a0b\u5e08\u80fd\u591f\u8fc7\u901a\u8fc7\u7b80\u5355\u5730\u7f16\u5199\u9009\u62e9\u8bed\u53e5\u6765\u8f6c\u6362\u671f\u6570\u636e\u4ed3\u5e93\u4e2d\u7684\u6570\u636e\uff0c\u5e76\u5c06\u8fd9\u4e9b\u9009\u62e9\u8bed\u53e5\u5904\u7406\u8f6c\u6362\u4e3a \u6570\u636e\u8868  (https://docs.getdbt.com/terms/table) \u548c \u89c6\u56fe  (https://docs.getdbt.com/terms/view) . \n \u8fd9\u5c06\u4f7f\u6570\u636e\u62bd\u8c61\u66f4\u52a0\u5065\u5168\u3001\u53ef\u6269\u5c55\u4e14\u66f4\u6613\u7528\u3002 \n \n \n Dune V2 \u4e2d\u7684\u6570\u636e\u62bd\u8c61/\u9b54\u6cd5  (../../spellbook/) \n \n \n ", "url": "https://dune.com/docs/zh/reference/dune-v2/#_2"}
{"content": "\u53cd\u9988 \u00b6 \n \u6700\u540e, \u7531\u4e8e\u67e5\u8be2\u5f15\u64ce\u4ecd\u5904\u4e8e\u6d4b\u8bd5  beta  \u9636\u6bb5\uff0c\u60a8\u53ef\u80fd\u4f1a\u9047\u5230\u6f0f\u6d1e\u6216\u8005\u6709\u6539\u8fdb\u5b83\u7684\u60f3\u6cd5\uff0c\u8bf7\u968f\u65f6\u5728\u6211\u4eec\u7684 #general-feedback Discord \u9891\u9053  (https://discord.com/channels/757637422384283659/1012706316755664926)  \u548c  Canny \u9762\u677f  (https://dune.canny.io) \u4e0a\u4e0e\u6211\u4eec\u5206\u4eab\u3002", "url": "https://dune.com/docs/zh/reference/dune-v2/#_3"}
{"content": "\u5982\u4f55\u83b7\u5f97\u652f\u6301 \u00b6 \n \u4f3c\u4e4e\u5982\u679c\u60a8\u627e\u4e0d\u5230\u60a8\u60f3\u8981\u7684\u5e2e\u52a9\uff0c\u4e0b\u9762\u662f\u6700\u597d\u7684\u65b9\u6cd5\uff1a \n ", "url": "https://dune.com/docs/zh/reference/support-feedback/#_1"}
{"content": "1. \u5c1d\u8bd5\u4f7f\u7528\u4e0a\u65b9\u7684\u641c\u7d22\u680f\u8fdb\u884c\u641c\u7d22 \u00b6 \n \u6211\u4eec\u77e5\u9053\u60a8\u53ef\u80fd\u5df2\u7ecf\u8fd9\u6837\u505a\u4e86\uff0c\u4f46\u4ee5\u9632\u4e07\u4e00:) \n ", "url": "https://dune.com/docs/zh/reference/support-feedback/#1"}
{"content": "2. Discord! \u00b6 \n \u4ee5\u4e0b\u662f\u4e00\u4e9b\u76f8\u5173\u7684\u652f\u6301\u6e20\u9053\uff1a \n \n #beginners  (https://discord.com/channels/757637422384283659/1016725609797402634)  - \u5982\u679c\u60a8\u521a\u521a\u5f00\u59cb\u5e76\u4e14\u6709\u4e00\u4e2a\u81ea\u6211\u611f\u89c9\u6bd4\u8f83\u611a\u8822\u7684\u95ee\u9898\uff08\u6ce8\u610f\uff1a\u53ef\u80fd\u4e0d\u662f\uff09\u3002 \n #query-questions  (https://discord.com/channels/757637422384283659/757641002138730588)  \u975e\u5e38\u9002\u5408\u5bfb\u6c42\u521b\u5efa\u67e5\u8be2\uff08building amazing queries\uff09\u65b9\u9762\u95ee\u9898\u7684\u5e2e\u52a9\u3002 \n #data-tables  (https://discord.com/channels/757637422384283659/757893948428517376)  \u662f\u4e00\u4e2a\u60a8\u5728 Dune \u4e2d\u5bfb\u627e\u4e0e\u6570\u636e\u76f8\u5173\u7684\u95ee\u9898\u7684\u5730\u65b9\u3002 \n #decoding  (https://discord.com/channels/757637422384283659/850326962152538122)  \u7528\u4e8e\u667a\u80fd\u5408\u7ea6\u89e3\u6790\u76f8\u5173\u95ee\u9898\u3002 \n #dashboards-visualizations  (https://discord.com/channels/757637422384283659/857199333136007200)  \u7528\u4e8e\u770b\u677f\u548c\u53ef\u89c6\u5316\u95ee\u9898\u3002 \n #spellbook  (https://discord.com/channels/757637422384283659/999683200563564655)  \u662f\u9488\u5bf9\u4e0e Spellbook \u76f8\u5173\u7684\u95ee\u9898\u3002  \n #dune-api  (https://discord.com/channels/757637422384283659/1019910980634939433)  \u7528\u4e8e API \u76f8\u5173\u95ee\u9898\u3002 \n \n ", "url": "https://dune.com/docs/zh/reference/support-feedback/#2-discord"}
{"content": "3. \u6bcf\u5468\u529e\u516c\u65f6\u95f4 \u00b6 \n \u6700\u540e\uff0c\u60a8\u53ef\u4ee5\u52a0\u5165\u6211\u4eec\u6bcf\u5468\u7684\u529e\u516c\u65f6\u95f4\u4ee5\u83b7\u5f97\u5b9e\u65f6\u5e2e\u52a9 - \u5728  \u6211\u4eec\u7684\u6d3b\u52a8\u65e5\u5386  (https://events.dune.com)  \u4e0a\u627e\u5230\u6211\u4eec\u4e0b\u4e00\u4e2a\u529e\u516c\u65f6\u95f4\u3002 \n ", "url": "https://dune.com/docs/zh/reference/support-feedback/#3"}
{"content": "\u5982\u4f55\u7559\u4e0b\u60a8\u7684\u53cd\u9988 \u00b6 \n \u5bf9\u4e8e Dune \u5e94\u7528\u7a0b\u5e8f\u7684\u4e00\u822c\u53cd\u9988\uff0c \u53ef\u4ee5\u5728Canny\u770b\u677f\u7559\u4e0b\u60a8\u7684\u5efa\u8bae  (https://feedback.dune.com/) . \n \u6211\u4eec\u5728 Discord \u4e2d\u4e5f\u6709 2 \u4e2a\u53cd\u9988\u6e20\u9053\uff1a \n \n #feedback  (https://discord.com/channels/757637422384283659/799689116920709170)  \u9488\u5bf9\u4e00\u822c\u53cd\u9988\u3002 \n #v2-feedback  (https://discord.com/channels/757637422384283659/1012706316755664926)  \u9488\u5bf9 Dune V2 \u7684\u7279\u5b9a\u53cd\u9988\u3002 \n \n \u5982\u679c\u60a8\u6b63\u5728\u4f7f\u7528\u6211\u4eec\u7684\u4efb\u4f55\u516c\u5171\u5b58\u50a8\u5e93\uff08\u4f8b\u5982 Spellbook \uff09\uff0c\u60a8\u8fd8\u53ef\u4ee5\u6253\u5f00 Github \u95ee\u9898\u3002 \n \u5bf9\u4e8e Docs \u53cd\u9988\u4fee\u590d\u6216\u6dfb\u52a0\uff0c\u5355\u51fb\u9875\u9762\u6807\u9898\u53f3\u4fa7\u7684\u94c5\u7b14\u56fe\u6807\u5e76\u6253\u5f00 GitHub \u95ee\u9898\u6216\u63d0\u4ea4\u62c9\u53d6\u8bf7\u6c42\uff1a \n \n ", "url": "https://dune.com/docs/zh/reference/support-feedback/#_2"}
{"content": "\u5e10\u6237\u95ee\u9898 \u00b6 \n \u6709\u5173\u60a8\u7684\u5e10\u6237\u3001\u8d39\u7528\u6216\u4efb\u4f55\u5176\u4ed6\u7ba1\u7406\u95ee\u9898\uff0c\u8bf7\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u81f3  support@dune.com  (mailto:support@dune.com) \u3002", "url": "https://dune.com/docs/zh/reference/support-feedback/#_3"}
{"content": "How Decommissioning will work \u00b6 \n The process below is the same for all blockchains, and will be completed by the above decommissioning dates. \n For Polygon and BNB the kickoff date was November 2nd, 2022, we will use that as an example here to give you a general sense of timelines:  \n ", "url": "https://dune.com/docs/zh/reference/v1-sunsetting/#how-decommissioning-will-work"}
{"content": "Week 0 -  (Nov 2nd, 2022) \u00b6 \n \n Kickoff of the decommissioning, no changes to V1 queries \n \n ", "url": "https://dune.com/docs/zh/reference/v1-sunsetting/#week-0-nov-2nd-2022"}
{"content": "Week 3 (Nov 23rd, 2022) \u00b6 \n \n Removal of the blockchain from the blockchain selection dropdown \n Existing queries are still editable on V1 \n \n ", "url": "https://dune.com/docs/zh/reference/v1-sunsetting/#week-3-nov-23rd-2022"}
{"content": "Week 6 (December 14th, 2022) \u00b6 \n \n V1 queries for the given blockchain will become read only, forking and updating on V2 will be required \n Data will continue to update and refreshed for the queries on V1 \n \n ", "url": "https://dune.com/docs/zh/reference/v1-sunsetting/#week-6-december-14th-2022"}
{"content": "Week 13 (January 31st, 2023) \u00b6 \n \n No new data will power queries for the chain on V1, decommission complete \n \n ", "url": "https://dune.com/docs/zh/reference/v1-sunsetting/#week-13-january-31st-2023"}
{"content": "To learn more and ask questions \u00b6 \n \n Check out our  V2 reference doc  (../dune-v2/)  to learn more about how V2 works. \n Check out our  Data Explorer guide  (../../getting-started/queries/data-explorer/)  to learn more about how searching in V2 works. \n Watch our  Dune Arcana  (https://dune.com/watch)  videos for general insights - they all use Dune V2! \n Join our live Office Hours  (https://events.dune.com/)  or ask in our  #query-questions Discord channel  (https://discord.com/channels/757637422384283659/757641002138730588) .", "url": "https://dune.com/docs/zh/reference/v1-sunsetting/#to-learn-more-and-ask-questions"}
{"content": "\u8df3\u8f6c\u81f3\n          (#hagaetc-dex) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/getting-started/use-cases/sector-dashboards.md) \n \u884c\u4e1a\u770b\u677f \n \u884c\u4e1a\u770b\u677f\u4f7f\u60a8\u80fd\u591f\u83b7\u5f97\u6574\u4e2a\u52a0\u5bc6\u884c\u4e1a\u7684\u7ecf\u6d4e\u6982\u51b5\uff0c\u5e76\u5b9e\u65f6\u5206\u6790\u6b63\u5728\u53d1\u751f\u7684\u4e8b\u60c5\u3002 \n \u8ba9\u6211\u4eec\u7528\u4e00\u4e9b\u4f8b\u5b50\u6765\u63a2\u8ba8\u8fd9\u4e2a\u95ee\u9898\uff1a \n ", "url": "https://dune.com/docs/zh/getting-started/use-cases/sector-dashboards/"}
{"content": "@kroeger0x  \u505a\u7684 \u71c3\u6599\u4ef7\u683c \u770b\u677f \u00b6 \n @kroeger0x \u8f7b\u6613\u5730\u6536\u96c6\u4e86\u5173\u4e8e\u6bcf\u4e2a\u4ea4\u6613\u7684\u5e73\u5747\u71c3\u6599\u6d88\u8017\u3001\u71c3\u6599\u6d88\u8017\u4e0a\u9650\u3001\u4e00\u4e2a\u533a\u5757\u7684\u603b\u71c3\u6599\u6d88\u8017\u91cf\u7b49\u6570\u636e\uff0c\u5e76\u8ba9\u6211\u4eec\u8f7b\u6613\u4f7f\u7528 Dune \u67e5\u770b\u3002 \n \n \n ", "url": "https://dune.com/docs/zh/getting-started/use-cases/ecosystem-dashboards/#kroeger0x"}
{"content": "@rchen8  \u505a\u7684  DeFi \u6e17\u900f\u7387 \u770b\u677f \u00b6 \n Richard Chen  (https://twitter.com/richardchen39)  \u96c6\u6210\u4e86\u6240\u6709\u91cd\u8981\u7684 DeFi \u534f\u8bae\u7684\u7528\u6237\u6570\u91cf\uff0c\u5e76\u5c06\u5b83\u4eec\u7eb3\u5165\u4e00\u4e2a\u770b\u677f\u3002", "url": "https://dune.com/docs/zh/getting-started/use-cases/ecosystem-dashboards/#rchen8-defi"}
{"content": "@hagaetc  \u505a\u7684  Dex \u6307\u6807 \u770b\u677f \u00b6 \n \u8fd9\u4e2a\u770b\u677f\u5141\u8bb8\u60a8\u67e5\u770b\u6570\u636e\uff0c\u5e76\u5feb\u901f\u4e86\u89e3\u6574\u4e2a\u53bb\u4e2d\u5316\u4ea4\u6613\u6240\u9886\u57df\u7684\u60c5\u51b5\u3002 \n \u5728\u8fd9\u91cc\u60a8\u53ef\u4ee5\u770b\u5230\u6240\u6709\u4ea4\u6613\u6240\u7684 Dex \u4ea4\u6613\u91cf\u3001\u5e02\u573a\u4efd\u989d\u548c\u603b\u4ea4\u6613\u91cf\u7b49\u6307\u6807\uff0c\u4ee5\u53ca\u5176\u5b83\u66f4\u591a\u7edf\u8ba1\u6570\u636e\u3002 \n \u5b83\u4eec\u4e00\u8d77\u4f7f\u60a8\u5f88\u5bb9\u6613\u6bd4\u8f83\u4e0d\u540c\u7684 DEX \u7684\u8868\u73b0\uff0c\u5e76\u8bc4\u4f30\u6574\u4e2a\u884c\u4e1a\u7684\u8868\u73b0\u3002 \n \u6240\u6709\u8fd9\u4e9b\u7edf\u8ba1\u6570\u636e\u548c\u56fe\u8868\u90fd\u662f\u5b9e\u65f6\u66f4\u65b0\u7684\uff0c\u5e76\u7531\u793e\u533a\u7ef4\u62a4\uff1b\u5982\u679c\u4e00\u4e2a\u65b0\u7684 DEX \u60f3\u88ab\u6dfb\u52a0\u5230\u8fd9\u4e2a\u770b\u677f\u4e2d\uff0c\u4ed6\u4eec\u6240\u8981\u505a\u7684\u5c31\u662f\u628a\u4ed6\u4eec\u7684\u4ee3\u7801\u63d0\u4ea4\u5230\u6211\u4eec\u7684\u516c\u5171 GitHub \u4e0a\u3002\u66f4\u591a\u5185\u5bb9\u8bf7\u89c1 \u9b54\u6cd5  (../../../reference/tables/spells/) \u3002 \n \n \n \n ", "url": "https://dune.com/docs/zh/getting-started/use-cases/sector-dashboards/#hagaetc-dex"}
{"content": "@0xBoxer  \u505a\u7684 \u6307\u6570 \u770b\u677f \u00b6 \n \u53e6\u4e00\u4e2a\u6709\u8da3\u7684\u57fa\u4e8e\u884c\u4e1a\u7684 Dune \u770b\u677f\u6db5\u76d6\u4e86\u6307\u6570\u3002 \n \u5728\u8fd9\u91cc\uff0c\u60a8\u4e5f\u53ef\u4ee5\u8f7b\u677e\u5730\u8bc4\u4f30\u4e00\u4e2a\u884c\u4e1a\u7684\u6574\u4f53\u72b6\u51b5\uff0c\u8f7b\u6613\u5730\u6bd4\u8f83\u4e0d\u540c\u4ea7\u54c1\u548c\u9879\u76ee\u3002 \n \n \n \n ", "url": "https://dune.com/docs/zh/getting-started/use-cases/sector-dashboards/#0xboxer"}
{"content": "@drethereum  \u505a\u7684 \u501f\u8d37 \u770b\u677f \u00b6 \n \u8fd9\u540c\u6837\u9002\u7528\u4e8e\u501f\u8d37\u534f\u8bae\uff0c\u60a8\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u68c0\u67e5\u8d37\u6b3e\u4f5c\u4e3a\u4e00\u4e2a\u884c\u4e1a\u7684\u72b6\u6001\uff0c\u5e76\u6bd4\u8f83\u534f\u8bae\u4e4b\u95f4\u7684\u8868\u73b0\u3002", "url": "https://dune.com/docs/zh/getting-started/use-cases/sector-dashboards/#drethereum"}
{"content": "", "url": "https://dune.com/docs/resources/images/dune-icon-only%402x.png"}
{"content": "", "url": "https://dune.com/docs/resources/images/dune-icon-only.svg"}
{"content": "", "url": "https://dune.com/docs/resources/images/dune-vertical-logo-dark%402x.png"}
{"content": "", "url": "https://dune.com/docs/resources/images/dune-vertical-logo%402x.png"}
{"content": "", "url": "https://dune.com/docs/resources/images/dune-vertical-logo.svg"}
{"content": "", "url": "https://dune.com/docs/resources/images/dune-standard-logo-dark%402x.png"}
{"content": "", "url": "https://dune.com/docs/resources/images/dune-standard-logo-dark.svg"}
{"content": "", "url": "https://dune.com/docs/resources/images/dune-standard-logo%402x.png"}
{"content": "", "url": "https://dune.com/docs/resources/images/dune-standard-logo.svg"}
{"content": "\u8df3\u8f6c\u81f3\n          (#poma-tornadocash) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/getting-started/use-cases/project-dashboards.md) \n \u9879\u76ee\u770b\u677f \n \u9879\u76ee\u770b\u677f\u4f7f\u60a8\u80fd\u591f\u8f7b\u677e\u5730\u5c06\u60a8\u559c\u6b22\u7684\u9879\u76ee\u7684\u6570\u636e\u6c47\u96c6\u5230\u4e00\u4e2a\u5730\u65b9\u3002 \n \u65e0\u9700\u7ef4\u62a4\u57fa\u7840\u8bbe\u65bd\u6216\u5f00\u9500\uff0c\u60a8\u53ef\u4ee5\u7b80\u5355\u5730\u67e5\u8be2\u60a8\u60f3\u8981\u7684\u6570\u636e\uff0c\u5e76\u5c06\u5176\u96c6\u5408\u5728\u770b\u677f\u4e0a\uff0c\u4e3a\u60a8\u7684\u9879\u76ee\u5b9e\u73b0\u4e00\u4e2a\u6570\u636e\u4e2d\u5fc3\u3002 \n \u8ba9\u6211\u4eec\u7528\u4e00\u4e2a\u4f8b\u5b50\u6765\u63a2\u8ba8\u8fd9\u4e2a\u95ee\u9898\uff1a \n ", "url": "https://dune.com/docs/zh/getting-started/use-cases/project-dashboards/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#dune) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/getting-started/use-cases/index.md) \n \u7528\u4f8b \n ", "url": "https://dune.com/docs/zh/getting-started/use-cases/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#dune-5) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/getting-started/guides/video-tutorial.md) \n \u89c6\u9891\u6559\u7a0b \n \n Note \n \u4ee5\u4e0b\u8fd9\u4e9b\u89c6\u9891\u4f7f\u7528\u7684\u90fd\u662f\u6211\u4eec\u7684 Dune V1 \u5f15\u64ce\u3002\u867d\u7136\u4e00\u822c\u6027\u7684\u6982\u5ff5\u5747\u9002\u7528\uff0c\u4f46\u5728 Dune V2 \u5f15\u64ce\u4e2d\uff0c\u67d0\u4e9b\u67e5\u8be2\u6267\u884c\u7684\u5177\u4f53\u7ec6\u8282\u4f1a\u6709\u6240\u4e0d\u540c\u3002 \n \n \u6211\u4eec\u5df2\u7ecf\u5236\u4f5c\u4e86\u4e00\u4e2a\u89c6\u9891\u6559\u7a0b\u7cfb\u5217\uff0c\u8bf7\u53c2\u9605\u4ee5\u4e0b\u7cfb\u5217\uff0c\u6216\u5173\u6ce8\u6211\u4eec\u7684  Youtube \u9891\u9053  (https://www.youtube.com/playlist?list=PLK3b5d4iK10ext4v-GBySekaA8-GP8quD) . \n ", "url": "https://dune.com/docs/zh/getting-started/guides/video-tutorial/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#andrew-hong) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/getting-started/guides/sql-guides.md) \n SQL \u6559\u7a0b \n \u8981\u6210\u4e3a\u4e00\u540d\u51fa\u8272\u7684 Dune \u5deb\u5e08\uff0c\u60a8\u9700\u8981\u5bf9 SQL \u6709\u5f88\u597d\u7684\u7406\u89e3\uff0c\u4ee5\u4fbf\u4ece Dune \u7684\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\u6570\u636e\u3002 \n \u6211\u4eec\u5728\u6b64\u6c47\u603b\u4e86\u4e00\u4e9b\u8d44\u6e90\uff0c\u6211\u4eec\u8ba4\u4e3a\u5bf9\u60a8\u6210\u957f\u4e3a\u4e00\u540d Dune \u5deb\u5e08\u4f1a\u6709\u6240\u5e2e\u52a9\u3002 \n \u57fa\u7840 SQL  (#__tabbed_1_1) PostgreSQL  (#__tabbed_1_2) Databricks SQL  (#__tabbed_1_3) \n \n \n ", "url": "https://dune.com/docs/zh/getting-started/guides/sql-guides/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#dune) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/getting-started/guides/dune-guides.md) \n Dune \u6559\u7a0b \n \u6211\u4eec\u4e00\u4e9b\u6700\u597d\u7684\u5deb\u5e08\u793e\u533a\u6210\u5458\u4e3a Dune \u5236\u4f5c\u4e86\u51fa\u8272\u7684\u4e66\u9762\u6559\u7a0b\u3002 \n \u8fd9\u4e9b\u6559\u7a0b\u90fd\u5f88\u597d\uff0c\u6211\u4eec\u63a8\u8350\u60a8\u9605\u8bfb\u6240\u6709\u7684\u6559\u7a0b\uff0c \u5341\u5206\u611f\u8c22 \u521b\u5efa\u8fd9\u4e9b\u6559\u7a0b\u7684\u5deb\u5e08\u4eec\u3002 \n \u4f60\u4eec\u771f\u4e86\u4e0d\u8d77\uff01\ud83e\ude84 \n ", "url": "https://dune.com/docs/zh/getting-started/guides/dune-guides/"}
{"content": "Please wait \n This application is starting, you will be redirected once it is ready. \n If your are the application owner, check your logs for details.", "url": "https://dune.com/docs/zh/getting-started/teams/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/getting-started/decoding-contracts.md) \n \u5df2\u89e3\u6790\u5408\u7ea6 \n Dune \u5305\u542b\u4e86\u5927\u91cf\u7684\u5df2\u89e3\u6790\u5408\u7ea6\u76ee\u5f55\uff0c\u8fd9\u4e9b\u5408\u7ea6\u662f\u901a\u8fc7\u5deb\u5e08\u63d0\u4ea4\u5230\u5e73\u53f0\u4e0a\u7684\uff01 \n \u5728\u667a\u80fd\u5408\u7ea6\u7684 ABI\uff08 \u5e94\u7528\u4e8c\u8fdb\u5236\u63a5\u53e3  (https://www.alchemy.com/overviews/what-is-an-abi-of-a-smart-contract-examples-and-usage) \uff09\u4e2d\u5b9a\u4e49\u7684\u6bcf\u4e2a\u4e8b\u4ef6\u548c\u529f\u80fd\uff0c\u5408\u7ea6\u88ab\u89e3\u6790\u6210\u4eba\u7c7b\u53ef\u8bfb\u7684\u6570\u636e\u8868\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u539f\u59cb\u4ea4\u6613\u3001\u65e5\u5fd7\u548c\u8ddf\u8e2a\u6570\u636e\u3002 \n \u5728\u6b64  (../../tables/decoded/) \u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u89e3\u6790\u7684\u5de5\u4f5c\u539f\u7406\u548c\u6709\u54ea\u4e9b\u5df2\u89e3\u6790\u7684\u6570\u636e\u8868\u3002 \n ", "url": "https://dune.com/docs/zh/getting-started/decoding-contracts/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#dashboards) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/getting-started/dune-explorer.md) \n Dune \u6d4f\u89c8\u5668 \n Here's a quick overview of the Dune Explorer! \n We'll quickly review the different ways you can search for Dashboards, Queries, and Wizards to find inspiration... and forkable Queries to help you get to making \ud83d\udcab faster. \n When you head to  dune.com  (https://dune.com) , you'll land on the Dashboards section of the Dune Explorer. \n You'll also see tabs at the top for Queries, Wizards, and Teams. \n ", "url": "https://dune.com/docs/zh/getting-started/dune-explorer/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/getting-started/embeds.md) \n \u5d4c\u5165\u7b2c\u4e09\u65b9\u5e73\u53f0 \n \u622a\u56fe\u662f\u65e0\u8da3\u548c\u8fc7\u65f6\u7684 \n \u4e3a\u4e86\u4f7f\u60a8\u4e0d\u5fc5\u62cd\u6444\u53ef\u80fd\u770b\u8d77\u6765\u4e0d\u90a3\u4e48\u597d\uff0c\u4f46\u5728\u60a8\u62cd\u6444\u51e0\u5206\u949f\u540e\u80af\u5b9a\u4f1a\u8fc7\u65f6\u7684\u5c4f\u5e55\u622a\u56fe\uff0c\u6211\u4eec\u5df2\u7ecf\u5efa\u7acb\u4e86\u4e00\u4e2a\u539f\u751f\u7684\u5d4c\u5165\u529f\u80fd\uff0c\u53ef\u4ee5\u5728\u5927\u591a\u6570\u7f51\u7edc\u5e73\u53f0\u4e0a\u4f7f\u7528\u3002 \n \u60a8\u53ef\u4ee5\u901a\u8fc7\u70b9\u51fb\u4efb\u4f55\u67e5\u8be2\u6807\u9898\u5e76\u9009\u62e9\u53f3\u4e0a\u89d2\u7684\u5d4c\u5165\u529f\u80fd\u6765\u751f\u6210\u5d4c\u5165\u94fe\u63a5\u3002 \n \n \u6ce8\u610f \n \u5d4c\u5165\u6309\u94ae\u65e2\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u72ec\u7acb\u7684\u94fe\u63a5\uff0c\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u79cd\u5c06\u60a8\u7684\u5b9e\u65f6\u56fe\u8868\u5d4c\u5165\u5230\u7f51\u7ad9/\u5e94\u7528\u7a0b\u5e8f\u7684\u65b9\u5f0f\u3002\u5982\u679c\u4e00\u4e2a\u67e5\u8be2\u6ca1\u6709\u88ab\u53ef\u89c6\u5316\uff0c\u8be5\u94fe\u63a5\u5c06\u6307\u5411\u67e5\u8be2\u7ed3\u679c\u8868\u3002\u5982\u679c\u60a8\u6709\u591a\u4e2a\u53ef\u89c6\u5316\u5185\u5bb9\uff0c\u94fe\u63a5\u5c06\u662f\u60a8\u70b9\u51fb\u5d4c\u5165\u6309\u94ae\u65f6\u9009\u62e9\u7684\u4efb\u4f55\u4e00\u4e2a\u53ef\u89c6\u5316\u5185\u5bb9\u3002 \n \n \n ", "url": "https://dune.com/docs/zh/getting-started/embeds/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/getting-started/dashboards.md) \n \u6570\u636e\u770b\u677f \n \u6570\u636e\u770b\u677f\u662f Dune \u7684\u5185\u5bb9\u5b58\u5728\u548c\u88ab\u53d1\u73b0\u7684\u5730\u65b9\u3002 \n Dune \u4e0a\u7684\u6570\u636e\u770b\u677f\u7531\u90e8\u4ef6\u7ec4\u6210\u3002\u90e8\u4ef6\u53ef\u4ee5\u662f\u53ef\u89c6\u5316\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u6587\u672c\u6846\u3002\u4e5f\u53ef\u4ee5\u5728\u6587\u672c\u6846\u5185\u5d4c\u5165\u56fe\u7247/GIF\u3002 \n \u60a8\u53ef\u4ee5\u81ea\u7531\u8c03\u6574\u6bcf\u4e2a\u90e8\u4ef6\u7684\u5927\u5c0f\uff0c\u4ee5\u914d\u5408\u60a8\u60f3\u8981\u521b\u5efa\u7684\u5e03\u5c40\u3002 \n ", "url": "https://dune.com/docs/zh/getting-started/dashboards/"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/reference/wizard-tools/index.md) \n \u5deb\u5e08\u5de5\u5177 \n \u8fd9\u91cc\u6709\u4e00\u4e9b\u5f88\u68d2\u7684 \u975e-Dune \u5de5\u5177\u5e2e\u52a9\u6211\u4eec\u5deb\u5e08\u521b\u4f5c \ud83c\udf87\u3002 \n \n OpenZepplin's ERC-xxx Standards Docs  (https://docs.openzeppelin.com/contracts/4.x/tokens)  \u6709\u52a9\u4e8e\u4e86\u89e3\u6bcf\u4e2a ERC-xxx \u6807\u51c6\u7684\u5de5\u4f5c\u539f\u7406\u3002 \n The EVM Handbook  (https://noxx3xxon.notion.site/noxx3xxon/The-EVM-Handbook-bb38e175cc404111a391907c4975426d)  \u662f\u4e00\u4e2a\u5bf9\u6709\u62b1\u8d1f\u7684\u533a\u5757\u94fe\u6570\u636e\u5206\u6790\u5e08\u7684 EVM \u8d44\u6e90\u7cbe\u9009\u5217\u8868\u3002 \n Solidity Visual Developer for VS Code  (https://marketplace.visualstudio.com/items?itemName=tintinweb.solidity-visual-auditor)  \u662f\u4e00\u5957\u6709\u7528\u7684\u5de5\u5177\uff0c\u7528\u4e8e\u5728 VS Code \u4e2d\u8fdb\u884c\u667a\u80fd\u5408\u7ea6\u5ba1\u8ba1\u3002 \n deth.net  (https://deth.net)  \u662f\u4e00\u7ec4\u4ee5\u592a\u574a\u5f00\u53d1\u8005\u5de5\u5177\uff0c\u53ef\u5e2e\u52a9\u8fdb\u884c\u533a\u5757\u94fe\u6570\u636e\u4fa6\u67e5\u3002 \n ZK Zhao's map of the Crypto Data Landscape  (https://twitter.com/zk7hao/status/1576492616715116547)  \u6709\u52a9\u4e8e\u4e86\u89e3\u5f53\u524d\u7684\u52a0\u5bc6\u6570\u636e\u751f\u6001\u7cfb\u7edf\u3002 \n His Chaininsight tool  (https://twitter.com/zk7hao/status/1361948073300164609?cxt=HHwWgoCs-dCjzuYlAAAA)  \u4e5f\u5f88\u9177\uff0c\u53ef\u4ee5\u5e2e\u52a9\u60a8\u5728\u5176\u4ed6\u4eba\u4e4b\u524d\u6784\u5efa\u4e0b\u4e00\u4e2a\u8d8b\u52bf\u770b\u677f \ud83e\uddd9 \n Our Recommended Reading List  (../recommended-reading/)  for a bunch of guides on crypto data topics and projects to check out. \n DeepDAO  (https://deepdao.io/organizations)  - stats on DAOs and their treasuries. \n DethCode  (https://etherscan.deth.net)  lets you go into an Ethereum smart contract's code to read the comments or the actual logic can help to understand the smart contract's emitted data.", "url": "https://dune.com/docs/zh/reference/wizard-tools"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/reference/tables/v2/decoded"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/dune-v2/tables/raw/solana/index.md"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/spellbook/spellbook-model-docs/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/getting-started/visualizations/other-visualizations.md) \n \u5176\u5b83\u53ef\u89c6\u5316 \n \u4e0b\u9762\u662f\u4e00\u4e9b\u60a8\u53ef\u4ee5\u7528 Dune \u5236\u4f5c\u7684\u975e\u56fe\u5f62\u53ef\u89c6\u5316\u5185\u5bb9! \n ", "url": "https://dune.com/docs/zh/getting-started/visualizations/other-visualizations/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/getting-started/visualizations/charts-graphs.md) \n \u56fe\u8868 & \u56fe\u5f62 \n \u56fe\u5f62\u662f\u5c06\u6570\u636e\u70b9\u6d53\u7f29\u4e3a\u4e00\u4e2a\u53ef\u89c6\u5316\u7684\u597d\u529e\u6cd5\u3002 \n \u901a\u8fc7 Dune\uff0c\u60a8\u53ef\u4ee5\u521b\u5efa\u4ee5\u4e0b\u7c7b\u578b\u7684\u56fe\u5f62\uff1a \n \u67f1\u72b6\u56fe  (#__tabbed_1_1) \u533a\u57df\u56fe  (#__tabbed_1_2) \u6563\u70b9\u56fe  (#__tabbed_1_3) \u7ebf\u72b6\u56fe  (#__tabbed_1_4) \u997c\u72b6\u56fe  (#__tabbed_1_5) \u6df7\u5408\u56fe  (#__tabbed_1_6) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \u53ea\u8981\u60a8\u7684\u57fa\u7840\u56fe\u4e0d\u662f\u997c\u72b6\u56fe\uff0c\u60a8\u5c31\u53ef\u4ee5\u5728\u4e00\u4e2a\u53ef\u89c6\u5316\u4e2d\u6df7\u5408\u6240\u6709\u8fd9\u4e9b\u56fe\u5f62\u7c7b\u578b\uff1a \n \n \n \n \n \u6240\u6709\u7684\u53ef\u89c6\u5316\u56fe\u5f62\u90fd\u6709\u4e00\u5957\u5171\u540c\u7684\u7f16\u8f91\u9009\u9879\uff0c\u8bf7\u770b\u4e0b\u9762\u7684\u9009\u9879\u6807\u7b7e\uff0c\u4e86\u89e3\u5982\u4f55\u914d\u7f6e\u6bcf\u4e2a\u9009\u9879\u3002 \n \n ", "url": "https://dune.com/docs/zh/getting-started/visualizations/charts-graphs/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/getting-started/visualizations/index.md) \n \u53ef\u89c6\u5316 \n \u968f\u7740\u60a8\u901a\u8fc7 \u67e5\u8be2  (../../getting-started/queries) \u6536\u96c6\u548c\u7ec4\u7ec7\u533a\u5757\u94fe\u6570\u636e\uff0c\u73b0\u5728\u662f\u65f6\u5019\u7528\u53ef\u89c6\u5316\u589e\u52a0\u4e00\u70b9 \u2728 \u4e86\u3002 \n \u6709\u4e86 Dune\uff0c\u60a8\u6709\u591a\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5c06\u60a8\u7684\u67e5\u8be2\u6570\u636e\u8f6c\u5316\u4e3a\u53ef\u89c6\u5316\u6570\u636e\uff1a \n \u56fe\u8868\u53ef\u89c6\u5316  (charts-graphs/) \n \n \u67f1\u72b6\u56fe \n \u533a\u57df\u56fe \n \u6563\u70b9\u56fe \n \u7ebf\u72b6\u56fe \n \u997c\u72b6\u56fe \n \n \u5176\u5b83\u53ef\u89c6\u5316  (other-visualizations/) \n \n \u8ba1\u6570\u5668 \n \u6570\u636e\u8868 \n \n \u4ee5\u4e00\u79cd\u5468\u5230\u7684\u65b9\u5f0f\u5c06\u8fd9\u4e9b\u7ed3\u5408\u8d77\u6765\uff0c\u4f7f\u60a8\u80fd\u591f\u5c06\u60a8\u7684\u6570\u636e\u901a\u8fc7 \u6570\u636e\u770b\u677f  (../dashboards/) \u548c \u5d4c\u5165  (../embeds/) \u4ee5\u6700\u597d\u7684\u65b9\u5f0f\u4f20\u8fbe\u7ed9\u60a8\u7684\u53d7\u4f17\u3002 \n ", "url": "https://dune.com/docs/zh/getting-started/visualizations/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/getting-started/queries/tips.md) \n \u67e5\u8be2\u6280\u5de7 \n \u4e0b\u9762\u60a8\u4f1a\u53d1\u73b0\u4e00\u4e9b\u4e0e\u67e5\u8be2\u76f8\u5173\u7684\u6280\u5de7\uff0c\u4ee5\u5e2e\u52a9\u60a8\u6210\u4e3a\u4e00\u540d\u66f4\u5f3a\u5927\u7684\u5deb\u5e08 \ud83e\uddd9\u3002 \n \u5982\u679c\u60a8\u6709\u4e00\u4e2a\u60a8\u8ba4\u4e3a\u6211\u4eec\u5e94\u8be5\u6dfb\u52a0\u7684\u6280\u5de7\u8d34\u58eb\uff0c\u8bf7 \u5728\u6211\u4eec\u7684 GitHub repository \u4e2d\u5bf9\u8be5\u6587\u6863\u63d0\u51fa\u4fee\u6539\u610f\u89c1  (https://github.com/duneanalytics/docs/edit/master/docs/features/queries/tips.md) ! \n ", "url": "https://dune.com/docs/zh/getting-started/queries/tips/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/getting-started/queries/parameters.md) \n \u53c2\u6570 \n ", "url": "https://dune.com/docs/zh/getting-started/queries/parameters/"}
{"content": "@poma  \u505a\u7684  Tornado.Cash \u00b6 \n \u8fd9\u4e2a\u770b\u677f\u628a\u4e0e\u4e00\u4e2a\u534f\u8bae\u2014\u2014Tornado Cash\u2014\u2014\u76f8\u5173\u7684\u8bb8\u591a\u91cd\u8981\u6307\u6807\u96c6\u6210\u5728\u4e00\u5904\u3002 \n \n \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c@poma \u60f3\u5411\u6211\u4eec\u5c55\u793a\u4e00\u4e9b\u201c\u4e00\u76ee\u4e86\u7136\u201d\u7684\u8ba1\u6570\u5668\uff0c\u4f7f\u91cd\u8981\u7684\u6570\u636e\uff0c\u5982\u603b\u5b58\u6b3e\u548c\u72ec\u7acb\u7528\u6237\u6570\uff0c\u6613\u4e8e\u88ab\u4efb\u4f55\u4eba\u67e5\u770b\u548c\u7406\u89e3\u3002 \n \n @poma \u63a5\u7740\u8bf4\u4e86\u4e00\u4e9b\u6709\u8da3\u7684\u5386\u53f2\u6570\u636e\u70b9\uff0c\u663e\u793a\u4e86\u7528\u6237\u6570\u548c\u4ea4\u6613\u91cf\u7684\u589e\u957f\u3002\u770b\u677f\u8fd8\u6709\u5f88\u591a\u5185\u5bb9\uff0c\u4f46\u60a8\u5df2\u7ecf\u53ef\u4ee5\u6e05\u695a\u5730\u770b\u5230\u8fd9\u4e9b\u7edf\u8ba1\u548c\u56fe\u8868\u53ef\u4ee5\u4e3a\u516c\u53f8\u3001\u534f\u8bae\u6216\u793e\u533a\u4ea7\u751f\u591a\u5927\u7684\u4ef7\u503c\u3002 \n \u60a8\u53ef\u4ee5\u5728  Dune \u9879\u76ee\u9875  (https://dune.com/projects) \u770b\u5230\u8bb8\u591a\u5176\u5b83\u5f88\u68d2\u7684\u770b\u677f\u3002", "url": "https://dune.com/docs/zh/getting-started/use-cases/project-dashboards/#poma-tornadocash"}
{"content": "Dune \u662f\u4e00\u4e2a\u5f00\u653e\u5e73\u53f0 \u00b6 \n Dune \u662f\u4e00\u4e2a\u533a\u5757\u94fe\u6570\u636e\u5206\u6790\u5e73\u53f0\uff0c\u4e3a\u51e0\u4e2a\u4e0d\u540c\u7684\u7fa4\u4f53\u670d\u52a1\uff1a \n \n \n Dune \u65c1\u89c2\u8005  \u53ef\u4ee5\u901a\u8fc7 Dune.com \u4e0a\u7684\u770b\u677f\u67e5\u770b\u5404\u79cd\u94fe\u4e0a\u6570\u636e\uff0c\u4f7f\u5176\u53d8\u5f97\u6709\u8da3\u548c\u53ef\u7406\u89e3\u3002 \n \n \n Dune \u5deb\u5e08  \u662f\u9b54\u672f\u5e08\uff0c\u4ed6\u4eec\u5229\u7528 Dune \u5e73\u53f0\u83b7\u53d6\u7684\u539f\u59cb\u6570\u636e\uff0c\u901a\u8fc7 \u6570\u636e\u770b\u677f  (../dashboards/) \u3001 \u53ef\u89c6\u5316  (../visualizations/) \u548c \u67e5\u8be2  (../queries/) \u6765\u8bb2\u8ff0\u6545\u4e8b\u3002 \n \n \n Dune \u8d5e\u52a9\u8005  \u5305\u62ec\u52a0\u5bc6\u793e\u533a\u3001\u534f\u8bae\u548c\u516c\u53f8\uff0c\u4ed6\u4eec\u5728 Dune \u5deb\u5e08\u7684\u5e2e\u52a9\u4e0b\uff0c\u5229\u7528 Dune \u7684\u529b\u91cf\u6765\u89e3\u51b3\u95ee\u9898\uff0c\u5e76\u5728\u5176\u7ec4\u7ec7\u5185\u5206\u4eab\u89c1\u89e3\u3002 \n \n \n ", "url": "https://dune.com/docs/zh/getting-started/use-cases/#dune"}
{"content": "Dune \u662f\u7528\u6765\u505a\u4ec0\u4e48\u7684\uff1f \u00b6 \n \u51e0\u4e4e\u6574\u4e2a\u533a\u5757\u94fe\u6570\u636e\u5206\u6790\u7684\u4e16\u754c\u90fd\u53ef\u4ee5\u7528 Dune \u6765\u63a2\u7d22\u2014\u2014\u5bf9\u60a8\u6765\u8bf4\uff0c\u60a8\u53ef\u4ee5\u7528 Dune \u67e5\u8be2\u548c\u53ef\u89c6\u5316\u7684\u5185\u5bb9\u51e0\u4e4e\u6ca1\u6709\u9650\u5236\u3002 \n \u4e5f\u5c31\u662f\u8bf4\uff0c\u4e3a\u4e86\u5e2e\u52a9\u60a8\u66f4\u6e05\u695a\u5730\u4e86\u89e3\u60a8\u53ef\u4ee5\u63a2\u7d22\u548c\u89e3\u51b3\u7684\u95ee\u9898\u7c7b\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u5efa\u7acb\u4e00\u4e9b\u5e7f\u6cdb\u7684\u7528\u4f8b\uff1a \n \n \n \u9879\u76ee\u770b\u677f  (project-dashboards/) \n \u884c\u4e1a\u770b\u677f  (sector-dashboards/) \n \u751f\u6001\u770b\u677f  (ecosystem-dashboards/) \n \n \n ", "url": "https://dune.com/docs/zh/getting-started/use-cases/#dune_1"}
{"content": "\u5728 Dune \u4e0a\u4ea7\u751f\u7684\u662f\u4ec0\u4e48\u7c7b\u578b\u7684\u5185\u5bb9\uff1f \u00b6 \n \u4e3a\u4e86\u66f4\u6df1\u5165\u5730\u4e86\u89e3\u4eba\u4eec\u5982\u4f55\u4f7f\u7528 Dune\uff0c\u60a8\u53ef\u4ee5\u5173\u6ce8\u6211\u4eec\u7684\u63a8\u7279\u8d26\u6237\uff0c\u5728\u90a3\u91cc\u6211\u4eec\u4f1a\u8f6c\u53d1\u5728 Dune \u4e0a\u53d1\u751f\u7684\u6700\u6709\u8da3\u7684\u4e8b\u60c5\u3002 \n \u53ea\u8981\u70b9\u51fb\u4e00\u4e0b\u6700\u8fd1\u7684\u51e0\u6761\u63a8\u6587\uff0c\u5c31\u53ef\u4ee5\u770b\u5230\u4eba\u4eec\u76ee\u524d\u5728 Dune \u4e0a\u7684\u6d3b\u52a8\u4e86\uff01", "url": "https://dune.com/docs/zh/getting-started/use-cases/#dune_2"}
{"content": "Dune 5 \u5206\u949f \u26a1 \u6781\u901f\u4ecb\u7ecd \u00b6 \n \n ", "url": "https://dune.com/docs/zh/getting-started/guides/video-tutorial/#dune-5"}
{"content": "\u7cfb\u5217\u6559\u7a0b\u4ecb\u7ecd \u00b6 \n \n ", "url": "https://dune.com/docs/zh/getting-started/guides/video-tutorial/#_1"}
{"content": "\u7b2c 1 \u96c6\uff1aDune \u7684\u4f7f\u7528\u6848\u4f8b\u548c\u5e94\u7528 \u00b6 \n \n ", "url": "https://dune.com/docs/zh/getting-started/guides/video-tutorial/#1-dune"}
{"content": "\u7b2c 2 \u96c6\uff1aDune \u6570\u636e\u5e93\u5982\u4f55\u8fd0\u4f5c \u00b6 \n \n ", "url": "https://dune.com/docs/zh/getting-started/guides/video-tutorial/#2-dune"}
{"content": "\u7b2c 3.1 \u96c6\uff1a\u5982\u4f55\u4f7f\u7528 Dune \u67e5\u8be2\u6765\u91cd\u73b0 Fees.wtf \u00b6", "url": "https://dune.com/docs/zh/getting-started/guides/video-tutorial/#31-dune-feeswtf"}
{"content": "Andrew Hong     \u00b6 \n \n \u5b66\u4e60\u4ee5\u592a\u574a\u540c\u65f6\u7684\u521d\u7ea7 SQL \u6559\u7a0b  (https://towardsdatascience.com/your-guide-to-basic-sql-while-learning-ethereum-at-the-same-time-9eac17a05929)  (\u7b2c\u4e00\u90e8\u5206) \n \u5b66\u4e60\u4ee5\u592a\u574a\u540c\u65f6\u7684\u4e2d\u7ea7 SQL \u6559\u7a0b  (https://towardsdatascience.com/your-guide-to-intermediate-sql-while-learning-ethereum-at-the-same-time-7b25119ef1e2?source=user_profile---------6----------------------------)  (\u7b2c\u4e8c\u90e8\u5206) \n \u5b66\u4e60 SQL \u548c\u4ee5\u592a\u574a  (https://towardsdatascience.com/learning-sql-and-ethereum-part-3-5422f080ad36)  (\u7b2c\u4e09\u90e8\u5206) \n \u4ee5\u592a\u574a\u4e0a\u7684SQL\uff1a\u5982\u4f55\u5904\u7406\u4ea4\u6613\u4e2d\u7684\u6240\u6709\u6570\u636e  (https://ath.mirror.xyz/mbR1n_CvflL1KIKCTG42bnM4HpfGBqDPNndH8mu2eJw) \n \n ", "url": "https://dune.com/docs/zh/getting-started/guides/sql-guides/#andrew-hong"}
{"content": "Twigblock \u00b6 \n \n SQL \u5165\u95e8  (https://www.twigblock.com/projects/eth-intro-dune/t/sql-basics) \n \n \n \n \n \n FreecodeCamp.org  (https://www.youtube.com/watch?v=qw--VYLpxG4)  \u89c6\u9891\u64ad\u653e\u5217\u8868\uff08\u514d\u8d39\uff09 \n \n \n Amigoscode  (https://www.youtube.com/watch?v=5hzZtqCNQKk)  Youtube \u89c6\u9891\uff08\u514d\u8d39\uff09 \n \n \n UDEMY \u8bfe\u7a0b SQL & PostgreSQL \u521d\u5b66\u8005\u8bfe\u7a0b  (https://www.udemy.com/course/sql-and-postgresql-for-beginners/?ranMID=39197\\&ranEAID=JVFxdTr9V80\\&ranSiteID=JVFxdTr9V80-nnMsdWXzWeu9lqxtbEa72g\\&utm_source=aff-campaign\\&LSNPUBID=JVFxdTr9V80\\&utm_medium=udemyads)  ($10) \n \n \n SQL\u6a21\u5f0f \u6559\u7a0b  (https://mode.com/sql-tutorialhttps://www.datacamp.com/courses/introduction-to-sql)  \uff08\u514d\u8d39\uff09 \n \n \n DataCamp \u7684 SQL \u5165\u95e8  (https://www.datacamp.com/courses/introduction-to-sql)  \uff08\u514d\u8d39\uff09 \n \n \n \n \n \n Coursera \u5b66\u4e60 Spark SQL  (https://www.coursera.org/learn/spark-sql)", "url": "https://dune.com/docs/zh/getting-started/guides/sql-guides/#twigblock"}
{"content": "\u7528 Dune \u8c03\u53d6\u6570\u636e\u7684\u4e00\u822c\u6d41\u7a0b \u00b6 \n \n \u6574\u7406\u4e00\u4efd\u6240\u6709\u76f8\u5173\u5408\u7ea6\u7684\u6e05\u5355\uff0c\u5e76\u63d0\u4ea4\u8fdb\u884c \u89e3\u7801  (../../decoding-contracts/) \u3002 \n \u4f7f\u7528 SQL \u67e5\u8be2\u8c03\u53d6\u6570\u636e \n \u5c06\u7ed3\u679c\u53ef\u89c6\u5316 \n \u5728\u770b\u677f\u4e0a\u7ec4\u88c5\u53ef\u89c6\u5316\u5185\u5bb9 \n \u4fee\u9970\u770b\u677f \n \u4eab\u7528\u60a8\u7684\u6570\u636e \n \n PostgreSQL  (#__tabbed_1_1) Databricks SQL  (#__tabbed_1_2) \n \n \n ", "url": "https://dune.com/docs/zh/getting-started/guides/dune-guides/#dune"}
{"content": "Andrew Hong     \u00b6 \n \n Your guide to basic SQL while learning Ethereum at the same time  (https://towardsdatascience.com/your-guide-to-basic-sql-while-learning-ethereum-at-the-same-time-9eac17a05929)  (Part 1) \n Your guide to intermediate SQL while learning Ethereum at the same time  (https://towardsdatascience.com/your-guide-to-intermediate-sql-while-learning-ethereum-at-the-same-time-7b25119ef1e2?source=user_profile---------6----------------------------)  (Part 2) \n Learning SQL and Ethereum  (https://towardsdatascience.com/learning-sql-and-ethereum-part-3-5422f080ad36)  (Part 3) \n SQL on Ethereum: How to Work With All the Data from a Transaction  (https://ath.mirror.xyz/mbR1n_CvflL1KIKCTG42bnM4HpfGBqDPNndH8mu2eJw) \n \n ", "url": "https://dune.com/docs/zh/getting-started/guides/dune-guides/#andrew-hong"}
{"content": "Alex Manuskin   \u00b6 \n \n How to get started with querying on Dune Analytics  (https://dune.com/blog/get-started-guide) \n \n ", "url": "https://dune.com/docs/zh/getting-started/guides/dune-guides/#alex-manuskin"}
{"content": "Paul Pivat   \u00b6 \n \n Lean foundational Ethereum topics with SQL  (https://ethereum.org/en/developers/tutorials/learn-foundational-ethereum-topics-with-sql) \n \n ", "url": "https://dune.com/docs/zh/getting-started/guides/dune-guides/#paul-pivat"}
{"content": "Alex Kroeger   \u00b6 \n \n How to use Dune Analytics like a degen  (https://mirror.xyz/0x7B542178633f16940a131F8F6d670ffdbBe6b2Ab/0C3EQBtFqAK4k2TAGPZhg0JMY-upfTAxuTD-o91vBPc) \n \n ", "url": "https://dune.com/docs/zh/getting-started/guides/dune-guides/#alex-kroeger"}
{"content": "Chuxin   \u00b6 \n \n Select * from web3  (https://www.chuxinhuang.com/blog/select-from-web3) \n \n ", "url": "https://dune.com/docs/zh/getting-started/guides/dune-guides/#chuxin"}
{"content": "Gracelily  \u00b6 \n \n PostgreSQL Query Optimization Tricks - How to Make Queries Faster in Dune Analytics  (https://gracelily.medium.com/postgresql-query-optimization-tricks-6d5b7358d7fa) \n \n ", "url": "https://dune.com/docs/zh/getting-started/guides/dune-guides/#gracelily"}
{"content": "Twigblock \u00b6 \n \n Build an Ethereum Metrics Dashboard  (https://www.twigblock.com/projects/eth-intro-dune/t/eit-overview) \n Learn to Analyze Ethereum Gas Prices  (https://www.twigblock.com/projects/eth-gas-analysis/t/eg-overview) \n \n \n \n ", "url": "https://dune.com/docs/zh/getting-started/guides/dune-guides/#twigblock"}
{"content": "0xPhilan   \u00b6 \n \n Dune Analytics: A Guide for Complete Beginners  (https://mirror.xyz/phillan.eth/17VAXsMPpwJg4OQNBHKTYAQTWfJMwFuXZQDAxPStf0o) \n \n ", "url": "https://dune.com/docs/zh/getting-started/guides/dune-guides/#0xphilan"}
{"content": "James Bachini   \u00b6 \n \n Dune Analytics Tutorial | How To Create A Dune Analytics Dashboard  (https://jamesbachini.com/dune-analytics-tutorial/) \n \n ", "url": "https://dune.com/docs/zh/getting-started/guides/dune-guides/#james-bachini"}
{"content": "Kirubakumaresh \u00b6 \n \n Buid Ethereum Metrics Dashboard  (https://www.twigblock.com/projects/eth-intro-dune/t/eit-overview) \n \n \n \n \n ", "url": "https://dune.com/docs/zh/getting-started/guides/dune-guides/#kirubakumaresh"}
{"content": "OurNetwork \u8bfe\u7a0b \u00b6 \n \n Note \n \u672c\u8bfe\u7a0b\u662f\u57fa\u4e8e Dune V1 \u5f15\u64ce\u7684\u3002\u5927\u90e8\u5206\u5185\u5bb9\u4ecd\u7136\u9002\u7528\uff0c\u4f46\u5728 Dune V2 \u4e2d\uff0cSQL \u7528\u8bed\u548c\u4e00\u4e9b\u6570\u636e\u8868\u7684\u540d\u79f0\u5df2\u7ecf\u6539\u53d8\u3002 \n \n \u5728\u4e0e Dune \u56e2\u961f\u548c\u793e\u533a\u7684\u5408\u4f5c\u4e2d\uff0c\u6211\u4eec\u5728 OurNetwork \u7684\u670b\u53cb\u521b\u5efa\u4e86\u4e00\u4e2a\u8bfe\u7a0b\uff0c\u4e14\u6709\u4e00\u4e2a\u96c4\u5fc3\u52c3\u52c3\u7684\u76ee\u6807\uff1a\u5728 30 \u5929\u5185\u6559\u4f1a 30 \u4e2a\u4eba web3 \u6570\u636e\u5206\u6790\u3002 \n \u7531\u6211\u4eec\u793e\u533a\u7684\u4e00\u4e9b\u9876\u7ea7\u5deb\u5e08\u4e3b\u7406\uff0c\u60a8\u73b0\u5728\u53ef\u4ee5\u514d\u8d39\u83b7\u5f97\u8fd9\u4e9b\u6f14\u793a\u6587\u7a3f\u4e86\uff01 \n \u7531\u4e8e\u5b83\u6db5\u76d6\u4e86\u60a8\u9700\u8981\u77e5\u9053\u7684\u6240\u6709\u91cd\u8981\u4e3b\u9898\uff0c\u4ee5\u6709\u6548\u5730\u5206\u6790\u533a\u5757\u94fe\u6570\u636e\u5e76\u6210\u4e3a\u4e00\u4e2a\u6210\u719f\u7684 Dune \u5deb\u5e08\uff0c\u5b83\u662f\u5f00\u59cb\u60a8\u7684 Dune \u4e4b\u65c5\u7684\u6700\u4f73\u5730\u70b9\u4e4b\u4e00\u3002 \n \u66f4\u591a\u7ec6\u8282\u548c\u6240\u6709\u7684\u8bfe\u7a0b\u6750\u6599\u53ef\u4ee5\u5728\u6b64\u627e\u5230\uff1a \n \n \n OurNetwork \u8bfe\u7a0b  (https://ournetwork.mirror.xyz/gP16wLY-9BA1E_ZuOSv1EUAgYGfK9mELNza8cfgMWPQ) \n \n \n \u8bf7\u8003\u8651\u8d2d\u4e70\u4e00\u7248 Mirror \u6587\u7ae0\u4ee5\u652f\u6301\u672c\u8bfe\u7a0b\u7684\u6559\u5e08\u3002 \n \u89c6\u9891\u4e5f\u53ef\u4ee5\u5728 YouTube \u4e0a\u770b\u5230\uff1a", "url": "https://dune.com/docs/zh/getting-started/guides/dune-guides/#ournetwork"}
{"content": "\u63d0\u4ea4\u4e00\u4e2a\u65b0\u7684\u5408\u7ea6\u8fdb\u884c\u89e3\u6790 \u00b6 \n \n \u5408\u7ea6\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u63d0\u4ea4\u8fdb\u884c\u89e3\u7801\uff1a \n \n \u65b0\u5408\u7ea6\u8868\u683c  (https://dune.com/contracts/new) \n \u901a\u8fc7  My Creations > Contracts \u6807\u7b7e\u9875  (https://dune.com/browse/contracts/authored) \n \u5728\u67e5\u8be2\u7f16\u8f91\u5668\u4fa7\u8fb9\u680f\u7684\u6570\u636e\u96c6\u6d4f\u89c8\u5668\u4e2d\uff1a \n \n \n \u5408\u7ea6\u63d0\u4ea4\u8868\uff0c\u5305\u62ec 2 \u4e2a\u6b65\u9aa4\uff1a \n ", "url": "https://dune.com/docs/zh/getting-started/decoding-contracts/#_1"}
{"content": "1. \u533a\u5757\u94fe\u548c\u5730\u5740 \u00b6 \n \u6211\u4eec\u9996\u5148\u8981\u6c42\u63d0\u4f9b\u5408\u7ea6\u7684\u5730\u5740\u548c\u533a\u5757\u94fe\u3002\u9996\u5148\u8981\u6c42\u63d0\u4f9b\u8fd9\u4e9b\u6570\u636e\u6709\u4e24\u4e2a\u76ee\u7684\uff1a \n \n \u4e3a\u4e86\u4f7f\u6211\u4eec\u80fd\u591f\u5ba1\u67e5\u6f5c\u5728\u7684\u91cd\u590d\u5408\u7ea6\u548c\u5f85\u63d0\u4ea4\u5408\u7ea6\u3002 \n \u5728\u6211\u4eec\u80fd\u591f\u505a\u5230\u7684\u60c5\u51b5\u4e0b\uff0c\u5c06\u63d0\u4ea4\u7a0b\u5e8f\u7684\u90e8\u5206\u7a0b\u5e8f\u81ea\u52a8\u5316\u3002 \n \n \u540e\u8005\u901a\u5e38\u662f\u901a\u8fc7\u4ece Dune \u548c\u5176\u4ed6\u76f8\u5173\u7684\u7b2c\u4e09\u65b9\u6765\u6e90\u83b7\u53d6\u6f5c\u5728\u7684\u6709\u7528\u7684\u5143\u6570\u636e\u6765\u5b8c\u6210\u7684\u3002 \n \u4f8b\u5982\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a Optimism \u4e0a\u63d0\u4ea4 USDT \u5408\u7ea6\uff08 0x94b008aA00579c1307B0EF2c499aD98a8ce58e58 \uff09\u7684\u4f8b\u5b50\uff1a \n \n \u5982\u679c\u6211\u4eec\u80fd\u901a\u8fc7\u7b2c\u4e09\u65b9\u6765\u6e90\u627e\u5230\u5408\u7ea6\uff0c\u6211\u4eec\u5c06\u5728\u5730\u5740\u680f\u65c1\u8fb9\u663e\u793a\u4e00\u4e2a\u7eff\u8272\u7684\u52fe\u3002 \n \u8fd9\u610f\u5473\u7740\u6211\u4eec\u80fd\u591f\u83b7\u53d6\u5408\u7ea6\u7684\u540d\u79f0\u548c ABI\uff08\u5e94\u7528\u4e8c\u8fdb\u5236\u63a5\u53e3\uff09\u7b49\u4fe1\u606f\u3002 \n ", "url": "https://dune.com/docs/zh/getting-started/decoding-contracts/#1"}
{"content": "2. \u5408\u7ea6\u7ec6\u8282 \u00b6 \n \u5728\u6309\u4e0b \"Next\" \u540e\uff0c\u6211\u4eec\u8981\u6c42\u63d0\u4f9b\u6211\u4eec\u9700\u8981\u7684\u5173\u4e8e\u5408\u7ea6\u7684\u5176\u4ed6\u4fe1\u606f\uff0c\u4ee5\u4fbf\u5bf9\u5176\u8fdb\u884c\u89e3\u6790\uff1a \n \n \u5982\u679c\u6211\u4eec\u901a\u8fc7\u5176\u4ed6\u7b2c\u4e09\u65b9\u6e20\u9053\u627e\u5230\u5408\u7ea6\uff0c\u60a8\u53ea\u9700\u586b\u5199\u9879\u76ee\u540d\u79f0\u3002 \n \u6211\u4eec\u5728\u8fd9\u65b9\u9762\u6709\u4e00\u4e9b\u547d\u540d\u60ef\u4f8b\uff0c\u90e8\u5206\u539f\u56e0\u662f\u6211\u4eec\u7684\u6280\u672f\u8bbe\u7f6e\uff0c\u4e5f\u662f\u4e3a\u4e86\u4f7f\u5bfb\u627e\u6570\u636e\u66f4\u5bb9\u6613\u9884\u6d4b\u3002 \n \u9879\u76ee\u547d\u540d\u89c4\u5219 \n \n \u5168\u5c0f\u5199 \n \u6ca1\u6709\u7a7a\u683c\uff08\u82e5\u6709\u9700\u8981\uff0c\u4f7f\u7528\u4e0b\u5212\u7ebf \"_\"\uff09 \n \u5982\u679c\u9002\u7528\uff0c\u5728\u672b\u5c3e\u6dfb\u52a0 \"_v2\" \u6216\u5176\u4ed6\u7248\u672c\u540d\u79f0 \n \n \u4f8b\u5982  augur \u3001 tornado_cash \u3001 uniswap_v2 \n \u4e00\u65e6\u60a8\u63d0\u4ea4\uff0c\u60a8\u5c31\u5b8c\u6210\u4e86\uff01\u5408\u7ea6\u5c06\u88ab\u50a8\u5b58\u5728\u6211\u4eec\u7684\u961f\u5217\u4e2d\uff0c\u6211\u4eec\u5c06\u4eba\u5de5\u5ba1\u67e5\u4ee5\u4fdd\u8bc1\u8d28\u91cf\u3002 \n \n Note \n \u63d0\u4ea4\u7684\u5408\u7ea6\u53ef\u80fd\u9700\u8981\u51e0\u5929\u7684\u65f6\u95f4\u624d\u80fd\u5f97\u5230\u5904\u7406\uff0c\u8bf7\u8010\u5fc3\u7b49\u5f85\uff01\ud83d\ude4f \n \n ", "url": "https://dune.com/docs/zh/getting-started/decoding-contracts/#2"}
{"content": "\u9ad8\u7ea7\u9009\u9879 \u00b6 \n \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0cDune \u53ef\u4ee5\u81ea\u52a8\u68c0\u6d4b\u548c\u7d22\u5f15\u540c\u4e00\u63d0\u4ea4\u4e0b\u7684\u591a\u4e2a\u5408\u7ea6\u5730\u5740\u3002\u8fd9\u5bf9\u4e8e\u8bf8\u5982 AMM \u6c60\u7684\u4f8b\u5b50\u662f\u5f88\u6709\u7528\u7684\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6bcf\u4e2a\u4ea4\u6613\u5bf9\u5f80\u5f80\u5b58\u5728\u4e00\u4e2a\u5408\u7ea6\u60c5\u51b5\u3002 \n \u6211\u4eec\u6709\u4e24\u79cd\u7b56\u7565\u6765\u68c0\u6d4b\u5176\u4ed6\u5408\u7ea6\u8fdb\u884c\u89e3\u7801\uff1a \n \n \u5b57\u8282\u7801\u5339\u914d\u3002 \u6211\u4eec\u4f7f\u7528\u63d0\u4ea4\u7684\u5408\u7ea6\u5730\u5740\u7684\u5b57\u8282\u7801\u6765\u5bfb\u627e\u6574\u4e2a\u94fe\u5386\u53f2\u4e2d\u7684\u5176\u4ed6\u5339\u914d\u5185\u5bb9\u3002 \n \u5de5\u5382\u5b9e\u4f8b\u3002  \u6211\u4eec\u5bfb\u627e\u7531\u8d1f\u8d23\u521b\u5efa\u63d0\u4ea4\u7684\u5408\u7ea6\u7684\u540c\u4e00\u4e2a\u5730\u5740\u521b\u5efa\u7684\u6240\u6709\u5176\u4ed6\u7684\u5408\u7ea6\u3002 \n \n \u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5047\u8bbe\u901a\u8fc7\u8fd9\u4e24\u79cd\u65b9\u6cd5\u627e\u5230\u7684\u6240\u6709\u5408\u7ea6\u90fd\u5bf9\u5e94\u4e8e\u76f8\u540c\u7684\u533a\u5757\u94fe\u3001\u9879\u76ee\u540d\u79f0\u3001\u5408\u7ea6\u540d\u79f0\u548c ABI\u3002 \n \u5982\u679c\u60a8\u60f3\u8ba9\u6211\u4eec\u7d22\u5f15\u4e00\u4e2a\u4ee5\u4e0a\u7684\u5408\u7ea6\uff0c\u8bf7\u5207\u6362\u5230\u9ad8\u7ea7\u9009\u9879\uff0c\u5e76\u5728\u7b2c\u4e00\u4e2a\u95ee\u9898\u4e2d\uff0c\"Are there several instances of this contract?\"\uff0c\u9009\u62e9 \"Yes\"\u3002 \n \u7136\u540e\uff0c\u5728\u7b2c\u4e8c\u4e2a\u95ee\u9898 \u2014\u2014 \"Is it created by a factory contract?\" \u2014\u2014 \u9009\u62e9 \"No\" \u6765\u7d22\u5f15\u62e5\u6709\u76f8\u540c\u5b57\u8282\u7801\u7684\u5168\u90e8\u5176\u5b83\u5408\u7ea6\uff0c\u6216\u8005 \"Yes\" \u6765\u7d22\u5f15\u6765\u81ea\u76f8\u540c\u521b\u5efa\u8005\u7684\u5168\u90e8\u5176\u5b83\u5408\u7ea6\uff1a \n \n \n Warning \n \u53ea\u6709\u5728\u60a8\u77e5\u9053\u60a8\u5728\u505a\u4ec0\u4e48\uff0c\u5e76\u4e14\u975e\u5e38\u719f\u6089\u9879\u76ee\u7684\u67b6\u6784\u548c\u90e8\u7f72\u5c42\u6b21\u7684\u60c5\u51b5\u4e0b\uff0c\u624d\u80fd\u4f7f\u7528\u8fd9\u4e9b\u9009\u9879\u3002\u4e0d\u6b63\u786e\u5730\u5e94\u7528\u8fd9\u4e9b\u8bbe\u7f6e\u53ef\u80fd\u5bfc\u81f4\u63d0\u4ea4\u88ab\u62d2\u7edd\u3002 \n \n ", "url": "https://dune.com/docs/zh/getting-started/decoding-contracts/#_2"}
{"content": "\u8ffd\u8e2a\u60a8\u7684\u63d0\u4ea4 \u00b6 \n \u60a8\u53ef\u4ee5\u968f\u65f6\u5728  My Creations > Contracts  (https://dune.com/browse/contracts/authored)  \u67e5\u770b\u60a8\u63d0\u4ea4\u7684\u5408\u7ea6\u548c\u5b83\u4eec\u7684\u5904\u7406\u72b6\u6001\uff1a \n \n ", "url": "https://dune.com/docs/zh/getting-started/decoding-contracts/#_3"}
{"content": "\u5e38\u89c1\u95ee\u9898 \u00b6 \n \u6211\u5982\u4f55\u624b\u52a8\u63d0\u4ea4\u5408\u7ea6\u4fe1\u606f\uff1f \u00b6  (#_5) \n \n Note \n \u5982\u679c\u624b\u52a8\u63d0\u4ea4\u7684\u5408\u7ea6\u662f\u4ee3\u7406\u5408\u7ea6\uff08Proxy contract\uff09\uff0c\u6211\u4eec\u5efa\u8bae\u60a8\u8f6c\u5230\u4e0b\u4e00\u8282\u3002 \n \n \u5c3d\u7ba1\u6211\u4eec\u52aa\u529b\u83b7\u53d6\u8bf8\u5982 ABI \u7b49\u5408\u7ea6\u4fe1\u606f\uff0c\u4f46\u6709\u65f6\u8fd9\u4e9b\u4fe1\u606f\u53ef\u80fd\u65e0\u6cd5\u901a\u8fc7\u6211\u4eec\u7684\u6570\u636e\u6e90\u83b7\u5f97\u3002 \n \u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u5c06\u9700\u8981\u624b\u52a8\u8f93\u5165\u5408\u7ea6\u7684\u540d\u79f0\u548c ABI\u3002 \n \u5982\u679c\u5408\u7ea6\u5df2\u7ecf\u88ab\u94fe\u4e0a\u7684\u533a\u5757\u6d4f\u89c8\u5668\u9a8c\u8bc1\u8fc7\uff0c\u60a8\u5e94\u8be5\u80fd\u5728\u90a3\u91cc\u627e\u5230\u8fd9\u4e9b\u4fe1\u606f\u3002 \n \u5728\u6b64\u627e\u5230\u6bcf\u4e2a\u94fe\u7684\u4e3b\u8981\u533a\u5757\u6d4f\u89c8\u5668\u7684\u5217\u8868  (../../reference/wizard-tools/blockchain-explorers/) \uff01 \n \u6211\u5982\u4f55\u63d0\u4ea4\u4ee3\u7406\u5408\u7ea6\uff1f \u00b6  (#_6) \n \u4e3a\u4e86\u5bf9\u7b26\u5408 \u4ee3\u7406\u6a21\u5f0f  (https://blog.openzeppelin.com/proxy-patterns/) \u7684\u5408\u7ea6\u6b63\u786e\u5730\u89e3\u6790\u4ea4\u6613\uff0cDune \u9700\u8981\u5c06\u4ee3\u7406\u5408\u7ea6\u7684\u5730\u5740\u4e0e\u5b9e\u73b0\u5408\u7ea6\u7684 ABI \u8fdb\u884c\u6620\u5c04\u3002 \n \u6211\u4eec\u907f\u514d\u76d1\u63a7\u6267\u884c\u5408\u7ea6\u7684\u5730\u5740\uff0c\u56e0\u4e3a\u5b83\u7684\u903b\u8f91\u5728\u4ea4\u6613\u4e2d\u901a\u8fc7  DelegateCall  \u51fd\u6570  (https://medium.com/coinmonks/delegatecall-calling-another-contract-function-in-solidity-b579f804178c) \u8bbf\u95ee\u3002 \n \u5982\u679c\u6211\u4eec\u76f4\u63a5\u76d1\u63a7\u6267\u884c\u5408\u7ea6\u7684\u5730\u5740\uff0c\u6211\u4eec\u5c31\u4f1a\u9519\u8fc7\u5176\u903b\u8f91\u4e2d\u7684\u4efb\u4f55\u4e8b\u4ef6\u8bb0\u5f55\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u4e8b\u4ef6\u5b9e\u9645\u4e0a\u662f\u7531\u8c03\u7528\u8005\uff08\u672c\u4f8b\u4e2d\u7684\u4ee3\u7406\uff09\u5728\u901a\u8fc7\u8c03\u7528\u4e00\u4e2a  DelegateCall  \u51fd\u6570\u65f6\u89e6\u53d1\u7684\u3002 \n \n Warning \n \u5f53\u63d0\u4ea4\u4ee3\u7406\u6a21\u5f0f\u7684\u5408\u7ea6\u7ed9 Dune \u65f6\uff0c\u60a8\u5e94\u8be5\u8f93\u5165\u4ee3\u7406\u5408\u7ea6\u7684\u5730\u5740\uff0c\u5982\u679c\u60a8\u6709\u7684\u8bdd\uff0c\u8fd8\u5e94\u8be5\u8f93\u5165\u5b9e\u65bd\u5408\u7ea6\u7684 ABI\u3002 \n \n \u5f53\u60a8\u63d0\u4ea4\u4ee3\u7406\u5408\u7ea6\u7684\u5730\u5740\u65f6\uff0c\u6211\u4eec\u5c06\u5c1d\u8bd5\u83b7\u53d6\u4ee3\u7406\u7684\u5408\u7ea6\u540d\u79f0\u548c\u5b83\u6240\u6307\u5411\u7684\u5b9e\u73b0\u5730\u5740\uff0c\u4ee5\u83b7\u53d6\u5b9e\u73b0\u5408\u7ea6\u7684 ABI\u3002 \n \u5982\u679c\u6211\u4eec\u627e\u4e0d\u5230\u6267\u884c\u5408\u7ea6\u7684 ABI\uff0c\u60a8\u9700\u8981\u4f7f\u7528 \u76f8\u5173\u94fe\u7684\u533a\u5757\u94fe\u6d4f\u89c8\u5668  (../../reference/wizard-tools/blockchain-explorers/) \u6765\u627e\u5230\u5b83\u5e76\u4e14\u624b\u52a8\u8f93\u5165\u3002 \n \u6211\u5982\u4f55\u91cd\u65b0\u63d0\u4ea4\u4e00\u4e2a\u5408\u7ea6\uff1f \u00b6  (#_7) \n Dune \u9ed8\u8ba4\u533a\u5757\u94fe\u4e2d\u7684\u6bcf\u4e2a\u5730\u5740\u6700\u591a\u53ef\u4ee5\u6620\u5c04\u5230 1 \u4e2a\u5408\u7ea6\u3002\u51fa\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0c\u63d0\u4ea4\u4e00\u4e2a\u5730\u5740\u5df2\u7ecf\u5b58\u5728\u4e8e  [blockchain].contracts  \u4e2d\u7684\u5408\u7ea6\uff0c\u5c06\u4e3a\u89e3\u6790\u76ee\u7684\u8986\u76d6\u5b83\u3002 \n \u8fd9\u6709\u51e0\u4e2a\u6f5c\u5728\u7684\u5371\u9669\u526f\u4f5c\u7528\uff1a \n \n \u5982\u679c\u9879\u76ee\u6216\u5408\u7ea6\u540d\u79f0\u66f4\u6539\u4e86\uff0c\u6211\u4eec\u5c06\u4e3a\u5408\u7ea6\u7684\u6240\u6709\u65b9\u6cd5\u548c\u4e8b\u4ef6\u751f\u6210\u65b0\u7684\u6570\u636e\u8868\u3002\u53cd\u8fc7\u6765\uff0c\u4e4b\u524d\u7684\u8868\u5c06\u505c\u6b62\u66f4\u65b0\uff0c\u6570\u636e\u5c06\u88ab\u5206\u5272\uff0c\u67e5\u8be2\u4e5f\u5c06\u505c\u6b62\u5de5\u4f5c\u3002 \n \u5982\u679c ABI \u53d1\u751f\u4e86\u53d8\u5316\uff0c\u4fee\u6539\u4e86\u73b0\u6709\u6570\u636e\u8868\u7684\u53c2\u6570\uff0c\u4f9d\u8d56\u8be5\u8868\u7684\u67e5\u8be2\u53ef\u80fd\u4f1a\u4e2d\u65ad\u6216\u53d8\u5f97\u4e0d\u51c6\u786e\u3002 \n \n \u5982\u679c\u60a8\u8bd5\u56fe\u63d0\u4ea4\u4e00\u4efd\u5df2\u7ecf\u5b58\u5728\u7684\u5408\u7ea6\uff0c\u6211\u4eec\u9996\u5148\u4f1a\u63d0\u51fa\u4e00\u4e2a\u8b66\u544a\u63d0\u793a\uff0c\u5e76\u8981\u6c42\u60a8\u786e\u8ba4\u662f\u5426\u8981\u7ee7\u7eed\uff1a \n \n \u7136\u540e\uff0c\u5728 Details \u9875\u9762\u7684\u5e95\u90e8\uff0c\u6211\u4eec\u4f1a\u8981\u6c42\u60a8\u89e3\u91ca\u4e3a\u4ec0\u4e48\u8981\u91cd\u65b0\u63d0\u4ea4\u5408\u7ea6\uff0c\u4ee5\u4fbf\u6211\u4eec\u8bc4\u4f30\u662f\u5426\u503c\u5f97\u8986\u76d6\u5408\u7ea6\u7684\u6570\u636e\uff1a \n \n \u5982\u679c\u6211\u4eec\u8ba4\u4e3a\u63a5\u53d7\u91cd\u65b0\u63d0\u4ea4\u7684\u98ce\u9669\u9ad8\u4e8e\u9644\u52a0\u4ef7\u503c\uff0c\u6211\u4eec\u4f1a\u62d2\u7edd\u60a8\u7684\u91cd\u65b0\u63d0\u4ea4\u7533\u8bf7\u3002 \n \u5982\u679c\u60a8\u8ba4\u4e3a\u6211\u4eec\u662f\u9519\u7684\uff08\u6211\u4eec\u4e5f\u53ea\u662f\u51e1\u4eba\uff01\uff09\uff0c\u8bf7\u968f\u65f6\u5728  Discord #decoding \u9891\u9053  (https://discord.com/channels/757637422384283659/850326962152538122) \u8054\u7cfb\u6211\u4eec\uff0c\u6211\u4eec\u5c06\u4e0e\u60a8\u8fdb\u4e00\u6b65\u8ba8\u8bba\uff01 \n \u6211\u5982\u4f55\u63d0\u4ea4 Diamond \u4ee3\u7406\u5408\u7ea6\uff1f \u00b6  (#diamond) \n \u4e0e vanilla \u4ee3\u7406\u5408\u7ea6\u76f8\u540c\uff0c EIP-2535  (https://eips.ethereum.org/EIPS/eip-2535)  \u5408\u7ea6\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012 Diamond \u4ee3\u7406\u7684\u5730\u5740\u4ee5\u53ca \u4ee3\u8868\u6240\u6709\u9762\u7684\u5168\u90e8\u63a5\u53e3\u7684\u5355\u4e00 ABI  \u6765\u652f\u6301\u3002 \n \u6211\u7684\u63d0\u4ea4\u88ab\u62d2\u7edd\u4e86\uff0c\u4e3a\u4ec0\u4e48\uff1f \u00b6  (#_8) \n \u4e3a\u4e86\u4fdd\u8bc1\u6570\u636e\u8d28\u91cf\uff0c\u6211\u4eec\u62d2\u7edd\u91cd\u590d\u7684\u3001\u4e0d\u6b63\u786e\u7684\u6216\u4f4e\u8d28\u91cf\u7684\u63d0\u4ea4\u3002\u4e3a\u4e86\u907f\u514d\u88ab\u62d2\u7edd\uff0c\u8bf7\u52a1\u5fc5\u63d0\u4ea4\u51c6\u786e\u7684\u5408\u7ea6\u4fe1\u606f\uff01\ud83d\ude4f \n \u6240\u6709\u5176\u4ed6\u95ee\u9898\uff1a \u00b6  (#_9) \n \u8bf7\u524d\u5f80  Discord #decoding \u9891\u9053  (https://discord.com/channels/757637422384283659/850326962152538122) \uff0c\u6211\u4eec\u975e\u5e38\u4e50\u610f\u5728\u90a3\u91cc\u63d0\u4f9b\u5e2e\u52a9\uff01", "url": "https://dune.com/docs/zh/getting-started/decoding-contracts/#_4"}
{"content": "Dashboards \u00b6 \n \n By default,  Dashboard Explorer  (https://dune.com/browse/dashboards)  shows Dashboards that have been Trending (getting a lot of stars) in the last 4 hours. \n Looking to the right sidebar, we can sort this list by: \n \n Favorites  - Dashboards that have gotten the most stars in the last 1/7/30 days as well as all time. \n Trending  - Dashboards that have been getting more attention in the last 1/4/24 hours. \n New  - Dashboards sorted by publish time. \n \n And we can filter this list by: \n \n Using the \"Search for dashboards\" text field to find dashboards by keyword. \n Click on one of the \"Popular dashboard tags\" to see dashboards with that tag. \n \n Learn how to  build your own Dashboards here  (../dashboards/) . \n ", "url": "https://dune.com/docs/zh/getting-started/dune-explorer/#dashboards"}
{"content": "Queries \u00b6 \n \n By default,  Queries Explorer  (https://dune.com/browse/queries)  shows Queries that have gotten the most stars in the last 7 days. \n Looking to the right sidebar, we can sort this list by: \n \n Favorites  - Queries that have gotten the most stars in the last 1/7/30 days as well as all time. \n New  - Dashboards sorted by publish time. \n \n And we can filter this list by: \n \n Using the \"Search for queries\" text field to find dashboards by keyword. \n Click on one of the \"Popular query tags\" to see dashboards with that tag. \n \n Learn more about making Queries here  (../query-quick-start/) . \n ", "url": "https://dune.com/docs/zh/getting-started/dune-explorer/#queries"}
{"content": "Wizards \u00b6 \n \n By default,  Wizards Explorer  (https://dune.com/browse/users)  shows Wizards that have the most stars. \n Use the right sidebar to search for a specific Wizard. \n And become a Wizard yourself with our  Query Quick Start here  (../query-quick-start/) ! \ud83e\uddd9 \n ", "url": "https://dune.com/docs/zh/getting-started/dune-explorer/#wizards"}
{"content": "Teams \u00b6 \n \n By default,  Teams Explorer  (https://dune.com/browse/users)  shows Teams that have the most stars. \n Use the right sidebar to search for a specific Team. \n Learn more about Teams here  (../teams/) !", "url": "https://dune.com/docs/zh/getting-started/dune-explorer/#teams"}
{"content": "\u5728\u4e0d\u540c\u5e73\u53f0\u4e0a\u5d4c\u5165 \u00b6 \n ", "url": "https://dune.com/docs/zh/getting-started/embeds/#_1"}
{"content": "Twitter \u00b6 \n Twitter\u4f1a\u81ea\u52a8\u6e32\u67d3\u548c\u66f4\u65b0 Dune \u7684\u53ef\u89c6\u5316\u5185\u5bb9! \n \u53ea\u9700\u7c98\u8d34\u60a8\u7684\u5d4c\u5165\u94fe\u63a5\uff0c\u5c31\u53ef\u4ee5\u8f7b\u677e\u5b9e\u73b0. \ud83e\ude84 \n \n ", "url": "https://dune.com/docs/zh/getting-started/embeds/#twitter"}
{"content": "Discord \u00b6 \n Discord \u53ef\u4ee5\u5f88\u597d\u7684\u652f\u6301Dune\u7684\u5d4c\u5165\uff0c\u60a8\u53ea\u9700\u5728\u804a\u5929\u6846\u91cc\u53d1\u9001\u94fe\u63a5\uff0c\u76f8\u5e94\u7684\u53ef\u89c6\u5316\u5185\u5bb9\u5c31\u4f1a\u88ab\u5c55\u793a\u3002 \n \u8fd9\u4e5f\u5f88\u9002\u5408\u5bf9\u673a\u5668\u4eba\u8fdb\u884c\u7f16\u7a0b\uff0c\u4f7f\u5176\u6839\u636e\u547d\u4ee4\u8fd4\u56de\u76f8\u5e94\u7684\u56fe\u8868\u3002 \n \n ", "url": "https://dune.com/docs/zh/getting-started/embeds/#discord"}
{"content": "\u7f51\u9875\u5d4c\u5165 \u00b6 \n \u60a8\u53ef\u4ee5\u4f7f\u7528Dune\u7684\u5d4c\u5165\u94fe\u63a5\u52a0\u4e0a  iframe  \u6765\u5c06\u5b9e\u65f6\u53ef\u89c6\u5316\u5185\u5bb9\u6dfb\u52a0\u5230\u4efb\u4f55\u7f51\u9875\u4e0a\u3002 \n \u4ee5\u4e0b\u662f\u4e00\u6bb5\u4ee3\u7801\u793a\u4f8b: \n <iframe src=\"https://dune.com/embeds/208941/391702/2cbe40da-a0e4-43ac-896b-fef6d4d9fda7\" height=\"500\" width=\"500\" title=\"chart 1\"></iframe> \n \u8fd9\u662f\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u793a\u4f8b  cryptoart.io  (https://cryptoart.io/data)  \u7f51\u7ad9. \n ", "url": "https://dune.com/docs/zh/getting-started/embeds/#_2"}
{"content": "Mirror.xyz \u00b6 \n \u53ea\u9700\u751f\u6210\u4e00\u4e2a\u5d4c\u5165\u94fe\u63a5\uff0c\u5e76\u5728\u540e\u9762\u52a0\u4e0a  ?display=iframe \uff0cDune \u7684\u53ef\u89c6\u5316\u5185\u5bb9\u5c31\u53ef\u4ee5\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u88ab\u5d4c\u5165\u5230 mirror.xyz \u7684\u6587\u7ae0\u4e2d\u3002 \n \u793a\u4f8b: \n https://dune.com/embeds/208941/391702/34ee3319-1cac-40e1-a08d-160bd93693cc?display=iframe \n ", "url": "https://dune.com/docs/zh/getting-started/embeds/#mirrorxyz"}
{"content": "\u5df2\u77e5\u95ee\u9898 \u00b6 \n \u9057\u61be\u7684\u662f\uff0c\u4e0b\u9762\u8fd9\u4e9b\u7f51\u7ad9\u76ee\u524d\u8fd8\u4e0d\u652f\u6301Dune\u7684\u5d4c\u5165\u3002 \n \n Substack \n Medium \n GitBook \n \n ", "url": "https://dune.com/docs/zh/getting-started/embeds/#_3"}
{"content": "\u53c2\u6570\u5316\u5d4c\u5165 \u00b6 \n \u5d4c\u5165\u94fe\u63a5\u4e5f\u53ef\u7528\u4e8e\u53c2\u6570\u5316\u67e5\u8be2\uff0c\u4f46\u662f\u9700\u8981\u4e00\u4e9b\u6280\u5de7\uff1a \n \u751f\u6210\u7684\u5d4c\u5165\u94fe\u63a5\u5e76\u4e0d\u5305\u542b\u5fc5\u8981\u7684\u53c2\u6570\uff0c\u5c3d\u7ba1\u67e5\u8be2\u5df2\u7ecf\u88ab\u6267\u884c\u8fc7\u3002 \n \u6211\u4eec\u6b63\u5728\u52aa\u529b\u4f7f\u4e4b\u81ea\u52a8\u5316\uff0c\u4f46\u76ee\u524d\u60a8\u4ecd\u9700\u5728\u53c2\u6570\u94fe\u63a5\u4e2d\u624b\u52a8\u6dfb\u52a0\u53c2\u6570\u524d\u7f00\uff1a \n link?[name_of_parameter_1]=[xxxx]&?[name_of_parameter_2]=[yyyy]&[...] \n \u793a\u4f8b: \n https://dune.com/embeds/118220/238460/aa002dd3-f9e2-4d63-86c8-b765569306c6NFT?address=0xff9c1b15b16263c61d017ee9f65c50e4ae0113d7&rolling_n_trades=500", "url": "https://dune.com/docs/zh/getting-started/embeds/#_4"}
{"content": "\u8df3\u8f6c\u81f3\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/getting-started/queries/query-results.md) \n \u67e5\u8be2\u7ed3\u679c \n \u60a8\u5728\u67e5\u8be2\u7ed3\u679c\u90e8\u5206\u53ef\u4ee5\u770b\u5230\u60a8\u7684\u67e5\u8be2\u8fd0\u884c\u540e\u8fd4\u56de\u7684\u6570\u636e\u3002 \n \u8981\u60f3\u5f97\u5230\u60a8\u7684\u7b2c\u4e00\u6b21\u67e5\u8be2\u7ed3\u679c\uff0c\u8bf7\u6309\u4e0b\u67e5\u8be2\u7a97\u53e3\u4e0b\u9762\u7684\u6a59\u8272\u65b9\u6846\u4e2d\u7684\u90a3\u4e2a  Run \u3010\u8fd0\u884c\u3011\u6309\u94ae\uff1a \n \n \u77ed\u6682\u65f6\u95f4\u8fc7\u540e\uff0c\u60a8\u7684\u67e5\u8be2\u7ed3\u679c\u4f1a\u4ee5\u6570\u636e\u8868\u5f62\u5f0f \ud83e\ude84 \u51fa\u73b0\uff1a \n \n \n Warning \n Queries run on the database you've currently selected in the Data Explorer dropdown. EG if you run a Query that uses Dune V1 Ethereum data, it will fail to run if you select another V1 Blockchain dataset or Dune V2: \n \n \n \u5728\u60a8\u7684\u7ed3\u679c\u8868\u4e0a\u65b9\uff0c\u60a8\u4f1a\u53d1\u73b0\uff1a \n \n \"Query Results\"\u3010\u67e5\u8be2\u7ed3\u679c\u3011\u6807\u7b7e\u9875\uff1b\u5982\u679c\u60a8\u505a\u4e86\u66f4\u591a\u7684\u53ef\u89c6\u5316\u5185\u5bb9\uff0c\u5b83\u4eec\u4f1a\u4f5c\u4e3a\u6807\u7b7e\u9875\u51fa\u73b0\u5728\u8fd9\u4e2a\u6807\u7b7e\u9875\u65c1\u3002 \n New Visualization \u3010\u65b0\u53ef\u89c6\u5316\u3011\u6309\u94ae\uff0c\u4f7f\u60a8\u901a\u8fc7\u67e5\u8be2\u6570\u636e\u5236\u4f5c\u65b0\u7684 \u53ef\u89c6\u5316  (../visualizations)  \u5185\u5bb9\u3002 \n \"Last run\"\u3010\u4e0a\u6b21\u8fd0\u884c\u3011\u548c \"Last run took\"\u3010\u4e0a\u6b21\u8fd0\u884c\u65f6\u957f\u3011\u8ba9\u60a8\u77e5\u9053\u60a8\u7684\u7ed3\u679c\u6570\u636e\u6709\u591a\u65b0\u9c9c\uff0c\u4ee5\u53ca\u60a8\u518d\u6b21\u8fd0\u884c\u53ef\u80fd\u9700\u8981\u7684\u65f6\u95f4\u7684\u53c2\u8003\u70b9\uff08\u53ef\u80fd\u66f4\u591a\u6216\u66f4\u5c11\uff0c\u53d6\u51b3\u4e8e\u60a8\u5982\u4f55\u4fee\u6539\u60a8\u7684\u67e5\u8be2\uff09\u3002 \n Run \u3010\u8fd0\u884c\u3011\u6309\u94ae\uff08\u8ba9\u60a8\u5728\u4fee\u6539\u67e5\u8be2\u540e\u91cd\u65b0\u8fd0\u884c\u60a8\u7684\u67e5\u8be2\uff09\u3002 \n \n \n ", "url": "https://dune.com/docs/zh/getting-started/queries/query-results/"}
{"content": "\u521b\u5efa\u4e00\u4e2a\u770b\u677f \u00b6 \n \u60a8\u53ef\u4ee5\u901a\u8fc7\u6d4f\u89c8\u6211\u4eec\u7684 \"Discover\" \u9875\u9762\u5e76\u70b9\u51fb\u53f3\u4fa7\u7684 \"New dashboard\" \u6309\u94ae\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u770b\u677f\u3002 \n \u60a8\u7ed9\u60a8\u7684\u770b\u677f\u7684\u521d\u59cb\u540d\u79f0\u4e5f\u5c06\u662f URL slug\u3002\u4e4b\u540e\u60a8\u4e0d\u80fd\u6539\u53d8 URL slug\uff0c\u6240\u4ee5\u8981\u6ce8\u610f\u60a8\u9009\u62e9\u7684\u540d\u5b57\u3002\u4e0d\u8fc7\uff0c\u60a8\u603b\u80fd\u6539\u53d8\u770b\u677f\u7684\u663e\u793a\u540d\u79f0\u3002 \n \n ", "url": "https://dune.com/docs/zh/getting-started/dashboards/#_1"}
{"content": "\u6dfb\u52a0\u53ef\u89c6\u5316 \u00b6 \n \u60a8\u53ef\u4ee5\u901a\u8fc7\u8fdb\u5165\u7f16\u8f91\u8005\u6a21\u5f0f\u5e76\u70b9\u51fb\u76f8\u5e94\u7684\u6309\u94ae\u7b80\u5355\u5730\u5c06\u53ef\u89c6\u5316\u6dfb\u52a0\u5230\u60a8\u7684\u770b\u677f\u4e2d\u3002\u8981\u8fdb\u5165\u7f16\u8f91\u6a21\u5f0f\uff0c\u9996\u5148\u6253\u5f00\u4e00\u4e2a\u4f60\u81ea\u5df1\u7684\u770b\u677f\uff0c\u7136\u540e\u70b9\u51fb\u53f3\u4e0a\u65b9\u7684\u7f16\u8f91\u6309\u94ae\u3002 \n \n ", "url": "https://dune.com/docs/zh/getting-started/dashboards/#_2"}
{"content": "\u6dfb\u52a0\u6587\u672c\u6846 \u00b6 \n \u8981\u5728\u770b\u677f\u4e0a\u6dfb\u52a0\u6587\u672c\u6846\uff0c\u60a8\u5fc5\u987b\u5148\u8fdb\u5165\u7f16\u8f91\u8005\u6a21\u5f0f\uff0c\u7136\u540e\u53ef\u4ee5\u70b9\u51fb \"\u6dfb\u52a0\u6587\u672c\u90e8\u4ef6\"\u3002\u8fd9\u5c06\u6253\u5f00\u4e00\u4e2a\u7b80\u5355\u7684\u6587\u672c\u7f16\u8f91\u7a97\u53e3\u3002 \n \n \u6587\u672c\u6846\u652f\u6301 markdown \u7684\u4e00\u4e2a\u5b50\u96c6\u3002\u60a8\u53ef\u4ee5\u5904\u7406\u6587\u672c\u5e76\u5d4c\u5165\u56fe\u50cf\u548c GIF\u3002 \n ", "url": "https://dune.com/docs/zh/getting-started/dashboards/#_3"}
{"content": "\u6587\u672c\u5904\u7406 \u00b6 \n \u8fd9\u662f\u4e00\u4e2a\u5173\u4e8e markdown \u8bed\u6cd5\u7684\u7b80\u77ed\u5217\u8868\u3002\u53ef\u4ee5\u5728 \u8fd9\u91cc  (./#dashboards-are-where-dunes-content-lives-and-gets-discovered.) \u627e\u5230\u66f4\u9ad8\u7ea7\u7684 markdown \u6307\u5357\u3002 \n \n \n \n \u5143\u7d20 \n Markdown \u8bed\u6cd5 \n \n \n \n \n \u6807\u9898  (https://www.markdownguide.org/basic-syntax/#headings) \n # H1 ## H2 ### H3 \n \n \n \u7c97\u4f53  (https://www.markdownguide.org/basic-syntax/#bold) \n **\u7c97\u4f53\u6587\u5b57** \n \n \n \u659c\u4f53  (https://www.markdownguide.org/basic-syntax/#italic) \n *\u659c\u4f53\u6587\u5b57* \n \n \n \u6709\u5e8f\u5217\u8868  (https://www.markdownguide.org/basic-syntax/#ordered-lists) \n 1. \u7b2c\u4e00\u9879 2. \u7b2c\u4e8c\u9879 3. \u7b2c\u4e09\u9879 \n \n \n \u65e0\u5e8f\u5217\u8868  (https://www.markdownguide.org/basic-syntax/#unordered-lists) \n - \u7b2c\u4e00\u9879 - \u7b2c\u4e8c\u9879 - \u7b2c\u4e09\u9879 \n \n \n \u4ee3\u7801  (https://www.markdownguide.org/basic-syntax/#code) \n `\u4ee3\u7801` \n \n \n \u5206\u9694\u7ebf  (https://www.markdownguide.org/basic-syntax/#horizontal-rules) \n --- \n \n \n \u94fe\u63a5  (https://www.markdownguide.org/basic-syntax/#links) \n [\u6807\u9898](https://www.example.com) \n \n \n \n ", "url": "https://dune.com/docs/zh/getting-started/dashboards/#_4"}
{"content": "\u5d4c\u5165\u56fe\u50cf\u548c GIF \u00b6 \n \u6211\u4eec\u7684\u6587\u672c\u6846\u4e5f\u53ef\u7528\u4e8e\u5c06\u56fe\u50cf\u6216 GIF \u5d4c\u5165\u60a8\u7684\u770b\u677f\u3002 \n \u5d4c\u5165\u56fe\u50cf\u7684\u8bed\u6cd5\u662f\uff1a \n \n \n \n \u56fe\u50cf  (https://www.markdownguide.org/basic-syntax/#images-1) \n ![\u66ff\u4ee3\u6587\u672c](\u56fe\u50cf url) \n \n \n \n \n \n \n \n \n \n \u7531\u4e8e\u60a8\u4e0d\u80fd\u5728\u6211\u4eec\u7684\u670d\u52a1\u5668\u4e0a\u672c\u5730\u5b58\u50a8\u56fe\u50cf\uff0c\u60a8\u9700\u8981\u5728\u5176\u4ed6\u5730\u65b9\u4e0a\u4f20\u60a8\u7684\u56fe\u50cf\uff0c\u6216\u5728\u4e92\u8054\u7f51\u7684\u67d0\u4e2a\u5730\u65b9\u627e\u5230\u539f\u59cb\u6587\u4ef6\u3002 \n \u5728\u5b9e\u8df5\u4e2d\uff0c\u8fd9\u53ef\u80fd\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a \n  (#__codelineno-0-1) ![\u6587\u5b57](https://pbs.twimg.com/media/FEWVLQwWUAQcqLY?format=jpg&name=medium)\n  (#__codelineno-0-2) --\u8fd9\u662f\u4e00\u4e2a\u50a8\u5b58\u5728\u63a8\u7279\u670d\u52a1\u5668\u7684\u56fe\u50cf\n \n\u60a8\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u5730\u8c03\u6574\u5b83\u6240\u5305\u542b\u7684\u90e8\u4ef6\u7684\u5927\u5c0f\u6765\u8c03\u6574\u56fe\u50cf\u7684\u5927\u5c0f\u3002\n \u60a8\u53ef\u4ee5\u5728\u4e00\u4e2a\u90e8\u4ef6\u4e2d\u7ed3\u5408\u56fe\u7247\u548c\u6587\u5b57\u3002 \n \n ", "url": "https://dune.com/docs/zh/getting-started/dashboards/#gif"}
{"content": "\u5b89\u6392\u770b\u677f\u7684\u5e03\u5c40 \u00b6 \n \u60a8\u53ef\u4ee5\u4ee5\u4efb\u4f55\u60a8\u559c\u6b22\u7684\u65b9\u5f0f\u5b89\u6392\u770b\u677f\u4e0a\u7684\u4e0d\u540c\u90e8\u4ef6\u3002 \n \u90e8\u4ef6\u603b\u662f\u8bd5\u56fe\u5411\u4e0a\u79fb\u52a8\uff0c\u6240\u4ee5\u5982\u679c\u60a8\u60f3\u5728\u60a8\u7684\u770b\u677f\u4e0a\u521b\u5efa\u4e00\u4e2a\u89c6\u89c9\u5206\u9694\u90e8\u5206\uff0c\u5efa\u8bae\u521b\u5efa\u4e00\u4e2a\u5927\u7684\u6587\u672c\u6846\u4f5c\u4e3a\u5206\u9694\u3002", "url": "https://dune.com/docs/zh/getting-started/dashboards/#_5"}
{"content": "\u8df3\u8f6c\u81f3\n          (#autocomplete) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/getting-started/queries/query-window.md) \n \u67e5\u8be2\u7a97\u53e3 \n \u67e5\u8be2\u7a97\u53e3\u662f\u60a8\u901a\u8fc7\u8f93\u5165 SQL \u4ee3\u7801\u5e76\u8fd0\u884c\u5b83\u6765\u64cd\u4f5c\u60a8\u7684 Dune \ud83e\ude84 \u7684\u5730\u65b9\u3002 \n \n ", "url": "https://dune.com/docs/zh/getting-started/queries/query-window/"}
{"content": "502 Bad Gateway \n nginx", "url": "https://dune.com/docs/zh/getting-started/queries/data-explorer/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#dune) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/getting-started/queries/index.md) \n \u67e5\u8be2 \n ", "url": "https://dune.com/docs/zh/getting-started/queries/"}
{"content": "\u6570\u636e\u8868 \u00b6 \n \u6570\u636e\u8868\u662f\u9ed8\u8ba4\u7684\u53ef\u89c6\u5316\uff0c\u6bcf\u5f53\u60a8\u521b\u5efa\u548c\u8fd0\u884c\u4e00\u4e2a\u67e5\u8be2\u65f6\uff0c\u60a8\u4f1a\u53d1\u73b0\u6807\u6709  Query results  \u7684\u8868\u683c\uff1a \n \n \u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528  New visualization  \u6309\u94ae\u548c\u4e0b\u62c9\u83dc\u5355\u5236\u4f5c\u66f4\u591a\u7684\u6570\u636e\u8868\uff0c\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u663e\u793a\u60a8\u7684\u6570\u636e\uff1a \n \n ", "url": "https://dune.com/docs/zh/getting-started/visualizations/other-visualizations/#_1"}
{"content": "\u914d\u7f6e\u60a8\u7684\u6570\u636e\u8868 \u00b6 \n \n \u6570\u636e\u8868\u9009\u9879\uff08Table options\uff09 \u00b6  (#table-options) \n \u6807\u9898\uff08Title\uff09 \n \u6807\u9898\u663e\u793a\u5728\u60a8\u6570\u636e\u8868\u683c\u7684\u4e0a\u65b9\u3002 \n \u4fdd\u7559\u9ed8\u8ba4\u503c\uff08 Table \uff09\u6216\u5c06\u5176\u8bbe\u4e3a\u7a7a\u767d\uff0c\u4f7f\u60a8\u7684\u8868\u6807\u9898\u4e0e\u67e5\u8be2\u7684\u6807\u9898/\u540d\u79f0\u76f8\u540c\u3002 \n \u5728\u8fd9\u4e2a\u680f\u76ee\u4e2d\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u503c\uff0c\u90fd\u4f1a\u5148\u6dfb\u52a0\u8be5\u503c\uff0c\u7136\u540e\u662f\u60a8\u7684\u67e5\u8be2\u540d\u79f0\uff1a \n \n \u6ce8\uff1a\u9ed8\u8ba4\u503c \"Query Results\" \u88ab\u89c6\u4f5c\u4e00\u4e2a\u6dfb\u52a0\u503c\u3002 \n [x] \u5217\u7684\u9009\u9879\uff08Column [x]\uff09 \u00b6  (#x-column-x) \n \u60a8\u53ef\u4ee5\u4e3a\u60a8\u7684\u6570\u636e\u8868\u4e2d\u7684\u6bcf\u4e00\u5217\u914d\u7f6e\u4ee5\u4e0b\u9009\u9879 \n \u6807\u9898\uff08Title\uff09  (#__tabbed_1_1) \u5bf9\u9f50\uff08Align\uff09  (#__tabbed_1_2) \u66f4\u6539\u683c\u5f0f\uff08Format\uff09  (#__tabbed_1_3) \u9690\u85cf\u5217\uff08Hide Column\uff09  (#__tabbed_1_4) \n \n \n \u6807\u9898\u51fa\u73b0\u5728\u6570\u636e\u8868\u7684\u9876\u90e8\u3002 \n \u5c06\u6b64\u7559\u7a7a\u4f7f\u60a8\u7684\u5217\u6807\u9898\u4e0e\u60a8\u7684 Dune \u6570\u636e\u5e93\u540d\u79f0\u76f8\u540c\u3002 \n \n \n \u8fd9\u5c06\u6539\u53d8\u5217\u7684\u6570\u636e\u548c\u6807\u9898\u7684\u6587\u672c\u5bf9\u9f50\u65b9\u5f0f\u3002 \n \n \n \u5141\u8bb8\u60a8\u5728\u8fd9\u91cc\u6309\u7167  X/Y-\u8f74\u7684\u523b\u5ea6\u548c\u6807\u7b7e\u683c\u5f0f  (../charts-graphs/#xy-axis-tick-and-label-formats) \u8c03\u6574\u6570\u636e\u7684\u6570\u5b57\u683c\u5f0f\u3002 \n \n \n \u4ece\u60a8\u7684\u6570\u636e\u8868\u4e2d\u9690\u85cf\u8fd9\u4e00\u5217\u3002 \n \n \n \n \n \u6570\u503c\u5217\u9009\u9879\uff08Numerical Column options\uff09 \u00b6  (#numerical-column-options) \n \u8fd4\u56de\u6570\u5b57\u6570\u636e\u7684\u5217\u6709\u8fd9\u4e9b\u9644\u52a0\u9009\u9879\uff1a \n \u7c7b\u578b\uff08Type\uff09  (#__tabbed_2_1) \u5e26\u8272\u6570\u503c\uff08Colored Values\uff09  (#__tabbed_2_2) \n \n \n \n Normal  \u53ea\u663e\u793a\u8be5\u5217\u7684\u6570\u5b57\u6570\u636e\u3002 \n Progress bar  \u7528\u4e00\u4e2a\u8fdb\u5ea6\u6761\u7684\u89c6\u89c9\u6548\u679c\u663e\u793a\u8be5\u5217\u7684\u6570\u5b57\u6570\u636e\uff0c\u8be5\u5217\u7684\u6700\u9ad8\u503c\u4e3a\"\u6ee1\"\uff0c\u6700\u4f4e\u503c\u4e3a\"\u63a5\u8fd1\u7a7a\"\uff0c\u5176\u4f59\u7684\u6570\u636e\u4ecb\u4e8e\u4e24\u8005\u4e4b\u95f4\uff1a \n \n \n \n \n \u52fe\u9009  Positive Values Green  \u548c  Negative Values Red  \u7684\u6846\u7ed9\u6570\u503c\u4e0a\u8272\u3002 \n \n \n \n \n ", "url": "https://dune.com/docs/zh/getting-started/visualizations/other-visualizations/#_2"}
{"content": "\u8ba1\u6570\u5668 \u00b6 \n \u8ba1\u6570\u5668\u662f\u4e3a\u60a8\u7684\u53d7\u4f17\u63d0\u4f9b\u5373\u65f6\u201c\u4e00\u76ee\u4e86\u7136\u201d\u7684\u7edf\u8ba1\u6570\u636e\u7684\u4e00\u4e2a\u597d\u65b9\u6cd5\u3002 \n \n ", "url": "https://dune.com/docs/zh/getting-started/visualizations/other-visualizations/#_3"}
{"content": "\u914d\u7f6e\u60a8\u7684\u8ba1\u6570\u5668 \u00b6 \n \n \u8ba1\u6570\u5668\u9009\u9879 \u00b6  (#_5) \n \u5728\u8fd9\u4e00\u90e8\u5206\uff0c\u60a8\u53ef\u4ee5\u5b9a\u4e49\u8ba1\u6570\u5668\u5e94\u8be5\u663e\u793a\u4ec0\u4e48\u6837\u7684\u6570\u636e\uff1a \n \u6807\u9898\uff08Title\uff09  (#__tabbed_3_1) \u5217\uff08Column\uff09  (#__tabbed_3_2) \u884c\uff08Row\uff09  (#__tabbed_3_3) \n \n \n \n \u6807\u9898\u5c06\u51fa\u73b0\u5728\u8be5\u56fe\u7684\u6240\u6709\u5b9e\u4f8b\u7684\u9876\u90e8\uff0c\u975e\u5e38\u660e\u663e \n \u5982\u679c\u6b64\u5904\u7559\u7a7a\u767d\uff0c\u5c06\u9ed8\u8ba4\u663e\u793a\u67e5\u8be2\u540d\u79f0 \n \n \n \n \n \u5728\u6b64\u680f\u76ee\u60a8\u53ef\u4ee5\u5b9a\u4e49\u8ba1\u6570\u5668\u5e94\u8be5\u663e\u793a\u54ea\u4e00\u5217\u3002 \n \n \n \n \n \u6b64\u680f\u53ef\u4ee5\u7528\u6765\u5b9a\u4e49\u60a8\u60f3\u663e\u793a\u7684\u57fa\u7840\u6570\u636e\u8868\u7684\u54ea\u4e00\u884c\uff0c\u4f8b\u5982\u7b2c 1 \u884c\u3002 \n \u901a\u5e38\u8fd9\u9700\u8981\u60a8\u5bf9\u67e5\u8be2\u7ed3\u679c\u8fdb\u884c\u6392\u5e8f\u6216\u9650\u5236\uff0c\u4ee5\u4f7f\u7b2c 1 \u884c\u663e\u793a\u6240\u9700\u7684\u7ed3\u679c\u3002 \n \n \n \n \n \n \u66f4\u6539\u683c\u5f0f\uff08Formatting\uff09 \u00b6  (#formatting) \n \u5728\u8fd9\u4e00\u90e8\u5206\uff0c\u60a8\u53ef\u4ee5\u8c03\u6574\u60a8\u7684\u6570\u5b57\u6570\u636e\u663e\u793a\u65b9\u5f0f\u3002 \n \u524d\u7f00\uff08Prefix\uff09  (#__tabbed_4_1) \u540e\u7f00\uff08Suffix\uff09  (#__tabbed_4_2) \u6807\u7b7e\uff08Label\uff09  (#__tabbed_4_3) \u5c0f\u6570\uff08Decimals\uff09  (#__tabbed_4_4) \n \n \n \n \u6b64\u680f\u76ee\u5141\u8bb8\u60a8\u4e3a\u60a8\u7684\u8ba1\u6570\u5668\u503c\u5b9a\u4e49\u4e00\u4e2a\u524d\u7f00\u3002 \n \u4f8b\u5982\uff1a $ \u3001 \u20ac \u3001 \u039e \u3001 \u0e3f \n \n \n \n \n \u6b64\u680f\u76ee\u5141\u8bb8\u60a8\u4e3a\u60a8\u7684\u8ba1\u6570\u5668\u503c\u5b9a\u4e49\u4e00\u4e2a\u540e\u7f00\u3002 \n \n \n \n \n \u6b64\u680f\u76ee\u5141\u8bb8\u60a8\u4e3a\u60a8\u7684\u8ba1\u6570\u5668\u503c\u5b9a\u4e49\u4e00\u4e2a\u6807\u7b7e\u3002 \n \u6807\u7b7e\u5c06\u4ee5\u6587\u5b57\u5f62\u5f0f\u663e\u793a\u5728\u8ba1\u6570\u5668\u6570\u503c\u4e0b\u65b9\u3002 \n \n \n \n \n \u5728\u6b64\u680f\u76ee\u4e2d\uff0c\u60a8\u53ef\u4ee5\u9009\u62e9\u60a8\u60f3\u8981\u5728\u8ba1\u6570\u5668\u4e0a\u663e\u793a\u591a\u5c11\u4f4d\u5c0f\u6570\u3002 \n \u76ee\u524d\u9650\u5236\u4e3a\u5c0f\u6570\u70b9\u540e 3 \u4f4d\u3002", "url": "https://dune.com/docs/zh/getting-started/visualizations/other-visualizations/#_4"}
{"content": "\u53ef\u89c6\u5316\u914d\u7f6e\u9009\u9879 \u00b6 \n \u56fe\u8868\u9009\u9879 (Chart options)  (#__tabbed_2_1) \u7ed3\u679c\u6570\u636e\uff08Result data\uff09  (#__tabbed_2_2) X-\u8f74\u9009\u9879\uff08X-axis options\uff09  (#__tabbed_2_3) Y-\u8f74\u9009\u9879\uff08Y-axis options\uff09  (#__tabbed_2_4) \u5e8f\u5217\u9009\u9879\uff08Series options\uff09  (#__tabbed_2_5) \u997c\u72b6\u9009\u9879\uff08Pie options\uff09  (#__tabbed_2_6) \n \n \n \u672c\u8282\u5141\u8bb8\u60a8\u5b9a\u4e49\u5982\u4f55\u663e\u793a\u60a8\u7684\u6570\u636e\u3002 \n \n \u6807\u9898\uff08Title\uff09 \n \n \u6807\u9898\u5c06\u51fa\u73b0\u5728\u8be5\u56fe\u7684\u6240\u6709\u5b9e\u4f8b\u7684\u9876\u90e8\u663e\u8457\u4f4d\u7f6e\u3002 \n \u56fe\u5f62\u5c06\u59cb\u7ec8\u4fdd\u6301\u67e5\u8be2\u7684\u540d\u79f0\uff0c\u5373\u4f7f\u60a8\u7f16\u8f91\u5b83\u3002 \n \n \u663e\u793a\u56fe\u4f8b\uff08Show chart legend\uff09 \n \n \u52fe\u9009\u6b64\u6846\u5c06\u542f\u7528\u6216\u7981\u7528\u56fe\u8868\u7684\u56fe\u4f8b\u3002 \n \n \u542f\u7528\u5806\u53e0\uff08Enable stacking\uff09 \n \n \u5982\u679c\u9002\u7528\uff0c\u52fe\u9009\u6b64\u6846\u5c06\u6839\u636e X-\u8f74 \u7684\u503c\u5c06\u56fe\u8868\u7684\u503c\u5806\u53e0\u5728\u4e00\u8d77\u3002 \n \u5982\u679c\u6ca1\u6709\u5f00\u542f\uff0c\u8fd9\u4e9b\u503c\u5c06\u88ab\u5355\u72ec\u7ed8\u5236\u5728 Y-\u8f74 \u4e0a\u3002 \n \u652f\u6491\u8fd9\u4e2a\u8ba1\u7b97\u7684\u5c06\u603b\u662f\u628a X-\u8f74 \u4e0a\u7684\u4e00\u4e2a\u503c\u5bf9\u5e94\u7684\u6570\u503c\u5206\u7ec4\u3002\u8bf7\u786e\u4fdd\u60a8\u7684\u6570\u636e\u662f\u5e72\u51c0\u7684\uff0c\u8fd9\u6837\u624d\u80fd\u53d1\u6325\u4f5c\u7528\uff08\u907f\u514d\u60a8\u7684\u6570\u636e\u51fa\u73b0\u7a7a\u9699\uff09\u3002 \n \n \u5f52\u4e00\u5316\u4e3a\u767e\u5206\u6bd4\u6570\u636e\uff08Normalize to percentage data\uff09 \n \n \u8fd9\u5c06\u4f7f\u56fe\u8868\u5f52\u4e00\u5316\u4ee5\u663e\u793a\u6240\u9009\u6570\u636e\u8868\u7684\u767e\u5206\u6bd4\u503c\u3002 \n \u652f\u6491\u8fd9\u4e2a\u8ba1\u7b97\u7684\u5c06\u603b\u662f\u628a X-\u8f74 \u4e0a\u7684\u4e00\u4e2a\u503c\u5bf9\u5e94\u7684\u6570\u503c\u5206\u7ec4\u3002\u8bf7\u786e\u4fdd\u60a8\u7684\u6570\u636e\u662f\u5e72\u51c0\u7684\uff0c\u8fd9\u6837\u624d\u80fd\u53d1\u6325\u4f5c\u7528\uff08\u907f\u514d\u60a8\u7684\u6570\u636e\u51fa\u73b0\u7a7a\u9699\uff09\u3002 \n \n \u663e\u793a\u6570\u636e\u6807\u7b7e\uff08Show data labels\uff09 \n \n \u52fe\u9009\u6b64\u6846\uff0c\u5c31\u53ef\u4ee5\u5728\u56fe\u4e2d\u663e\u793a\u5404\u4e2a\u6570\u636e\u70b9\u3002 \n \u8fd9\u53ea\u6709\u5728\u60a8\u7684\u6570\u636e\u70b9\u5f88\u5c11\uff0c\u800c\u4e14\u76f8\u4e92\u4e4b\u95f4\u5206\u5e03\u5f97\u5f88\u8fdc\uff0c\u4e0d\u4f1a\u91cd\u53e0\u7684\u60c5\u51b5\u4e0b\u624d\u6709\u610f\u4e49\u3002 \n \n \n \n \u5728\u8fd9\u91cc\u60a8\u53ef\u4ee5\u6311\u9009\u8981\u663e\u793a\u7684\u6570\u636e\u70b9\u3002 \n \n \u60a8\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a  x-\u8f74  \u548c\u591a\u4e2a  y-\u8f74 \u3002 \n \u53e6\u5916\uff0c\u60a8\u4e5f\u53ef\u4ee5\u5728 Y-\u8f74 \u4e0a\u9009\u62e9\u4e00\u4e2a\u6570\u636e\u5e8f\u5217\uff0c\u5e76\u9009\u62e9\u6309\u6570\u636e\u8868\u7684\u4e0d\u540c\u5217\u8fdb\u884c\u5206\u7ec4\uff08\u5982\u4e0a\u4f8b\u6240\u793a\uff09\u3002 \n \n \n \u4f7f\u7528\u8fd9\u4e9b\u9009\u9879\uff0c\u60a8\u53ef\u4ee5\u5f71\u54cd\u60a8\u7684 X-\u8f74 \u6570\u636e\u7684\u663e\u793a\u65b9\u5f0f\u3002 \n \n \u8f74\u6807\u9898\uff08Axis title\uff09 \n \n \u8fd9\u4e2a\u680f\u76ee\u5141\u8bb8\u60a8\u4e3a\u60a8\u7684 X-\u8f74 \u6307\u5b9a\u4e00\u4e2a\u6807\u9898\u3002 \n \n \u6392\u5e8f\u503c\uff08Sort Values\uff09 \n \n \u901a\u8fc7\u52fe\u9009\u6b64\u6846\uff0c\u60a8\u53ef\u4ee5\u6307\u5b9a\u662f\u5426\u8981\u5bf9\u56fe\u8868\u4e2d\u7684\u6570\u503c\u8fdb\u884c\u6392\u5e8f\u3002 \n \u5982\u679c\u60a8\u7684 X-\u8f74 \u662f\u4e00\u4e2a\u65f6\u95f4\u5e8f\u5217\uff0c\u8fd9\u5c06\u81ea\u52a8\u53d1\u751f\u3002 \n \n \u5012\u5e8f\u503c\uff08Reverse value\uff09 \n \n \u52fe\u9009\u6b64\u6846\u5c06\u53cd\u8f6c X-\u8f74 \u4e0a\u6570\u503c\u7684\u987a\u5e8f\u3002 \n \n \u5bf9\u6570\u5316\uff08Logarithmic\uff09 \n \n \u52fe\u9009\u6b64\u6846\u5c06\u4f7f\u60a8\u7684 X-\u8f74 \u6570\u503c\u4ee5\u5bf9\u6570\u65b9\u5f0f\u663e\u793a\u3002 \n \n \n \n \u901a\u8fc7\u8fd9\u4e9b\u9009\u9879\uff0c\u60a8\u53ef\u4ee5\u5f71\u54cd\u60a8\u7684 X-\u8f74 \u6570\u636e\u7684\u663e\u793a\u65b9\u5f0f\u3002 \n \n \u8f74\u6807\u9898\uff08Axis title\uff09 \n \n \u8fd9\u4e2a\u680f\u76ee\u5141\u8bb8\u60a8\u4e3a\u60a8\u7684 Y-\u8f74 \u6307\u5b9a\u4e00\u4e2a\u6807\u9898\u3002 \n \n \u5bf9\u6570\u5316\uff08Logarithmic\uff09 \n \n \u52fe\u9009\u6b64\u6846\u5c06\u4f7f\u60a8\u7684 X-\u8f74 \u6570\u503c\u4ee5\u5bf9\u6570\u65b9\u5f0f\u663e\u793a\u3002 \n \n \u542f\u7528\u53f3\u4fa7 Y-\u8f74\uff08Enable right y-axis\uff09 \n \n \u52fe\u9009\u6b64\u6846\u5c06\u542f\u7528\u4e00\u4e2a\u989d\u5916\u7684 Y-\u8f74\uff0c\u60a8\u53ef\u4ee5\u5728\u4e0a\u9762\u7ed8\u5236\u6570\u503c\u3002 \n \u60a8\u53ef\u4ee5\u5728 \u56fe\u8868\u5e8f\u5217\u90e8\u5206  (./#ordering-your-series) \u91cc\u9762\u9009\u62e9\u60a8\u60f3\u5728\u5de6\u548c\u53f3\u8f74\u4e0a\u663e\u793a\u4ec0\u4e48\u3002 \n \n \n \n \n \u5728\u53ef\u89c6\u5316\u7f16\u8f91\u5668\u7684\u8fd9\u4e00\u90e8\u5206\uff0c\u60a8\u53ef\u4ee5\u6700\u7ec8\u786e\u5b9a\u60a8\u7684\u56fe\u5f62\u3002 \n \n \u60a8\u53ef\u4ee5\u901a\u8fc7\u70b9\u51fb\u680f\u76ee\u91cd\u547d\u540d\u5e8f\u5217\uff08series\uff09\u3002 \n \u60a8\u53ef\u4ee5\u901a\u8fc7\u70b9\u51fb\u4e0b\u62c9\u83dc\u5355\u6765\u6539\u53d8\u56fe\u8868\u7c7b\u578b\u3002 \n \u60a8\u53ef\u4ee5\u901a\u8fc7\u70b9\u51fb\u989c\u8272\u6846\u6765\u6539\u53d8\u989c\u8272\u3002 \n \u6700\u540e\uff0c\u60a8\u8fd8\u53ef\u4ee5\u6539\u53d8\u5e8f\u5217\u7684\u987a\u5e8f\u3002 \n \n \u9009\u62e9\u989c\u8272 \n \u60a8\u53ef\u4ee5\u7528\u60a8\u7684\u6d4f\u89c8\u5668\u672c\u5730\u989c\u8272\u9009\u62e9\u5668\u6765\u6311\u9009\u989c\u8272\u3002 \n \u8fd9\u5bf9\u60a8\u6765\u8bf4\u53ef\u80fd\u7565\u6709\u4e0d\u540c\uff0c\u53d6\u51b3\u4e8e\u60a8\u4f7f\u7528\u7684\u6d4f\u89c8\u5668\u3002 \n \n \n \n \n \u6807\u7b7e\u683c\u5f0f\uff08Label format\uff09 \n \n \u8fd9\u4e2a\u680f\u76ee\u5141\u8bb8\u60a8\u5b9a\u4e49\u60a8\u997c\u72b6\u56fe\u91cc\u9762\u7684\u6570\u5b57\u6807\u7b7e\u7684 \u523b\u5ea6\u683c\u5f0f  (#xy-axis-tick-and-label-formats) \u3002 \n \n \n \n \n \n ", "url": "https://dune.com/docs/zh/getting-started/visualizations/charts-graphs/#_1"}
{"content": "X/Y-\u8f74 \u523b\u5ea6\u548c\u6807\u7b7e\u683c\u5f0f\uff08X/Y-axis Tick and Label formats\uff09 \u00b6 \n \n \u523b\u5ea6\u683c\u5f0f\u6539\u53d8\u4e86\u56fe\u5f62\u4e2d\u6570\u503c\u548c\u8f74\u6807\u7b7e\u7684\u663e\u793a\u65b9\u5f0f\u3002 \n \u8fd9\u662f\u66f4\u6539\u5b83\u4eec\u683c\u5f0f\u7684\u65b9\u6cd5\uff1a \n \n \n \n \u8d77\u59cb\u503c \n \u523b\u5ea6/\u6807\u7b7e\u683c\u5f0f \n \u8f93\u51fa \n \u8bf4\u660e \n \n \n \n \n 1256784.3745 \n [blank] \n 1256784.3745000 \n \u663e\u793a\u6570\u5b57\u7684\u5c0f\u6570\u70b9\u540e 7 \u4f4d\u7cbe\u5ea6\u3002 \n \n \n 1256784.3745 \n 0 \n 1256784 \n \u53ea\u663e\u793a\u6574\u6570\u3002 \n \n \n 1256784.3745 \n 0,0 \n 1,256,784 \n \u53ea\u663e\u793a\u7528\u9017\u53f7\u5206\u9694\u7684\u6574\u6570\u3002 \n \n \n 1256784.3745 \n 0,0.00 \n 1,256,784.38 \n \u663e\u793a\u5177\u6709 [x] \u5c0f\u6570\u70b9\u7cbe\u5ea6\u7684\u6570\u5b57\uff0c\u5176\u4e2d [x] \u662f\u60a8\u5728\u5c0f\u6570\u70b9\u540e\u9762\u6dfb\u52a0\u7684  0  \u7684\u6570\u91cf\u3002 \n \n \n 1256784.3745 \n 0.0a \n 1.2M \n \u663e\u793a\u5177\u6709 [x] \u7cbe\u5ea6\u7684\u6570\u5b57\u548c\u57fa\u4e8e\u8be5\u6570\u5b57 1e[y] \u5e42\u7684\u5b57\u6bcd\uff08\u4f8b\u5982\uff0c\"m\" \u8868\u793a\u767e\u4e07\uff0c\"b\" \u8868\u793a\u5341\u4ebf\uff09\u3002 \n \n \n 1256784.3745 \n $0.0a \n $1.2M \n \u5728\u6570\u5b57\u4e0a\u6dfb\u52a0\u4e00\u4e2a \"$\"\u3002\u53ef\u7528\u4e8e\u4e0a\u8ff0\u6240\u6709\u683c\u5f0f\uff0c\u4f46\u5efa\u8bae\u4f7f\u7528  a  \u540e\u7f00\u3002\u76ee\u524d\u53ea\u6709 \"$\" \u662f\u552f\u4e00\u652f\u6301\u7684\u8d27\u5e01\u7b26\u53f7\u3002", "url": "https://dune.com/docs/zh/getting-started/visualizations/charts-graphs/#xy-xy-axis-tick-and-label-formats"}
{"content": "\u521b\u5efa\u53ef\u89c6\u5316\u5185\u5bb9 \u00b6 \n \u60a8\u53ef\u4ee5\u4f7f\u7528 Dune \u7684\u53ef\u89c6\u5316\u5f15\u64ce\u5728\u51e0\u79d2\u949f\u5185\u4ece\u4efb\u4f55\u67e5\u8be2\u7ed3\u679c\u4e2d\u521b\u5efa\u53ef\u89c6\u5316\u5185\u5bb9\u3002 \n \u8981\u5f00\u59cb\u4f7f\u7528\uff0c\u8bf7\u70b9\u51fb  New Visualization  \u6309\u94ae\uff1a \n \n \u7136\u540e\u60a8\u4f1a\u770b\u5230\u4e00\u4e2a\u4e0b\u62c9\u83dc\u5355\u51fa\u73b0\uff0c\u4e0a\u9762\u5217\u51fa\u4e86\u53ef\u7528\u7684\u53ef\u89c6\u5316\u7c7b\u578b\u3002\u9009\u62e9\u60a8\u60f3\u8981\u7684\u7c7b\u578b\uff0c\u7136\u540e\u70b9\u51fb  Add visualization  \u6309\u94ae\u6765\u521b\u5efa\u60a8\u7684\u53ef\u89c6\u5316\uff1a \n \n \u60a8\u53ef\u4ee5\u901a\u8fc7\u91cd\u590d\u4e0a\u8ff0\u6b65\u9aa4\uff0c\u4ece\u4e00\u4e2a\u67e5\u8be2\u4e2d\u521b\u5efa\u591a\u4e2a\u53ef\u89c6\u5316\uff08\u4ee5\u6d4b\u8bd5\u54ea\u4e2a\u6548\u679c\u6700\u597d\u6216\u63ed\u793a\u4e0d\u540c\u7684\u89c1\u89e3\uff09\uff1a \n \n \u5728\u6b64\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u6bcf\u79cd\u53ef\u89c6\u5316\u7c7b\u578b\u5982\u4f55\u8fd0\u4f5c\u7684\u4fe1\u606f\uff1a \n \n \n \u56fe\u8868 & \u56fe\u5f62  (charts-graphs/) \n \u8ba1\u6570\u5668 & \u6570\u636e\u8868  (other-visualizations/) \n \n \n ", "url": "https://dune.com/docs/zh/getting-started/visualizations/#_1"}
{"content": "\u5206\u4eab\u53ef\u89c6\u5316 \u00b6 \n \u5f53\u60a8\u521b\u5efa\u4e86\u4e00\u4e2a\u6ee1\u610f\u7684\u53ef\u89c6\u5316\uff0c\u60a8\u53ef\u4ee5\u5728 \u6570\u636e\u770b\u677f  (../dashboards/) \u4e0a\u4e0e\u4ed6\u4eba\u5206\u4eab\uff0c\u6216\u4f7f\u7528 \u5d4c\u5165  (../embeds/) \u529f\u80fd\u5c06\u5176\u5d4c\u5165\u53e6\u4e00\u4e2a\u7f51\u7ad9\u4e0a\u3002 \n ", "url": "https://dune.com/docs/zh/getting-started/visualizations/#_2"}
{"content": "\u5c06\u53ef\u89c6\u5316\u6dfb\u52a0\u81f3\u770b\u677f \u00b6 \n \u70b9\u51fb  Add to dashboard  \u6309\u94ae\u6dfb\u52a0\u53ef\u89c6\u5316\u81f3 \u770b\u677f  (../dashboards/) \uff1a \n \n \u7136\u540e\u70b9\u51fb\u60a8\u73b0\u6709\u7684\u4e00\u4e2a\u770b\u677f\u65c1\u8fb9\u7684  Add  \u6309\u94ae\uff1a \n \n \u6216\u8005\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u770b\u677f\uff0c\u5e76\u50cf\u8fd9\u6837\u5c06\u60a8\u7684\u53ef\u89c6\u5316\u6dfb\u52a0\u5230\u5176\u4e2d\uff1a \n \n \u70b9\u51fb  New dashboard  \u6309\u94ae \n \u6dfb\u52a0\u540d\u79f0 \n \u70b9\u51fb  Save dashboard  \u6309\u94ae \n \u70b9\u51fb\u60a8\u65b0\u770b\u677f\u65c1\u7684  Add  \u6309\u94ae \n \n \n \u8981\u67e5\u770b\u60a8\u6dfb\u52a0\u53ef\u89c6\u5316\u7684\u770b\u677f\uff0c\u70b9\u51fb\u5f39\u51fa\u7a97\u53e3\u4e2d\u7684\u540d\u79f0\uff1a \n \n \u5f53\u60a8\u5728\u53ef\u89c6\u5316\u5185\u5bb9\u4e2d\u505a\u4e86\u66f4\u6539\u65f6\uff0c\u5b83\u4e5f\u5c06\u5728\u60a8\u7684\u770b\u677f\u4e0a\u66f4\u65b0\uff1a \n \n \u8981\u4ece\u770b\u677f\u4e2d\u79fb\u9664\u4e00\u4e2a\u53ef\u89c6\u5316\u5185\u5bb9\uff0c\u8bf7\u70b9\u51fb  Added  \u6309\u94ae\uff1a \n \n ", "url": "https://dune.com/docs/zh/getting-started/visualizations/#_3"}
{"content": "\u521b\u5efa\u53ef\u89c6\u5316\u5d4c\u5165 \u00b6 \n \u8981\u4ece\u60a8\u7684\u53ef\u89c6\u5316\u4e2d\u521b\u5efa\u4e00\u4e2a \u5d4c\u5165  (../embeds/) \uff0c\u9996\u5148\u9009\u62e9\u60a8\u5e0c\u671b\u5d4c\u5165\u7684\u53ef\u89c6\u5316\u5185\u5bb9\uff0c\u7136\u540e\u70b9\u51fb \u6570\u636e\u6d4f\u89c8\u5668  (../queries/data-explorer/) \u4e0a\u65b9\u7684  Embed  \u6309\u94ae\uff1a", "url": "https://dune.com/docs/zh/getting-started/visualizations/#_4"}
{"content": "\u4f7f\u7528\u6570\u636e\u62bd\u8c61\u548c\u9b54\u6cd5 \u00b6 \n \u7528 Dune \u505a\u5f88\u68d2\u7684\u5206\u6790\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u662f\u4f7f\u7528\u60a8\u5728 \u9b54\u6cd5  (../../../reference/tables/spells/) \uff08Dune V2\uff09\u548c \u6570\u636e\u62bd\u8c61  (../../../reference/tables/v1/abstractions/) \uff08Dune V1\uff09\u4e2d\u53d1\u73b0\u7684\u6574\u7406\u597d\u7684\u6570\u636e\u3002 \n \u8fd9\u4e9b\u6570\u636e\u8868\uff0c\u5982 dex.trades \uff0c\u662f\u6e05\u6d17\u8fc7\u7684\u5e76\u5305\u542b\u6570\u636e/\u5143\u6570\u636e\uff08\u5982\u4eba\u7c7b\u53ef\u8bfb\u7684\u4ee3\u5e01\u7b26\u53f7\uff09\uff0c\u8ba9\u5b83\u4eec\u975e\u5e38\u5bb9\u6613\u67e5\u8be2\u3002 \n ", "url": "https://dune.com/docs/zh/getting-started/queries/tips/#_1"}
{"content": "V1 \u5185\u8054\u4ee5\u592a\u574a\u5730\u5740\u683c\u5f0f \u00b6 \n \n Warning \n \u6b64\u529f\u80fd\u53ea\u5728 Dune V1 \u5f15\u64ce\u4e2d\u53ef\u7528\u3002 \n \n \u5728 Dune \u4e2d\uff0c\u4ee5\u592a\u574a\u5730\u5740\u88ab\u5b58\u50a8\u4e3a PostgreSQL \u5b57\u8282\u6570\uff0c\u5e76\u4ee5  \\x  \u524d\u7f00\u8fdb\u884c\u7f16\u7801\u3002\u8fd9\u4e0e\u4e60\u60ef\u7684  0x  \u524d\u7f00\u4e0d\u540c\u3002\u5982\u679c\u60a8\u60f3\u4f7f\u7528\u4e00\u4e2a\u5185\u8054\u5730\u5740\uff0c\u6bd4\u5982\u8bf4\u8fc7\u6ee4\u4e00\u4e2a\u7ed9\u5b9a\u7684\u4ee3\u5e01\uff0c\u60a8\u53ef\u4ee5\u8fd9\u6837\u505a \n  (#__codelineno-0-1) WHERE   token   =   '\\x6b175474e89094c44da98b954eedeac495271d0f' \n \n \u7b80\u5355\u6765\u8bf4\u5c31\u662f \n  (#__codelineno-1-1) WHERE   token   =   '\\x6b175474e89094c44da98b954eedeac495271d0f' :: bytea \n \n ", "url": "https://dune.com/docs/zh/getting-started/queries/tips/#v1"}
{"content": "\u7528 camelCase \u5f15\u7528\u5217\u540d\u548c\u8868\u540d \u00b6 \n \n Warning \n \u6b64\u529f\u80fd\u53ea\u5728 Dune V1 \u5f15\u64ce\u4e2d\u53ef\u7528\u3002 \n \n \u5217\u548c\u8868\u7684\u540d\u79f0\u5927\u591a\u76f4\u63a5\u53d6\u81ea\u667a\u80fd\u5408\u7ea6\u7684\u5e94\u7528\u4e8c\u8fdb\u5236\u63a5\u53e3\uff08ABI\uff09\uff0c\u6ca1\u6709\u4efb\u4f55\u4fee\u6539\u3002 \n \u7531\u4e8e\u5927\u591a\u6570\u667a\u80fd\u5408\u7ea6\u662f\u7528 Solidity \u7f16\u5199\u7684\uff0c\u800c\u4e14\u662f\u7528 camelCased \u547d\u540d\u60ef\u4f8b\u7f16\u5199\u7684\uff0c\u6240\u4ee5 Dune \u7684\u8bb8\u591a\u8868\u548c\u5217\u7684\u540d\u79f0\u4e5f\u662f\u5982\u6b64\u3002 \n PostgreSQL\uff08Dune V1\uff09 \u8981\u6c42\u60a8\u5bf9\u5217\u548c\u8868\u540d\u7684\u5f15\u7528\u662f\u533a\u5206\u5927\u5c0f\u5199\u7684\uff1a \n  (#__codelineno-2-1) SELECT   \u201c columnName \u201d \n  (#__codelineno-2-2) FROM   projectname . \u201d contractName_evt_EventName \u201d \n  (#__codelineno-2-3) LIMIT   10 \n \n \u5728 PostgreSQL \u4e2d\uff0c\u53cc\u5f15\u53f7\u662f\u4e3a\u8868\u548c\u5217\u4fdd\u7559\u7684\uff0c\u800c\u5355\u5f15\u53f7\u662f\u4e3a\u503c\u4fdd\u7559\u7684\uff1a \n  (#__codelineno-3-1) SELECT   \u201c columnName \u201d \n  (#__codelineno-3-2) FROM   projectname . \u201d contratName_evt_eventName \u201d \n  (#__codelineno-3-3) WHERE   contract_address   =   '\\x6B175474E89094C44Da98b954EedeAC495271d0F' \n  (#__codelineno-3-4) LIMIT   10 \n \n\u67b6\u6784\u5728 Dune \u4e2d\u603b\u662f\u5c0f\u5199\u7684\u3002\n ", "url": "https://dune.com/docs/zh/getting-started/queries/tips/#camelcase"}
{"content": "\u79fb\u9664\u5c0f\u6570 \u00b6 \n \u4ee5\u592a\u8f6c\u8d26\u548c\u5927\u591a\u6570 ERC-20 \u4ee3\u5e01\u90fd\u6709 18 \u4f4d\u5c0f\u6570\uff0c\u5927\u591a\u6570\u4eba\u7c7b\u90fd\u8ba4\u4e3a\u8fd9\u592a\u591a\u4e86\uff0c\u65e0\u6cd5\u9605\u8bfb\u3002 \n \u8981\u5c06\u8fd9\u4e9b\u8f6c\u6362\u4e3a\u66f4\u4eba\u6027\u5316\u7684\u5f62\u5f0f\uff0c\u4f7f\u7528  erc20.tokens  \u8868\uff0c\u5e76\u5c06\u4ee3\u5e01\u7684  transfer_value  \u9664\u4ee5 10\uff1a \n PostgreSQL  (#__tabbed_1_1) Databricks SQL  (#__tabbed_1_2) \n \n \n  (#__codelineno-4-1) transfer_value   /   10 ^ erc20 . tokens . decimals \n \n \n \n  (#__codelineno-5-1) transfer_value   /   x * power ( 10 , y ) `   or   ` transfer_value   /   x * 1 e * y \n \n \n \n \n ", "url": "https://dune.com/docs/zh/getting-started/queries/tips/#_2"}
{"content": "\u7528  date_trunc  \u83b7\u53d6\u65f6\u95f4 \u00b6 \n \u6211\u4eec\u6dfb\u52a0\u4e86  evt_block_time  \u6765 \u89e3\u6790\u4e8b\u4ef6\u8868  (../../../reference/tables/decoded/) \u4ee5\u65b9\u4fbf\u60a8\u7684\u4f7f\u7528\u3002 \n \u4f7f\u7528\u5b83\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u65b9\u6cd5\u662f\u4e0e  date_trunc  \u51fd\u6570\u4e00\u8d77\u4f7f\u7528\uff0c\u50cf\u8fd9\u6837\uff1a \n  (#__codelineno-6-1) SELECT   date_trunc ( 'week' ,   evt_block_time )   AS   time \n \n \u60a8\u53ef\u4ee5\u4f7f\u7528  minute \u3001 day \u3001 week \uff0c\u6216\u8005  month \u3002 \n ", "url": "https://dune.com/docs/zh/getting-started/queries/tips/#date_trunc"}
{"content": "\u5982\u4f55\u83b7\u53d6 USD \u4ef7\u683c \u00b6 \n \u4e3a\u4e86\u83b7\u5f97\u94fe\u4e0a\u6d3b\u52a8\u7684\u7f8e\u5143\u4ef7\u683c\uff0c\u60a8\u901a\u5e38\u8981\u5728\u7ed9\u5b9a\u7684  asset \u3010\u8d44\u4ea7\u3011\u7684  minute \u3010\u5206\u949f\u3011\u4e0a\uff0c JOIN  \u60a8\u6b63\u5728\u5bfb\u627e\u7684\u667a\u80fd\u5408\u7ea6\u4e8b\u4ef6\u7684  prices.usd \uff1a \n  (#__codelineno-7-1) LEFT   JOIN   prices . usd   p   \n  (#__codelineno-7-2) ON   p . minute   =   date_trunc ( 'minute' ,   evt_block_time ) \n  (#__codelineno-7-3) AND   event . \"asset\"   =   p . contract_address \n \n \u7136\u540e\u60a8\u53ef\u4ee5\u7b80\u5355\u5730\u5c06\u667a\u80fd\u5408\u7ea6\u4e8b\u4ef6\u7684\u4ef7\u503c\u6216\u91d1\u989d\u4e0e\u60a8  SELECT  \u8bed\u53e5\u4e2d\u7684\u7f8e\u5143\u4ef7\u683c\u76f8\u4e58\uff1a * p.price \u3002 \n ", "url": "https://dune.com/docs/zh/getting-started/queries/tips/#usd"}
{"content": "\u4ee3\u5e01\u7b26\u53f7 \u00b6 \n \u60a8\u7ecf\u5e38\u60f3\u6309\u4ee3\u5e01\u5730\u5740\u6765\u5206\u7ec4\u60a8\u7684\u7ed3\u679c\uff0c\u4f8b\u5982\u770b DEX \u4e0a\u6309\u4ee3\u5e01\u5206\u7ec4\u7684\u4ea4\u6613\u91cf\u3002\u4f46\u662f\uff0c\u4e00\u5927\u5806\u4ee3\u5e01\u5730\u5740\u7684\u5217\u8868\u662f\u62bd\u8c61\u548c\u96be\u4ee5\u6d88\u5316\uff01 \n \u6240\u4ee5\u8981\u7528\u4ee3\u5e01\u7b26\u53f7\u4ee3\u66ff\u3002 \ud83e\ude84 \n \u8981\u505a\u5230\u8fd9\u4e00\u70b9\uff0c JOIN   erc20.tokens  \u8868\u4e0e\u60a8\u7684\u4e8b\u4ef6\u8868\uff0c\u5176\u4e2d asset = {{token_address}} \u3002\u7136\u540e\u60a8\u5728\u9009\u62e9\u8bed\u53e5\u4e2d\u9009\u62e9\u7b26\u53f7\u800c\u4e0d\u662f\u4ee3\u5e01\u5730\u5740\u3002 \n PostgreSQL  (#__tabbed_2_1) Databricks SQL  (#__tabbed_2_2) \n \n \n \u8bf7\u6ce8\u610f   erc20.tokens  \u8868\u5305\u542b\u4e86\u4e00\u4e9b\u70ed\u95e8\u7684\u4ee3\u5e01\u7684\u9009\u62e9\u3002\u5982\u679c\u60a8\u6b63\u5728\u5904\u7406\u6bd4\u8f83\u6a21\u7cca\u7684\u4ee3\u5e01\uff0c\u60a8\u5e94\u8be5\u5c0f\u5fc3\u5730\u4e0e\u8fd9\u4e2a\u8868\u8fde\u63a5\uff08join\uff09\uff0c\u56e0\u4e3a\u4e0d\u5728 coincap \u8868\u4e2d\u7684\u4ee3\u5e01\u53ef\u80fd\u4f1a\u88ab\u6392\u9664\u5728\u60a8\u7684\u7ed3\u679c\u4e4b\u5916\u3002 \n \n \n \u8bf7\u6ce8\u610f   tokens_blockchain.erc20  t\u8868\u5305\u542b\u4e86\u4e00\u4e9b\u70ed\u95e8\u7684\u4ee3\u5e01\u7684\u9009\u62e9\u3002\u5982\u679c\u60a8\u6b63\u5728\u5904\u7406\u6bd4\u8f83\u6a21\u7cca\u7684\u4ee3\u5e01\uff0c\u60a8\u5e94\u8be5\u5c0f\u5fc3\u5730\u4e0e\u8fd9\u4e2a\u8868\u8fde\u63a5\uff08join\uff09\uff0c\u56e0\u4e3a\u4e0d\u5728 coincap \u8868\u4e2d\u7684\u4ee3\u5e01\u53ef\u80fd\u4f1a\u88ab\u6392\u9664\u5728\u60a8\u7684\u7ed3\u679c\u4e4b\u5916\u3002 \n \n \n \n ", "url": "https://dune.com/docs/zh/getting-started/queries/tips/#_3"}
{"content": "\u7528\u53c2\u6570\u8fc7\u6ee4\u67e5\u8be2\u548c\u770b\u677f \u00b6 \n \u53c2\u6570\u53ef\u4ee5\u628a\u60a8\u7684\u67e5\u8be2\u6216\u770b\u677f\u53d8\u6210\u533a\u5757\u94fe\u6570\u636e\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 \n \u70b9\u51fb\u67e5\u8be2\u7f16\u8f91\u5668\u9875\u4e0a\u7684 SQL \u7f16\u8f91\u5668\u53f3\u4e0b\u65b9\u7684  Add parameter \u3010\u6dfb\u52a0\u53c2\u6570\u3011 \n \n \u53cc\u5927\u62ec\u53f7\u5c06\u51fa\u73b0\u5728\u60a8\u7684\u67e5\u8be2\u4e2d  {{}} \u3002\u653e\u5165\u53c2\u6570\u540d\u79f0\uff0c\u5982  {{token symbol}}  \u6216  {{holder address}} \u3002 \n \u6ce8\u610f\uff0c\u5982\u679c\u60a8\u60f3\u5728\u60a8\u7684\u67e5\u8be2\u4e2d\u4f7f\u7528\u53c2\u6570\uff0c\u60a8\u9700\u8981\u52a0\u4e0a\u5355\u5f15\u53f7  WHERE token = '{{token symbol}}' . \n \n Warning \n \u6b64\u529f\u80fd\u53ea\u5728 Dune V1 \u5f15\u64ce\u4e2d\u53ef\u7528\u3002 \n \n \u4e3a\u4e86\u4f7f\u7528\u6237\u4e0d\u5fc5\u4e3a\u5730\u5740\u8f93\u5165  \\x \uff0c\u4e00\u4e2a\u6709\u7528\u7684\u5730\u5740\u683c\u5f0f\u8f6c\u5316\u662f\u8fd9\u6837\u7684\uff1a \n  (#__codelineno-8-1) WHERE   contract_address   =   CONCAT ( '\\x' ,   substring ( '{{token address}}'   from   3 )):: bytea \n \n \u8fd9\u4f7f\u4f7f\u7528\u60a8\u67e5\u8be2\u7684\u7528\u6237\u5728\u8fc7\u6ee4\u65f6\uff0c\u53ea\u9700\u8981\u7b80\u5355\u5730\u9ecf\u8d34  0xc00e94cb662c3520282e6f5717214004a7f26888  \u800c\u4e0d\u662f  \\xc00e94cb662c3520282e6f5717214004a7f26888  \u3002", "url": "https://dune.com/docs/zh/getting-started/queries/tips/#_4"}
{"content": "\u4ec0\u4e48\u662f\u53c2\u6570\uff1f \u00b6 \n \u53c2\u6570\u662f Dune \u4e00\u4e2a\u4e13\u95e8\u7684\u529f\u80fd\uff0c\u5141\u8bb8\u60a8\u5728\u67e5\u8be2\u4ee3\u7801\u7684\u67d0\u4e9b\u90e8\u5206\u4f7f\u7528\u53d8\u91cf\u3002\u8fd9\u4e2a\u53d8\u91cf\u53ef\u4ee5\u4ece\u770b\u677f\u4e0a\u66f4\u6539\uff0c\u56e0\u6b64\u5141\u8bb8\u60a8\u505a\u4e00\u4e2a\u4ea4\u4e92\u5f0f\u770b\u677f\u3002 \n \u53c2\u6570\u5141\u8bb8\u60a8\u901a\u8fc7\u51e0\u4e2a\u7b80\u5355\u7684\u70b9\u51fb\u5bf9\u60a8\u7684\u4ee3\u7801\u7684\u67d0\u4e9b\u5b9a\u4e49\u53c2\u6570\u8fdb\u884c\u4fee\u6539\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u53c2\u6570\u529f\u80fd\u6765\u6539\u53d8\u60a8\u7684\u4ee3\u7801\u7684\u8fd9\u4e9b\u65b9\u9762\u2014\u2014 contract_address \u3001 symbol  \u6216  date ranges \u2014\u2014\u800c\u4e0d\u662f\u624b\u52a8\u8f93\u5165\u3002\u8fd9\u5141\u8bb8\u60a8\u5efa\u7acb\u4e00\u4e2a\u4ea4\u4e92\u5f0f\u770b\u677f\u6216\u53ef\u5b9a\u5236\u7684\u67e5\u8be2\uff0c\u6d4f\u89c8\u8005\u53ef\u4ee5\u7528\u5b83\u6765\u67e5\u8be2\u4ed6\u9700\u8981\u7684\u6570\u636e\u3002 \n \u53c2\u6570\u5728\u67e5\u8be2\u4ee3\u7801\u4e2d\u5b9a\u4e49\u4e3a  {{parametername}} \uff0c\u5e76\u5c06\u51fa\u73b0\u5728\u67e5\u8be2\u7684\u4e0b\u65b9\u548c\u4efb\u4f55\u4f7f\u7528\u4e86\u53c2\u6570\u7684\u67e5\u8be2\u53ef\u89c6\u5316\u7684\u6570\u636e\u770b\u677f\u4e2d\u3002 \n \u60a8\u53ef\u4ee5\u5728\u67e5\u8be2\u4e0b\u9762\u7684\u53c2\u6570\u4e2d\u6216\u5728\u770b\u677f\u7684\u53c2\u6570\u680f\u76ee\u4e2d\u4f20\u9012\u8f93\u5165\u3002 \n \u53ea\u9700\u8fd0\u884c\u67e5\u8be2\u5c31\u53ef\u4ee5\u5728\u67e5\u8be2\u7f16\u8f91\u5668\u4e2d\u4e3a\u67e5\u8be2\u5e94\u7528\u53c2\u6570\u3002 \n \u5728\u770b\u677f\u4e0a\uff0c\u60a8\u53ef\u4ee5\u70b9\u51fb\u9876\u90e8\u7684  apply all \uff0c\u6216\u8005\u5355\u72ec\u6539\u53d8\u53c2\u6570\u5e76\u70b9\u51fb  Enter \u3002 Enter  \u7684\u63d0\u4ea4\u65b9\u5f0f\u4e5f\u9002\u7528\u4e8e\u4e0b\u62c9\u83dc\u5355\u548c\u65e5\u671f\u9009\u62e9\u5668\u3002 \n \u770b\u677f\u4e2d\u7684\u53c2\u6570\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u67e5\u8be2\u4e4b\u95f4\u5171\u4eab\uff0c\u53ea\u8981\u786e\u4fdd\u5728\u6240\u6709\u7684\u67e5\u8be2\u4e4b\u95f4\u4f7f\u7528\u76f8\u540c\u7684\u540d\u79f0\u3001\u7c7b\u578b\u548c\u9ed8\u8ba4\u503c\u3002 \n \n \n \n ", "url": "https://dune.com/docs/zh/getting-started/queries/parameters/#_1"}
{"content": "\u6211\u5982\u4f55\u4f7f\u7528\u53c2\u6570\uff1f \u00b6 \n \u60a8\u53ef\u4ee5\u901a\u8fc7\u8f93\u5165  {{parametername}}  \u6216\u4f7f\u7528\u67e5\u8be2\u4e0b\u9762\u7684\u6309\u94ae\uff0c\u7b80\u5355\u5730\u5728\u60a8\u7684\u67e5\u8be2\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u53c2\u6570\u3002 \n \u60a8\u53ef\u4ee5\u901a\u8fc7\u70b9\u51fb\u67e5\u8be2\u7f16\u8f91\u5668\u4e2d\u53c2\u6570\u65c1\u8fb9\u7684\u9f7f\u8f6e\u6765\u7f16\u8f91\u5355\u4e2a\u53c2\u6570\u7684\u5c5e\u6027\u3002\u8fd9\u5141\u8bb8\u60a8\u8bbe\u7f6e\u4e00\u4e2a\u9ed8\u8ba4\u503c\uff0c\u5b9a\u4e49\u4e00\u4e2a\u53ef\u9009\u7528\u7684\u53c2\u6570\u5217\u8868\u6216\u6539\u53d8\u53c2\u6570\u7684\u7c7b\u578b\u3002\u5982\u679c\u60a8\u60f3\u5728\u4e00\u4e2a\u770b\u677f\u4e0a\u7684\u4e0d\u540c\u67e5\u8be2\u4e4b\u95f4\u5171\u4eab\u53c2\u6570\uff0c\u8bf7\u786e\u4fdd\u5b83\u4eec\u5728\u540d\u79f0\u3001\u7c7b\u578b\u548c\u9ed8\u8ba4\u503c\u65b9\u9762\u5b8c\u5168\u5339\u914d\u3002 \n \n ", "url": "https://dune.com/docs/zh/getting-started/queries/parameters/#_2"}
{"content": "\u67e5\u8be2\u793a\u4f8b \u00b6 \n \u8be5\u67e5\u8be2\u8fd4\u56de\u4ee5\u7f8e\u5143\u8ba1\u7b97\u7684\u5df2\u4ed8\u71c3\u6599\u8d39\u603b\u989d\u3002 \n \u67e5\u8be2\u4f5c\u8005\u9009\u62e9\u5c06\u4e00\u4e2a\u53c2\u6570\u7528\u4e8e  wallet address \u3001 start date  \u548c  end date \u3002 \n  (#__codelineno-0-1) with   alltransactions \n  (#__codelineno-0-2) AS   ( \n  (#__codelineno-0-3) SELECT   \n  (#__codelineno-0-4)      block_time ,   \n  (#__codelineno-0-5)      success ,   \n  (#__codelineno-0-6)      gas_price / 10 ^ 9   AS   gas_prices ,   \n  (#__codelineno-0-7)      gas_used , \n  (#__codelineno-0-8)      ( gas_price * gas_used ) / 10 ^ 18   AS   eth_paid_for_tx , \n  (#__codelineno-0-9)      hash \n  (#__codelineno-0-10) FROM   ethereum . transactions \n  (#__codelineno-0-11) WHERE   \"from\"   =   CONCAT ( '\\x' ,   substring ( '{{1. Eth Address}}'   from   3 )):: bytea \n  (#__codelineno-0-12) AND   block_time   >=   '{{2. Start Date}}' \n  (#__codelineno-0-13) AND   block_time   <   '{{3. End Date}}' ) \n  (#__codelineno-0-14) \n  (#__codelineno-0-15) SELECT \n  (#__codelineno-0-16)      date_trunc ( 'minute' ,   block_time ), \n  (#__codelineno-0-17)      SUM ( eth_paid_for_tx * price )   over   ( ORDER   BY   date_trunc ( 'minute' ,   block_time ))   AS   \"Total Gas Fees Paid in USD\" \n  (#__codelineno-0-18) FROM   alltransactions \n  (#__codelineno-0-19) LEFT   JOIN   \n  (#__codelineno-0-20)      ( SELECT \n  (#__codelineno-0-21)          minute , \n  (#__codelineno-0-22)          price \n  (#__codelineno-0-23)      FROM   prices . usd \n  (#__codelineno-0-24)      WHERE   \n  (#__codelineno-0-25)          symbol   =   'WETH'   AND \n  (#__codelineno-0-26)          minute   >   '{{2. Start Date}}' )   AS   prices \n  (#__codelineno-0-27) ON   date_trunc ( 'minute' ,   block_time )   =   minute \n  (#__codelineno-0-28) ORDER   BY   block_time   DESC \n \n \u5728\u6b64  (https://dune.com/queries/64430/128463) \u627e\u5230\u6b64\u67e5\u8be2 \n ", "url": "https://dune.com/docs/zh/getting-started/queries/parameters/#_3"}
{"content": "\u770b\u677f\u793a\u4f8b \u00b6 \n \u901a\u8fc7\u8fd9\u4e2a\u770b\u677f\u627e\u5230\u5173\u4e8e\u4ee5\u592a\u574a\u94b1\u5305\u7684\u6709\u8da3\u7edf\u8ba1\u6570\u636e\uff1a \n https://dune.com/kevdnlol/Transaction-Breakdown  (https://dune.com/kevdnlol/Transaction-Breakdown) \n \u4f5c\u8005\u5728\u8fd9\u4e2a\u770b\u677f\u4e2d\u5305\u542b\u4e86  wallet address \u3001 start date  \u548c  end date  \u7684\u53c2\u6570\u3002 \n \u6df1\u5165\u7814\u7a76 Barnbridge \u7684\u667a\u80fd\u6536\u76ca\u4ea7\u54c1\u5355\u6c60\uff1a \n https://dune.com/0xBoxer/Barnbridge-or-Smart-Yield  (https://dune.com/0xBoxer/Barnbridge-or-Smart-Yield) \n \u4f5c\u8005\u9009\u62e9\u5728\u8fd9\u91cc\u5c06\u53c2\u6570  poolsymbol  \u53d8\u6210\u4e00\u4e2a\u4e0b\u62c9\u5217\u8868\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u65b9\u4fbf\u5730\u8bbf\u95ee\u6240\u6709\u76f8\u5173\u7684\u6c60\u5b50\uff0c\u5e76\u5bf9\u8fd9\u4e9b\u6c60\u5b50\u8fdb\u884c\u8be6\u7ec6\u7684\u7edf\u8ba1\u3002 \n \u4e86\u89e3\u6709\u591a\u5c11\u4eba\u5728\u53c2\u4e0e Yearn Vaults\uff1a \n https://dune.com/msilb7/Yearn-How-Many-Addresses-are-Participating  (https://dune.com/msilb7/Yearn-How-Many-Addresses-are-Participating) \n https://dune.com/0xrusowsky/KLIMA-Wallet-Activity  (https://dune.com/0xrusowsky/KLIMA-Wallet-Activity) \n \u4e86\u89e3\u60a8\u5728 $KLIMA \u4e2d\u7684\u6295\u8d44\u60c5\u51b5\uff1a \n https://dune.com/0xrusowsky/KLIMA-Wallet-Activity  (https://dune.com/0xrusowsky/KLIMA-Wallet-Activity) \n ", "url": "https://dune.com/docs/zh/getting-started/queries/parameters/#_4"}
{"content": "\u603b\u7ed3 \u00b6 \n \u53c2\u6570\u5141\u8bb8\u60a8\u4f7f\u60a8\u7684 SQL \u67e5\u8be2\u7684\u67d0\u4e00\u90e8\u5206\u52a8\u6001\u5316\uff0c\u4ece\u800c\u4e3a\u60a8\u63d0\u4f9b\u4f7f\u67e5\u8be2\u548c\u770b\u677f\u4e92\u52a8\u5316\u7684\u673a\u4f1a\u3002\u8fd9\u6837\u60a8\u5c31\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5728\u60a8\u7684\u770b\u677f\u4e0a\u663e\u793a\u8be6\u7ec6\u7684\u6570\u636e\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8\u6d4f\u89c8\u8005\u6839\u636e\u81ea\u5df1\u7684\u9700\u8981\u5b9a\u5236\u770b\u677f\u3002 \n \u60a8\u53ef\u4ee5\u628a\u53c2\u6570\u770b\u4f5c\u662f\u7b5b\u9009\u5668\uff0c\u4f46\u4f7f\u7528\u8fd9\u4e00\u529f\u80fd\u7684\u53ef\u80fd\u6027\u8d85\u51fa\u4e86\u8fd9\u4e2a\u8303\u56f4\u3002", "url": "https://dune.com/docs/zh/getting-started/queries/parameters/#_5"}
{"content": "\u4fdd\u5b58\u60a8\u7684\u67e5\u8be2 \u00b6 \n \u5728\u8fd0\u884c\u60a8\u7684\u67e5\u8be2\u81f3\u5c11\u4e00\u6b21\u540e\uff0c\u60a8\u4f1a\u5728\u67e5\u8be2\u7a97\u53e3\u4e0a\u65b9\u770b\u5230  Save  \u6309\u94ae\uff1a \n \n \u70b9\u51fb\u5b83\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a\u5f39\u51fa\u7a97\u53e3\uff0c\u8981\u6c42\u60a8\u7ed9\u60a8\u7684\u67e5\u8be2\u547d\u540d\uff0c\u5e76\u53ef\u4ee5\u9009\u62e9\u5c06\u8fd9\u4e2a\u67e5\u8be2\u8bbe\u4e3a\u79c1\u4eba\u67e5\u8be2\uff08 ~\u5982\u679c~ \u60a8\u662f  Dune Premium  (../../../reference/pricing/)  \u7684\u7528\u6237\uff09\uff1a \n \n \u5728\u521d\u6b21\u4fdd\u5b58\u8fc7\u540e\uff0c\u5728\u67e5\u8be2\u7a97\u53e3\u4e0a\u65b9\u60a8\u4f1a\u627e\u5230\uff1a \n \n Star \u3010\u6807\u661f\u3011\u6309\u94ae\uff0c\u8ba9\u60a8\u770b\u5230\u60a8\u7684\u67e5\u8be2\u6709\u591a\u5c11\u661f\u661f\uff0c\u4e5f\u53ef\u4ee5\u7ed9\u81ea\u5df1\u6807\u661f\u3002 \n Embed \u3010\u5d4c\u5165\u3011\u6309\u94ae\uff0c\u8ba9\u60a8\u548c\u4ed6\u4eba\u5728\u5176\u5b83\u7f51\u9875\u4e0a\u5d4c\u5165\u8be5\u67e5\u8be2\u3002 \n Fork \u3010\u5206\u53c9\u3011\u6309\u94ae\uff0c\u8ba9\u60a8\u548c\u4ed6\u4eba\u521b\u5efa\u4e00\u4e2a\u8be5\u67e5\u8be2\u7684\u526f\u672c\uff0c\u4ee5\u4fbf\u6839\u636e\u81ea\u5df1\u9700\u8981\u4fee\u6539\u5185\u5bb9\u3002\ud83d\udc96  \n \n \n \u5728\u4efb\u4f55\u65f6\u5019\u60a8\u505a\u8fdb\u4e00\u6b65\u7684\u4fee\u6539\uff0c Run \u3010\u8fd0\u884c\u3011\u6309\u94ae\u5c06\u53d8\u6210\u4e00\u4e2a  Save and run \u3010\u4fdd\u5b58\u5e76\u8fd0\u884c\u3011\u6309\u94ae\uff1a \n \n \u8fd9\u5c06\u8fd0\u884c\u60a8\u53ef\u80fd\u731c\u5230\u7684\u4e8b\u60c5\uff08\u4fdd\u5b58\u60a8\u7684\u4fee\u6539\u5e76\u91cd\u65b0\u8fd0\u884c\u60a8\u7684\u67e5\u8be2\uff09\u3002 \n ", "url": "https://dune.com/docs/zh/getting-started/queries/query-results/#_1"}
{"content": "\u91cd\u65b0\u8fd0\u884c\u60a8\u7684\u67e5\u8be2 \u00b6 \n \u5f53\u60a8\u91cd\u65b0\u8fd0\u884c\u60a8\u7684\u67e5\u8be2\u65f6\uff0c\u60a8\u7684\u7ed3\u679c\u8868\u5c06\u662f\u7a7a\u767d\u7684\uff0c\u76f4\u5230\u65b0\u7684\u6570\u636e\u51c6\u5907\u597d\u5e76\u88ab\u52a0\u8f7d\uff1a \n \n Run \u3010\u8fd0\u884c\u3011\u6309\u94ae\u5c06\u4f1a\u53d8\u6210\u5c55\u793a\uff1a \n \n \u60a8\u7684\u67e5\u8be2\u8fd0\u884c\u4e86\u591a\u4e45 \n \u4e00\u4e2a  Cancel \u3010\u53d6\u6d88\u3011\u6309\u94ae\uff08\u4e07\u4e00\u60a8\u538c\u5026\u4e86\u7b49\u5f85\uff01\uff09 \n \n \n ", "url": "https://dune.com/docs/zh/getting-started/queries/query-results/#_2"}
{"content": "\u7ed3\u679c\u6570\u636e\u8868\u6392\u7248 \u00b6 \n \u60a8\u53ef\u4ee5\u901a\u8fc7\u6570\u636e\u8868\u4e0b\u9762\u7684\u9009\u9879\u6765\u6539\u53d8\u67e5\u8be2\u7ed3\u679c\u8868\u683c\u7684\u683c\u5f0f\u548c\u5916\u89c2\u3002 \n \n \u6211\u4eec\u8fd9\u6709\u4ec0\u4e48\uff1f\ud83d\udc40 \n \n Add to dashboard \u3010\u6dfb\u52a0\u5230\u770b\u677f\u3011\u6309\u94ae\u5728\u60a8 \u4fdd\u5b58\u60a8\u7684\u67e5\u8be2  (#saving-your-query) \u4e4b\u524d\u4e0d\u4f1a\u8d77\u4f5c\u7528\u3002\u5728\u8fd9\u91cc\u4e86\u89e3\u66f4\u591a\u5173\u4e8e \u5236\u4f5c\u770b\u677f  (../../dashboards/) \u7684\u4fe1\u606f\u3002 \n \u4e00\u4e2a\u6539\u53d8\u60a8\u6570\u636e\u8868\u6807\u9898\u7684\u680f\u76ee\u3002 \n \u9488\u5bf9\u60a8\u6bcf\u4e00\u680f\u7684\u8bbe\u7f6e\u3002 \n \n \u680f\u76ee\u8bbe\u7f6e\u662f\u7b80\u5355\u76f4\u63a5\u7684\uff1a \n \n Title\u3010\u6807\u9898\u3011\u8ba9\u60a8\u66f4\u6539\u680f\u76ee\u6807\u9898 \n Align\u3010\u5bf9\u9f50\u3011\u8ba9\u60a8\u5bf9\u9f50\u6bcf\u4e00\u680f\u6570\u636e\u7684\u6587\u672c \n Format\u3010\u683c\u5f0f\u3011\u8ba9\u60a8\u66f4\u6539\u6570\u5b57\u7684\u683c\u5f0f\uff0c\u66f4\u591a\u4ecb\u7ecd\u89c1\u4e0b\u9762 \ud83d\udc47\u3002 \n Hide column\u3010\u9690\u85cf\u680f\u76ee\u3011\u5c06\u8be5\u5217\u4ece\u60a8\u7684\u8868\u7684\u663e\u793a\u4e2d\u79fb\u9664 \n Colored positive values\u3010\u6b63\u503c\u4e0a\u8272\u3011\u4f7f\u60a8\u5217\u7684\u6b63\u503c \u53d8\u6210\u7eff\u8272 . \n Colored negative values\u3010\u8d1f\u503c\u4e0a\u8272\u3011 \u4f7f\u60a8\u5217\u7684\u8d1f\u503c \u53d8\u6210\u7ea2\u8272 . \n \n \u5217\u53f7\u7684\u683c\u5f0f\u4e5f\u9075\u5faa\u8fd9\u4e2a\u903b\u8f91\uff1a \n \n \n \n \u6570\u503c \n \u6570\u5b57\u683c\u5f0f \n \u8f93\u51fa \n \u4ecb\u7ecd \n \n \n \n \n 1256784.3745 \n \u7a7a\u767d \n 1256784,3745000 \n \u663e\u793a\u5b8c\u6574\u6570\u5b57\u548c\u4e03\u4f4d\u5c0f\u6570 \n \n \n 1256784.3745 \n 0 \n 1256784 \n \u53ea\u663e\u793a\u6574\u6570 \n \n \n 1256784.3745 \n 0,0 \n 1,256,784 \n \u53ea\u663e\u793a\u5e26\u6709\u9017\u53f7\u5206\u9694\u7b26\u7684\u6574\u6570 \n \n \n 1256784.3745 \n 0,0.00 \n 1,256,784.38 \n \u6839\u636e\u5c0f\u6570\u70b9\u540e\u7684\u96f6\u7684\u6570\u91cf\u663e\u793a\u76f8\u5e94\u5e26\u5c0f\u6570\u70b9\u7684\u6570\u503c \n \n \n 1256784.3745 \n 0[.]0a \n 1.2m \n \u4ee5\u7f29\u7565\u683c\u5f0f\u663e\u793a\u6570\u503c\u3002 \u5c06\u6839\u636e\u5c0f\u6570\u70b9\u540e\u7684\u96f6\u7684\u6570\u91cf\u663e\u793a\u7f29\u7565\u6570\u7684\u5c0f\u6570\u3002 \n \n \n 1256784.3745 \n $0[.]0a \n $1.2m \n \u9075\u5b88\u4e0e\u4e4b\u524d\u76f8\u540c\u7684\u65b9\u6cd5\uff0c\u4f46\u589e\u52a0\u4e86\u4e00\u4e2a $ \u524d\u7f00\u3002 \n \n \n \n ", "url": "https://dune.com/docs/zh/getting-started/queries/query-results/#_3"}
{"content": "\u53ef\u89c6\u5316 \u00b6 \n \u8981\u628a\u67e5\u8be2\u7ed3\u679c\u505a\u6210\u53ef\u89c6\u5316\uff0c\u9996\u5148\u8981\u505a\u7684\u662f\uff0c\u60a8\u731c\u5bf9\u4e86\uff0c\u5c31\u662f\u731b\u6309\u4e0b  New Visualization   \u6309\u94ae (\u5982\u679c\u60a8\u613f\u610f\uff0c\u6b63\u5e38\u7684\u70b9\u51fb\u4e5f\u662f\u53ef\u4ee5\u7684\uff09\u3002 \n \u7136\u540e\u67e5\u770b\u6211\u4eec\u7684 \u53ef\u89c6\u5316  (../visualizations) \u6587\u6863\uff0c\u5b66\u4e60\u5982\u4f55\u521b\u9020 \ud83d\udcca \u5947\u8ff9\uff01", "url": "https://dune.com/docs/zh/getting-started/queries/query-results/#_4"}
{"content": "\u8df3\u8f6c\u81f3\n          (#1-find-the-main-point-of-entry) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/getting-started/query-quick-start/example.md) \n \u793a\u4f8b \n Let's walk through an example of building a query using  OpenSea  (https://opensea.io/)  data to: \n \n Figure out who the top buyers and sellers are by USD \n Visualize this in some sort of distribution, over some sort of time period. \n \n If you get stuck,  fork and test out the demo query here  (https://dune.com/queries/1424158?)  or ask for help in the  #query-questions Discord channel  (https://discord.com/channels/757637422384283659/757641002138730588) ! \n ", "url": "https://dune.com/docs/zh/getting-started/query-quick-start/example/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/getting-started/query-quick-start/index.md) \n \u67e5\u8be2\u5165\u95e8 \n \u8fd9\u91cc\u6709\u4e00\u4e2a\u7b80\u77ed\u7684\u4e94\u6b65\u6307\u5357\uff0c\u4ee5\u719f\u6089\u4e00\u4e2a\u534f\u8bae\u5e76\u5f04\u6e05\u695a\u5982\u4f55\u4f7f\u7528 Dune \u8fdb\u884c\u67e5\u8be2\u3002 \n \u611f\u8c22  @ilemi  (https://dune.com/ilemi)  \u6574\u7406\u6b64\u7248\u5185\u5bb9\uff01 \n \u5728\u6b64\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u67e5\u8be2\u7684\u5185\u5bb9  (../queries/) \u3002 \n ", "url": "https://dune.com/docs/zh/getting-started/query-quick-start/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#dune) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/getting-started/index.md) \n \u5165\u95e8 \n \u5165\u95e8\u662f\u4e86\u89e3\u65b9\u5411\u548c\u5b66\u4e60\u5982\u4f55\u4f7f\u7528 Dune \u7684\u5730\u65b9\uff01 \n ", "url": "https://dune.com/docs/zh/getting-started/"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/spellbook/Example%20Spell%20Models/final-day-balance.md) \n Final Daily Balance \n This is our final daily Ethereum ERC20 token balances spell. We expand our Spell to cover all days, not just the days with transfer activity. We add price data, we remove known rebase tokens and any tokens that resulted in large negative balances. \n The ref tokens_ethereum_rebase is a static list of known rebase tokens that we manage. Whereas, the ref  'balances_ethereum_erc20_noncompliant'  is a table we derive from transfers_ethereum_erc20_rolling_day. That table looks for unique token_addresses with larger negative balances which indicate the contract may not be compliant with ERC20. \n balances_ethereum_erc20_day.sql  (https://github.com/duneanalytics/spellbook/blob/master/spellbook/models/balances/ethereum/erc20/balances_ethereum_erc20_day.sql) \n  (#__codelineno-0-1) {{   config ( \n  (#__codelineno-0-2)         alias = 'erc20_day' \n  (#__codelineno-0-3)         ) \n  (#__codelineno-0-4) }} \n  (#__codelineno-0-5) \n  (#__codelineno-0-6) with \n  (#__codelineno-0-7)     days   as   ( \n  (#__codelineno-0-8)         select \n  (#__codelineno-0-9)             explode ( \n  (#__codelineno-0-10)                 sequence ( \n  (#__codelineno-0-11)                     to_date ( '2015-01-01' ),   date_trunc ( 'day' ,   now ()),   interval   1   day \n  (#__codelineno-0-12)                 ) \n  (#__codelineno-0-13)             )   as   day \n  (#__codelineno-0-14)     ) \n  (#__codelineno-0-15) \n  (#__codelineno-0-16) ,   daily_balances   as \n  (#__codelineno-0-17) ( SELECT \n  (#__codelineno-0-18)     wallet_address , \n  (#__codelineno-0-19)     token_address , \n  (#__codelineno-0-20)     amount_raw , \n  (#__codelineno-0-21)     amount , \n  (#__codelineno-0-22)     day , \n  (#__codelineno-0-23)     symbol , \n  (#__codelineno-0-24)     lead ( day ,   1 ,   now ())   OVER   ( PARTITION   BY   token_address ,   wallet_address   ORDER   BY   day )   AS   next_day \n  (#__codelineno-0-25)     FROM   {{   ref ( 'transfers_ethereum_erc20_rolling_day' )   }} ) \n  (#__codelineno-0-26) \n  (#__codelineno-0-27) SELECT \n  (#__codelineno-0-28)     'ethereum'   as   blockchain , \n  (#__codelineno-0-29)     d . day , \n  (#__codelineno-0-30)     b . wallet_address , \n  (#__codelineno-0-31)     b . token_address , \n  (#__codelineno-0-32)     b . amount_raw , \n  (#__codelineno-0-33)     b . amount , \n  (#__codelineno-0-34)     b . amount   *   p . price   as   amount_usd , \n  (#__codelineno-0-35)     b . symbol \n  (#__codelineno-0-36) FROM   daily_balances   b \n  (#__codelineno-0-37) INNER   JOIN   days   d   ON   b . day   <=   d . day   AND   d . day   <   b . next_day \n  (#__codelineno-0-38) LEFT   JOIN   {{   source ( 'prices' ,   'usd' )   }}   p \n  (#__codelineno-0-39)     ON   p . contract_address   =   b . token_address \n  (#__codelineno-0-40)     AND   d . day   =   p . minute \n  (#__codelineno-0-41)     AND   p . blockchain   =   'ethereum' \n  (#__codelineno-0-42) -- Removes rebase tokens from balances \n  (#__codelineno-0-43) LEFT   JOIN   {{   ref ( 'tokens_ethereum_rebase' )   }}    as   r \n  (#__codelineno-0-44)     ON   b . token_address   =   r . contract_address \n  (#__codelineno-0-45) -- Removes likely non-compliant tokens due to negative balances \n  (#__codelineno-0-46) LEFT   JOIN   {{   ref ( 'balances_ethereum_erc20_noncompliant' )   }}    as   nc \n  (#__codelineno-0-47)     ON   b . token_address   =   nc . token_address \n  (#__codelineno-0-48) WHERE   r . contract_address   is   null \n  (#__codelineno-0-49) and   nc . token_address   is   null \n \n transfers_ethereum_schema.yml  (https://github.com/duneanalytics/spellbook/blob/master/spellbook/models/transfers/ethereum/transfers_ethereum_schema.yml) \n  (#__codelineno-1-1)    -   name :   balances_ethereum_erc20_day \n  (#__codelineno-1-2)      meta : \n  (#__codelineno-1-3)        blockchain :   ethereum \n  (#__codelineno-1-4)        sector :   balances \n  (#__codelineno-1-5)        project :   erc20 \n  (#__codelineno-1-6)        contibutors :   soispoke, dot2dotseurat \n  (#__codelineno-1-7)      config : \n  (#__codelineno-1-8)        tags :   [ 'balances' ,   'ethereum' ,   'erc20' ,   'day' ,   'soispoke' ,   'dot2dotseurat' ] \n  (#__codelineno-1-9)      description :   > \n  (#__codelineno-1-10)          Daily token balances of ERC20 Ethereum tokens per wallet and contract address pair. \n  (#__codelineno-1-11)          Depends on erc20_ethereum_transfers. \n  (#__codelineno-1-12)      columns : \n  (#__codelineno-1-13)        -   *blockchain \n  (#__codelineno-1-14)        -   &day \n  (#__codelineno-1-15)          name :   day \n  (#__codelineno-1-16)          description :   \"UTC   event   block   time   truncated   to   the   day   mark\" \n  (#__codelineno-1-17)        -   *wallet_address \n  (#__codelineno-1-18)        -   *token_address \n  (#__codelineno-1-19)        -   *amount_raw \n  (#__codelineno-1-20)        -   *amount \n  (#__codelineno-1-21)        -   *amount_usd \n  (#__codelineno-1-22)        -   *symbolyam", "url": "https://dune.com/docs/spellbook/Example%20Spell%20Models/final-day-balance/"}
{"content": "\u81ea\u52a8\u8865\u5168\uff08Autocomplete\uff09 \u00b6 \n \u60a8\u53ef\u4ee5\u4f7f\u7528\u53f3\u4e0a\u89d2\u7684\u9f7f\u8f6e\u6765\u542f\u7528/\u7981\u7528\u67e5\u8be2\u7f16\u8f91\u5668\u7684\u81ea\u52a8\u8865\u5168\u529f\u80fd\uff1a \n \n \u81ea\u52a8\u8865\u5168\u529f\u80fd\u5c06\u663e\u793a PostgreSQL \u7684\u5173\u952e\u5b57\uff0c\u4ee5\u53ca\u60a8\u5df2\u7ecf\u5305\u542b\u5728\u67e5\u8be2\u4e2d\u7684\u8868\u548c\u522b\u540d\u3002 \n \n ", "url": "https://dune.com/docs/zh/getting-started/queries/query-window/#autocomplete"}
{"content": "\u5feb\u6377\u952e \u00b6 \n \u8fd9\u91cc\u6709\u4e00\u4e9b\u5feb\u6377\u65b9\u5f0f\uff0c\u80fd\u4f7f\u5236\u4f5c\u67e5\u8be2\u53d8\u5f97\u8fc5\u901f \ud83d\udca8 \n \n \n \n \u5feb\u6377\u952e \n \u884c\u52a8 \n \n \n \n \n ctrl + enter \n \u6267\u884c\u67e5\u8be2 \n \n \n ctrl + # \u6216 / \n \u5bf9\u6240\u9009\u4ee3\u7801\u8fdb\u884c\u6ce8\u91ca \n \n \n ctrl + space \n \u62c9\u51fa\u4e00\u4e2a\u5173\u952e\u8bcd\u5217\u8868 \n \n \n crtl + z \n \u64a4\u9500\u60a8\u7684\u6700\u540e\u4e00\u6b21\u4fee\u6539 \n \n \n ctrl + y \n \u91cd\u505a\u60a8\u7684\u4e0a\u4e00\u6b21\u4fee\u6539 \n \n \n ctrl + f \n \u67e5\u627e\u5173\u952e\u8bcd \n \n \n ctrl + h \n \u67e5\u627e\u5e76\u66ff\u6362\u5173\u952e\u8bcd \n \n \n \n \u8fd9\u4e9b\u5feb\u6377\u952e\u9002\u7528\u4e8e US/UK \u952e\u76d8\uff0c\u53ef\u80fd\u4f1a\u6839\u636e\u60a8\u673a\u5668\u4e0a\u7684\u8bed\u8a00\u8bbe\u7f6e\u800c\u6709\u6240\u4e0d\u540c\u3002", "url": "https://dune.com/docs/zh/getting-started/queries/query-window/#_1"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/spellbook/Example%20Spell%20Models/rolling-sum.md) \n Rolling Sum of Daily Transfers \n The next step is to apply the rolling sum window function to each daily transfer sum. This is a pretty straightforward query. We\u2019d end here for balances if it was guaranteed that each wallet/contract pair made a transfer every day. But since that\u2019s not the case we\u2019ll finish the Spell in the next model by filling in all the missing days and doing a few more clean up steps. \n transfers_ethereum_erc20_rolling_day.sql  (https://github.com/duneanalytics/spellbook/blob/master/spellbook/models/transfers/ethereum/erc20/transfers_ethereum_erc20_rolling_day.sql) \n  (#__codelineno-0-1) {{   config ( \n  (#__codelineno-0-2)         alias   = 'erc20_rolling_day' ) \n  (#__codelineno-0-3) }} \n  (#__codelineno-0-4) \n  (#__codelineno-0-5)         select \n  (#__codelineno-0-6)             'ethereum'   as   blockchain , \n  (#__codelineno-0-7)             day , \n  (#__codelineno-0-8)             wallet_address , \n  (#__codelineno-0-9)             token_address , \n  (#__codelineno-0-10)             symbol , \n  (#__codelineno-0-11)             current_timestamp ()   as   last_updated , \n  (#__codelineno-0-12)             row_number ()   over   ( partition   by   token_address ,   wallet_address   order   by   day   desc )   as   recency_index , \n  (#__codelineno-0-13)             sum ( amount_raw )   over   ( \n  (#__codelineno-0-14)                 partition   by   token_address ,   wallet_address   order   by   day \n  (#__codelineno-0-15)             )   as   amount_raw , \n  (#__codelineno-0-16)             sum ( amount )   over   ( \n  (#__codelineno-0-17)                 partition   by   token_address ,   wallet_address   order   by   day \n  (#__codelineno-0-18)             )   as   amount \n  (#__codelineno-0-19)         from   {{   ref ( 'transfers_ethereum_erc20_agg_day' )   }} \n \n transfers_ethereum_schema.yml  (https://github.com/duneanalytics/spellbook/blob/master/spellbook/models/transfers/ethereum/transfers_ethereum_schema.yml) \n  (#__codelineno-1-1)    -   name :   transfers_ethereum_erc20_rolling_hour \n  (#__codelineno-1-2)      meta : \n  (#__codelineno-1-3)        blockchain :   ethereum \n  (#__codelineno-1-4)        sector :   transfers \n  (#__codelineno-1-5)        project :   erc20 \n  (#__codelineno-1-6)        contibutors :   soispoke, dot2dotseurat \n  (#__codelineno-1-7)      config : \n  (#__codelineno-1-8)        tags :   [ 'transfers' ,   'ethereum' ,   'erc20' ,   'rolling_hour' ,   'soispoke' ,   'dot2dotseurat' ] \n  (#__codelineno-1-9)      columns : \n  (#__codelineno-1-10)        -   *blockchain \n  (#__codelineno-1-11)        -   *hour \n  (#__codelineno-1-12)        -   *wallet_address \n  (#__codelineno-1-13)        -   *token_address \n  (#__codelineno-1-14)        -   name :   symbol \n  (#__codelineno-1-15)          description :   \"ERC20   token   symbol\" \n  (#__codelineno-1-16)        -   *amount_raw \n  (#__codelineno-1-17)        -   name :   amount \n  (#__codelineno-1-18)          description :   \"Rolling   sum   of   raw   amount   of   ERC20   token   held   *after*   taking   into   account   token   decimals\" \n  (#__codelineno-1-19)        -   name :   amount_usd \n  (#__codelineno-1-20)          description :   \"Rolling   sum   of   amount   of   ERC20   token   held   in   USD   (fiat   value   at   time   of   transaction)\" \n  (#__codelineno-1-21)        -   name :   updated_at \n  (#__codelineno-1-22)          description :   \"UTC   timestamp   when   table   was   last   updated\" \n  (#__codelineno-1-23)        -   name :   recency_index \n  (#__codelineno-1-24)          description :   \"Index   of   most   recent   balance   ascending.   recency_index=1   is   the   wallet/contract   pair's   most   recent   balance\"", "url": "https://dune.com/docs/spellbook/Example%20Spell%20Models/rolling-sum/"}
{"content": "\u67e5\u8be2\u662f Dune \u9b54\u6cd5\u7684\u6838\u5fc3 \ud83d\udc96 \u00b6 \n \u67e5\u8be2\u662f\u5deb\u5e08\u7528\u6765\u4ece Dune \u6570\u636e\u5e93\u4e2d\u63d0\u53d6\u533a\u5757\u94fe\u6570\u636e\u7684\u4e3b\u8981\u57fa\u7840\u6a21\u5757\uff0c\u7528 SQL \u51fd\u6570\u5c06\u5176\u8f6c\u5316\u4e3a\u6709\u8da3\u7684\u4e1c\u897f\uff0c\u7136\u540e\u7528  dune.com  (https://dune.com)  \u5236\u4f5c\u53ef\u89c6\u5316\u548c\u770b\u677f\u6765\u5206\u4eab\uff0c\u6216\u8005\u901a\u8fc7  Dune API  (../../api/)  \u5236\u4f5c\u4efb\u4f55\u53ef\u4ee5\u60f3\u8c61\u7684\u4e1c\u897f\u3002 \n \u901a\u8fc7 Dune \u7684 \u2728\uff0c\u67e5\u8be2\u8ba9\u5deb\u5e08\u80fd\u591f\u56de\u7b54\u4efb\u4f55\u95ee\u9898\uff01 \n \n \u8981\u60f3\u901a\u8fc7  dune.com  (https://dune.com)  \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u67e5\u8be2\uff0c\u53ea\u9700\u70b9\u51fb\u53f3\u4e0a\u65b9\u7684  New Query  \uff1a \n \n \u8fd9\u5c06\u5e26\u60a8\u8fdb\u5165\u67e5\u8be2\u7f16\u8f91\u5668\uff0c\u5728\u90a3\u91cc\u60a8\u53ef\u4ee5\u521b\u5efa Dune \u67e5\u8be2\u3002\u67e5\u8be2\u7f16\u8f91\u5668\u662f\u7531\u4e09\u4e2a\u90e8\u5206\u7ec4\u6210\u7684\uff1a \n \n \u5de6\u4fa7\u7684 \u6570\u636e\u6d4f\u89c8\u5668  (data-explorer/) \n \u53f3\u4fa7\u7684 \u67e5\u8be2\u7a97\u53e3  (query-window/) \n \u5e95\u90e8\u7684 \u67e5\u8be2\u7ed3\u679c  (query-results/) \n \n \n \u60a8\u53ef\u4ee5\u901a\u8fc7\u62d6\u52a8\u76f8\u5e94\u7684 Dune \u6807\u5fd7\u6765\u6539\u53d8\u6bcf\u4e2a\u90e8\u5206\u7684\u5927\u5c0f\uff1a \n \n \u8ba9\u6211\u4eec\u5728\u4e0b\u65b9\u7684\u9875\u9762\u4e2d\u66f4\u8be6\u7ec6\u5730\u4e86\u89e3\u67e5\u8be2\u7f16\u8f91\u5668\u7684\u6bcf\u4e00\u90e8\u5206\uff1a \n \n \n 1. \u6570\u636e\u6d4f\u89c8\u5668  (data-explorer/) \n 2. \u67e5\u8be2\u7a97\u53e3  (query-window/) \n 3. \u67e5\u8be2\u7ed3\u679c  (query-results/)", "url": "https://dune.com/docs/zh/getting-started/queries/#dune"}
{"content": "Skip to content\n          (#syntax-and-operator-differences) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/syntax-differences.md) \n Syntax Differences \n ", "url": "https://dune.com/docs/query/syntax-differences/"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/spellbook/Example%20Spell%20Models/daily-aggregation.md) \n Daily Aggregation \n This sums all transfers for the day. This table is materialized as an incrementally loaded table updated every 15 minutes because the next step includes a slower ` window  (https://spark.apache.org/docs/latest/sql-ref-syntax-qry-select-window.html) ` function to capture a rolling sum. \n There are a few novel components to make this Spell incremental: \n The  <div data-gb-custom-block data-tag=\"if\"> </div>  JINJA block allows us to add an arbitrary filter when running in \u201cincremental\u201d mode. Incremental mode is default and a full refresh is denoted by a command line arg to completely recreate the table. \n Here we use this block to filter for all data timestamped in the last two days. We are running this model every fifteen minutes, but we allow a look back of 2 days to account for data arriving late from the blockchain. \n Does that create duplicates? It would, but we are also using a \u201c merge \u201d incremental_strategy. Merge strategies require a unique key and deduplicate the table upon each update. You\u2019ll see above in the transfers view, we created our own  'unique_transfer_id'  by coalescing several transfer features together that we utilize here. \n You\u2019ll also note that this is the first use of \u201crefs\u201d in this spellset. A ref, like  {{ ref('tokens_ethereum_erc20') }}  is simply a reference to another model in the DBT project. It doesn\u2019t matter what the name of the view or table is. The ref references the name of the file itself. That means, we can\u2019t have duplicate file names. \n transfers_ethereum_erc20_agg_day.sql  (https://github.com/duneanalytics/spellbook/blob/master/spellbook/models/transfers/ethereum/erc20/transfers_ethereum_erc20_agg_day.sql) \n  (#__codelineno-0-1) {{   config ( \n  (#__codelineno-0-2)         alias   = 'erc20_agg_day' , \n  (#__codelineno-0-3)         materialized   = 'incremental' , \n  (#__codelineno-0-4)         file_format   = 'delta' , \n  (#__codelineno-0-5)         incremental_strategy = 'merge' , \n  (#__codelineno-0-6)         unique_key = 'unique_transfer_id' \n  (#__codelineno-0-7)         ) \n  (#__codelineno-0-8) }} \n  (#__codelineno-0-9) \n  (#__codelineno-0-10) select \n  (#__codelineno-0-11)     'ethereum'   as   blockchain , \n  (#__codelineno-0-12)     date_trunc ( 'day' ,   tr . evt_block_time )   as   day , \n  (#__codelineno-0-13)     tr . wallet_address , \n  (#__codelineno-0-14)     tr . token_address , \n  (#__codelineno-0-15)     t . symbol , \n  (#__codelineno-0-16)     sum ( tr . amount_raw )   as   amount_raw , \n  (#__codelineno-0-17)     sum ( tr . amount_raw   /   power ( 10 ,   t . decimals ))   as   amount , \n  (#__codelineno-0-18)     unique_tx_id   ||   '-'   ||   wallet_address   ||   '-'   ||   token_address   ||   '-'   ||   sum ( tr . amount_raw ):: string   as   unique_transfer_id \n  (#__codelineno-0-19) from   {{   ref ( 'transfers_ethereum_erc20' )   }}   tr \n  (#__codelineno-0-20) left   join   {{   ref ( 'tokens_ethereum_erc20' )   }}   t   on   t . contract_address   =   tr . token_address \n  (#__codelineno-0-21) \n  (#__codelineno-0-22) { %   raw   % } \n  (#__codelineno-0-23) { %   if   is_incremental ()   % } \n  (#__codelineno-0-24) -- this filter will only be applied on an incremental run \n  (#__codelineno-0-25) where   date_trunc ( 'day' ,   tr . evt_block_time )   >   now ()   -   interval   2   days \n  (#__codelineno-0-26) { %   endif   % } \n  (#__codelineno-0-27) { %   endraw   % } \n  (#__codelineno-0-28) group   by \n  (#__codelineno-0-29)     date_trunc ( 'day' ,   tr . evt_block_time ),   tr . wallet_address ,   tr . token_address ,   t . symbol , unique_tx_id \n \n transfers_ethereum_schema.yml  (https://github.com/duneanalytics/spellbook/blob/master/spellbook/models/transfers/ethereum/transfers_ethereum_schema.yml) \n  (#__codelineno-1-1)    -   name :   transfers_ethereum_erc20_agg_hour \n  (#__codelineno-1-2)      meta : \n  (#__codelineno-1-3)        blockchain :   ethereum \n  (#__codelineno-1-4)        sector :   transfers \n  (#__codelineno-1-5)        project :   erc20 \n  (#__codelineno-1-6)        contibutors :   soispoke, dot2dotseurat \n  (#__codelineno-1-7)      config : \n  (#__codelineno-1-8)        tags :   [ 'transfers' ,   'ethereum' ,   'erc20' ,   'agg_hour' ,   'soispoke' ,   'dot2dotseurat' ] \n  (#__codelineno-1-9)      columns : \n  (#__codelineno-1-10)        -   *blockchain \n  (#__codelineno-1-11)        -   &hour \n  (#__codelineno-1-12)          name :   hour \n  (#__codelineno-1-13)          description :   \"UTC   event   block   time   truncated   to   the   hour   mark.\" \n  (#__codelineno-1-14)        -   *wallet_address \n  (#__codelineno-1-15)        -   *token_address \n  (#__codelineno-1-16)        -   name :   symbol \n  (#__codelineno-1-17)          description :   \"ERC20   token   symbol\" \n  (#__codelineno-1-18)        -   *amount_raw \n  (#__codelineno-1-19)        -   name :   amount \n  (#__codelineno-1-20)          description :   \"Raw   amount   of   ERC20   token   held   *after*   taking   into   account   token   decimals\" \n  (#__codelineno-1-21)        -   name :   amount_usd \n  (#__codelineno-1-22)          description :   \"Amount   of   ERC20   token   held   in   USD   (fiat   value   at   time   of   transaction)\"", "url": "https://dune.com/docs/spellbook/Example%20Spell%20Models/daily-aggregation/"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/spellbook/Example%20Spell%20Models/reformatted.md) \n Reformatted Transfers \n Our base table records the transfer amount to and from an account. To make it easier to sum of transfers, we munge this into a union of sent txns and received txns. \n Additionally, WETH requires special handling given the additional functions of deposit and withdrawal. This means we need to add  zeroex_ethereum.weth9_evt_deposit  as a source like we did for  erc20_ethereum.evt_transfer  above. \n Similar to a source, the model is defined in a YAML file. This is where things like the description, tests, and metadata are defined. This is also where we track \u201ccontributors\u201d. So make sure you get your clout and add your handle when writing or editing a spell. Then you\u2019ll be credited for your contribution in the  documentation  (https://dune.com/spellbook) . \n In the JINJA config block, we define that the alias for this view is  erc20 . Without this alias, the table name would default to the file name. The schema name for this view is defined in the  dbt_project.yml  (https://github.com/duneanalytics/spellbook/blob/master/spellbook/dbt_project.yml)  file in the root of the Spellbook project. Schema\u2019s are defined there by the directory structure. The name of this view would be transfers_ethereum.erc20 given the current structure. \n Note: we're generally against using SHOUT CASE, that\u2019s what IDEs are for. Sue us. \n transfers_ethereum_erc20.sql  (https://github.com/duneanalytics/spellbook/blob/master/spellbook/models/transfers/ethereum/erc20/transfers_ethereum_erc20.sql) \n  (#__codelineno-0-1) {{   config ( materialized = 'view' ,   alias = 'erc20' )   }} \n  (#__codelineno-0-2) \n  (#__codelineno-0-3) with \n  (#__codelineno-0-4)      sent_transfers   as   ( \n  (#__codelineno-0-5)          select \n  (#__codelineno-0-6)              'send'   ||   '-'   ||   evt_tx_hash   ||   '-'   ||   evt_index   ||   '-'   ||   ` to `   as   unique_tx_id , \n  (#__codelineno-0-7)              ` to `   as   wallet_address , \n  (#__codelineno-0-8)              contract_address   as   token_address , \n  (#__codelineno-0-9)              evt_block_time , \n  (#__codelineno-0-10)              value   as   amount_raw \n  (#__codelineno-0-11)          from \n  (#__codelineno-0-12)              {{   source ( 'erc20_ethereum' ,   'evt_transfer' )   }} \n  (#__codelineno-0-13)      ) \n  (#__codelineno-0-14) \n  (#__codelineno-0-15)      , \n  (#__codelineno-0-16)      received_transfers   as   ( \n  (#__codelineno-0-17)          select \n  (#__codelineno-0-18)          'receive'   ||   '-'   ||   evt_tx_hash   ||   '-'   ||   evt_index   ||   '-'   ||   ` from `   as   unique_tx_id , \n  (#__codelineno-0-19)          ` from `   as   wallet_address , \n  (#__codelineno-0-20)          contract_address   as   token_address , \n  (#__codelineno-0-21)          evt_block_time , \n  (#__codelineno-0-22)          -   value   as   amount_raw \n  (#__codelineno-0-23)          from \n  (#__codelineno-0-24)              {{   source ( 'erc20_ethereum' ,   'evt_transfer' )   }} \n  (#__codelineno-0-25)      ) \n  (#__codelineno-0-26) \n  (#__codelineno-0-27)      , \n  (#__codelineno-0-28)      deposited_weth   as   ( \n  (#__codelineno-0-29)          select \n  (#__codelineno-0-30)              'deposit'   ||   '-'   ||   evt_tx_hash   ||   '-'   ||   evt_index   ||   '-'   ||   dst   as   unique_tx_id , \n  (#__codelineno-0-31)              dst   as   wallet_address , \n  (#__codelineno-0-32)              contract_address   as   token_address , \n  (#__codelineno-0-33)              evt_block_time , \n  (#__codelineno-0-34)              wad   as   amount_raw \n  (#__codelineno-0-35)          from \n  (#__codelineno-0-36)              {{   source ( 'zeroex_ethereum' ,   'weth9_evt_deposit' )   }} \n  (#__codelineno-0-37)      ) \n  (#__codelineno-0-38) \n  (#__codelineno-0-39)      , \n  (#__codelineno-0-40)      withdrawn_weth   as   ( \n  (#__codelineno-0-41)          select \n  (#__codelineno-0-42)              'withdrawn'   ||   '-'   ||   evt_tx_hash   ||   '-'   ||   evt_index   ||   '-'   ||   src   as   unique_tx_id , \n  (#__codelineno-0-43)              src   as   wallet_address , \n  (#__codelineno-0-44)              contract_address   as   token_address , \n  (#__codelineno-0-45)              evt_block_time , \n  (#__codelineno-0-46)              -   wad   as   amount_raw \n  (#__codelineno-0-47)          from \n  (#__codelineno-0-48)              {{   source ( 'zeroex_ethereum' ,   'weth9_evt_withdrawal' )   }} \n  (#__codelineno-0-49)      ) \n  (#__codelineno-0-50) \n  (#__codelineno-0-51) select   unique_tx_id ,   'ethereum'   as   blockchain ,   wallet_address ,   token_address ,   evt_block_time ,   amount_raw \n  (#__codelineno-0-52) from   sent_transfers \n  (#__codelineno-0-53) union \n  (#__codelineno-0-54) select   unique_tx_id ,   'ethereum'   as   blockchain ,   wallet_address ,   token_address ,   evt_block_time ,   amount_raw \n  (#__codelineno-0-55) from   received_transfers \n  (#__codelineno-0-56) union \n  (#__codelineno-0-57) select   unique_tx_id ,   'ethereum'   as   blockchain ,   wallet_address ,   token_address ,   evt_block_time ,   amount_raw \n  (#__codelineno-0-58) from   deposited_weth \n  (#__codelineno-0-59) union \n  (#__codelineno-0-60) select   unique_tx_id ,   'ethereum'   as   blockchain ,   wallet_address ,   token_address ,   evt_block_time ,   amount_raw \n  (#__codelineno-0-61) from   withdrawn_weth \n \n transfers_ethereum_schema.yml  (https://github.com/duneanalytics/spellbook/blob/master/spellbook/models/transfers/ethereum/transfers_ethereum_schema.yml) \n  (#__codelineno-1-1) models : \n  (#__codelineno-1-2)   -   name :   transfers_ethereum_erc20 \n  (#__codelineno-1-3)     meta : \n  (#__codelineno-1-4)       blockchain :   ethereum \n  (#__codelineno-1-5)       sector :   transfers \n  (#__codelineno-1-6)       project :   erc20 \n  (#__codelineno-1-7)       contibutors :   soispoke, dot2dotseurat \n  (#__codelineno-1-8)     config : \n  (#__codelineno-1-9)       tags :   [ 'transfers' ,   'ethereum' ,   'erc20' ,   'soispoke' ,   'dot2dotseurat' ] \n  (#__codelineno-1-10)     description :   \"ERC20   Token   Transfers   on   Ethereum.   This   table   is   updated   every   15   minutes.\" \n  (#__codelineno-1-11)     columns : \n  (#__codelineno-1-12)       -   name :   unique_transfer_id \n  (#__codelineno-1-13)         description :   \"Unique   transfer   ID   (used   for   testing   for   duplicates)\" \n  (#__codelineno-1-14)         tests : \n  (#__codelineno-1-15)           -   unique \n  (#__codelineno-1-16)       -   &blockchain \n  (#__codelineno-1-17)         name :   blockchain \n  (#__codelineno-1-18)         description :   \"Blockchain\" \n  (#__codelineno-1-19)       -   &wallet_address \n  (#__codelineno-1-20)         name :   wallet_address \n  (#__codelineno-1-21)         description :   \"Wallet   address   of   sender   or   receiver.   If   amount   is   negative,   wallet   address   is   the   sender's.\" \n  (#__codelineno-1-22)       -   &token_address \n  (#__codelineno-1-23)         name :   token_address \n  (#__codelineno-1-24)         description :   \"Contract   address   for   token\" \n  (#__codelineno-1-25)       -   &evt_block_time \n  (#__codelineno-1-26)         name :   evt_block_time \n  (#__codelineno-1-27)         description :   \"Timestamp   for   block   event   time   in   UTC\" \n  (#__codelineno-1-28)       -   &amount_raw \n  (#__codelineno-1-29)         name :   amount_raw \n  (#__codelineno-1-30)         description :   \"Raw   amount   of   ERC20   token   held   *before*   taking   into   account   token   decimals\" \n \n dbt_project.yml  (https://github.com/duneanalytics/spellbook/blob/master/spellbook/dbt_project.yml) \n  (#__codelineno-2-1) transfers : \n  (#__codelineno-2-2)   +schema :   transfers \n  (#__codelineno-2-3)   +materialized :   view \n  (#__codelineno-2-4)   ethereum : \n  (#__codelineno-2-5)     +schema :   transfers_ethereum \n  (#__codelineno-2-6)     +materialized :   view", "url": "https://dune.com/docs/spellbook/Example%20Spell%20Models/reformatted/"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/spellbook/Example%20Spell%20Models/index.md) \n Example Spell Models \n As an example, we'll look at ERC-20.  ERC-20  (https://ethereum.org/en/developers/docs/standards/tokens/erc-20)  tokens are fungible tokens that all follow a contract standard set by the Ethereum Foundation. To track daily balances, we need to first identify the transfers. \n The main base Dune table we\u2019ll use for this purpose is  erc20_ethereum.evt_Transfer  which you can find via the data explorer.\n \n In our case, we have broken down the Spell into a more modular series of spells: \n \n Reformatted  (reformatted/)  transfers \n Daily aggregation  (daily-aggregation/)  of transfers \n Rolling sum  (rolling-sum/)  of daily transfers \n Final daily balances  (final-day-balance/)  for Ethereum ERC20 tokens", "url": "https://dune.com/docs/spellbook/Example%20Spell%20Models/"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/spellbook/7-make-a-pull-request-get-merged-become-an-archwizard.md) \n 7. \ud83e\uddd9 Make a Pull Request \n With all this out of the way, it\u2019s time to submit a PR to the official Spellbook! \n To do that, make sure you Commit your local changes to your Spellbook GitHub fork. \n Then, head over to your fork on Github, find the \u201cContribute\u201d dropdown towards the top of the page, open that and smash the \u201cOpen pull request button.\u201d \n \n Follow the PR template to make sure all of your checks and tests pass, and then add the  ready-for-review  label once it's all green! If you click into the  \"dbt slim ci (in beta)\"  (https://github.com/duneanalytics/spellbook/actions/runs/4763996851/jobs/8468061865)  action and go to \"dbt run initial model(s)\", you will see a test_schema model built for any schemas you changed that creates a temporary table like this  test_schema.git_5d780b2f_tokens_ethereum_erc20 . You can query this table in the Dune interface (only under Spark SQL for now). \n None of us are perfect, so pretty much all of us get comments from the Team for things we need to fix or improve with our Spells before they\u2019ll approve the pull request. \n Once you\u2019ve addressed all the comments, your Spell will be approved and you\u2019ll be one of the select few Dune Archwizards! \ud83e\uddd9 You will earn a git POAP for your work.", "url": "https://dune.com/docs/spellbook/7-make-a-pull-request-get-merged-become-an-archwizard/"}
{"content": "Skip to content\n          (#materialize-your-model-as-a-table) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/spellbook/6-configure-alias-and-materialization-strategy.md) \n 6. \ud83c\udfa8 Configure Alias and Materialization \n With our Spell\u2019s SQL defined, it\u2019s time to configure our aliases so we can refer to these files in other Spells and Queries and how we want dbt to materialize our work. \n ", "url": "https://dune.com/docs/spellbook/6-configure-alias-and-materialization-strategy/"}
{"content": "Skip to content\n          (#_view_job_migrationssql) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/spellbook/5-write-your-spell-as-SELECT-statement.md) \n 5. \ud83d\udd8b\ufe0f Write Your Spell \n Now we\u2019re ready to  officially  start casting our Spell! \n While our endpoint is  _view_job_log.sql , we need to start with  _view_job_migrations.sql . \n ", "url": "https://dune.com/docs/spellbook/5-write-your-spell-as-SELECT-statement/"}
{"content": "Skip to content\n          (#defining-schema) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/spellbook/4-define-expectations-with-schema-and-tests.md) \n 4. \ud83e\uddea Define Schema/Test \n Next, we define what success means for our Spell in two ways: \n \n A schema of columns to output. \n A unit test to ensure accurate data is being outputted to those columns. \n \n ", "url": "https://dune.com/docs/spellbook/4-define-expectations-with-schema-and-tests/"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/spellbook/3-identify-and-define-sources.md) \n 3. \ud83d\udcd9 Define Sources.yml \n With our file structure setup, let\u2019s complete our  _sources.yml  file. \n Here\u2019s how these files are formatted: \n  (#__codelineno-0-1) version :   2   # Spells all have \u201cversion: 2\u201d as that\u2019s the version of our engine they use. \n  (#__codelineno-0-2) \n  (#__codelineno-0-3) sources : \n  (#__codelineno-0-4) \n  (#__codelineno-0-5)    -   name :   [ project_name ] _[blockchain] \n  (#__codelineno-0-6) \n  (#__codelineno-0-7)      description :   [ one line description ]   # right arrow > allows us to make a multi-line description \n  (#__codelineno-0-8) \n  (#__codelineno-0-9)      tables : \n  (#__codelineno-0-10) \n  (#__codelineno-0-11)        -   name :   [ source_table_1 ] \n  (#__codelineno-0-12) \n  (#__codelineno-0-13)        -   name :   [ source_table_2 ] \n  (#__codelineno-0-14) \n  (#__codelineno-0-15)        -   name :   [ source_table_3 ] \n \n What sources do we need to name? \n To find this, we again go through each of the V1 abstractions that we\u2019re migrating, search for  FROM  statements, and this time we\u2019re looking for all tables mentioned that  are not  abstractions. \n In our Keep3r example, doing that for our main abstraction and its dependencies: \n \n keep3r_network.view_job_log \n keep3r_network.view_job_liquidity_log \n keep3r_network.view_job_credits_log \n keep3r_network_ethereum_view_job_migrations \n \n We end up with a  keep3r_network_ethereum_sources.yml  file that looks like this: \n  (#__codelineno-1-1) version :   2 \n  (#__codelineno-1-2) \n  (#__codelineno-1-3) sources : \n  (#__codelineno-1-4) \n  (#__codelineno-1-5)    -   name :   keep3r_network_ethereum \n  (#__codelineno-1-6) \n  (#__codelineno-1-7)      description :   > \n  (#__codelineno-1-8) \n  (#__codelineno-1-9)        Decoded events for [keep3r.network](https://keep3r.network/), a marketplace for posting and accepting jobs to help run decentralized infrastructure. \n  (#__codelineno-1-10) \n  (#__codelineno-1-11)        The scope of Keep3r Network is not to manage the jobs themselves, but to allow contracts to register as jobs for keepers, and keepers to register themselves as available to perform jobs. A \"keeper\" is a term used to refer to an external person and/or team that executes a job. \n  (#__codelineno-1-12) \n  (#__codelineno-1-13)        See their [docs](https://docs.keep3r.network/) for more. \n  (#__codelineno-1-14) \n  (#__codelineno-1-15)      tables : \n  (#__codelineno-1-16) \n  (#__codelineno-1-17)        -   name :   Keep3r_evt_LiquidityAddition \n  (#__codelineno-1-18) \n  (#__codelineno-1-19)        -   name :   Keep3r_v2_evt_LiquidityAddition \n  (#__codelineno-1-20) \n  (#__codelineno-1-21)        -   name :   Keep3r_evt_LiquidityWithdrawal \n  (#__codelineno-1-22) \n  (#__codelineno-1-23)        -   name :   Keep3r_v2_evt_LiquidityWithdrawal \n  (#__codelineno-1-24) \n  (#__codelineno-1-25)        -   name :   Keep3r_evt_JobMigrationSuccessful \n  (#__codelineno-1-26) \n  (#__codelineno-1-27)        -   name :   Keep3r_v2_evt_JobMigrationSuccessful \n  (#__codelineno-1-28) \n  (#__codelineno-1-29)        -   name :   Keep3r_evt_KeeperWork \n  (#__codelineno-1-30) \n  (#__codelineno-1-31)        -   name :   Keep3r_v2_evt_KeeperWork \n  (#__codelineno-1-32) \n  (#__codelineno-1-33)        -   name :   Keep3r_evt_LiquidityCreditsReward \n  (#__codelineno-1-34) \n  (#__codelineno-1-35)        -   name :   Keep3r_v2_evt_LiquidityCreditsReward", "url": "https://dune.com/docs/spellbook/3-identify-and-define-sources/"}
{"content": "1. Find the main point of entry \u00b6 \n The easiest place to start your query exploration is the  Dune Data Explorer  (../../queries/data-explorer/) , for two reasons: \n \n Searching here will let us discover whether the contracts we'll need have already been decoded; if so we'll have a lot less work to do. \n If our data is already  Decoded  (../../decoding-contracts/) , the contracts, calls, events, and data points will probably have obvious labels - eg  amount_usd  is the US dollar amount an NFT was bought/sold for. So we might not need to dig through the project docs to understand which contracts and data we need to build our Query. \n \n So, let's get started by switching to the Dune V2 data set and searching for \"opensea\" to see what we find. \n By using Dune V2, we get access to  Spells  (../../spellbook/)  which can let us access data from multiple blockchains in one Query - assuming the spell for OpenSea exists (Dune V2 is still in beta so not all data has been migrated yet). \n \n Awesome! Looks like we have an \"opesea trades\" Spell (Spells are marked by the \ud83e\ude84 icon in the data explorer). \n ", "url": "https://dune.com/docs/zh/getting-started/query-quick-start/example/#1-find-the-main-point-of-entry"}
{"content": "2. Explore the contract flow \u00b6 \n There are a couple of ways we can check to see what data we have access to in there. \n ", "url": "https://dune.com/docs/zh/getting-started/query-quick-start/example/#2-explore-the-contract-flow"}
{"content": "Run a  LIMIT  query \u00b6 \n The first way is to run a  SELECT *  +  LIMIT  search to see what comes up. \n SELECT *  tells Dune to send us every column avaiable in this table. \n LIMIT  limits the number of rows returned so we don't try to return the whole table (this would take forever to load). \n \n Note a couple of things here: \n \n Dune has a nice auto complete feature - just start typing to see options and hit enter to paste ( learn more about how the Query Window works here  (../../queries/query-window/) ) \n You can click the >> next to a table name in the Data Explorer to automatically paste that into your query ( learn more about the Data Explorer here  (../../queries/data-explorer/) ) \n \n Also since this is a pre-made how to guide you can just be lazy and copy this code: \n  (#__codelineno-0-1) SELECT   * \n  (#__codelineno-0-2) FROM   opensea . trades \n  (#__codelineno-0-3) LIMIT   10 \n  (#__codelineno-0-4) ; \n \nFrom that Query you'll get a table with data to explore like this:\n \n ", "url": "https://dune.com/docs/zh/getting-started/query-quick-start/example/#run-a-limit-query"}
{"content": "[Dune V2 Only] Search the Spellbook Docs \u00b6 \n Another benefit of Dune V2 is the special set of auto-generated docs that come with it. \n These can help us quickly figure out what data exists inside of V2 tables AND see how those tables are constructed in case we need it to make more complex queries. \n Let's head over to  https://dune.com/spellbook  (https://dune.com/spellbook)  and search for  opensea  using the top search bar: \n \n Here we find an  opensea_trades  table  (https://dune.com/spellbook#!/model/model.spellbook.opensea_trades)  that probably has some interesting data! \n Scrolling through the columns section we can see all the different data columns it has. \n Since this is a  Decoded Table  (../../../reference/tables/decoded/) , a lot of the labels - like  amount_usd  - make sense just by reading them. \n For those that aren't so obvious - like  trade_type  - we can click to get a description: \n \n The Spellbook Docs also have a Lineage Graph which lets us view the tables that were used to build, as well as the tables built from  opensea_trades : \n \n We can also click the expand button in the right hand corner to see the complete flow of parent and child tables, then right click on any of them to view their documentation as well: \n \n For a complete list of things you can do with the  Spellbook Docs see this page  (../../../spellbook/spellbook-model-docs/) . \n ", "url": "https://dune.com/docs/zh/getting-started/query-quick-start/example/#dune-v2-only-search-the-spellbook-docs"}
{"content": "3. Decide what question you want to answer \u00b6 \n This step could easily be the first, and is in many cases - a Wizard will hear about a new NFT launch on crypto twitter, be shilled a new project on Discord, or read a story about an emerging market segment and dive into Dune to pull data and learn more. \n And in this example, to make it easy on you, we've already decided to: \n \n Figure out who the top OpenSea buyers and sellers are by USD \n Visualize this in some sort of distribution, over some sort of time period. \n \n ", "url": "https://dune.com/docs/zh/getting-started/query-quick-start/example/#3-decide-what-question-you-want-to-answer"}
{"content": "Finding inspiration from Dune Dashboards \u00b6 \n As a beginner, if you don't already have an idea of what you want to build, exploring Dune data from the Query builder is a fun way to dive in. \n You can also use the  Dune Explorer  (../../dune-explorer/)  to see what others are building as well! \n Though this might not lead you to building the next  DeFi users over time  (https://dune.com/rchen8/defi-users-over-time)  (created by  @richardchen  (https://dune.com/rchen8) ), it's a great way to learn more about using Dune as you can see what's possible and even fork existing Queries to modify further! \n As a quick example of this, let's head over to  dune.com  (https://dune.com/browse/dashboards)  which will take us to right to the Dashboard Explorer page. \n \n By default, the Explorer lists dashboards trending in the last 4 hours. \n Using the right sidebar, we can also search by: \n \n Newest dashboards \n Dashboards with the most stars (Favorites) \n By Tags like DeFi and NFT \n \n \n At the time of writing,  @niftytable's  (https://dune.com/niftytable)   Trending Contracts  (https://dune.com/niftytable/trending-contracts)  dashboard is trending in Dune so let's take a look: \n \n Hmm, looks like this shows us top contracts by number of transactions, active wallets, and gas spent. \n But what about by USD value of transactions? \n To fork these Queries and add that data we just click the  Visualization name  (../visualizations)  (in this case a  Table Visualization  (../../visualizations/other-visualizations/) ), then click the  Fork  button at the top left: \n \n From there we could explore, test, and expand on  @niftytable's  (https://dune.com/niftytable)  original Query to make it our own! \n ", "url": "https://dune.com/docs/zh/getting-started/query-quick-start/example/#finding-inspiration-from-dune-dashboards"}
{"content": "4. Build your Query \u00b6 \n Getting back to our OpenSea Query example, our goal again is to: \n \n Figure out who the top OpenSea buyers and sellers are by USD \n Visualize this in some sort of distribution, over some sort of time period. \n \n We've run an initial limit search and found that, among other data points, this Spell has  buyer  and  seller  wallet addresses, as well as  amount_usd  for these transactions. \n ", "url": "https://dune.com/docs/zh/getting-started/query-quick-start/example/#4-build-your-query"}
{"content": "Pulling relevant  buyer  data \u00b6 \n So let's refine our Query a bit to step closer to where we want to be, starting by: \n \n Only pulling info for buyers \n Adding all USD amounts for transactions for the same buyer together \n Limiting our search by Time, say the last day, instead of by number of rows \n \n Here's the before and after of how to do that: \n \n Note \n --  lines are SQL comments here for clarification, you don't need these to run this code yourself. We also added more spacing than needed to make it easier to read in the \"After\" Tab, so use the \"Copy/Paste\" tab to run this Query yourself! \n \n Before  (#__tabbed_1_1) After  (#__tabbed_1_2) Copy/Paste  (#__tabbed_1_3) \n \n \n  (#__codelineno-1-1) SELECT   * \n  (#__codelineno-1-2) FROM   opensea . trades \n  (#__codelineno-1-3) LIMIT   10 \n  (#__codelineno-1-4) ; \n \n \n \n  (#__codelineno-2-1) -- Returns the `buyer` column from opensea.trades, then adds all the `amount_usd` values together and labels them as `buy_vol` \n  (#__codelineno-2-2) SELECT   buyer ,   SUM ( amount_usd )   AS   buy_vol   \n  (#__codelineno-2-3) FROM   opensea . trades \n  (#__codelineno-2-4) \n  (#__codelineno-2-5) -- limits results to the past 24 hours and removes resuls where amount_usd is empty (for some reason that data is unavailable in the opensea.trades Spell) \n  (#__codelineno-2-6) WHERE   block_time   >   now ()   -   interval   '24 hours'   AND   amount_usd   IS   NOT   NULL   \n  (#__codelineno-2-7) \n  (#__codelineno-2-8) -- Tells Dune to SUM USD values for each buyer and return the results that way \n  (#__codelineno-2-9) GROUP   BY   1 \n  (#__codelineno-2-10) ; \n \n \n \n  (#__codelineno-3-1) SELECT   buyer ,   SUM ( amount_usd )   AS   buy_vol   \n  (#__codelineno-3-2) FROM   opensea . trades \n  (#__codelineno-3-3) WHERE   block_time   >   now ()   -   interval   '24 hours'   AND   amount_usd   IS   NOT   NULL   \n  (#__codelineno-3-4) GROUP   BY   1 \n  (#__codelineno-3-5) ; \n \n \n \n \n \n ", "url": "https://dune.com/docs/zh/getting-started/query-quick-start/example/#pulling-relevant-buyer-data"}
{"content": "JOIN ing  buyer  and  seller  data \ud83e\udd1d \u00b6 \n Cool, looks like that works for buyers! \n Now to make this work for buyers and sellers, we're going to have to get fancy. \n We'll wrap this basic query in a  WITH  statement, so we can return two separate tables, one for buyers and sellers, then use  FULL JOIN  to create a new table with buy, sell, and total USD volume for each unique wallet address. \n Before  (#__tabbed_2_1) After  (#__tabbed_2_2) Copy/Paste  (#__tabbed_2_3) \n \n \n  (#__codelineno-4-1) SELECT   buyer ,   SUM ( amount_usd )   AS   buy_vol \n  (#__codelineno-4-2) FROM   opensea . trades \n  (#__codelineno-4-3) WHERE   block_time   >   now ()   -   interval   '24 hours'   AND   amount_usd   IS   NOT   NULL \n  (#__codelineno-4-4) GROUP   BY   1 \n  (#__codelineno-4-5) ; \n \n \n \n  (#__codelineno-5-1)   -- Here we define a new table `buyer_vol` based on the SQL query within the below () \n  (#__codelineno-5-2) WITH   buyer_vol   AS \n  (#__codelineno-5-3) ( \n  (#__codelineno-5-4) SELECT   buyer , \n  (#__codelineno-5-5)      SUM ( amount_usd )   AS   buy_vol \n  (#__codelineno-5-6) FROM   opensea . trades \n  (#__codelineno-5-7) WHERE   block_time   >   now ()   -   interval   '24 hours'   AND   amount_usd   IS   NOT   NULL \n  (#__codelineno-5-8) GROUP   BY   1 \n  (#__codelineno-5-9) \n  (#__codelineno-5-10) -- The `,` here lets us continue our `WITH` statement with an additional table/query \n  (#__codelineno-5-11) ),   seller_vol   AS   \n  (#__codelineno-5-12) \n  (#__codelineno-5-13) ( \n  (#__codelineno-5-14) SELECT   seller , \n  (#__codelineno-5-15)      SUM ( amount_usd )   AS   sell_vol \n  (#__codelineno-5-16) FROM   opensea . trades \n  (#__codelineno-5-17) WHERE   block_time   >   now ()   -   interval   '24 hours'   AND   amount_usd   IS   NOT   NULL \n  (#__codelineno-5-18) GROUP   BY   1 \n  (#__codelineno-5-19) ),   all_txn   AS \n  (#__codelineno-5-20) \n  (#__codelineno-5-21) ( \n  (#__codelineno-5-22) -- Here we're relabeling the `buyer` column, which contains a wallet address, as `wallet`, returning the buy/sell volumes from each of our above tables, then summing those values as `ttl_vol` \n  (#__codelineno-5-23) SELECT   buyer   AS   wallet ,   buyer_vol . buy_vol ,   seller_vol . sell_vol ,   SUM ( buyer_vol . buy_vol + seller_vol . sell_vol )   AS   ttl_vol   \n  (#__codelineno-5-24) FROM   buyer_vol \n  (#__codelineno-5-25) \n  (#__codelineno-5-26) -- \"JOIN\" is used to combine two tables that share a common column; \"FULL\" ensures our new table includes people who only bought, only sold, and both. Learn more about JOIN in [Dune V2 Apache Spark SQL here](https://spark.apache.org/docs/latest/sql-ref-syntax-qry-select-join.html#full-join). \n  (#__codelineno-5-27) FULL   JOIN   seller_vol   ON   buyer_vol . buyer = seller_vol . seller   -- here we're combining our `buyer_vol` and `seller_vol` tables by matching `buyer` and `seller` which we know are both wallet addresses \n  (#__codelineno-5-28) GROUP   BY   1 ,   2 ,   3 \n  (#__codelineno-5-29) \n  (#__codelineno-5-30) -- Here were ensuring our table is ordered by total trade volume, starting with the highest number to the lowest \n  (#__codelineno-5-31) ORDER   BY   ttl_vol   DESC \n  (#__codelineno-5-32) ) \n  (#__codelineno-5-33) \n  (#__codelineno-5-34) -- Finally, below we return all the columns and rows from the combined table we just made; Limit to the TOP 10 wallets by total volume \n  (#__codelineno-5-35) SELECT   * \n  (#__codelineno-5-36) FROM   all_txn \n  (#__codelineno-5-37) LIMIT   10 \n  (#__codelineno-5-38) ; \n \n \n \n  (#__codelineno-6-1) WITH   buyer_vol   AS \n  (#__codelineno-6-2) ( \n  (#__codelineno-6-3) SELECT   buyer , \n  (#__codelineno-6-4)      SUM ( amount_usd )   AS   buy_vol \n  (#__codelineno-6-5) FROM   opensea . trades \n  (#__codelineno-6-6) WHERE   block_time   >   now ()   -   interval   '24 hours'   AND   amount_usd   IS   NOT   NULL \n  (#__codelineno-6-7) GROUP   BY   1 \n  (#__codelineno-6-8) ),   seller_vol   AS \n  (#__codelineno-6-9) ( \n  (#__codelineno-6-10) SELECT   seller , \n  (#__codelineno-6-11)      SUM ( amount_usd )   AS   sell_vol \n  (#__codelineno-6-12) FROM   opensea . trades \n  (#__codelineno-6-13) WHERE   block_time   >   now ()   -   interval   '24 hours'   AND   amount_usd   IS   NOT   NULL \n  (#__codelineno-6-14) GROUP   BY   1 \n  (#__codelineno-6-15) ),   all_txn   AS \n  (#__codelineno-6-16) ( \n  (#__codelineno-6-17) SELECT   buyer   AS   wallet ,   buyer_vol . buy_vol ,   seller_vol . sell_vol ,   SUM ( buyer_vol . buy_vol + seller_vol . sell_vol )   AS   ttl_vol \n  (#__codelineno-6-18) FROM   buyer_vol \n  (#__codelineno-6-19) FULL   JOIN   seller_vol   ON   buyer_vol . buyer = seller_vol . seller \n  (#__codelineno-6-20) GROUP   BY   1 ,   2 ,   3 \n  (#__codelineno-6-21) ORDER   BY   ttl_vol   DESC \n  (#__codelineno-6-22) ) \n  (#__codelineno-6-23) \n  (#__codelineno-6-24) SELECT   * \n  (#__codelineno-6-25) FROM   all_txn \n  (#__codelineno-6-26) LIMIT   10 \n  (#__codelineno-6-27) ; \n \n \n \n \n \n ", "url": "https://dune.com/docs/zh/getting-started/query-quick-start/example/#joining-buyer-and-seller-data"}
{"content": "Adding Parameters \u00b6 \n Now for extra points, let's add a  Parameter  (../../queries/parameters/)  so people who view our Visualizations can filter by 1 day, 1 week, and 1 month time periods. \n To do that, let's highlight our  24 hour  interval measure, then click the  Add parameter  button \n \n Then click the Gear icon in the field that appears below the Query Window to modify our parameter: \n \n Here we'll: \n \n Rename unnamed_parameter -> time period \n Make the Parameter Type \"List\" \n Add the values \"1 day, 1 week, 1 month\" \n And save! \n \n \n Lastly, we'll update our other  WHERE  statements with the parameter. \n ", "url": "https://dune.com/docs/zh/getting-started/query-quick-start/example/#adding-parameters"}
{"content": "Ready to Visualize \ud83d\udc40 \u00b6 \n With that, we have the data we need to make the visualizations we're aiming for. \ud83e\ude84 \n Here are our results, click \"Query results\" below to see the Query and fork it if you'd like! \ud83e\uddd9 \n \n ", "url": "https://dune.com/docs/zh/getting-started/query-quick-start/example/#ready-to-visualize"}
{"content": "5. Make your Visualization \u00b6 \n Alright, now we want to \"Visualize this in some sort of distribution, over some sort of time period.\" \n We've got our time period piece in place with our Parameter, and we have total USD bought, sold, and wallet data. \n So for {{time period}} let's look at our top 10 wallets by total volume, as well as what portion of that volume is buying vs selling. \n ", "url": "https://dune.com/docs/zh/getting-started/query-quick-start/example/#5-make-your-visualization"}
{"content": "Creating and Formatting Bar Charts \u00b6 \n To do that we'll use a Bar Chart  Visualization  (../../visualizations/) : \n \n Scrolling down we see Visualization options, it looks like the \"Results Data\" defaulted to making the x column  wallet  and y column 1  buy_vol , which is a good start. \n Let's add  sell volume  to y column 2 and then in the \"Chart options\" Enable Stacking so the values are layered on top of each other: \n \n By default, Dune sorted our x-axis alphabetically. Let's uncheck \"Sort Values\" to get it back to being sorted by volume, then \"Reverse Order\" so that our graph is lowest number to highest (the opposite of our data table but the way we're love to see graphs - up and to the right): \n \n Our USD amounts are also a bit confusing, so let's update the \"Label Format\" in Y-axis options to  $0.0a  which will turn a number like 12345.6789 into \"$12.3k\": \n \n Then we'll update our title and x/y axis labels to make a nice, easy to understand chart: \n \n Learn more about  formatting Visualizations here  (../../features/queries/query-results/#formatting-results-tables) ! \n ", "url": "https://dune.com/docs/zh/getting-started/query-quick-start/example/#creating-and-formatting-bar-charts"}
{"content": "Sharing Queries and Visualizations \u00b6 \n To share your Queries  (../../embeds/)  (either embedding them like the above or just to share a lin), click the  Embed  button above the Query window: \n \n \n Note \n The embed button works as a stand alone link and as a way to embed your live graphs into websites/apps. If your Query has no Visualizations, the link will be to the Query Results table. If you have multiple Visualizations, the link will be for whichever Visualization you've selected when you clicked the Embed button. \n \n With a lot of copy/paste (literally and figuratively), we can make this same graph for just total volume so we don't have to do the mental math of adding up the sell/buy volume: \n \n ", "url": "https://dune.com/docs/zh/getting-started/query-quick-start/example/#sharing-queries-and-visualizations"}
{"content": "Making a Dashboard \u00b6 \n Finally, let's add our two visualizations to a starter  Dashboard  (../../dashboards/) . \n To do that we: \n \n Click the  Add to dashboard  button above our Visualization. \n Click  New dashboard  button in the popup. \n Give our Dashboard a name and save it. \n Click the  Add  button. \n \n \n Then we just add our other visualizations to the Dashboard we created and: \n \n To make our Dashboard look nice, we hit the edit button and can drag and resize our Visualizations: \n \n And we can add text widgets to explain our dashboards and how they work! \n \n And with that, we're ready to hit the share button to get a sharable Dashboard link like this one:  https://dune.com/cryptofreedman/query-quick-start  (https://dune.com/cryptofreedman/query-quick-start) \n ", "url": "https://dune.com/docs/zh/getting-started/query-quick-start/example/#making-a-dashboard"}
{"content": "Congrats you've made a Dune Query! \u00b6 \n To go deeper as you're getting started, check out the other pages in our Getting Started section using the left side bar. \ud83d\udc48 \n Check out the Features section above to learn more about how Dune works or the Tables section to learn more about the data you can query and use with Dune. \ud83d\udc46", "url": "https://dune.com/docs/zh/getting-started/query-quick-start/example/#congrats-youve-made-a-dune-query"}
{"content": "1. \u627e\u5230\u4e3b\u8981\u5207\u5165\u70b9 \u00b6 \n \u4f7f\u7528  Dune \u6570\u636e\u6d4f\u89c8\u5668  (../queries/data-explorer/) \u548c\u534f\u8bae\u5e94\u7528\u754c\u9762/\u6587\u6863\uff0c\u5e76\u8bd5\u7740\u627e\u51fa\u4e3b\u8981\u7684\u7528\u6237\u5165\u53e3\u70b9\u529f\u80fd\u662f\u4ec0\u4e48\u3002 \n \u6709\u65f6\u8fd9\u5f88\u76f4\u63a5\uff0c\u4f46\u5728\u66f4\u590d\u6742\u7684\u534f\u8bae\u4e0a\uff0c\u4e0d\u540c\u7684\u5408\u7ea6\u6a21\u5f0f\u4f1a\u8ba9\u4eba\u611f\u5230\u56f0\u60d1\u3002 \n \u5bf9\u4e8e\u5927\u591a\u6570\u53bb\u4e2d\u5fc3\u5316\u91d1\u878d\uff08DeFi\uff09\u6765\u8bf4\uff0c\u7528\u6237\u7684\u4e3b\u8981\u5165\u53e3\u53ea\u662f  Deposit \uff08\u5b58\u6b3e\uff09\u7684\u4e00\u4e9b\u53d8\u5316\u3002 \n \u5982\u679c\u5408\u7ea6\u8fd8\u6ca1\u6709 \u89e3\u6790  (../decoding-contracts/) \uff0c\u60a8\u53ef\u4ee5\u4ece\u4e00\u4e9b\u539f\u59cb\u67e5\u8be2\u5f00\u59cb\uff0c\u5728\u8fd9\u91cc\u627e\u5230\u6700\u5e38\u89c1\u7684\u51fd\u6570\u548c\u4e8b\u4ef6\u7b7e\u540d\uff1a Dune Utility Queries  (../../reference/wizard-tools/utility-queries/) \u3002 \n \u5982\u679c\u60a8\u5728\u7406\u89e3\u6570\u636e\u8868\u65b9\u9762\u6709\u56f0\u96be\uff0c \u8bf7\u89c1\u6211\u4eec\u7684\u6570\u636e\u8868\u6587\u6863  (../../reference/tables) \u3002   \n ", "url": "https://dune.com/docs/zh/getting-started/query-quick-start/#1"}
{"content": "2. \u63a2\u7d22\u5408\u7ea6\u6d41\u7a0b \u00b6 \n \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u51fd\u6570\u8c03\u7528\u5e76\u4e0d\u50cf ETH/\u4ee3\u5e01 \u8f6c\u79fb\u90a3\u6837\u7b80\u5355\uff0c\u53ea\u6d89\u53ca\u4e00\u4e2a\u5408\u7ea6\u3002 \n \u4e00\u65e6\u60a8\u5f04\u6e05\u695a\u4e86\u5165\u53e3\u70b9\uff0c\u5bf9\u5b83\u8fd0\u884c\u4e00\u4e2a\u57fa\u7840\u7684 LIMIT \u67e5\u8be2\uff0c\u5e76\u5728 \u76f8\u5173\u533a\u5757\u94fe\u6d4f\u89c8\u5668  (../../reference/wizard-tools/blockchain-explorers/) \u4e2d\u67e5\u770b\u4e00\u4e9b\u793a\u4f8b\u4ea4\u6613\u4ee5\u83b7\u5f97\u4e00\u4e9b\u6570\u636e\u63d0\u793a\uff08\u5373\u9664\u4e86\u4e3b\u534f\u8bae\u4e4b\u5916\uff0ctx \u8fd8\u4e0e\u54ea\u4e9b\u534f\u8bae\u4e92\u52a8\uff09\u3002 \n  (#__codelineno-0-1) SELECT   *   FROM   protocol_name . \"Contractname_evt_EventEmitted\" \n  (#__codelineno-0-2) LIMIT   10 \n \n\u67e5\u770b  evt_tx_hash  \u5e76\u628a\u5b83\u653e\u5230\u533a\u5757\u94fe\u6d4f\u89c8\u5668\u4e2d\uff0c\u5f00\u59cb\u4e86\u89e3\u6240\u6d89\u53ca\u7684\u5408\u7ea6\u548c\u4ea4\u4e92\u3002\n ", "url": "https://dune.com/docs/zh/getting-started/query-quick-start/#2"}
{"content": "3. \u51b3\u5b9a\u60a8\u8981\u56de\u7b54\u4ec0\u4e48\u95ee\u9898 \u00b6 \n \u5982\u679c\u60a8\u5fc3\u91cc\u5df2\u7ecf\u6709\u4e86\u95ee\u9898\uff0c\u90a3\u5c31\u8df3\u8fc7\u8fd9\u4e00\u6b65\u3002\u5982\u679c\u60a8\u8fd8\u6ca1\u6709\u95ee\u9898\uff0c\u5c31\u901a\u8fc7\u5408\u7ea6\u4e92\u52a8\u7684\u6d41\u7a0b\u56fe\u6765\u601d\u8003\u3002 \n \u8fd9\u91cc\u6709\u4e00\u4e9b\u542f\u53d1\u95ee\u9898\uff0c\u53ef\u4ee5\u5e2e\u52a9\u60a8\u627e\u5230\u6709\u8da3\u7684\u4e1c\u897f\u6765\u7814\u7a76\uff1a \n \n \u5165\u53e3\u529f\u80fd\u8fd8\u89e6\u53ca\u54ea\u4e9b\u534f\u8bae\uff1f \n \u5982\u679c\u6709\u6536\u76ca\u7387/\u5229\u606f\u4ea7\u751f\uff0c\u4ee3\u5e01\u662f\u5728\u4ec0\u4e48\u5730\u65b9\u548c\u4ec0\u4e48\u65f6\u5019\u4ea4\u6613\u7684\uff1f \n \u6709\u591a\u5c11\u4ee3\u5e01\u8fdb\u5165\uff0c\u5230\u6700\u540e\u6709\u591a\u5c11\u88ab\u70e7\u6bc1/\u94f8\u9020\u4e86\uff1f \n \u6709\u6ca1\u6709\u53ef\u80fd\u540e\u4e09\u4e2a\u95ee\u9898\u4e2d\u7684\u4efb\u4f55\u5185\u5bb9\u90fd\u4f1a\u5bfc\u81f4\u67d0\u79cd\u4e0d\u5e73\u8861\u6216\u79ef\u7d2f\uff1f\u5373 DEX \u6c60\u4ee5\u4f4e\u6d41\u52a8\u6027\u7ed3\u675f\uff0c\u6216\u5411\u4e00\u4e2a\u6c60\u4e2d\u5b58\u5165\u5982\u6b64\u591a\u7684\u5b58\u6b3e\uff0c\u4ee5\u81f3\u4e8e\u6536\u76ca\u7387/\u5229\u606f\u56e0\u4f9b\u5e94\u4e0d\u5e73\u8861\u800c\u4e0b\u964d\u3002\u6216\u8005\uff0c\u5982\u679c\u8fd9\u6d89\u53ca\u5230 NFT\uff0c\u5bf9\u672a\u6765\u7684\u4e70\u5356\u884c\u4e3a\u6709\u4ec0\u4e48\u5f71\u54cd\uff08\u6216\u8005\u6709\u5bfc\u81f4\u8fd9\u4e00\u4ea4\u6613\u7684\u4e70\u5356\u884c\u4e3a\uff09\uff1f \n \n ", "url": "https://dune.com/docs/zh/getting-started/query-quick-start/#3"}
{"content": "4. \u521b\u5efa\u60a8\u7684\u67e5\u8be2 \u00b6 \n \u73b0\u5728\u60a8\u5df2\u7ecf\u786e\u5b9a\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u771f\u6b63\u7684\u4e50\u8da3\u5f00\u59cb\u4e86\u3002\ud83e\uddd9 \n \u60a8\u4f1a\u5f88\u5feb\u53d1\u73b0\uff0c\u51fd\u6570\u8c03\u7528\u6570\u636e\u548c\u4e8b\u4ef6\u65e5\u5fd7\u6570\u636e\u5e76\u4e0d\u603b\u662f\u6709\u60a8\u8981\u627e\u7684\u6240\u6709\u53c2\u6570\u3002 \n \u901a\u5e38\u7f3a\u5c11\u7684\u7f6a\u9b41\u7978\u9996\u662f\u4ea4\u6613\u7b7e\u540d\u8005\uff08\u5728  ethereum. \"transactions\"  \u4e2d\u627e\u5230\uff09\u548c\u8f6c\u79fb\u7684 ETH \u503c\uff08\u5728  ethereum. \"traces\"  \u4e2d\u627e\u5230\uff09\u3002 \n \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u60a8\u5fc5\u987b\u4e0e\u57fa\u7840\u8868\uff08\u4ea4\u6613\u3001\u5185\u90e8\u5408\u7ea6\u3001\u65e5\u5fd7\uff09\u4ee5\u53ca\u53ef\u80fd\u6765\u81ea\u5176\u4ed6\u534f\u8bae\uff08\u5982 DEX/\u4ea4\u6613\u6240 \u534f\u8bae\uff09\u7684\u6570\u636e\u8868\u5408\u4f5c\uff0c\u4ee5\u5b8c\u6210\u60a8\u7684\u67e5\u8be2\u6240\u9700\u7684\u6570\u636e\u3002 \n \u8981\u60f3\u77e5\u9053\u4ece\u54ea\u4e9b\u8868\u4e2d\u63d0\u53d6\u4ec0\u4e48\u6570\u636e\uff0c\u9700\u8981\u5b66\u4e60\u4e00\u6bb5\u65f6\u95f4\uff0c\u800c\u5f00\u59cb\u7684\u6700\u597d\u65b9\u6cd5\u901a\u5e38\u662f\u641c\u7d22\u73b0\u6709\u7684\u770b\u677f\u6216\u5c1d\u8bd5\u8fc7\u7c7b\u4f3c\u4e1c\u897f\u7684\u67e5\u8be2\u3002 \n Dune \u5df2\u7ecf\u5b58\u5728\u4e86\u5f88\u957f\u65f6\u95f4\uff0c\u5927\u591a\u6570\u67e5\u8be2\u6a21\u5f0f\u5728\u5176\u4ed6\u5730\u65b9\u5e76\u4e0d\u96be\u627e\u5230\u3002\u2728 \n ", "url": "https://dune.com/docs/zh/getting-started/query-quick-start/#4"}
{"content": "5. \u521b\u5efa\u60a8\u7684\u53ef\u89c6\u5316 \u00b6 \n \u6700\u540e\uff0c\u60a8\u5e94\u8be5\u901a\u8fc7\u70b9\u51fb \"Query Results\" \u65c1\u8fb9\u7684 \"New visualization\"\uff0c\u5728\u56fe\u8868\u4e2d\u5bf9\u67e5\u8be2\u8fdb\u884c\u53ef\u89c6\u5316\u3002  \n ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/8dbf893c-33f5-47cb-8d4f-41ff4b2df8d6/Untitled.png)\n \n \u5982\u679c\u60a8\u663e\u793a\u7684\u662f\u4ee3\u5e01\u6570\u989d\uff0c\u60a8\u53ef\u80fd\u9700\u8981 \u8c03\u6574\u5c0f\u6570  (https://dune.xyz/queries/85746) \u6216\u4e58\u4ee5\u4ee3\u5e01\u4ef7\u683c\uff08\u5728  prices.usd  \u6216  dex.trades  \u4e2d\uff09\uff0c\u4ee5\u83b7\u5f97\u66f4\u53ef\u8bfb\u7684\u7f8e\u5143\u503c\u3002", "url": "https://dune.com/docs/zh/getting-started/query-quick-start/#5"}
{"content": "Dune \u662f\u4e3a\u6280\u672f\u6027\u548c\u975e\u6280\u672f\u6027\u7528\u6237\u5236\u4f5c\u7684\u3002 \u00b6 \n \u65e0\u8bba\u60a8\u662f\u4e00\u4f4d\u7ecf\u9a8c\u4e30\u5bcc\u7684 SQL \u5f00\u53d1\u4eba\u5458\uff0c\u533a\u5757\u94fe\u7814\u7a76\u8005\uff0c\u5546\u4e1a\u5206\u6790\u5e08\u6216\u4ee5\u4e0a\u90fd\u4e0d\u662f\u2014\u2014\u60a8\u53ef\u4ee5\u4f7f\u7528 Dune \u5728\u77ac\u95f4\u5f00\u59cb\u5206\u6790\u533a\u5757\u94fe\u6570\u636e\u3002 \n \u5728\u6211\u4eec\u793e\u533a\u7684\u5e2e\u52a9\u4e0b\uff0c\u6211\u4eec\u5df2\u7ecf\u521b\u5efa\u4e86\u5f88\u591a\u6709\u7528\u7684\u6307\u5357\u548c\u5de5\u5177\uff0c\u4ee5\u5e2e\u52a9\u60a8\u6210\u4e3a\u4e00\u4f4d\u6210\u719f\u7684 Dune \u5deb\u5e08\u3002 \n \u5f00\u59cb\u4f7f\u7528 Dune \u7684\u7edd\u5bf9\u6700\u5feb\u7684\u65b9\u6cd5\u662f\u8ddf\u968f\u6211\u4eec\u7684 \u5165\u95e8\u89c6\u9891\u7cfb\u5217  (guides/video-tutorial/) \uff0c\u5e76\u5728\u8fd9\u91cc\u67e5\u770b\u6211\u4eec\u7684 \u5165\u95e8\u770b\u677f  (https://dune.com/dune/get-started) \u3002 \n \u63a5\u4e0b\u6765\u662f\u5426\u8981\u6df1\u5165\u53d6\u51b3\u4e8e\u60a8\u662f\u5426\uff1a \n \n \u5df2\u7ecf\u4e86\u89e3 SQL  \n \u662f\u503e\u5411\u4e8e\u9884\u5907\u5b66\u4e60\uff08Just-in-Case\uff09\u8fd8\u662f\u9002\u65f6\u5b66\u4e60\uff08Just-in-Time\uff09 \n \n \u9884\u5907\u5b66\u4e60  (#__tabbed_1_1) \u9002\u65f6\u5b66\u4e60  (#__tabbed_1_2) \u4e0d\u4e86\u89e3 SQL\uff1f  (#__tabbed_1_3) \n \n \n \u9884\u5907\u5b66\u4e60\u662f\u5b66\u6821\u5f0f\u7684\u2014\u2014\u5148\u9605\u8bfb\u548c\u89c2\u770b\u5927\u91cf\u5185\u5bb9\u4ee5\u83b7\u5f97\u5927\u81f4\u7684\u7406\u89e3\uff0c\u7136\u540e\u5f00\u59cb\u5c1d\u8bd5\u52a8\u624b\u3002 \n \u5982\u679c\u8fd9\u662f\u60a8\u559c\u6b22\u7684\u5b66\u4e60\u65b9\u5f0f\uff0c\u6211\u4eec\u7684\u957f\u7bc7 \u300aDune \u6307\u5357\u300b  (guides/dune-guides/) \u6bd4\u6211\u4eec\u7684\u89c6\u9891\u8981\u6df1\u5165\u5f97\u591a\uff0c\u540c\u65f6\u4ecd\u7136\u901a\u8fc7\u7b80\u5355\u7684\u9879\u76ee\u5f15\u5bfc\u60a8\uff0c\u8ba9\u60a8\u5bf9\u5982\u4f55\u7528 Dune \u8fdb\u884c\u521b\u4f5c\u6709\u4e00\u4e2a\u5927\u81f4\u7684\u4e86\u89e3\u3002 \n OurNetwork \u8bfe\u7a0b  (dune-guides/#ournetwork-course) \u4e5f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u8be6\u5c3d\u7684\u3001\u5e7f\u6cdb\u7684\u6982\u8ff0\u3002 \n \n \n \u9002\u65f6\u5b66\u4e60\u662f\u4e3a\u90a3\u4e9b\u5728\u5b9e\u8df5\u4e2d\u5b66\u4e60\u7684\u4eba\u51c6\u5907\u7684\u3002\u5982\u679c\u60a8\u5df2\u7ecf\u5bf9\u60a8\u60f3\u7528 Dune \u505a\u4ec0\u4e48\u6709\u4e86\u60f3\u6cd5\uff0c\u53ea\u662f\u9700\u8981\u901a\u8fc7\u5bfb\u627e\u4e00\u4e9b\u5177\u4f53\u7684\u7b56\u7565\u77e5\u8bc6\u6765\u91ca\u653e\u81ea\u5df1\u7684\u60f3\u6cd5\uff0c\u90a3\u4e48 \u6838\u5fc3\u529f\u80fd  (queries/) \u5f88\u53ef\u80fd\u5305\u542b\u60a8\u9700\u8981\u7684\u4fe1\u606f\u3002 \n \u6570\u636e\u8868  (../reference/tables/) \u548c \u9b54\u6cd5\u4e66  (../spellbook/) \u662f\u66f4\u9ad8\u7ea7\u7684\u529f\u80fd\uff0c\u4e00\u65e6\u60a8\u7406\u89e3\u4e86\u57fa\u7840\u77e5\u8bc6\uff0c\u5c31\u503c\u5f97\u53bb\u5c1d\u8bd5\u3002 \n \u8bf7\u52a1\u5fc5\u5728 #beginners Discord channel  (https://discord.com/channels/757637422384283659/1016725609797402634) \u4e2d\u63d0\u51fa\u60a8\u7684\u4efb\u4f55\u95ee\u9898\uff01 \n \n \n \u5982\u679c\u60a8\u5bf9 SQL \u4e0d\u662f\u5f88\u719f\u6089\uff0c\u53ef\u4ee5\u4ece\u8fd9\u91cc\u5f00\u59cb\u63a2\u7d22\u6211\u4eec\u7684  SQL Guides \u6307\u5357  (guides/sql-guides/) \u3002 \n \n \n \n ", "url": "https://dune.com/docs/zh/getting-started/#dune"}
{"content": "\u8981\u6210\u4e3a\u4e00\u540d\u4f1f\u5927\u7684\u5deb\u5e08\uff0c\u60a8\u9700\u8981\u77e5\u9053\u4ec0\u4e48\uff1f \u00b6 \n \n ", "url": "https://dune.com/docs/zh/getting-started/#_1"}
{"content": "\u5982\u4f55\u4f7f\u7528 SQL \u00b6 \n \u4e3a\u4e86\u80fd\u591f\u6210\u529f\u5730\u5728 Dune \u4e0a\u67e5\u8be2\u6570\u636e\uff0c\u7528\u6237\u9700\u8981\u5bf9 SQL \u6709\u4e00\u4e2a\u57fa\u672c\u7684\u4e86\u89e3\u3002 \n SQL  (https://www.w3schools.com/sql/sql_intro.asp)  \u5728\u8f6f\u4ef6\u5f00\u53d1\u884c\u4e1a\u4e2d\u88ab\u5e7f\u6cdb\u4f7f\u7528\uff0c\u60a8\u53ef\u4ee5\u627e\u5230\u5f88\u591a\u5173\u4e8e\u5b83\u7684\u975e Dune \u7279\u5b9a\u6587\u6863\u3002\u8fd9\u5f80\u5f80\u6709\u52a9\u4e8e\u56de\u7b54\u4e0e\u67e5\u8be2\u6709\u5173\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u5927\u591a\u6570\u7b54\u6848\u53ef\u4ee5\u5728\u4e92\u8054\u7f51\u4e0a\u5f88\u5bb9\u6613\u627e\u5230\u3002 \n \n Note \n \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8be5\u6587\u6863\u663e\u793a\u4e86\u6211\u4eec\u7684 Dune V1 \u5f15\u64ce\u7684\u4fe1\u606f\uff0c\u8be5\u5f15\u64ce\u5728 PostgreSQL \u6570\u636e\u5e93\u4e0a\u8fd0\u884c\u3002\n\u6211\u4eec\u7684\u65b0\u6570\u636e\u5e73\u53f0\uff0c Dune \u5f15\u64ce V2  (https://dune.com/blog/dune-engine-v2)  \u76ee\u524d\u5904\u4e8e\u6d4b\u8bd5\u9636\u6bb5\uff0c\u5176\u91c7\u7528\u7684\u662f Databricks SQL \u7684\u67e5\u8be2\u5f15\u64ce\u3002\u5b83\u63d0\u4f9b\u4e86\u4ee4\u4eba\u5174\u594b\u7684\u529f\u80fd\uff0c\u5982\u66f4\u597d\u7684\u6269\u5bb9\uff0c\u8de8\u94fe\u67e5\u8be2\u548c \u9b54\u6cd5\u4e66  (../spellbook/) \u3002Dune \u5f15\u64ce V2 \u5728\u63a5\u4e0b\u6765\u7684\u51e0\u4e2a\u6708\u91cc\uff0c\u5c06\u6210\u4e3a\u9ed8\u8ba4\u5f15\u64ce\uff0c\u6240\u4ee5\u6211\u4eec\u5efa\u8bae\u60a8\u5c1d\u8bd5\u4e00\u4e0b\uff01 \n \n \u57fa\u7840 SQL  (#__tabbed_2_1) PostgreSQL  (#__tabbed_2_2) Databricks SQL  (#__tabbed_2_3) \n \n \n \u5982\u679c\u60a8\u5bf9 SQL \u4e0d\u662f\u7279\u522b\u719f\u6089\uff0c\u6211\u4eec\u5efa\u8bae\u4ece\u6211\u4eec\u7684  SQL \u6307\u5357  (guides/sql-guides/) \u5f00\u59cb\u3002 \n \n \n \u5b98\u65b9  PostgreSQL \u6587\u6863  (https://www.postgresql.org/docs/12/index.html) \u5f88\u68d2\u3002Dune \u5728 PostgreSQL 12.2 \u4e0a\u8fd0\u884c\u3002 \n \n \n \u5b98\u65b9  Databricks SQL   (https://docs.databricks.com/sql/language-manual/index.html)  \u6587\u6863\u975e\u5e38\u6709\u5e2e\u52a9\u3002 \n \n \n \n ", "url": "https://dune.com/docs/zh/getting-started/#sql"}
{"content": "\u5982\u4f55\u89e3\u6790\u4ee5\u592a\u574a\u865a\u62df\u673a\u6570\u636e \u00b6 \n \u60a8\u5c06\u5728\u94fe\u4e0a\u548c Dune \u7684\u6570\u636e\u5e93\u4e2d\u627e\u5230\u7684\u6570\u636e\u51e0\u4e4e\u90fd\u662f\u4ece\u57fa\u4e8e Ethereum \u865a\u62df\u673a\u7684\u73af\u5883\u4e2d\u63d0\u53d6\u7684\u3002 \n \u56e0\u6b64\uff0c\u4e86\u89e3\u4ee5\u592a\u574a\u865a\u62df\u673a\u548c\u667a\u80fd\u5408\u7ea6\u7684\u6574\u4f53\u5de5\u4f5c\u65b9\u5f0f\uff0c\u662f\u80fd\u591f\u627e\u5230\u3001\u7406\u89e3\u548c\u4f7f\u7528 Dune \u4e2d\u8bb8\u591a\u53ef\u7528\u6570\u636e\u7684\u91cd\u8981\u57fa\u7840\u3002 \n \u5982\u679c\u60a8\u80fd\u591f\u8bfb\u53d6 Etherscan \u4e2d\u7684\u5927\u90e8\u5206\u6570\u636e\uff0c\u90a3\u4e48\u60a8\u5df2\u7ecf\u5728\u7528 Dune \u521b\u5efa\u6709\u6d1e\u5bdf\u529b\u7684\u67e5\u8be2\u548c\u53ef\u89c6\u5316\u7684\u8def\u4e0a\u8d70\u5f97\u5f88\u8fdc\u4e86\u3002 \n \u4e0d\u5e78\u7684\u662f\uff0c\u6211\u4eec\u76ee\u524d\u8fd8\u6ca1\u6709\u627e\u5230\u4e00\u4e2a\u5f88\u597d\u7684\u8d44\u6e90\u53ef\u4ee5\u6307\u7ed9\u60a8\u770b\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u667a\u80fd\u5408\u7ea6\u90fd\u6709\u5b83\u81ea\u5df1\u7684\u89c4\u5219\u3002\u6211\u4eec\u5df2\u7ecf\u5728\u6211\u4eec\u7684 \u5df2\u89e3\u6790\u6570\u636e  (../reference/tables/decoded/) \u90e8\u5206\u5199\u4e86\u4e00\u4e9b\u5173\u4e8e\u8fd9\u4e2a\u95ee\u9898\u7684\u6587\u5b57\u3002 \n ", "url": "https://dune.com/docs/zh/getting-started/#_2"}
{"content": "\u793e\u533a\u3001\u534f\u8bae\u548c\u4f01\u4e1a\u5173\u5fc3\u4ec0\u4e48 \u00b6 \n \u8fd9\u4e00\u70b9\u53ef\u80fd\u4f1a\u8ba9\u60a8\u611f\u5230\u60ca\u8bb6\uff0c\u4f46\u6210\u4e3a\u4e00\u4e2a\u6709\u6548\u7684\u6570\u636e\u5206\u6790\u5deb\u5e08\u7684\u4e00\u4e2a\u5173\u952e\u7ec4\u6210\u90e8\u5206\u662f\u4e86\u89e3\u5982\u4f55\u5c06\u201c\u4fe1\u53f7\u4e0e\u566a\u97f3\u201d\u533a\u5206\u5f00\u3002 \n \u6709\u4e9b\u6570\u636e\u662f\u6709\u8da3\u548c\u6709\u4ef7\u503c\u7684\uff0c\u6709\u4e9b\u6570\u636e\u5219\u4e0d\u662f\u3002\u77e5\u9053\u5982\u4f55\u5c06\u6709\u8da3\u7684\u90e8\u5206\u6311\u9009\u51fa\u6765\uff0c\u4f7f\u5176\u6e05\u6670\u6613\u61c2\uff0c\u662f\u6210\u4e3a\u4e00\u4e2a\u4f1f\u5927\u7684\u6570\u636e\u5206\u6790\u5deb\u5e08\u7684\u57fa\u672c\u3002 \n \u95ee\u60a8\u81ea\u5df1\uff1a \n \n \u4ec0\u4e48\u6570\u636e\u662f\u6211\u7684\u53d7\u4f17/\u793e\u533a/\u9879\u76ee/\u516c\u53f8\u611f\u5174\u8da3\u548c\u9700\u8981\u7684\uff0c\u4ee5\u4fbf\u505a\u51fa\u66f4\u597d\u7684\u51b3\u5b9a\uff1f \n \n \u6709\u6570\u4ee5\u5343\u8ba1\u7684\u65b9\u6cd5\u53bb\u5bfb\u627e\u6709\u8da3\u7684\u6307\u6807\uff0c\u5c3d\u7ba1\u4e0e\u793e\u533a\u6216\u521b\u59cb\u4eba\u4ea4\u8c08\u901a\u5e38\u662f\u6700\u597d\u7684\u8d77\u70b9\u3002 \n ", "url": "https://dune.com/docs/zh/getting-started/#_3"}
{"content": "\u5982\u4f55\u627e\u5230\u4e00\u4e2a\u81ea\u7531\u804c\u4e1a\u8005\u6765\u5e2e\u52a9\u60a8\u5efa\u7acb Dune \u770b\u677f \u00b6 \n \u5728\u52a0\u5bc6\u8d27\u5e01\u884c\u4e1a\u4e2d\uff0c\u6709\u76f8\u5f53\u591a\u7684\u4eba\u8981\u4e48\u4e13\u95e8\u5728 Dune \u4e0a\u8fdb\u884c\u5efa\u8bbe\uff0c\u8981\u4e48\u62e5\u6709\u5fc5\u8981\u7684\u6280\u80fd\uff0c\u53ef\u4ee5\u8fc5\u901f\u638c\u63e1\u5177\u4f53\u7ec6\u8282\u3002 \n \u4e3a\u4e86\u63a5\u89e6\u5230\u8fd9\u4e9b\u81ea\u7531\u804c\u4e1a\u8005\uff0c\u60a8\u53ef\u4ee5 \u586b\u5199\u6b64\u95ee\u5377  (http://bounties.dune.com) \uff0c\u5e0c\u671b\u81ea\u7531\u804c\u4e1a\u8005\u80fd\u5728\u77ed\u65f6\u95f4\u5185\u7ed9\u60a8\u7b54\u590d\u3002\u5982\u679c\u6ca1\u6709\u7ed3\u679c\uff0c\u5728\u76f8\u5173\u7684\u793e\u4f1a\u6e20\u9053\u4e0a\u53d1\u5e03\u60ac\u8d4f\u4fe1\u606f\uff0c\u5e76\u5728\u60a8\u7684\u7f51\u7edc\u4e2d\u4f20\u64ad\uff0c\u53ef\u80fd\u4f1a\u6709\u5e2e\u52a9\u3002 \n \u5982\u679c\u60a8\u662f\u7b2c\u4e00\u6b21\u96c7\u7528\u81ea\u7531\u804c\u4e1a\u8005\uff0c\u8bf7\u52a1\u5fc5\u56de\u987e\u4ed6\u4eec\u8fc7\u53bb\u7684\u5de5\u4f5c\u548c\u770b\u677f\uff0c\u4ee5\u9a8c\u8bc1\u4ed6\u4eec\u786e\u5b9e\u6709\u80fd\u529b\u89e3\u51b3\u60a8\u9700\u8981\u7684\u90a3\u79cd\u95ee\u9898\u3002 \n ", "url": "https://dune.com/docs/zh/getting-started/#dune_1"}
{"content": "\u989d\u5916\u7684\u5de5\u5177\u548c\u652f\u6301 \u00b6 \n \u67e5\u770b\u6211\u4eec\u7684 \u5e2e\u52a9  (../reference/support-feedback/) \u9875\u9762\uff0c\u4e86\u89e3\u5982\u679c\u60a8\u5728\u6211\u4eec\u7684\u6587\u6863\u4e2d\u627e\u4e0d\u5230\u60a8\u60f3\u8981\u7684\u7b54\u6848\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ec0\u4e48\u65b9\u5f0f\u83b7\u5f97\u5e2e\u52a9\u3002 \n \u4e5f\u53ef\u4ee5\u770b\u770b\u6211\u4eec\u7684 \u5deb\u5e08\u5de5\u5177  (../reference/wizard-tools/) \u9875\u9762\uff0c\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u6211\u4eec\u7684\u5deb\u5e08\u7528\u6765\u5236\u4f5c \ud83c\udf87 \u7684\u6240\u6709\u5f88\u68d2\u7684\u975e Dune \u5de5\u5177\u3002", "url": "https://dune.com/docs/zh/getting-started/#_4"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/spellbook/2-set-up-your-file-structure-for-SQL-schema-and-source-files.md) \n 2. \ud83d\udee3\ufe0f File Structure \n Next, let\u2019s check for an existing folder for our project and create one if it doesn\u2019t exist. \n All Spells are stored in the  /spellbook/models  directory by project name, then blockchain network. \n Names are all lower case and words are separated by  _ \n Eg  /spellbook/models/[project_name]/[blockchain_name] \n So in our Keep3r network example, the folder will be  /spellbook/models/keep3r_network/ethereum \n Since this folder already exists (because we\u2019ve done this before :), in this case, we\u2019ll just build in there. \n If the project didn\u2019t exist, we\u2019d create that folder with the name of the blockchain it\u2019s on; if the project folder exists but we\u2019re creating a Spell for a new blockchain (e.g. that project just added Polygon support), then we\u2019d create a folder for the new blockchain. \n With our folder structure in place, we\u2019ll need to create 3 files: \n \n A  .sql  file where our Spell\u2019s logic will go. \n A  _schema.yml  where I define my spell\u2019s purpose and add generic tests, descriptions, metadata, etc. \n A  _sources.yml  with any project-specific table dependencies. \n \n \n Spells files are named like this: \n \n [project_name]_[blockchain]_schema.yml  for schema files. \n [project_name]_[blockchain]_sources.yml  for sources files. \n [project_name]_[blockchain]_[spell_name].sql  for the Spell\u2019s SQL files. \n \n In this specific v1 migration example, we\u2019ll also need to create 3 additional  .sql  files that  keep3r_network_ethereum_view_job_log.sql  depends on. \n These are  keep3r_network_ethereum_view_job_liquidity_log.sql ,   keep3r_network_ethereum_view_job_credits_log.sql , and  keep3r_network_ethereum_view_job_migrations.sql \n How did we know we needed these? \n Looking at the original  view_job_log.sql  V1 Abstraction, we see two  FROM  statements: \n  (#__codelineno-0-1) FROM \n  (#__codelineno-0-2) \n  (#__codelineno-0-3)          keep3r_network . view_job_liquidity_log \n \n  (#__codelineno-1-1) FROM \n  (#__codelineno-1-2) \n  (#__codelineno-1-3)          keep3r_network . view_job_credits_log \n \n When we look at the V1 Keep3r network folder, we see that these two files are there - meaning they are also abstractions that need to be converted into Spells. \n \n We also need to do a recursive check to see if those abstractions depend on any other abstractions that have yet to be migrated to Spells. \n To do this, we open those two abstractions and search for  FROM  statements. \n Here we find a couple of tables referenced that include \u201c evt \u201d, which is a naming convention for  Decoded Event tables  (../../data-tables/decoded/) . \n You\u2019ll find other Raw and Decoded data table naming conventions in our  Tables documentation here  (../../data-tables/) . \n V1 abstractions are named like so: \n [project_name].[abstraction_name] \n And when we search both of the abstractions referenced in  view_job_log.sq  we also find a reference to  keep3r_network_ethereum_view_job_migrations  so that must also become a Spell.", "url": "https://dune.com/docs/spellbook/2-set-up-your-file-structure-for-SQL-schema-and-source-files/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/getting-started/queries/visualizations"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/decoded/"}
{"content": "\u8df3\u8f6c\u81f3\n          (#dune) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/getting-started/queries/index.md) \n \u67e5\u8be2 \n ", "url": "https://dune.com/docs/zh/getting-started/queries"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/dune-v2/tables/raw/solana/index.md/?q="}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/reference/tables/v2/decoded/?q="}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/use-cases/sector-dashboards/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/use-cases/project-dashboards/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/guides/video-tutorial/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/guides/sql-guides/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/guides/dune-guides/"}
{"content": "Syntax and operator differences \u00b6 \n The syntax and keyword operator differences between Postgres, Spark, and Dune SQL are quite minimal, here are a few key ones: \n ", "url": "https://dune.com/docs/query/syntax-differences/#syntax-and-operator-differences"}
{"content": "Syntax Comparison \u00b6 \n \n \n \n Description \n V1 - PostgreSQL \n V2 - Spark SQL \n V2 - Dune SQL \n \n \n \n \n bytea2numeric , or casting hex/bytea to a number \n bytea2numeric  (bytea) \n bytea2numeric_v3  (string) \n bytearray_to_integer  (hex)    bytearray_to_bigint  (hex)    bytearray_to_decimal  (hex)    bytearray_to_uint256  (hex)    bytearray_to_int256  (hex)   More details on  Byte Array to Numeric Functions  (#byte-array-to-numeric-functions) \n \n \n Doing math or numeric operations on a column, like value in ethereum.transactions \n sum(value) \n sum(value) \n sum(cast(value as double))  soon this won't be needed as UINT and INT columns are added automatically. \n \n \n 0 vs 1 array based indexing \n 1 indexed \n 0 indexed \n 1 indexed \n \n \n Implicit type conversions between character and numeric types \n Available \n Available \n Not available  (https://trino.io/docs/current/functions/conversion.html) \n \n \n Addresses \n \\x2A7D... (bytea) Works in Postgres \n 0x2a7d...  (string) Has to be lowercase in Spark. Can be done via  lower('0x2A7D...') \n 0x2a7d...  (Byte array)   No escape quotes should be used, and the literal does  not  need to be lowercased. \n \n \n Selecting keyword columns is different \n \"from\" \n `from` \n \"from\" \n \n \n Alias naming is different \n as \"daily active users\" \n as `daily active user` \n as \"daily active users\" \n \n \n Exponentiation notation \n x/10^y  or  x * 1e123 \n x*power(10,y)  or  x*1e123 \n x*power(10,y)  or  x * 1e123 \n \n \n Interval argument has different syntax \n Interval '1day' \n Interval '1 day' \n Interval '1' day \n \n \n Generate_series () is now sequence () \n generate_series('2022-05-15', CURRENT_DATE, '1 day') \n explode(sequence(to_date('2022-01-01'), to_date('2022-02-01'), interval 1 day)) \n unnest(sequence(date('2022-01-01'), date('2022-02-01'), interval '7' day))  (https://dune.com/queries/1764158?d=11)  Has a 10000 values limit, and must go in the FROM statement not the SELECT. \n \n \n Handling decimals for prices.usd \n Don\u2019t use  prices.usd decimals \n Replaced by  prices.tokens decimals \n Replaced by  tokens_[blockchain].erc20.decimals \n \n \n Define NULL array \n NULL::integer[] \n CAST(NULL AS ARRAY&lt;int&gt;)) \n CAST(NULL AS ARRAY&lt;int&gt;)) \n \n \n encoding strings to hex \n encode(string, 'hex') \n hex(string) \n to_hex(string) \n \n \n Get json object differences \n (takerOutputUpdate->'deltaWei'->'value') decode(substring((addressSet->'baseAsset')::TEXT, 4,40), 'hex') \n get_json_object(get_json_object(takerOutputUpdate,'\\(.deltaWei'),'\\).value')'0x' \n json_query(json_query(takerOutputUpdate, 'lax $.deltaWei' omit quotes), 'lax $.value') \n \n \n Group by an alias \n SELECT date_trunc('hour',evt_block_time) as col1, COUNT(*) FROM erc721_ethereum evt_Transfer GROUP BY col1 \n Same as PostgreSQL \n GROUP BY date_trunc('hour',evt_block_time) Or:  GROUP BY 1, 2 \n \n \n Explicit date/time casting \n '2021-08-08 17:00'::timestamp \n cast('2021-08-08 17:00' as timestamp) \n cast('2021-08-08 17:00' as timestamp) Or,  timestamp '2021-08-08 17:00' There are  many helper functions for casting to date/time types  (https://trino.io/docs/current/functions/datetime.html?highlight=date) , such as  date(\u20182022-01-01\u2019) \n \n \n Checking if an item exists in an array \n value = ANY (array) \n array_contains(array, value) \n contains(array, value)  or  contains_sequence(array, array[values])  (https://trino.io/docs/current/functions/array.html#contains) \n \n \n Explode \n SELECT unnest(array) FROM table \n SELECT explode(array) FROM table \n SELECT vals.val FROM table1, unnest(arrayFromTable1) as vals(val) you have to use  unnest  with a  cross join , as described in this  blog post  (https://theleftjoin.com/how-to-explode-arrays-with-presto/) . \n \n \n Median \n PERCENTILE_CONT(0.5) WITHIN GROUP(ORDER BY x) \n PERCENTILE_CONT(0.5) WITHIN GROUP(ORDER BY x) \n approx_percentile(x, 0.5) \n \n \n Using \u201cis True/False\u201d \n X is true \n X is true \n X = true \n \n \n String Data Type \n varchar \n string \n varchar \n \n \n Casting as Strings \n cast([xxx] as string) \n cast([xxx] as string) \n cast([xxx] as varchar) \n \n \n left()  is no longer a method available for returning substrings \n left([string],[length]) \n left([string],[length]) \n substr([string], [start], [length])     Returns varchar; Positions start with 1, so use  1  for length if you want to replicate left() functionality  (https://trino.io/docs/current/functions/string.html?highlight=substr#substring)   left(somestring, somenumber) -> substr(somestring, 0, somenumber) \n \n \n Aggregate Functions \n array_agg(col) ,  array_agg(distinct(col)) \n array_agg(col)  or  collect_list(col) ,  collect_set(col)  or  array_agg(distinct(col)) \n array_agg(col) ,  array_agg(distinct(col)) \n \n \n user generated views \n create view dune_user_generated.table \n none \n each query is a view, like  query_1747157  (https://dune.com/queries/1747157) \n \n \n event logs topic indexing \n topic 1,2,3,4 \n topic 1,2,3,4 \n topic 0,1,2,3", "url": "https://dune.com/docs/query/syntax-differences/#syntax-comparison"}
{"content": "Materialize Your Model as a Table \u00b6 \n In dbt,  materializations  (https://docs.getdbt.com/docs/build/materializations)  are strategies for persisting our data inside of our data lake house. \n There are 4 materialization strategies in dbt: \n \n table \n ephemeral \n view \n incremental \n \n For Spellbook, we just use  view  and  incremental . \n ", "url": "https://dune.com/docs/spellbook/6-configure-alias-and-materialization-strategy/#materialize-your-model-as-a-table"}
{"content": "Add Your Model as a View \u00b6 \n view  is the default materialization strategy in Spellbook - so we don\u2019t need to specify it as our strategy in the Spells that use it. \n These Spells are rebuilt each time they are run, meaning every time someone queries a  view  Spell, the SQL is run meaning fresh data is gathered according to our Spell\u2019s SQL logic. \n Basically,  view  Spells are just stored SQL logic, no additional data is stored as part of the Spell. \n The Pro is that  view  Spells always have fresh data, the Con is that they can take a long time to run if there\u2019s a lot of data involved. \n ", "url": "https://dune.com/docs/spellbook/6-configure-alias-and-materialization-strategy/#add-your-model-as-a-view"}
{"content": "Add Your Model as an Incremental Table \u00b6 \n incremental  Spells allow dbt to insert or update records in a table according to the logic we define. \n The benefit is that these Spells can run faster, though their data won\u2019t be as fresh as  view  Spells. \n To create an  incremental  Spell, in the Config section of our file we need to include \n  (#__codelineno-0-1) -- a statement of which column we should join new data to our existing data each time we increment; in this example, we use block_date and that\u2019s often the best to use \n  (#__codelineno-0-2) \n  (#__codelineno-0-3) partition_by   =   [ 'block_date' ], \n  (#__codelineno-0-4) \n  (#__codelineno-0-5) -- here we specify that this is an incremental Spell \n  (#__codelineno-0-6) \n  (#__codelineno-0-7) materialized   =   'incremental' , \n  (#__codelineno-0-8) \n  (#__codelineno-0-9) -- an instruction for how dbt should combine new/old data; use \u2018merge\u2019 \n  (#__codelineno-0-10) \n  (#__codelineno-0-11) incremental_strategy   =   'merge' , \n \n We also need to add  if  statements to any  FROM  for which we want to increment data. \n In this example, where we  partition_by = ['block_date'] , we\u2019ve added ifs that will refresh data that\u2019s more than a week old: \n  (#__codelineno-1-1) { %   if   is_incremental ()   % } \n  (#__codelineno-1-2) \n  (#__codelineno-1-3)      WHERE   evt_block_time   >=   date_trunc ( \"day\" ,   now ()   -   interval   '1 week' ) \n  (#__codelineno-1-4) \n  (#__codelineno-1-5) { %   endif   % } \n \n ", "url": "https://dune.com/docs/spellbook/6-configure-alias-and-materialization-strategy/#add-your-model-as-an-incremental-table"}
{"content": "Configuring aliases and materialization \u00b6 \n To configure your Spell\u2019s alias and materialization, you\u2019ll add this configuration to the top of each of your SQL files. \n Note, this assumes we\u2019re using a  view  materialization strategy; see above for how to implement  incremental  strategies. \n  (#__codelineno-2-1) {{   config   ( \n  (#__codelineno-2-2) \n  (#__codelineno-2-3)      -- create an alias for your Spell file that will appear in the dune.com UI \n  (#__codelineno-2-4) \n  (#__codelineno-2-5)      alias   =   'job_log' , \n  (#__codelineno-2-6) \n  (#__codelineno-2-7)      -- this further defines how this file is stored and categorized in the UI, starting with what blockchain it\u2019s associated with \n  (#__codelineno-2-8) \n  (#__codelineno-2-9)      post_hook   =   '{{ expose_spells(\\' [ \"ethereum\" ] \\ ', \n  (#__codelineno-2-10) \n  (#__codelineno-2-11) \n  (#__codelineno-2-12)          -- then we define whether this is a Spell for a specific project or a whole sector \n  (#__codelineno-2-13) \n  (#__codelineno-2-14) \n  (#__codelineno-2-15)         \"project\",  \n  (#__codelineno-2-16) \n  (#__codelineno-2-17) \n  (#__codelineno-2-18)          -- next, we name the project/sector \n  (#__codelineno-2-19) \n  (#__codelineno-2-20) \n  (#__codelineno-2-21)             \"Keep3r\", \n  (#__codelineno-2-22) \n  (#__codelineno-2-23) \n  (#__codelineno-2-24)          -- lastly, we name the contributors, including ourselves and in this case the creator of the V1 abstraction! \n  (#__codelineno-2-25) \n  (#__codelineno-2-26) \n  (#__codelineno-2-27)              \\' [ \"wei3erHase\" ,   \"agaperste\" ] \\ ') }}' \n  (#__codelineno-2-28) \n  (#__codelineno-2-29) )   }} \n \n ", "url": "https://dune.com/docs/spellbook/6-configure-alias-and-materialization-strategy/#configuring-aliases-and-materialization"}
{"content": "Add new models to dbt_project.yml \u00b6 \n Coming into the final stretch, we need to add our new models to the  dbt_project.yml  file in the Spellbook root folder. \n First, find these lines: \n  (#__codelineno-3-1) # Configuring models \n  (#__codelineno-3-2) \n  (#__codelineno-3-3) # Full documentation: https://docs.getdbt.com/docs/configuring-models \n  (#__codelineno-3-4) \n  (#__codelineno-3-5) models : \n  (#__codelineno-3-6) \n  (#__codelineno-3-7)      spellbook : \n \n Underneath, we specify the project name, schema, and materialization strategy for the project as a whole as well as the specific blockchain(s) that we\u2019ve created Spells for. \n For Keep3r, our entry looks like this: \n  (#__codelineno-4-1)     keep3r_network : \n  (#__codelineno-4-2) \n  (#__codelineno-4-3)        +schema :   keep3r_network \n  (#__codelineno-4-4) \n  (#__codelineno-4-5)        +materialized :   view \n  (#__codelineno-4-6) \n  (#__codelineno-4-7)        ethereum : \n  (#__codelineno-4-8) \n  (#__codelineno-4-9)          +schema :   keep3r_network_ethereum \n  (#__codelineno-4-10) \n  (#__codelineno-4-11)          +materialized :   view", "url": "https://dune.com/docs/spellbook/6-configure-alias-and-materialization-strategy/#add-new-models-to-dbt_projectyml"}
{"content": "_view_job_migrations.sql \u00b6 \n Why start here? Because it\u2019s our lowest-level dependency! \n Remember  keep3r_network_ethereum_view_job_log.sql  depends on  keep3r_network_ethereum_view_job_liquidity_log.sql  and  keep3r_network_ethereum_view_job_credits_log.sql  - both of which rely on  keep3r_network_ethereum_view_job_migrations.sql \n So by starting with  _migrations.sql , we\u2019ll be able to test as we cast our Spell without having anything break because the dependencies aren\u2019t built. \n To migrate from our V1 abstraction, we\u2019ll start by copying the contents of the V1 file ( /spellbook/deprecated-dune-v1-abstractions/ethereum/keep3r_network/view_job_migrations.sql ) to our  keep3r_network_ethereum_view_job_migrations.sql  file: \n  (#__codelineno-0-1) CREATE   OR   REPLACE   VIEW   keep3r_network . view_job_migrations   AS   ( \n  (#__codelineno-0-2) \n  (#__codelineno-0-3)      SELECT \n  (#__codelineno-0-4) \n  (#__codelineno-0-5)          evt_block_time   AS   timestamp , \n  (#__codelineno-0-6) \n  (#__codelineno-0-7)          '0x'   ||   encode ( evt_tx_hash ,   'hex' )   AS   tx_hash , \n  (#__codelineno-0-8) \n  (#__codelineno-0-9)          evt_index   +   s . step   AS   evt_index , \n  (#__codelineno-0-10) \n  (#__codelineno-0-11)          CASE   s . step \n  (#__codelineno-0-12) \n  (#__codelineno-0-13)          WHEN   ( 0 )   THEN \n  (#__codelineno-0-14) \n  (#__codelineno-0-15)              'JobMigrationOut' \n  (#__codelineno-0-16) \n  (#__codelineno-0-17)          WHEN   ( 1 )   THEN \n  (#__codelineno-0-18) \n  (#__codelineno-0-19)              'JobMigrationIn' \n  (#__codelineno-0-20) \n  (#__codelineno-0-21)          END   AS   event , \n  (#__codelineno-0-22) \n  (#__codelineno-0-23)          '0x'   ||   encode ( contract_address ,   'hex' )   keep3r , \n  (#__codelineno-0-24) \n  (#__codelineno-0-25)          '0x'   ||   encode ( \n  (#__codelineno-0-26) \n  (#__codelineno-0-27)              CASE   s . step \n  (#__codelineno-0-28) \n  (#__codelineno-0-29)              WHEN   ( 0 )   THEN \n  (#__codelineno-0-30) \n  (#__codelineno-0-31)                  m .   \"_fromJob\" \n  (#__codelineno-0-32) \n  (#__codelineno-0-33)              WHEN   ( 1 )   THEN \n  (#__codelineno-0-34) \n  (#__codelineno-0-35)                  m .   \"_toJob\" \n  (#__codelineno-0-36) \n  (#__codelineno-0-37)              END ,   'hex' )   AS   job \n  (#__codelineno-0-38) \n  (#__codelineno-0-39)      FROM   ( \n  (#__codelineno-0-40) \n  (#__codelineno-0-41)          SELECT \n  (#__codelineno-0-42) \n  (#__codelineno-0-43)              * \n  (#__codelineno-0-44) \n  (#__codelineno-0-45)          FROM \n  (#__codelineno-0-46) \n  (#__codelineno-0-47)              keep3r_network .   \"Keep3r_evt_JobMigrationSuccessful\" \n  (#__codelineno-0-48) \n  (#__codelineno-0-49)          UNION \n  (#__codelineno-0-50) \n  (#__codelineno-0-51)          SELECT \n  (#__codelineno-0-52) \n  (#__codelineno-0-53)              * \n  (#__codelineno-0-54) \n  (#__codelineno-0-55)          FROM \n  (#__codelineno-0-56) \n  (#__codelineno-0-57)              keep3r_network .   \"Keep3r_v2_evt_JobMigrationSuccessful\" )   AS   m \n  (#__codelineno-0-58) \n  (#__codelineno-0-59)          INNER   JOIN   ( \n  (#__codelineno-0-60) \n  (#__codelineno-0-61)              SELECT \n  (#__codelineno-0-62) \n  (#__codelineno-0-63)                  generate_series ( 0 ,   1 )   AS   step )   AS   s   ON   TRUE ); \n \n We don\u2019t need the  CREATE  or  REPLACE  definition statement, so we\u2019ll just need everything from the first  SELECT  to the last  TRUE \n Then for our FROM statements, we need to replace the old references with the new syntax and double check we mention these in our   _sources.yml  file. \n  (#__codelineno-1-1) -- Removed CREATE/REPLACE statement \n  (#__codelineno-1-2) \n  (#__codelineno-1-3) SELECT \n  (#__codelineno-1-4) \n  (#__codelineno-1-5)      evt_block_time   AS   timestamp , \n  (#__codelineno-1-6) \n  (#__codelineno-1-7)      '0x'   ||   encode ( evt_tx_hash ,   'hex' )   AS   tx_hash , \n  (#__codelineno-1-8) \n  (#__codelineno-1-9)      evt_index   +   s . step   AS   evt_index , \n  (#__codelineno-1-10) \n  (#__codelineno-1-11)      CASE   s . step \n  (#__codelineno-1-12) \n  (#__codelineno-1-13)      WHEN   ( 0 )   THEN \n  (#__codelineno-1-14) \n  (#__codelineno-1-15)          'JobMigrationOut' \n  (#__codelineno-1-16) \n  (#__codelineno-1-17)      WHEN   ( 1 )   THEN \n  (#__codelineno-1-18) \n  (#__codelineno-1-19)          'JobMigrationIn' \n  (#__codelineno-1-20) \n  (#__codelineno-1-21)      END   AS   event , \n  (#__codelineno-1-22) \n  (#__codelineno-1-23)      '0x'   ||   encode ( contract_address ,   'hex' )   keep3r , \n  (#__codelineno-1-24) \n  (#__codelineno-1-25)      '0x'   ||   encode ( \n  (#__codelineno-1-26) \n  (#__codelineno-1-27)          CASE   s . step \n  (#__codelineno-1-28) \n  (#__codelineno-1-29)          WHEN   ( 0 )   THEN \n  (#__codelineno-1-30) \n  (#__codelineno-1-31)              m .   \"_fromJob\" \n  (#__codelineno-1-32) \n  (#__codelineno-1-33)          WHEN   ( 1 )   THEN \n  (#__codelineno-1-34) \n  (#__codelineno-1-35)              m .   \"_toJob\" \n  (#__codelineno-1-36) \n  (#__codelineno-1-37)          END ,   'hex' )   AS   job \n  (#__codelineno-1-38) \n  (#__codelineno-1-39) FROM   ( \n  (#__codelineno-1-40) \n  (#__codelineno-1-41)      SELECT   * \n  (#__codelineno-1-42) \n  (#__codelineno-1-43)      -- Updated the two tables we reference with our new syntax, confirming they\u2019re both in our sources file. \n  (#__codelineno-1-44) \n  (#__codelineno-1-45)      FROM \n  (#__codelineno-1-46) \n  (#__codelineno-1-47)              keep3r_network_ethereum . Keep3r_evt_JobMigrationSuccessful \n  (#__codelineno-1-48) \n  (#__codelineno-1-49)      UNION \n  (#__codelineno-1-50) \n  (#__codelineno-1-51)      SELECT   * \n  (#__codelineno-1-52) \n  (#__codelineno-1-53)      FROM \n  (#__codelineno-1-54) \n  (#__codelineno-1-55)          ' keep3r_network_ethereum . Keep3r_v2_evt_JobMigrationSuccessful )   AS   m \n  (#__codelineno-1-56) \n  (#__codelineno-1-57)      INNER   JOIN   ( \n  (#__codelineno-1-58) \n  (#__codelineno-1-59)          SELECT \n  (#__codelineno-1-60) \n  (#__codelineno-1-61)              generate_series ( 0 ,   1 )   AS   step )   AS   s   ON   TRUE \n \n Notice how the old abstraction had a  SELECT *  statement; it\u2019s best practice to only  SELECT  the actual columns we need when performing a  UNION  so that our Spell doesn\u2019t break should one of our reference tables be updated. \n Looking above our first  SELECT *  statement we\u2019ll find the specific columns we need, both of our final statements look like this: \n  (#__codelineno-2-1) SELECT \n  (#__codelineno-2-2) \n  (#__codelineno-2-3)      evt_block_time , \n  (#__codelineno-2-4) \n  (#__codelineno-2-5)      evt_tx_hash , \n  (#__codelineno-2-6) \n  (#__codelineno-2-7)      evt_index , \n  (#__codelineno-2-8) \n  (#__codelineno-2-9)      contract_address , \n  (#__codelineno-2-10) \n  (#__codelineno-2-11)      _fromJob , \n  (#__codelineno-2-12) \n  (#__codelineno-2-13)      _toJob \n \n Next, we need to change our syntax from V1 abstraction style to V2 Spell style, which means a couple of things in this case: \n \n We don\u2019t need to  encode  contract addresses (in V1 they were  bytea  format and in V2 they\u2019re  string ) \n Column references no longer need double quotes so  m. \"_fromJob\"  ->  m._fromJob \n \n After we\u2019ve done that, let\u2019s copy our SQL to a new Query in dune.com to see if it works. \n If you get any errors, fix them with the help of the error code; while building this example, we got an Undefined function error as  generate_series , a function used in the V1 abstraction that does not exist in V2. \n Knowing that Dune V1 is PostgreSQL and V2 is Spark SQL, in this case by googling \u201cgenerate series Spark SQL\u201d we were able to find this  StackExchange answer  (https://stackoverflow.com/questions/43141671/sparksql-on-pyspark-how-to-generate-time-series)  to perform the same transformation using Spark functionality. \n If you\u2019re not so lucky with Google, then ask for help in our  #spellbook Discord channel  (https://discord.com/channels/757637422384283659/999683200563564655) ! \n ", "url": "https://dune.com/docs/spellbook/5-write-your-spell-as-SELECT-statement/#_view_job_migrationssql"}
{"content": "_liquidity_log.sql ,  _credit_log.sql , and  _log.sql \u00b6 \n The process is essentially just the same for our other files (modifying the syntax to V2/Spark SQL). \n Since  _liquidity_log.sql  and  _credits_log.sql  both depend on  _migrations.sql , which we just created and haven\u2019t added to the in-production Spellbook yet, we need to copy/paste the logic that we just created as a  WITH  statement. \n So in  _liquidity_log.sql , we have this reference:  keep3r_network.view_job_migrations migs \n Let\u2019s update that to  keep3r_network.view_job_migrations_temp migs \n Then define  _temp  at the top of our SQL file: \n  (#__codelineno-3-1) WITH   \n  (#__codelineno-3-2) \n  (#__codelineno-3-3) keep3r_network . view_job_migrations_temp   as   ( \n  (#__codelineno-3-4) \n  (#__codelineno-3-5) -- [insert the _migrations code we just created here] \n  (#__codelineno-3-6) \n  (#__codelineno-3-7) ) \n \n Then we can copy/paste our new SQL into dune.com and fix errors just like we did above. \n ", "url": "https://dune.com/docs/spellbook/5-write-your-spell-as-SELECT-statement/#_liquidity_logsql-_credit_logsql-and-_logsql"}
{"content": "Replace hard-coded references with JINJA templating \u00b6 \n With our SQL translated from PostgreSQL to Spark and tested individually, we need to add our JINJA templating so that this will all work in production! \n First, let\u2019s clarify a couple of terms: \n \n Sources  are data that\u2019s been added by the Dune team - raw blockchain data, Decoded data, prices, and Community tables - basically anything that\u2019s not a Spell. \n With JINJA, references to models are formatted as  {{ source() }} \n \n \n Models  are the  SELECT  statements the community have defined in the  .sql  files stored inside of our  spellbook/models  directory. \n With JINJA, references models are formatted as  {{ ref() }} \n \n \n \n For  sources()  references, we first need to pass the name of our  _sources.yml  file, then the name of the source. \n So our V1 abstraction reference  keep3r_network. \"Keep3r_evt_JobMigrationSuccessful\"  becomes  {{ source('keep3r_network_ethereum','Keep3r_evt_JobMigrationSuccessful') }}  where: \n \n keep3r_network_ethereum  is the name of our  _sources.yml   without  the  _sources.yml  part, and \n 'Keep3r_evt_JobMigrationSuccessful' is the name of a Decoded table that we included in  keep3r_network_ethereum_sources.yml \n \n For our  ref()  references, we just need to name the SQL files we created without  .sql . \n So our V1 abstraction reference  keep3r_network.view_job_liquidity_log  becomes  {{ ref('keep3r_network_ethereum_view_job_liquidity_log') }} . \n Once you\u2019ve added the JINJA formatting to your references, run  dbt compile  and fix any errors! \n Again, googling \u201cxxx error dbt\u201d or \u201cJINJA\u201d or \u201cSpark SQL\u201d can help with a lot; if our Google overlords fail you hit up the community in our  #spellbook Discord channel  (https://discord.com/channels/757637422384283659/999683200563564655) !", "url": "https://dune.com/docs/spellbook/5-write-your-spell-as-SELECT-statement/#replace-hard-coded-references-with-jinja-templating"}
{"content": "Defining schema \u00b6 \n First, we start by defining our model\u2019s schema - what columns should be outputted for each of the .sql files in our Spell. \n Our  _schema.yml  files are structured like this: \n  (#__codelineno-0-1) version :   2 \n  (#__codelineno-0-2) \n  (#__codelineno-0-3) models : \n  (#__codelineno-0-4) \n  (#__codelineno-0-5)    -   name :   [ model_name ] \n  (#__codelineno-0-6) \n  (#__codelineno-0-7)      meta : \n  (#__codelineno-0-8) \n  (#__codelineno-0-9)        blockchain :   [ blockchain_name ] \n  (#__codelineno-0-10) \n  (#__codelineno-0-11)        project :   [ project_name ] \n  (#__codelineno-0-12) \n  (#__codelineno-0-13)        contributors :   [ your_name ] \n  (#__codelineno-0-14) \n  (#__codelineno-0-15)      config : \n  (#__codelineno-0-16) \n  (#__codelineno-0-17)        tags :   [ \"[blockchain]\" ,   \"[project_name]\" ,   \"[other_relevant_tags]\" ] \n  (#__codelineno-0-18) \n  (#__codelineno-0-19)      description :   [ description ] \n  (#__codelineno-0-20) \n  (#__codelineno-0-21)      columns : \n  (#__codelineno-0-22) \n  (#__codelineno-0-23)        -   & [ column_name ] \n  (#__codelineno-0-24) \n  (#__codelineno-0-25)          name :   [ column_name ] \n  (#__codelineno-0-26) \n  (#__codelineno-0-27)          description :   \"[description]\" \n  (#__codelineno-0-28) \n  (#__codelineno-0-29)          tests : \n  (#__codelineno-0-30) \n  (#__codelineno-0-31)            -   [ generic_test_criteria ] \n  (#__codelineno-0-32) \n  (#__codelineno-0-33)    -   name :   [ model_name_2 ] \n  (#__codelineno-0-34) \n  (#__codelineno-0-35)      meta : \n  (#__codelineno-0-36) \n  (#__codelineno-0-37)        blockchain :   [ blockchain_name ] \n  (#__codelineno-0-38) \n  (#__codelineno-0-39)        project :   [ project_name ] \n  (#__codelineno-0-40) \n  (#__codelineno-0-41)        contributors :   [ your_name ] \n  (#__codelineno-0-42) \n  (#__codelineno-0-43)      config : \n  (#__codelineno-0-44) \n  (#__codelineno-0-45)        tags :   [ \"[blockchain]\" ,   \"[project_name]\" ,   \"[other_relevant_tags]\" ] \n  (#__codelineno-0-46) \n  (#__codelineno-0-47)      description :   [ description ] \n  (#__codelineno-0-48) \n  (#__codelineno-0-49)      columns : \n  (#__codelineno-0-50) \n  (#__codelineno-0-51)        -   * [ previously_definied_column ] \n \n \n Note \n \u201c&\u201d is used for the first definition of a column and \u201c*\u201d thereafter will lead to a column with the same name in a different model inheriting the same name, description, and generic tests. \n \n Each of the SQL files we created in our fourth step is a model here, with each of the columns we want to output named and described along with a mention of any generic tests that they should be checked against. \n Check out the Keep3r Spell schema here for what that looks like when finished in our example  (https://github.com/duneanalytics/spellbook/blob/b9260a03351e562448c5c9e62529da7b2d94ca59/models/keep3r_network/ethereum/keep3r_network_ethereum_schema.yml) . \n ", "url": "https://dune.com/docs/spellbook/4-define-expectations-with-schema-and-tests/#defining-schema"}
{"content": "Set up unit test seed file structure \u00b6 \n With our schema set up, we\u2019re ready to define our  Unit Tests  (https://en.wikipedia.org/wiki/Unit_testing)  - which will help us ensure our Spells work as intended. \n This starts with setting up a seed file structure. \n In dbt,  seed files are CSVs  (https://docs.getdbt.com/docs/build/seeds)  that we use to store reference data we can use in our Spells and unit tests; in this case, we\u2019ll use it to store some data we can use to validate our Spell is WAI. \n Navigating to the  /seeds  folder, just like we do for new projects, we\u2019ll create a  /[project_name]/[blockchain]  subfolder. \n So in our Keep3r example  /seeds/keep3r_network/ethereum \n With that in place, we need to create a CSV file with a descriptive name using this format: \n [project_name]_[blockchain]_[spell_name]_test_data.csv \n So in our example: \n keep3r_network_ethereum_view_job_log_test_data.csv \n ", "url": "https://dune.com/docs/spellbook/4-define-expectations-with-schema-and-tests/#set-up-unit-test-seed-file-structure"}
{"content": "Finding expected values for unit tests \u00b6 \n Our unit tests will be run against a list of expected values, essentially we want to check to make sure our Spell delivers the results it should. \n What results should we expect? \n To figure that out we\u2019ll need to learn a bit more about Keep3r network by reading through their website, docs, Medium blog, asking in their discord, etc. \n For our example, the important thing to know is that Keep3r network is a marketplace for posting and accepting jobs to help run decentralized infrastructure. \n Jobs on the Keep3r network are smart contracts that need Keepers to do something outside of their internal logic. Doing these tasks results in the Keeper being rewarded. \n Based on this understanding we can write a test where, given a transaction hash, we can see the amount that was awarded for the job, the keeper who received it, and which token they were paid in. \n So in our CSV file, we start by defining the columns we\u2019ll have test data to validate against, in this case:  tx_hash ,  amount ,  keeper , and  token . \n Next, we\u2019ll find a few specific transactions, 3 is enough, and add the actual data that should be in each of those columns. \n The result is something like this: \n  (#__codelineno-1-1) tx_hash,amount,keeper,token\n  (#__codelineno-1-2) \n  (#__codelineno-1-3) 0xca1ee6de6d2a776afda7d6ab6bc489d4554f69777725db58591a7ac0ef533c96,0.11,0x9429cd74a3984396f3117d51cde46ea8e0e21487,0x1cEB5cB57C4D4E2b2433641b95Dd330A33185A44\n  (#__codelineno-1-4) \n  (#__codelineno-1-5) 0xdd59724ee9a1f151706bc182be810483a35b36c2a82485469245887742996313,0.13,0xfb20864791b7dd70542dae2f4907ef0535a68cdc,0x1cEB5cB57C4D4E2b2433641b95Dd330A33185A44\n  (#__codelineno-1-6) \n  (#__codelineno-1-7) 0xa8c8383254bd4cda949de1e847f8ae0d7f765053ddeeca11a159ad8191d8cc85,0.35,0xfb20864791b7dd70542dae2f4907ef0535a68cdc,0x1cEB5cB57C4D4E2b2433641b95Dd330A33185A44\n \n ", "url": "https://dune.com/docs/spellbook/4-define-expectations-with-schema-and-tests/#finding-expected-values-for-unit-tests"}
{"content": "Writing unit tests \u00b6 \n Now that we have expected results to test against, we can write our unit test! \n First, as you might expect, we create a folder structure in the  /tests  folder, as well as a SQL file for our test. \n Same naming conventions as before for the folders, for our SQL file we\u2019ll name it  [project_name]_[spell_name]_test.sql \n So: \n /keep3r_network/ethereum/keep3r_network_view_job_log_test.sql \n \n To write our unit test, we\u2019re going to check to ensure the results from the Spell we\u2019ll (finally) define in the next step matches the real-world results we added to our expected values seed file. \n To do this, we\u2019ll define a  Common Table Expression  (https://learnsql.com/blog/cte-with-examples/)  (CTE) called  unit_test , joining our test and actual results data, and comparing that data returning errors if they don\u2019t match. \n Here\u2019s what the unit test for this example looks like, with comments explaining what\u2019s going on: \n  (#__codelineno-2-1) -- CTEs are created using WITH statements \n  (#__codelineno-2-2) \n  (#__codelineno-2-3) WITH   unit_test   AS   ( \n  (#__codelineno-2-4) \n  (#__codelineno-2-5)      -- Here we compare test data to actual data, returning TRUE if it matches and FALSE if not; ROUND and LOWER ensure we don\u2019t get false errors due to formatting differences. \n  (#__codelineno-2-6) \n  (#__codelineno-2-7)      SELECT \n  (#__codelineno-2-8) \n  (#__codelineno-2-9)          CASE \n  (#__codelineno-2-10) \n  (#__codelineno-2-11)              WHEN   test . amount   =   ROUND ( \n  (#__codelineno-2-12) \n  (#__codelineno-2-13)                  actual . amount , \n  (#__codelineno-2-14) \n  (#__codelineno-2-15)                  2 \n  (#__codelineno-2-16) \n  (#__codelineno-2-17)              )   THEN   TRUE \n  (#__codelineno-2-18) \n  (#__codelineno-2-19)              ELSE   FALSE \n  (#__codelineno-2-20) \n  (#__codelineno-2-21)          END   AS   amount_test , \n  (#__codelineno-2-22) \n  (#__codelineno-2-23)          CASE \n  (#__codelineno-2-24) \n  (#__codelineno-2-25)              WHEN   LOWER ( \n  (#__codelineno-2-26) \n  (#__codelineno-2-27)                  test . keeper \n  (#__codelineno-2-28) \n  (#__codelineno-2-29)              )   =   LOWER ( \n  (#__codelineno-2-30) \n  (#__codelineno-2-31)                  actual . keeper \n  (#__codelineno-2-32) \n  (#__codelineno-2-33)              )   THEN   TRUE \n  (#__codelineno-2-34) \n  (#__codelineno-2-35)              ELSE   FALSE \n  (#__codelineno-2-36) \n  (#__codelineno-2-37)          END   AS   keeper_test , \n  (#__codelineno-2-38) \n  (#__codelineno-2-39)          CASE \n  (#__codelineno-2-40) \n  (#__codelineno-2-41)              WHEN   LOWER ( \n  (#__codelineno-2-42) \n  (#__codelineno-2-43)                  test . token \n  (#__codelineno-2-44) \n  (#__codelineno-2-45)              )   =   LOWER ( \n  (#__codelineno-2-46) \n  (#__codelineno-2-47)                  actual . token \n  (#__codelineno-2-48) \n  (#__codelineno-2-49)              )   THEN   TRUE \n  (#__codelineno-2-50) \n  (#__codelineno-2-51)              ELSE   FALSE \n  (#__codelineno-2-52) \n  (#__codelineno-2-53)          END   AS   token_test \n  (#__codelineno-2-54) \n  (#__codelineno-2-55)     /* Here we JOIN our actual and test data on tx_hash. Note for \u201cactual\u201d we reference our actual Spell model file, and our test data file for \u201ctest.\u201d The {{}} is JINJA templating we\u2019ll cover later. */ \n  (#__codelineno-2-56) \n  (#__codelineno-2-57)      FROM \n  (#__codelineno-2-58) \n  (#__codelineno-2-59)          {{   ref ( 'keep3r_network_ethereum_view_job_log' )   }}   AS   actual \n  (#__codelineno-2-60) \n  (#__codelineno-2-61)          INNER   JOIN   {{   ref ( 'keep3r_network_ethereum_view_job_log_test_data' )   }}   AS   test \n  (#__codelineno-2-62) \n  (#__codelineno-2-63)          ON   LOWER ( \n  (#__codelineno-2-64) \n  (#__codelineno-2-65)              actual . tx_hash \n  (#__codelineno-2-66) \n  (#__codelineno-2-67)          )   =   LOWER ( \n  (#__codelineno-2-68) \n  (#__codelineno-2-69)              test . tx_hash \n  (#__codelineno-2-70) \n  (#__codelineno-2-71)          ) \n  (#__codelineno-2-72) \n  (#__codelineno-2-73) ) \n  (#__codelineno-2-74) \n  (#__codelineno-2-75) -- Loading all columns from unit_test, we return any FALSE results \n  (#__codelineno-2-76) \n  (#__codelineno-2-77) SELECT \n  (#__codelineno-2-78) \n  (#__codelineno-2-79)      * \n  (#__codelineno-2-80) \n  (#__codelineno-2-81) FROM \n  (#__codelineno-2-82) \n  (#__codelineno-2-83)      unit_test \n  (#__codelineno-2-84) \n  (#__codelineno-2-85) WHERE \n  (#__codelineno-2-86) \n  (#__codelineno-2-87)      amount_test   =   FALSE \n  (#__codelineno-2-88) \n  (#__codelineno-2-89)      OR   keeper_test   =   FALSE \n  (#__codelineno-2-90) \n  (#__codelineno-2-91)      OR   token_test   =   FALSE", "url": "https://dune.com/docs/spellbook/4-define-expectations-with-schema-and-tests/#writing-unit-tests"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/decoding-contracts/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/raw/polygon/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/raw/optimism/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/raw/optimism/traces/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/raw/optimism/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/raw/optimism/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/raw/optimism/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/raw/gnosis-chain-xdai/transactions/"}
{"content": "\u67e5\u8be2\u662f Dune \u9b54\u6cd5\u7684\u6838\u5fc3 \ud83d\udc96 \u00b6 \n \u67e5\u8be2\u662f\u5deb\u5e08\u7528\u6765\u4ece Dune \u6570\u636e\u5e93\u4e2d\u63d0\u53d6\u533a\u5757\u94fe\u6570\u636e\u7684\u4e3b\u8981\u57fa\u7840\u6a21\u5757\uff0c\u7528 SQL \u51fd\u6570\u5c06\u5176\u8f6c\u5316\u4e3a\u6709\u8da3\u7684\u4e1c\u897f\uff0c\u7136\u540e\u7528  dune.com  (https://dune.com)  \u5236\u4f5c\u53ef\u89c6\u5316\u548c\u770b\u677f\u6765\u5206\u4eab\uff0c\u6216\u8005\u901a\u8fc7  Dune API  (../../api/)  \u5236\u4f5c\u4efb\u4f55\u53ef\u4ee5\u60f3\u8c61\u7684\u4e1c\u897f\u3002 \n \u901a\u8fc7 Dune \u7684 \u2728\uff0c\u67e5\u8be2\u8ba9\u5deb\u5e08\u80fd\u591f\u56de\u7b54\u4efb\u4f55\u95ee\u9898\uff01 \n \n \u8981\u60f3\u901a\u8fc7  dune.com  (https://dune.com)  \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u67e5\u8be2\uff0c\u53ea\u9700\u70b9\u51fb\u53f3\u4e0a\u65b9\u7684  New Query  \uff1a \n \n \u8fd9\u5c06\u5e26\u60a8\u8fdb\u5165\u67e5\u8be2\u7f16\u8f91\u5668\uff0c\u5728\u90a3\u91cc\u60a8\u53ef\u4ee5\u521b\u5efa Dune \u67e5\u8be2\u3002\u67e5\u8be2\u7f16\u8f91\u5668\u662f\u7531\u4e09\u4e2a\u90e8\u5206\u7ec4\u6210\u7684\uff1a \n \n \u5de6\u4fa7\u7684 \u6570\u636e\u6d4f\u89c8\u5668  (data-explorer/) \n \u53f3\u4fa7\u7684 \u67e5\u8be2\u7a97\u53e3  (query-window/) \n \u5e95\u90e8\u7684 \u67e5\u8be2\u7ed3\u679c  (query-results/) \n \n \n \u60a8\u53ef\u4ee5\u901a\u8fc7\u62d6\u52a8\u76f8\u5e94\u7684 Dune \u6807\u5fd7\u6765\u6539\u53d8\u6bcf\u4e2a\u90e8\u5206\u7684\u5927\u5c0f\uff1a \n \n \u8ba9\u6211\u4eec\u5728\u4e0b\u65b9\u7684\u9875\u9762\u4e2d\u66f4\u8be6\u7ec6\u5730\u4e86\u89e3\u67e5\u8be2\u7f16\u8f91\u5668\u7684\u6bcf\u4e00\u90e8\u5206\uff1a \n \n \n 1. \u6570\u636e\u6d4f\u89c8\u5668  (data-explorer/) \n 2. \u67e5\u8be2\u7a97\u53e3  (query-window/) \n 3. \u67e5\u8be2\u7ed3\u679c  (query-results/)", "url": "https://dune.com/docs/zh/getting-started/queries#dune"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/raw/gnosis-chain-xdai/traces/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/ethereum-mainnet/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/spells/special-tables/erc20/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/spells/special-tables/erc1155/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/spells/special-tables/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/spells/nft.trading/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/decoded/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/decoded/call-tables/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/spellbook/getting-started/data-sources/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/api/FAQ/TOS/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/api/FAQ/other/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/api/FAQ/billing-pricing/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/raw/avalanche-c-chain/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/raw/avalanche-c-chain/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/raw/arbitrum/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/raw/arbitrum/traces/"}
{"content": "Skip to content\n          (#row-oriented-databases) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/storage.md) \n Storage \n On a very high level, databases read data from storage into memory in order to allow that data to be operated on, in our case to transform and return blockchain data according to your Dune query\u2019s logic.  \n Read speed, the time it takes to load data from storage to memory, is an essential constraint of databases. In computer science this is referred to as  I/O bound  (https://en.wikipedia.org/wiki/I/O_bound) , and it\u2019s one of the main challenges we are looking to tackle with our transition to a data lake in Dune V2 and separating storage and compute. \n Let\u2019s see how this happens. \n ", "url": "https://dune.com/docs/query/storage/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/raw/solana/vote-transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/raw/solana/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/raw/solana/rewards/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/raw/solana/changelog/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/raw/solana/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/raw/solana/account-activity/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/raw/solana/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/raw/polygon/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/raw/polygon/traces/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/raw/polygon/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/wizard-tools/utility-queries/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/wizard-tools/helpful-dashboards/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/wizard-tools/blockchain-explorers/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/wizard-tools/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/faq/how-does-dune-get-its-data/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/faq/how-are-results-refreshing/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/faq/does-dune-have-an-api/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/faq/does-dune-have-a-token/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/explorer-labels/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/community/reservoir/tokens/"}
{"content": "Row oriented databases \u00b6 \n Databases store data in pages, which traditionally contain rows of information. \n Multiple pages make one data file and a table will consist of one or more data files. \n \n When retrieving data from storage in order to operate on said data, a database will read data into memory by the page. Page size and the number of pages loaded are key bottlenecks for query speed as the number and size of pages loaded means longer read times and more waiting for your query results to be returned. \n Since traditional databases store pages by row, they are best suited for retrieving all columns of one row or data from multiple sequential rows. \n Whether we are looking to retrieve all columns from row 10 or column 3 from rows 11-25, our queries will be fast as only one page will need to be read into memory. \n In contrast, querying for data which is stored in many different logical rows and therefore different physical pages is an expensive operation, as all the pages must be read from disk. \n Most of the queries we run on Dune today are aggregation of data points in a column over thousands if not millions of rows. \n This is because each of our rows is based on one transaction or trace from the blockchains we\u2019re querying. \n So for example, if we want to see all the swaps between ETH and USDC in the last month, transactions will be spread across thousands of transactions and thus thousands of rows - but the data will all be within one column of each of these rows. \n Thus, in a row-oriented database, we end up loading many pages with unneeded data as we query for one column across thousands or millions of rows. \n In PostgreSQL, we use indexes to look for specific subsets of data rather than reading entire pages/tables filled with extraneous data. \n This leads to very fast and efficient Queries, but is limited to indexed columns. \n Since every new index created for a table is a new database file, it is harder to update and maintain the table at scale. \n Therefore, Dune V2 runs on column-oriented, rather than row-oriented tables. \n ", "url": "https://dune.com/docs/query/storage/#row-oriented-databases"}
{"content": "Column oriented database \u00b6 \n \n In Dune V2, we store our data on AWS S3 using the  parquet file format  (https://github.com/apache/parquet-format) . \n Parquet is sometimes described as a hybrid approach between row-oriented databases and column-oriented databases since a table still consists of multiple parquet files which are themselves partitioned by rows. \n Inside of the parquet files, though, the pages themselves contain columns instead of rows. \n Pages are stored within row groups which partition the data by rows inside the parquet files. \n Thus, the database is still roughly stored in a row oriented format but the individual values are stored in column orientation inside pages. \n \n Even though the database at large is somewhat row-oriented, when we actually want to read data we are reading from column-oriented pages and thus are reading pages into memory by column. \n In contrast, should we try to query for all columns of specific logical rows, we have to access lots of different pages as the data of one logical row is no longer stored in one page, but rather distributed across lots of different pages. \n To better understand rows vs columns, check out this video on the differences: \n \n ", "url": "https://dune.com/docs/query/storage/#column-oriented-database"}
{"content": "To index, or not to index? \u00b6 \n We were sometimes able to mimic the efficiency of column-based data in V1\u2019s PostgreSQL by creating large amounts of structured subset data in the form of indexes, but for now this doesn't scale. \n Each parquet file has a footer that contains  min/max  values for every column stored within. \n This pattern is repeated on a column chunk level, which stores this metadata for the columns within a specific row group within the parquet file. \n \n Using these  min/max  values, both on a file level and on a column chunk level allows the database to efficiently skip over entire parquet files or column chunks within parquet files while scanning through a table. For the min/max values to be useful, and the chunk skipping to work, the column must be correlated with the sorting of the file. \n Unfortunately, the  min/max  values of strings are oftentimes not very useful. \n For example,  tx_hash  strings and  address  strings in blockchain systems are not suited well for this kind of  min/max  data gathering since they are randomly generated. \n So if we sort tables by  block_time  (which we do in almost all circumstances), we can\u2019t effectively  min/max  by  tx_hash  or  address  strings as these data won\u2019t be sequentially ordered. \n That means the database won't be able to skip files or column chunks based on these strings, and Queries that reference them will therefore be quite inefficient since all related pages will need to be read into memory. \n That said, since the Query engine at large is still able to read through individual columns in which these strings are stored very efficiently, most of the time this won't make a big difference in your Query execution speed. \n The performance cost is mostly relevant for base tables like  ethereum.transactions ,  bnb.logs ,  erc20_ethereum.erc20_evt_transfer , etc. which contain very large datasets that aren\u2019t pre-filtered. \n A notable exception to this is the Solana dataset  account_activity ,  which is ordered by  account_keys  rather than  block_time  like the EVM-based datasets. \n This allows us to utilize the  min/max  values for the  account_keys  when building Queries based on  raw Solana data  (../../data-tables/raw/solana/) . \n ", "url": "https://dune.com/docs/query/storage/#to-index-or-not-to-index"}
{"content": "Dune V2 Query examples \u00b6 \n Equipped with the above knowledge, let's look at how some Queries on Dune V2 work. \n ", "url": "https://dune.com/docs/query/storage/#dune-v2-query-examples"}
{"content": "Querying for transaction hashes \u00b6 \n  (#__codelineno-0-1) Select   *   from   ethereum . transactions \n  (#__codelineno-0-2) where   hash   =   0 xce1f1a2dd0c10fcf9385d14bc92c686c210e4accf00a3fe7ec2b5db7a5499cff \n \n Based on the way our parquet file system works, this Query is very inefficient. \n Our only filter condition here is a  hash  string so we\u2019re asking the query engine to read all pages that store  tx_hash  column data. \n The engine can skip a few column chunks where the  min/max  value stored in the parquet file footer is  0xa0 - 0xcd , but those will be a rare exception. \n Given we\u2019re doing a full scan over the entire history of Ethereum Mainnet (billions of rows) to search for one  hash , it's pretty impressive that this Query only takes about 6 minutes to run. \n Since querying for \u2018hash\u2019 is a very common part of a Wizard\u2019s workflow, let's think about how we can make this faster. \n To do that, we just have to search based on a column that has sequential \u2018min/max\u2019 values so our query engine can skip over most pages/column chunks. \n Both \u2018block_time\u2019 and \u2018block_number\u2019 are useful for this purpose. \n  (#__codelineno-1-1) Select   *   from   ethereum . transactions \n  (#__codelineno-1-2) \n  (#__codelineno-1-3) where   block_number   =   14854616 \n  (#__codelineno-1-4) \n  (#__codelineno-1-5) and   hash   =   0 xce1f1a2dd0c10fcf9385d14bc92c686c210e4accf00a3fe7ec2b5db7a5499cff \n \n This Query is still not as fast as in PostgreSQL, where we can make use of  B-tree indexes  (https://en.wikipedia.org/wiki/B-tree) , but with a runtime of 13 seconds, we\u2019re pretty close. \n Again, by using our  where  clause to filter by block number, we\u2019re leveraging the V2 engine\u2019s ability to read the parquet file footers\u2019 \u2018min/max\u2019 values and skip those that are out of bounds. \n Once a parquet file that meets our condition is found, the engine simply loads into memory the relatively few pages from the column chunk with a  min  lower and a  max  greater than our specified  block_number  before finding a match to our \u2018hash\u2019 condition. \n Since we are selecting all entries from the logical row in this Query, we actually need to access a few other pages as well, but this is a reasonably efficient operation if we only do this for a few rows. \n Lesson:  Define your conditions in a way in which the database is able to work with \u2018min/max\u2019 values of files and columns chunks so it can efficiently find the logical row(s) you need. \n ", "url": "https://dune.com/docs/query/storage/#querying-for-transaction-hashes"}
{"content": "Aggregating data over a large amount of logical rows \u00b6 \n This is mainly a case study to illustrate how efficient DuneV2 is in aggregating data over a large set of logical rows. \n  (#__codelineno-2-1) Select   avg ( gas_used )   from   ethereum . transactions \n \n This Query runs in an  amazing  7 seconds. \n This is mainly due to the fact that V2 doesn\u2019t have to read the entire table since all this data is stored together in column-oriented pages across parquet files. \n In V1\u2019s PostgreSQL, each page we read into memory would have contained a lot of unneeded data. \n In Dune V2, we can just read the data that we actually need. \n Lesson:  Querying for data across a large amount of logical rows is now much more efficient and a lot of Queries that were formerly sheer impossible due to timing out are now able to be executed. \n Another good example to illustrate this is  @hildobby's  (https://twitter.com/hildobby_)   Ethereum Overview  (https://dune.com/hildobby/ethereum)  Dashboard. \n ", "url": "https://dune.com/docs/query/storage/#aggregating-data-over-a-large-amount-of-logical-rows"}
{"content": "We\u2019ll keep innovating \u00b6 \n Some Queries that were heavily indexed on our V1 database might feel a bit awkward in Dune V2. \n This is especially the case for  erc20  event transfer tables,  ethereum.transactions ,  ethereum.logs  and their counterparts on other blockchains. \n This is a tradeoff we made to enable blockchain analytics on a large scale basis. \n We will continue to keep innovating on these datasets and our database architecture to make every Query run as fast as possible on V2. Hopefully now you understand why Queries for data like  tx_hash  will be slow due to the tradeoffs we\u2019ve made. \n If you have any feedback or run into trouble with the new system, our #dune-sql Discord channel is the best place to get help from our team and Wizard community when Google fails you. \n As you come across issues or identify areas of improvement, please send us an email at  dunesql-feedback@dune.com  (mailto:dunesql-feedback@dune.com)  and we\u2019ll work with you to update and optimize!", "url": "https://dune.com/docs/query/storage/#well-keep-innovating"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/community/reservoir/token-floor-ask-events/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/press-kit/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/recommended-reading/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/pricing/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-bounties/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/community/reservoir/token-attributes/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/community/reservoir/sales/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/community/reservoir/collections/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/community/reservoir/collection-floor-ask-events/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/community/reservoir/attributes/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/community/reservoir/attribute-keys/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/community/reservoir/ask-events/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/community/reservoir/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/community/flashbots/sandwiches/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/community/flashbots/sandwiched-swaps/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/community/flashbots/mev_summary/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/community/flashbots/liquidations/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/community/flashbots/arbitrages/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/community/flashbots/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/community/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/spells/special-tables/erc721/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/spells/nft.trading/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/raw/gnosis-chain-xdai/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/raw/gnosis-chain-xdai/traces/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/raw/gnosis-chain-xdai/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/raw/ethereum-mainnet/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/raw/bnb-chain-bsc/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/raw/bnb-chain-bsc/traces/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/raw/bnb-chain-bsc/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/raw/avalanche-c-chain/traces/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/raw/arbitrum/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v2/raw/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v1/abstractions/lending-tables/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v1/abstractions/labels/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v1/abstractions/erc-20-balances/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v1/abstractions/dex.trades/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v1/decoded/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v1/decoded/call-tables/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v1/raw/polygon/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v1/raw/polygon/traces/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v1/raw/polygon/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v1/raw/polygon/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v1/raw/polygon/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v1/raw/optimism/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v1/raw/optimism/traces/"}
{"content": "", "url": "https://dune.com/docs/reference/tables/v1/raw/optimism/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v1/raw/optimism/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v1/raw/optimism/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v1/raw/gnosis-chain-xdai/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v1/raw/gnosis-chain-xdai/traces/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v1/raw/gnosis-chain-xdai/event-logs/"}
{"content": "", "url": "https://dune.com/docs/reference/tables/v1/raw/gnosis-chain-xdai/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v1/raw/ethereum-mainnet/transactions/"}
{"content": "Skip to content\n          (#faq-functionality) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/api/FAQ/functionality.md) \n ", "url": "https://dune.com/docs/api/FAQ/functionality/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/api/api-reference/cancel-execution/"}
{"content": "", "url": "https://dune.com/docs/api/api-reference/execution-results/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/api/api-reference/execution-status/"}
{"content": "FAQ: Functionality \u00b6 \n ", "url": "https://dune.com/docs/api/FAQ/functionality/#faq-functionality"}
{"content": "General \u00b6 \n ", "url": "https://dune.com/docs/api/FAQ/functionality/#general"}
{"content": "How many Requests Per Minute can I make? \u00b6 \n The API request per limit and vary by plan, specified on our  pricing page  (https://dune.com/pricing) . \n ", "url": "https://dune.com/docs/api/FAQ/functionality/#how-many-requests-per-minute-can-i-make"}
{"content": "Are there specified SLAs? \u00b6 \n SLAs will be available in the future on Enterprise pricing plans. \n ", "url": "https://dune.com/docs/api/FAQ/functionality/#are-there-specified-slas"}
{"content": "Executing Queries \u00b6 \n ", "url": "https://dune.com/docs/api/FAQ/functionality/#executing-queries"}
{"content": "How do I find a query id? \u00b6 \n When navigating to a query, it\u2019s the first number after \u201c/queries/\u201d in the URL. \n \n ", "url": "https://dune.com/docs/api/FAQ/functionality/#how-do-i-find-a-query-id"}
{"content": "Does the API support Query Parameters? \u00b6 \n The API does support Query Parameters! \n For Dune Queries that include Parameters, you can pass parameter data as part of the  Execute Query ID endpoint  (../../api-reference/execute-queries/execute-query-id/) ! \n Learn more about  building Dune Queries with Parameters here  (../../../app/query-editor/parameters/) . \n And learn how to pass parameter data using  cURL here  (../../api-reference/execute-queries/execute-query-id/#curl-with-parameters)  and with  Python here  (../../quick-start/api-py/#parameterized-queries) . \n ", "url": "https://dune.com/docs/api/FAQ/functionality/#does-the-api-support-query-parameters"}
{"content": "What are the performance and overall differences between the Dune API and the Dune web app? What are the differences in what I can query? \u00b6 \n There are no major performance differences or differences in what can be accessed between the two if both are using the same app plan tier. \n The Dune API gives you programmatic access to the capabilities and data sets that can already be accessed from the Dune web app. \n ", "url": "https://dune.com/docs/api/FAQ/functionality/#what-are-the-performance-and-overall-differences-between-the-dune-api-and-the-dune-web-app-what-are-the-differences-in-what-i-can-query"}
{"content": "What is the execution timeout limit and can I request a longer limit? \u00b6 \n The query execution timeout limit matches the Dune web app - 30 minutes. \n ", "url": "https://dune.com/docs/api/FAQ/functionality/#what-is-the-execution-timeout-limit-and-can-i-request-a-longer-limit"}
{"content": "Check Execution Status \u00b6 \n ", "url": "https://dune.com/docs/api/FAQ/functionality/#check-execution-status"}
{"content": "What is the difference between the states \u201cExecuting\u201d and \u201cPending\u201d? \u00b6 \n Pending means, the execution is waiting for an available execution connection slot. \n Executing means the query is currently executing against the database. \n ", "url": "https://dune.com/docs/api/FAQ/functionality/#what-is-the-difference-between-the-states-executing-and-pending"}
{"content": "Reading Results Data \u00b6 \n ", "url": "https://dune.com/docs/api/FAQ/functionality/#reading-results-data"}
{"content": "Can I ingest data by getting a direct connection to the database instead? \u00b6 \n Not currently. In the interim we recommend periodically fetching from \u201cmax(latestBlockNumber) - 2\u201d to \u201clastFetchedBlockNumber\u201d in regular intervals. Fetching from 2 behind the latest block number ensures you receive full sets of data from each new request. \n ", "url": "https://dune.com/docs/api/FAQ/functionality/#can-i-ingest-data-by-getting-a-direct-connection-to-the-database-instead"}
{"content": "Are query results data saved for faster retrieval? \u00b6 \n Yes! \n ", "url": "https://dune.com/docs/api/FAQ/functionality/#are-query-results-data-saved-for-faster-retrieval"}
{"content": "How long are the results data from an execution stored for? \u00b6 \n Currently set to 2 years but we may reduce this to something closer to 90 days in the future. This is visible on the API response on the \u201cexpires_at\u201d field in the execution status and results body. \n ", "url": "https://dune.com/docs/api/FAQ/functionality/#how-long-are-the-results-data-from-an-execution-stored-for"}
{"content": "How much data can I retrieve in a single API result call? \u00b6 \n There is currently a 250MB limit, but there is a chance we increase this for certain paid plans. The API does not currently return an explicit error upon hitting this limit but will instead fail (timeout) when attempting to retrieve the results.", "url": "https://dune.com/docs/api/FAQ/functionality/#how-much-data-can-i-retrieve-in-a-single-api-result-call"}
{"content": "404 - Not found", "url": "https://dune.com/docs/api/api-reference/execute-query-id/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/spellbook/spellbook-workshop-prerequisite/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/spellbook/examples/final-day-balance/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/spellbook/examples/rolling-sum/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/spellbook/examples/daily-aggregation/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/spellbook/examples/reformatted/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/spellbook/examples/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/spellbook/how-to-guides/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/spellbook/how-to-cast-a-spell/8-make-a-pull-request-get-merged-become-an-archwizard/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/spellbook/how-to-cast-a-spell/7-configure-alias-and-materialization-strategy/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/spellbook/how-to-cast-a-spell/6-write-your-spell-as-SELECT-statement/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/spellbook/how-to-cast-a-spell/5-define-expectations-with-schema-and-tests/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/spellbook/how-to-cast-a-spell/4-identify-and-define-sources/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/spellbook/how-to-cast-a-spell/3-set-up-your-file-structure-for-SQL-schema-and-source-files/"}
{"content": "", "url": "https://dune.com/docs/spellbook/how-to-cast-a-spell/2-decide-on-a-Spell-to-cast/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/spellbook/how-to-cast-a-spell/1-do-some-prerequisites%20and-set-up-Spellbook-dbt/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/spellbook/how-to-cast-a-spell/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/spellbook/getting-started/submissions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/spellbook/getting-started/spells/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/spellbook/getting-started/tests/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v1/raw/ethereum-mainnet/traces/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v1/raw/ethereum-mainnet/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v1/raw/ethereum-mainnet/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v1/raw/ethereum-mainnet/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v1/raw/bnb-chain-bsc/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v1/raw/bnb-chain-bsc/traces/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v1/raw/bnb-chain-bsc/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v1/raw/bnb-chain-bsc/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v1/raw/bnb-chain-bsc/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v1/raw/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/user-generated/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/prices/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/community/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/abstractions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/decoded/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/raw/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/database/"}
{"content": "Skip to content\n          (#syntax-and-operator-differences) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/syntax-differences.md) \n Syntax Differences \n ", "url": "https://dune.com/docs/reference/dune-v2/query-engine/"}
{"content": "Skip to content\n          (#dunesql-features) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/index.md) \n Query \n Querying for blockchain data on Dune is powered by DuneSQL, a custom-built query engine designed for efficient analysis of blockchain data. \n ", "url": "https://dune.com/docs/reference/dune-v2/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/support-feedback/"}
{"content": "Syntax and operator differences \u00b6 \n The syntax and keyword operator differences between Postgres, Spark, and Dune SQL are quite minimal, here are a few key ones: \n ", "url": "https://dune.com/docs/reference/dune-v2/query-engine/#syntax-and-operator-differences"}
{"content": "Syntax Comparison \u00b6 \n \n \n \n Description \n V1 - PostgreSQL \n V2 - Spark SQL \n V2 - Dune SQL \n \n \n \n \n bytea2numeric , or casting hex/bytea to a number \n bytea2numeric  (bytea) \n bytea2numeric_v3  (string) \n bytearray_to_integer  (hex)    bytearray_to_bigint  (hex)    bytearray_to_decimal  (hex)    bytearray_to_uint256  (hex)    bytearray_to_int256  (hex)   More details on  Byte Array to Numeric Functions  (#byte-array-to-numeric-functions) \n \n \n Doing math or numeric operations on a column, like value in ethereum.transactions \n sum(value) \n sum(value) \n sum(cast(value as double))  soon this won't be needed as UINT and INT columns are added automatically. \n \n \n 0 vs 1 array based indexing \n 1 indexed \n 0 indexed \n 1 indexed \n \n \n Implicit type conversions between character and numeric types \n Available \n Available \n Not available  (https://trino.io/docs/current/functions/conversion.html) \n \n \n Addresses \n \\x2A7D... (bytea) Works in Postgres \n 0x2a7d...  (string) Has to be lowercase in Spark. Can be done via  lower('0x2A7D...') \n 0x2a7d...  (Byte array)   No escape quotes should be used, and the literal does  not  need to be lowercased. \n \n \n Selecting keyword columns is different \n \"from\" \n `from` \n \"from\" \n \n \n Alias naming is different \n as \"daily active users\" \n as `daily active user` \n as \"daily active users\" \n \n \n Exponentiation notation \n x/10^y  or  x * 1e123 \n x*power(10,y)  or  x*1e123 \n x*power(10,y)  or  x * 1e123 \n \n \n Interval argument has different syntax \n Interval '1day' \n Interval '1 day' \n Interval '1' day \n \n \n Generate_series () is now sequence () \n generate_series('2022-05-15', CURRENT_DATE, '1 day') \n explode(sequence(to_date('2022-01-01'), to_date('2022-02-01'), interval 1 day)) \n unnest(sequence(date('2022-01-01'), date('2022-02-01'), interval '7' day))  (https://dune.com/queries/1764158?d=11)  Has a 10000 values limit, and must go in the FROM statement not the SELECT. \n \n \n Handling decimals for prices.usd \n Don\u2019t use  prices.usd decimals \n Replaced by  prices.tokens decimals \n Replaced by  tokens_[blockchain].erc20.decimals \n \n \n Define NULL array \n NULL::integer[] \n CAST(NULL AS ARRAY&lt;int&gt;)) \n CAST(NULL AS ARRAY&lt;int&gt;)) \n \n \n encoding strings to hex \n encode(string, 'hex') \n hex(string) \n to_hex(string) \n \n \n Get json object differences \n (takerOutputUpdate->'deltaWei'->'value') decode(substring((addressSet->'baseAsset')::TEXT, 4,40), 'hex') \n get_json_object(get_json_object(takerOutputUpdate,'\\(.deltaWei'),'\\).value')'0x' \n json_query(json_query(takerOutputUpdate, 'lax $.deltaWei' omit quotes), 'lax $.value') \n \n \n Group by an alias \n SELECT date_trunc('hour',evt_block_time) as col1, COUNT(*) FROM erc721_ethereum evt_Transfer GROUP BY col1 \n Same as PostgreSQL \n GROUP BY date_trunc('hour',evt_block_time) Or:  GROUP BY 1, 2 \n \n \n Explicit date/time casting \n '2021-08-08 17:00'::timestamp \n cast('2021-08-08 17:00' as timestamp) \n cast('2021-08-08 17:00' as timestamp) Or,  timestamp '2021-08-08 17:00' There are  many helper functions for casting to date/time types  (https://trino.io/docs/current/functions/datetime.html?highlight=date) , such as  date(\u20182022-01-01\u2019) \n \n \n Checking if an item exists in an array \n value = ANY (array) \n array_contains(array, value) \n contains(array, value)  or  contains_sequence(array, array[values])  (https://trino.io/docs/current/functions/array.html#contains) \n \n \n Explode \n SELECT unnest(array) FROM table \n SELECT explode(array) FROM table \n SELECT vals.val FROM table1, unnest(arrayFromTable1) as vals(val) you have to use  unnest  with a  cross join , as described in this  blog post  (https://theleftjoin.com/how-to-explode-arrays-with-presto/) . \n \n \n Median \n PERCENTILE_CONT(0.5) WITHIN GROUP(ORDER BY x) \n PERCENTILE_CONT(0.5) WITHIN GROUP(ORDER BY x) \n approx_percentile(x, 0.5) \n \n \n Using \u201cis True/False\u201d \n X is true \n X is true \n X = true \n \n \n String Data Type \n varchar \n string \n varchar \n \n \n Casting as Strings \n cast([xxx] as string) \n cast([xxx] as string) \n cast([xxx] as varchar) \n \n \n left()  is no longer a method available for returning substrings \n left([string],[length]) \n left([string],[length]) \n substr([string], [start], [length])     Returns varchar; Positions start with 1, so use  1  for length if you want to replicate left() functionality  (https://trino.io/docs/current/functions/string.html?highlight=substr#substring)   left(somestring, somenumber) -> substr(somestring, 0, somenumber) \n \n \n Aggregate Functions \n array_agg(col) ,  array_agg(distinct(col)) \n array_agg(col)  or  collect_list(col) ,  collect_set(col)  or  array_agg(distinct(col)) \n array_agg(col) ,  array_agg(distinct(col)) \n \n \n user generated views \n create view dune_user_generated.table \n none \n each query is a view, like  query_1747157  (https://dune.com/queries/1747157) \n \n \n event logs topic indexing \n topic 1,2,3,4 \n topic 1,2,3,4 \n topic 0,1,2,3", "url": "https://dune.com/docs/reference/dune-v2/query-engine/#syntax-comparison"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/v1-sunsetting/"}
{"content": "DuneSQL Features \u00b6 \n DuneSQL offers several useful features for working with blockchain data: \n \n Blockchain varbinary data types  (DuneSQL-reference/datatypes/#varbinary) : Designed for storing addresses, hashes, and other encoded data. \n Native support for uint256 and int256 data types  (DuneSQL-reference/datatypes/#UINT256) : Ideal for handling large numbers commonly found in blockchain data, with built-in functions for ease of use. \n Columnar storage format  (storage/)  Optimized for fast reads, this format organizes data in columns rather than rows, enabling quick access to single columns for aggregation or filtering. \n Querying a query  (query-a-query/) : DuneSQL allows you to query a query, which is great for creating reusable queries, building up complex queries, and reusing queries as views. \n \n \n Sunsetting Old Query Engines \n We are sunsetting our old query engines, SparkSQL and PostgreSQL. Please find all information in the  Migrating to DuneSQL  (../migrations/)  section of our documentation. \n \n ", "url": "https://dune.com/docs/reference/dune-v2/#dunesql-features"}
{"content": "Using DuneSQL \u00b6 \n DuneSQL is our query engine for blockchain data. It is a fork of TrinoSQL, which is an open-source, distributed SQL query engine for running interactive analytic queries against data sources of all sizes ranging from gigabytes to petabytes. \n We have created extensive documentation for DuneSQL, which you can find in the  DuneSQL Reference  (DuneSQL-reference/)  section of our documentation. Here you will be able to find: \n \n \n \n Functions and operators \u00b6  (#functions-and-operators) \n \n A reference guide to DuneSQL functions and operators. \n \u2192 Functions and operators  (DuneSQL-reference/Functions-and-operators/) \n \n \n Data types \u00b6  (#data-types) \n \n A reference guide to DuneSQL data types. \n \u2192 Data types  (DuneSQL-reference/datatypes/) \n \n \n Reserved keywords \u00b6  (#reserved-keywords) \n \n A list of reserved keywords in DuneSQL. \n \u2192 Reserved keywords  (DuneSQL-reference/reserved-keywords/) \n \n \n \n ", "url": "https://dune.com/docs/reference/dune-v2/#using-dunesql"}
{"content": "Writing efficient queries \u00b6 \n An efficient query-writing process requires knowledge of how DuneSQL and data storage works. \n \n \n \u2192 Writing efficient queries  (writing-efficient-queries/) \n \n \n ", "url": "https://dune.com/docs/reference/dune-v2/#writing-efficient-queries"}
{"content": "Querying a query \u00b6 \n DuneSQL allows you to query a query, which is great for creating reusable queries, building up complex queries, and reusing queries as views. \n \n \n \u2192 Querying a query  (query-a-query/) \n \n \n ", "url": "https://dune.com/docs/reference/dune-v2/#querying-a-query"}
{"content": "Resources and Support \u00b6 \n For assistance with DuneSQL, consider the following resources: \n \n Google search for TrinoSQL-related queries \n Talk to your favorite AI assistant about TrinoSQL-related questions \n the official Trino docs - Functions and Operators  (https://trino.io/docs/current/functions.html) \n \n Join our #dune-sql  Discord channel  (https://discord.gg/FjwGvbgDFS)  to connect with our team and the community for help and support. \n ", "url": "https://dune.com/docs/reference/dune-v2/#resources-and-support"}
{"content": "Feedback and Suggestions \u00b6 \n We appreciate your feedback and suggestions for improvement. Please email us at dunesql-feedback@dune.com with any concerns or ideas for optimization.", "url": "https://dune.com/docs/reference/dune-v2/#feedback-and-suggestions"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/use-cases/ecosystem-dashboards/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/spellbook/getting-started/data-modelling/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/spellbook/getting-started/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/spellbook/spellbook-model-docs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/press-kit/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/recommended-reading/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/pricing/"}
{"content": "Skip to content\n          (#dunesql-features) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/index.md) \n Query \n Querying for blockchain data on Dune is powered by DuneSQL, a custom-built query engine designed for efficient analysis of blockchain data. \n ", "url": "https://dune.com/docs/query/?q="}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/app/wand-llm/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/app/teams/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/app/decoding-contracts/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/app/dashboards/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/app/visualizations/tables/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/app/visualizations/counters/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/app/visualizations/charts-graphs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/spellbook/top-tables/nft.trades/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/spellbook/top-tables/labels/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/spellbook/top-tables/dex.trades/"}
{"content": "Please wait \n This application is starting, you will be redirected once it is ready. \n If your are the application owner, check your logs for details.", "url": "https://dune.com/docs/reference/data-tables/spellbook/top-tables/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/spellbook/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/api/faq/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/api/api-reference/upload-data/"}
{"content": "DuneSQL Features \u00b6 \n DuneSQL offers several useful features for working with blockchain data: \n \n Blockchain varbinary data types  (DuneSQL-reference/datatypes/#varbinary) : Designed for storing addresses, hashes, and other encoded data. \n Native support for uint256 and int256 data types  (DuneSQL-reference/datatypes/#UINT256) : Ideal for handling large numbers commonly found in blockchain data, with built-in functions for ease of use. \n Columnar storage format  (storage/)  Optimized for fast reads, this format organizes data in columns rather than rows, enabling quick access to single columns for aggregation or filtering. \n Querying a query  (query-a-query/) : DuneSQL allows you to query a query, which is great for creating reusable queries, building up complex queries, and reusing queries as views. \n \n \n Sunsetting Old Query Engines \n We are sunsetting our old query engines, SparkSQL and PostgreSQL. Please find all information in the  Migrating to DuneSQL  (../migrations/)  section of our documentation. \n \n ", "url": "https://dune.com/docs/query/?q=#dunesql-features"}
{"content": "Using DuneSQL \u00b6 \n DuneSQL is our query engine for blockchain data. It is a fork of TrinoSQL, which is an open-source, distributed SQL query engine for running interactive analytic queries against data sources of all sizes ranging from gigabytes to petabytes. \n We have created extensive documentation for DuneSQL, which you can find in the  DuneSQL Reference  (DuneSQL-reference/)  section of our documentation. Here you will be able to find: \n \n \n \n Functions and operators \u00b6  (#functions-and-operators) \n \n A reference guide to DuneSQL functions and operators. \n \u2192 Functions and operators  (DuneSQL-reference/Functions-and-operators/) \n \n \n Data types \u00b6  (#data-types) \n \n A reference guide to DuneSQL data types. \n \u2192 Data types  (DuneSQL-reference/datatypes/) \n \n \n Reserved keywords \u00b6  (#reserved-keywords) \n \n A list of reserved keywords in DuneSQL. \n \u2192 Reserved keywords  (DuneSQL-reference/reserved-keywords/) \n \n \n \n ", "url": "https://dune.com/docs/query/?q=#using-dunesql"}
{"content": "Writing efficient queries \u00b6 \n An efficient query-writing process requires knowledge of how DuneSQL and data storage works. \n \n \n \u2192 Writing efficient queries  (writing-efficient-queries/) \n \n \n ", "url": "https://dune.com/docs/query/?q=#writing-efficient-queries"}
{"content": "Querying a query \u00b6 \n DuneSQL allows you to query a query, which is great for creating reusable queries, building up complex queries, and reusing queries as views. \n \n \n \u2192 Querying a query  (query-a-query/) \n \n \n ", "url": "https://dune.com/docs/query/?q=#querying-a-query"}
{"content": "Resources and Support \u00b6 \n For assistance with DuneSQL, consider the following resources: \n \n Google search for TrinoSQL-related queries \n Talk to your favorite AI assistant about TrinoSQL-related questions \n the official Trino docs - Functions and Operators  (https://trino.io/docs/current/functions.html) \n \n Join our #dune-sql  Discord channel  (https://discord.gg/FjwGvbgDFS)  to connect with our team and the community for help and support. \n ", "url": "https://dune.com/docs/query/?q=#resources-and-support"}
{"content": "Feedback and Suggestions \u00b6 \n We appreciate your feedback and suggestions for improvement. Please email us at dunesql-feedback@dune.com with any concerns or ideas for optimization.", "url": "https://dune.com/docs/query/?q=#feedback-and-suggestions"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/api/api-reference/edit-queries/parameter-passing/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/community/neynar/farcaster/fids/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/community/neynar/farcaster/casts/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/community/neynar/farcaster/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/community/flashbots/sandwiches/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/community/flashbots/sandwiched-swaps/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/community/flashbots/mev_summary/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/community/flashbots/liquidations/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/community/flashbots/arbitrages/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/community/flashbots/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/DuneSQL-reference/Functions-and-operators/conditional/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/DuneSQL-reference/Functions-and-operators/comparison/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/DuneSQL-reference/Functions-and-operators/chain-utility-functions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/DuneSQL-reference/Functions-and-operators/bitwise/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/spellbook/1-do-some-prerequisites%20and-set-up-Spellbook-dbt/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/resources/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/learning/conduct-network-analysis/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/storage/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/resources/support-feedback/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/resources/press-kit/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/resources/dune-bounties/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/resources/citing-dune/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/learning/create-sankey-diagram/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/learning/how-tos/transfer-ownership/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/learning/how-tos/share-your-query/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/learning/how-tos/share-dune-content/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/learning/how-tos/search-for-content/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/learning/how-tos/navigate-query-editor/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/learning/how-tos/find-datasets/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/learning/how-tos/export-data-out/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/learning/how-tos/credit-system-on-dune/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/learning/how-tos/create-your-first-visualization/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/learning/how-tos/create-your-first-query/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/learning/how-tos/create-new-content/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/learning/how-tos/create-and-manage-teams/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/learning/how-tos/create-ai-assisted-queries/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/learning/how-tos/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/learning/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/migrations/migration-tool/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/migrations/SparkSQL/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/migrations/PostgreSQL/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/migrations/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/spellbook/Example%20Spell%20Models/final-day-balance/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/spellbook/Example%20Spell%20Models/rolling-sum/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/spellbook/Example%20Spell%20Models/daily-aggregation/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/spellbook/Example%20Spell%20Models/reformatted/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/spellbook/7-make-a-pull-request-get-merged-become-an-archwizard/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/spellbook/6-configure-alias-and-materialization-strategy/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/spellbook/5-write-your-spell-as-SELECT-statement/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/spellbook/4-define-expectations-with-schema-and-tests/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/spellbook/3-identify-and-define-sources/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/spellbook/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/materialized-views/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/query-a-query/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/writing-efficient-queries/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/DuneSQL-reference/reserved-keywords/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/DuneSQL-reference/datatypes/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/DuneSQL-reference/Functions-and-operators/window/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/DuneSQL-reference/Functions-and-operators/varchar-utility-functions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/DuneSQL-reference/Functions-and-operators/varbinary/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/DuneSQL-reference/Functions-and-operators/uuid/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/DuneSQL-reference/Functions-and-operators/url/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/DuneSQL-reference/Functions-and-operators/teradata/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/DuneSQL-reference/Functions-and-operators/tdigest/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/DuneSQL-reference/Functions-and-operators/system/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/DuneSQL-reference/Functions-and-operators/string/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/DuneSQL-reference/Functions-and-operators/setdigest/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/DuneSQL-reference/Functions-and-operators/regexp/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/DuneSQL-reference/Functions-and-operators/qdigest/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/DuneSQL-reference/Functions-and-operators/ml/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/DuneSQL-reference/Functions-and-operators/math/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/DuneSQL-reference/Functions-and-operators/map/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/DuneSQL-reference/Functions-and-operators/logical/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/DuneSQL-reference/Functions-and-operators/list/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/DuneSQL-reference/Functions-and-operators/list-by-topic/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/DuneSQL-reference/Functions-and-operators/lambda/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/DuneSQL-reference/Functions-and-operators/json/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/DuneSQL-reference/Functions-and-operators/hyperloglog/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/DuneSQL-reference/Functions-and-operators/decimal/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/DuneSQL-reference/Functions-and-operators/datetime/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/DuneSQL-reference/Functions-and-operators/conversion/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/DuneSQL-reference/Functions-and-operators/binary/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/DuneSQL-reference/Functions-and-operators/base58/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/DuneSQL-reference/Functions-and-operators/array/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/DuneSQL-reference/Functions-and-operators/aggregate/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/DuneSQL-reference/Functions-and-operators/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/DuneSQL-reference/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/dune-v2/query-executions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/bring-your-own-data/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/community/reservoir/tokens/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/community/reservoir/token-floor-ask-events/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/community/reservoir/token-attributes/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/community/reservoir/sales/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/community/reservoir/collections/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/community/reservoir/collection-top-bid-events/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/community/reservoir/collection-floor-ask-events/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/community/reservoir/bids/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/community/reservoir/bid-events/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/community/reservoir/attributes/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/community/reservoir/attribute-keys/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/community/reservoir/asks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/community/reservoir/ask-events/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/community/reservoir/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/community/neynar/farcaster/verifications/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/community/neynar/farcaster/user_data/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/community/neynar/farcaster/storage/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/community/neynar/farcaster/signers/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/community/neynar/farcaster/reactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/community/neynar/farcaster/profile_with_addresses/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/community/neynar/farcaster/links/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/community/neynar/farcaster/fnames/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/community/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/raw/bitcoin/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/raw/bitcoin/outputs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/raw/bitcoin/inputs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/raw/bitcoin/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/raw/bitcoin/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/raw/solana/vote-transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/raw/solana/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/raw/solana/rewards/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/raw/solana/instruction-calls/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/raw/solana/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/raw/solana/account-activity/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/raw/solana/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/raw/evm/withdrawals/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/raw/evm/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/raw/evm/traces/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/raw/evm/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/raw/evm/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/raw/evm/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/raw/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/decoded/solana/idl-tables/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/decoded/evm/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/decoded/evm/call-tables/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/decoded/evm/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/decoded/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/spellbook/top-tables/tokens/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/data-tables/spellbook/top-tables/prices/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/api/api-reference/edit-queries/private-query/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/api/api-reference/edit-queries/archive-query/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/api/api-reference/edit-queries/get-query/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/api/api-reference/edit-queries/update-query/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/api/api-reference/edit-queries/create-query/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/api/api-reference/edit-queries/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/api/api-reference/get-results/import-sheets/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/api/api-reference/get-results/latest-results/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/api/api-reference/get-results/execution-results/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/api/api-reference/get-results/execution-status/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/api/api-reference/get-results/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/api/api-reference/execute-queries/cancel-execution/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/api/api-reference/execute-queries/execute-query-id/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/api/api-reference/execute-queries/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/api/api-reference/errors/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/api/api-reference/authentication/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/api/api-reference/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/api/quick-start/python/raw-walkthrough/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/api/quick-start/community-clients/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/api/quick-start/api-js/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/api/quick-start/api-py/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/api/quick-start/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/api/"}
{"content": "", "url": "https://dune.com/docs/reference/app/alerts/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/app/search/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/app/embeds/"}
{"content": "Please wait \n This application is starting, you will be redirected once it is ready. \n If your are the application owner, check your logs for details.", "url": "https://dune.com/docs/reference/app/upload-data/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/app/visualizations/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/app/query-editor/version-history/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/app/query-editor/data-explorer/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/app/query-editor/query-scheduler/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/app/query-editor/parameters/"}
{"content": "", "url": "https://dune.com/docs/reference/app/query-editor/query-window/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/app/query-editor/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/app/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/quickstart/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/zh/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/events/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/dune-bounties/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/utility-queries/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/helpful-dashboards/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/blockchain-explorers/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/faq/how-does-dune-get-its-data/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/faq/how-are-results-refreshing/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/faq/does-dune-have-an-api/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/faq/does-dune-have-a-token/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/explorer-labels/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/community/reservoir/tokens/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/community/reservoir/token-floor-ask-events/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/community/reservoir/token-attributes/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/community/reservoir/sales/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/community/reservoir/collections/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/community/reservoir/collection-floor-ask-events/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/community/reservoir/attributes/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/community/reservoir/attribute-keys/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/community/reservoir/asks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/community/reservoir/ask-events/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/community/reservoir/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/community/flashbots/sandwiches/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/community/flashbots/sandwiched-swaps/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/community/flashbots/mev_summary/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/community/flashbots/liquidations/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/community/flashbots/arbitrages/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/community/flashbots/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/community/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/spells/special-tables/erc721/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/use-cases/sector-dashboards/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/use-cases/project-dashboards/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/use-cases/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/guides/video-tutorial/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/guides/sql-guides/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/guides/dune-guides/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/teams/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/decoding-contracts/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/dune-explorer/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/embeds/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/dashboards/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/visualizations/other-visualizations/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/visualizations/charts-graphs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/visualizations/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/getting-started/tips/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/getting-started/parameters/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/getting-started/query-results/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/getting-started/query-window/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/getting-started/data-explorer/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/query-quick-start/example/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/query-quick-start/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/getting-started/queries/visualizations/?q="}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/solana/vote-transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/solana/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/solana/rewards/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/solana/changelog/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/solana/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/solana/account-activity/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/solana/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/polygon/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/polygon/traces/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/polygon/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/polygon/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/polygon/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/optimism/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/optimism/traces/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/optimism/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/optimism/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/optimism/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/gnosis-chain-xdai/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/gnosis-chain-xdai/traces/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/gnosis-chain-xdai/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/gnosis-chain-xdai/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/gnosis-chain-xdai/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/ethereum-mainnet/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/ethereum-mainnet/traces/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/ethereum-mainnet/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/ethereum-mainnet/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/getting-started/features/queries/query-results/#formatting-results-tables"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/getting-started/query-quick-start/visualizations"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/getting-started/spellbook/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/bnb-chain-bsc/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/bnb-chain-bsc/traces/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/bnb-chain-bsc/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/bnb-chain-bsc/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/bnb-chain-bsc/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/avalanche-c-chain/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/avalanche-c-chain/traces/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/avalanche-c-chain/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/avalanche-c-chain/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/avalanche-c-chain/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/arbitrum/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/arbitrum/traces/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v2/raw/arbitrum/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/abstractions/special-tables/erc721/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/abstractions/special-tables/erc20/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/abstractions/special-tables/erc1155/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/abstractions/special-tables/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/getting-started/query-quick-start/visualizations/?q="}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/abstractions/prices-from-dexes/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/abstractions/nft.trading/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/abstractions/lending-tables/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/abstractions/labels/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/abstractions/erc-20-balances/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/abstractions/dex.trades/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/abstractions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/decoded/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/decoded/call-tables/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/raw/polygon/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/raw/polygon/traces/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/raw/polygon/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/raw/polygon/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/getting-started/dune-guides/#ournetwork-course"}
{"content": "\u8df3\u8f6c\u81f3\n          (#how-tables-are-generated-from-raw-ethereum-data) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/reference/tables/index.md) \n \u6570\u636e\u8868 \n Dune \u652f\u6301\u4ee5\u4e0d\u540c\u7684\u62bd\u8c61\u7ea7\u522b\u67e5\u8be2\u5df2\u63a5\u5165\u7684\u94fe\u4e0a\u6570\u636e\u3002 \n \u60a8\u53ef\u4ee5\u4ece\u5df2\u63a5\u5165\u7684\u533a\u5757\u94fe\u539f\u59cb\u8868\u5f00\u59cb\uff0c\u4f8b\u5982\u50cf  blocks  \u548c  transactions  \u6570\u636e\u8868\u3002\u8fd9\u4e9b\u539f\u59cb\u8868\u6709\u7740\u6700\u539f\u59cb\u7684\u94fe\u4e0a\u6570\u636e\uff0c\u53ef\u7528\u4e8e\u7075\u6d3b\u7684\u6570\u636e\u5206\u6790\u3002 \n \u4e0e\u6b64\u540c\u65f6\uff0c\u4e3a\u4e86\u66f4\u8f7b\u677e\u5730\u5206\u6790\u667a\u80fd\u5408\u7ea6\uff0cDune\u8fd8\u63d0\u4f9b\u4e86\u5177\u6709\u53ef\u8bfb\u6027\u7684\u89e3\u7801\u6570\u636e\u8868\u3002\u6211\u4eec\u4f7f\u7528\u667a\u80fd\u5408\u7ea6\u7684 ABI (Application Binary Interface) \u548c\u6807\u51c6\u5316\u4ee3\u5e01\u667a\u80fd\u5408\u7ea6\u7684\u63a5\u53e3\u6807\u51c6\uff08ERC20\u3001ERC721 \u7b49\uff09\u7528\u4e8e\u89e3\u7801\u6570\u636e\u3002\u622a\u6b62\u64b0\u5199\u6b64\u6587\u6863\u65f6\uff0c\u6211\u4eec\u5df2\u7ecf\u7d22\u5f15\u4e86\u8d85\u8fc7\u8d85\u8fc7 28 \u4e07\u4efd\u667a\u80fd\u5408\u7ea6\u3002\u60a8\u53ef\u4ee5 \u5728\u6b64\u63d0\u4ea4\u65b0\u7684\u5408\u7ea6  (../../getting-started/decoding-contracts/) \u4e0eDune\u8fdb\u884c\u89e3\u7801\u3002 \n \u6b64\u5916\uff0c\u6211\u4eec\u6b63\u5728\u5c06\u5e38\u7528\u94fe\u4e0a\u6570\u636e\uff08\u5982 NFT \u4e0e DEX \u6570\u636e\uff09\u548c\u7b2c\u4e09\u65b9\u6570\u636e\u96c6\u5171\u540c\u6784\u5efa\u7ec4\u6210\u4e00\u7cfb\u5217 \u9b54\u6cd5  (spells/) \u3002 \n \u4ee5\u4e0b\u662f\u53ef\u7528\u5185\u5bb9\u7684\u6982\u89c8\uff1a \n \n \u539f\u59cb\u6570\u636e  (raw/) : \u672a\u7ecf\u7f16\u8f91\u3001\u539f\u59cb\u7f16\u7801\u7684\u533a\u5757\u94fe\u6570\u636e \n \u5df2\u89e3\u6790\u6570\u636e  (decoded/) : ( \u76ee\u524d\u4f7f\u7528\u6700\u5e7f\u6cdb\u7684\u6570\u636e\u6e90 ) \u7ecf\u8fc7\u89e3\u7801\u540e\u7684\u667a\u80fd\u5408\u7ea6\u4e8b\u4ef6\u53ca\u8c03\u7528\u6570\u636e \n \u9b54\u6cd5  (spells/) : \u7531Dune\u548c\u793e\u533a\u4e00\u8d77\u7ef4\u62a4\u5efa\u8bbe\u7684\u6570\u636e\u8868 \n \u793e\u533a  (community/) : \u7531\u6307\u5b9a\u5408\u4f5c\u7ec4\u7ec7\u63d0\u4f9b\u7684\u94fe\u4e0b\u6570\u636e\u6e90 \n \u4ef7\u683c  (prices/) : \u7531\u7b2c\u4e09\u65b9\u6570\u636e\u6e90\u63d0\u4f9b\u7684\u4ee3\u5e01\u4ef7\u683c\u6570\u636e \n \u7528\u6237\u81ea\u5efa  (user-generated/) : \u5728\u6211\u4eec\u7684\u6570\u636e\u5e93\u4e2d\u6784\u5efa\u60a8\u81ea\u5b9a\u4e49\u7684\u89c6\u56fe\u3001\u51fd\u6570\u6216\u6570\u636e\u8868 \n \n \u6570\u636e\u6a21\u578b\u7684\u7ec6\u8282\u53d6\u51b3\u4e8e\u533a\u5757\u94fe\u548c\u5f15\u64ce\u3002 \u6211\u4eec\u5df2\u4e3a  Dune V1 \u5f15\u64ce  (v1/raw/)  (PostgreSQL) \u4ee5\u53ca  Dune V2 \u5f15\u64ce  (v2/raw/)  (Databricks SQL) \u4e0a\u7684\u6570\u636e\u7f16\u5236\u4e86\u8be6\u7ec6\u7684\u53c2\u8003\u8d44\u6599\u3002 \n ", "url": "https://dune.com/docs/zh/reference/tables"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/raw/gnosis-chain-xdai/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/raw/gnosis-chain-xdai/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/raw/gnosis-chain-xdai/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/raw/ethereum-mainnet/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/raw/ethereum-mainnet/traces/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/raw/ethereum-mainnet/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/raw/ethereum-mainnet/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/raw/ethereum-mainnet/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/raw/bnb-chain-bsc/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/raw/bnb-chain-bsc/traces/"}
{"content": "How Tables are Generated from Raw Ethereum Data \u00b6 \n \n Note \n Table generation is similar to this for all EVM based blockchains. The labels below follow Dune V1 naming conventions and are slightly different in Dune V2 Tables. Learn about the  differences in V2's data structure here  (../dune-v2/) . And learn  how to search V2 data here  (../../getting-started/queries/data-explorer/#v2) . \n \n There are three main tables in Dune generated from raw Ethereum data, which are the source truth for everything else on the platform. \n \n The rest of Dune's tables are built from these three: \n \n If you can't figure out the table to query from, you'll need to dig through an example transaction hash on  the relevant chain's blockchain explorer  (../wizard-tools/blockchain-explorers/)  to figure out the call/evt Contract. \n Essentially go  tx_hash  \u2192  contract  in \"to\" \u2192  code  and pull the contract name from there. If it's a proxy, the blockchain explorer should link you to an implementation address.  \n Dune V2 data also has a handy Lineage Graph that lets you explore how all of Dune's data tables are related to each other -  learn more about that in the Lineage Graph section here  (../spellbook/spellbook-model-docs/) . \n \n You should always try to use the  Decoded  (decoded/)  or  Spell  (spells/)  tables when you can as these are human-readable and pre-organized so they're much easier to use.", "url": "https://dune.com/docs/zh/reference/tables#how-tables-are-generated-from-raw-ethereum-data"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/raw/bnb-chain-bsc/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/raw/bnb-chain-bsc/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/raw/bnb-chain-bsc/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/v1/raw/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/user-generated/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/prices/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/abstractions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/raw/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/tables/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/dune-v2/database/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/dune-v2/query-engine/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/dune-v2/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/support-feedback/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/v1-sunsetting/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/use-cases/ecosystem-dashboards/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/dune-explorer/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/embeds/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/raw/optimism/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/raw/optimism/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/raw/gnosis-chain-xdai/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/raw/gnosis-chain-xdai/traces/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/raw/gnosis-chain-xdai/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/raw/gnosis-chain-xdai/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/bnb-chain-bsc/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/avalanche-c-chain/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/decoded/call-tables/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/solana/vote-transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/solana/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/solana/rewards/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/solana/changelog/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/solana/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/solana/account-activity/"}
{"content": "Please wait \n This application is starting, you will be redirected once it is ready. \n If your are the application owner, check your logs for details.", "url": "https://dune.com/docs/zh/wizard-tools/utility-queries/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/wizard-tools/helpful-dashboards/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/wizard-tools/blockchain-explorers/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/wizard-tools/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/community/reservoir/tokens/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/community/reservoir/token-floor-ask-events/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/spells/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/community/reservoir/token-attributes/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/community/reservoir/sales/"}
{"content": "", "url": "https://dune.com/docs/zh/reference/v2/community/reservoir/collection-floor-ask-events/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/community/reservoir/attributes/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/community/reservoir/attribute-keys/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/community/reservoir/asks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/community/reservoir/ask-events/"}
{"content": "", "url": "https://dune.com/docs/zh/reference/v2/community/reservoir/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/community/flashbots/sandwiches/"}
{"content": "", "url": "https://dune.com/docs/zh/reference/v2/community/flashbots/sandwiched-swaps/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/community/flashbots/mev_summary/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/community/flashbots/liquidations/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/community/flashbots/arbitrages/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/community/flashbots/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/community/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/spells/special-tables/erc721/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/spells/special-tables/erc20/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/spells/special-tables/erc1155/"}
{"content": "", "url": "https://dune.com/docs/zh/reference/v2/spells/special-tables/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/spells/nft.trading/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/decoded/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/solana/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/polygon/transactions/"}
{"content": "", "url": "https://dune.com/docs/zh/reference/v2/raw/polygon/traces/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/polygon/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/polygon/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/polygon/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/optimism/transactions/"}
{"content": "", "url": "https://dune.com/docs/zh/reference/v2/raw/optimism/traces/"}
{"content": "", "url": "https://dune.com/docs/zh/reference/v2/raw/optimism/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/optimism/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/optimism/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/gnosis-chain-xdai/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/gnosis-chain-xdai/traces/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/gnosis-chain-xdai/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/gnosis-chain-xdai/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/gnosis-chain-xdai/"}
{"content": "", "url": "https://dune.com/docs/zh/reference/v2/raw/ethereum-mainnet/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/ethereum-mainnet/traces/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/ethereum-mainnet/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/ethereum-mainnet/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/ethereum-mainnet/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/bnb-chain-bsc/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/bnb-chain-bsc/traces/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/bnb-chain-bsc/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/bnb-chain-bsc/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/avalanche-c-chain/traces/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/avalanche-c-chain/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/avalanche-c-chain/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/avalanche-c-chain/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/arbitrum/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/arbitrum/traces/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/arbitrum/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/arbitrum/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/arbitrum/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/raw/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/abstractions/special-tables/erc721/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/abstractions/special-tables/erc20/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/abstractions/special-tables/erc1155/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/abstractions/special-tables/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/abstractions/prices-from-dexes/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/abstractions/nft.trading/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/abstractions/lending-tables/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/abstractions/labels/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/abstractions/erc-20-balances/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/abstractions/dex.trades/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/abstractions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/decoded/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/decoded/call-tables/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/raw/polygon/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/raw/polygon/traces/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/raw/polygon/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/raw/polygon/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/raw/polygon/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/raw/optimism/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/raw/optimism/traces/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/raw/optimism/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/raw/gnosis-chain-xdai/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/raw/ethereum-mainnet/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/raw/ethereum-mainnet/traces/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/raw/ethereum-mainnet/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/raw/ethereum-mainnet/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/raw/ethereum-mainnet/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/raw/bnb-chain-bsc/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/raw/bnb-chain-bsc/traces/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/raw/bnb-chain-bsc/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/raw/bnb-chain-bsc/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/raw/bnb-chain-bsc/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v1/raw/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/user-generated/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/prices/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/community/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/abstractions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/decoded/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/raw/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/dashboards/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/visualizations/other-visualizations/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/visualizations/charts-graphs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/visualizations/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/queries/tips/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/queries/parameters/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/queries/query-results/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/queries/query-window/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/queries/data-explorer/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/queries/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/example/"}
{"content": "Skip to content\n          (#start-building) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/index.md) \n Welcome \n Dune is a web-based platform that allows you to query public blockchain data and aggregate it into beautiful dashboards. \n \n Quickstart \n To get started with Dune in 5 minutes, see the  Quickstart  (quickstart/) . \n \n \n \n The world's blockchain data at your fingertips! \n \n Blockchains are open and transparent, but each chain is unique\u2014making it difficult to understand, ingest, and aggregate data. Dune gives you the proper tools to analyze cross-chain data for different tokens, wallets, and protocols. You can also easily share your work with the community. \n ", "url": "https://dune.com/docs/getting-started/query-quick-start/"}
{"content": "Skip to content\n          (#start-building) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/index.md) \n Welcome \n Dune is a web-based platform that allows you to query public blockchain data and aggregate it into beautiful dashboards. \n \n Quickstart \n To get started with Dune in 5 minutes, see the  Quickstart  (quickstart/) . \n \n \n \n The world's blockchain data at your fingertips! \n \n Blockchains are open and transparent, but each chain is unique\u2014making it difficult to understand, ingest, and aggregate data. Dune gives you the proper tools to analyze cross-chain data for different tokens, wallets, and protocols. You can also easily share your work with the community. \n ", "url": "https://dune.com/docs/getting-started/"}
{"content": "Skip to content\n          (#setting-up-spellbook-dbt) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/spellbook/1-do-some-prerequisites%20and-set-up-Spellbook-dbt.md) \n 1. \ud83d\udcbb Local Setup \n To get started, you\u2019ll need to install: \n \n VSCode  (https://code.visualstudio.com/)  - any IDE will work but this is what we use \n Python 3.9  (https://realpython.com/installing-python/)  - you need this exact version of Python \n pip  (https://pip.pypa.io/en/stable/installation/)  - pip is a package manager for Python \n pipenv  (https://pypi.org/project/pipenv/)  - pipenv is a virtual environment manager for Python \n git and GitHub  (https://docs.github.com/en/get-started/quickstart/set-up-git)  - git is a version control system and GitHub is a hosting service for git repositories \n \n After that, you\u2019ll also need to: \n \n Make a  fork  (https://docs.github.com/en/get-started/quickstart/fork-a-repo)  of the  spellbook repo  (https://github.com/duneanalytics/spellbook) . Including cloning locally and adding an upstream.  \n Review  Github\u2019s instructions  (https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request-from-a-fork)  on how to make a pull request from a fork.  \n \n For new users, we recommend using github desktop, it makes the process a bit easier. \n Download Github Desktop  here  (https://desktop.github.com/) . \n The following video focusses on the command line, but the process is the same in Github Desktop. \n \n Essentially you: \n \n Go to the Spellbook repository and click the fork button at the top. \n Copy the HTTPS URL of your fork \n Open the folder that you\u2019d like to store Spellbook in inside of VS Code \n Open a terminal in VS code and enter  git clone [paste your URL here] \n \n Once you hit enter, you\u2019ll start downloading Spellbook, it\u2019ll take a few minutes. \n ", "url": "https://dune.com/docs/spellbook/1-do-some-prerequisites%20and-set-up-Spellbook-dbt/"}
{"content": "Skip to content\n          (#understanding-spell-models) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/spellbook/index.md) \n Understand and Add a Spell \n ", "url": "https://dune.com/docs/spellbook/"}
{"content": "Skip to content\n          (#overview) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/materialized-views.md) \n Materialized Views \n ", "url": "https://dune.com/docs/query/materialized-views/"}
{"content": "Skip to content\n          (#overview) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/query-a-query.md) \n Query Views \n ", "url": "https://dune.com/docs/query/query-a-query/"}
{"content": "Skip to content\n          (#dunesql-architecture) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/writing-efficient-queries.md) \n Writing efficient Queries \n Writing efficient queries is essential for getting the most out of DuneSQL. This guide will help you understand how to write efficient queries on DuneSQL. \n ", "url": "https://dune.com/docs/query/writing-efficient-queries/"}
{"content": "Skip to content\n          (#reserved-keywords) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/DuneSQL-reference/reserved-keywords.md) \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/reserved-keywords/"}
{"content": "Skip to content\n          (#datatypes) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/DuneSQL-reference/datatypes.md) \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/"}
{"content": "Skip to content\n          (#window-functions) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/DuneSQL-reference/Functions-and-operators/window.md) \n Window functions \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/window/"}
{"content": "Start building \u00b6 \n Ready to start building? Once you have an  account  (https://dune.com/auth/register)  and you\u2019ve reviewed the  Quickstart  (quickstart/) , check out these essentials to start using Dune: \n \n Use the  Query Editor  (app/query-editor/)  to explore data, write queries, and gain mastery \n Make stunning  visualizations  (app/visualizations/)  with graphs, charts, and other unique options \n Create a  Dashboard  (app/dashboards/)  to embed visualizations, graphics, and text to tell compelling stories with your data \n \n ", "url": "https://dune.com/docs/getting-started/query-quick-start/#start-building"}
{"content": "Learn more \u00b6 \n If you\u2019re new to blockchain or SQL\u2014or want to go deeper on Dune concepts and best practices\u2014check out the following resources: \n \n Dune Official Getting Started Video Series  (https://www.youtube.com/watch?v=S-cctFmR828&list=PLK3b5d4iK10ext4v-GBySekaA8-GP8quD&index=1)  to learn how data flows and how to navigate the Dune app to get the most out of it \n Web3 Data & Analytics Learning Resources  (learning/)  to explore Dune 101, handy how-to tutorials, initiate your own analyses, and uncover foundational SQL and blockchain tools  \n Join our community in  Discord  (https://discord.gg/FjwGvbgDFS)  to get support through the  #\ud83d\udc25\ufe31beginners  and  #\ud83d\ude4b\ufe31query-questions  channels \n \n ", "url": "https://dune.com/docs/getting-started/query-quick-start/#learn-more"}
{"content": "Why Dune? \u00b6 \n Dune\u2014along with our massive community of users and experts\u2014provides powerful tools and analysis of all onchain data. You can find a  dashboard  (https://dune.com/browse/dashboards?q=dex&order=favorites&time_range=all)  for pretty much anything web3-related, including for EVMs like Ethereum, Polygon, Goerli, and Optimism\u2014and non-EVM chains like Solana and Bitcoin. \n Examples of real dashboards: \n \n NFT marketplaces  (https://dune.com/hildobby/NFTs) \n DEX metrics  (https://dune.com/hagaetc/dex-metrics) \n Project metrics  (https://dune.com/whale_hunter/unibot-revenue) \n DAO Accounting (Maker)  (https://dune.com/steakhouse/makerdao) \n Base Chain Metrics  (https://dune.com/optimismfnd/Optimism) \n \n ", "url": "https://dune.com/docs/getting-started/query-quick-start/#why-dune"}
{"content": "Find an expert \u00b6 \n There are many experts in the crypto community who specialize in Dune or have the necessary skills to get up to speed quickly. \n \n \n \n Find a Wizard \u00b6  (#find-a-wizard) \n A guide on how to find a skilled Dune Freelancer to work with you on your project.  \n \u2192 Find a Wizard  (resources/dune-bounties/)", "url": "https://dune.com/docs/getting-started/query-quick-start/#find-an-expert"}
{"content": "Start building \u00b6 \n Ready to start building? Once you have an  account  (https://dune.com/auth/register)  and you\u2019ve reviewed the  Quickstart  (quickstart/) , check out these essentials to start using Dune: \n \n Use the  Query Editor  (app/query-editor/)  to explore data, write queries, and gain mastery \n Make stunning  visualizations  (app/visualizations/)  with graphs, charts, and other unique options \n Create a  Dashboard  (app/dashboards/)  to embed visualizations, graphics, and text to tell compelling stories with your data \n \n ", "url": "https://dune.com/docs/getting-started/#start-building"}
{"content": "Learn more \u00b6 \n If you\u2019re new to blockchain or SQL\u2014or want to go deeper on Dune concepts and best practices\u2014check out the following resources: \n \n Dune Official Getting Started Video Series  (https://www.youtube.com/watch?v=S-cctFmR828&list=PLK3b5d4iK10ext4v-GBySekaA8-GP8quD&index=1)  to learn how data flows and how to navigate the Dune app to get the most out of it \n Web3 Data & Analytics Learning Resources  (learning/)  to explore Dune 101, handy how-to tutorials, initiate your own analyses, and uncover foundational SQL and blockchain tools  \n Join our community in  Discord  (https://discord.gg/FjwGvbgDFS)  to get support through the  #\ud83d\udc25\ufe31beginners  and  #\ud83d\ude4b\ufe31query-questions  channels \n \n ", "url": "https://dune.com/docs/getting-started/#learn-more"}
{"content": "Why Dune? \u00b6 \n Dune\u2014along with our massive community of users and experts\u2014provides powerful tools and analysis of all onchain data. You can find a  dashboard  (https://dune.com/browse/dashboards?q=dex&order=favorites&time_range=all)  for pretty much anything web3-related, including for EVMs like Ethereum, Polygon, Goerli, and Optimism\u2014and non-EVM chains like Solana and Bitcoin. \n Examples of real dashboards: \n \n NFT marketplaces  (https://dune.com/hildobby/NFTs) \n DEX metrics  (https://dune.com/hagaetc/dex-metrics) \n Project metrics  (https://dune.com/whale_hunter/unibot-revenue) \n DAO Accounting (Maker)  (https://dune.com/steakhouse/makerdao) \n Base Chain Metrics  (https://dune.com/optimismfnd/Optimism) \n \n ", "url": "https://dune.com/docs/getting-started/#why-dune"}
{"content": "Find an expert \u00b6 \n There are many experts in the crypto community who specialize in Dune or have the necessary skills to get up to speed quickly. \n \n \n \n Find a Wizard \u00b6  (#find-a-wizard) \n A guide on how to find a skilled Dune Freelancer to work with you on your project.  \n \u2192 Find a Wizard  (resources/dune-bounties/)", "url": "https://dune.com/docs/getting-started/#find-an-expert"}
{"content": "Setting up Spellbook dbt \u00b6 \n Once you have a local copy of your Spellbook fork, it\u2019s time to set up Spellbook dbt! \n \n Open your local copy of your Spellbook fork in VSCode, then open a terminal and enter  pipenv install .  \nYou need to be in the Spellbook folder for this to work. \nThis will install the packages necessary to run Spellbook on your computer. \n \n run  pipenv shell  to activate your virtual environment. \n \n \n run  dbt deps  to install the dbt dependencies. \n \n \n run  dbt compile  to compile the dbt project.  \n \n \n If that runs correctly your terminal should end with \u201cdone\u201d and you should see the \u201ctarget\u201d folder in your sidebar \n \n The  dbt compile  command transforms JINJA and SQL templated code into plain SQL, which you can use to test Spells on the Dune Website. The 'target' folder in your spellbook directory now contains these plain SQL versions of all models for Dune.  \nIf you've made changes to the repository before doing this, you can now verify the compile process is functioning right, as it won't complete if there are significant errors. \nIf no changes were made previously, you can begin to add, edit, or delete files in the repository. Once you're done, run dbt compile again to test your plain SQL queries on dune.com. \n You are now ready to start working on Spellbook! \n ", "url": "https://dune.com/docs/spellbook/1-do-some-prerequisites%20and-set-up-Spellbook-dbt/#setting-up-spellbook-dbt"}
{"content": "Coming back \u00b6 \n If you have done this installation on your machine once, to get back into dbt, simply navigate to the spellbook repo, run  pipenv shell , and you can run  dbt compile  again. \n ", "url": "https://dune.com/docs/spellbook/1-do-some-prerequisites%20and-set-up-Spellbook-dbt/#coming-back"}
{"content": "What did I just do? \u00b6 \n You now have the ability to compile your dbt model statements and test statements into plain SQL. This allows you to test those queries on the usual dune.com environment and should therefore lead to a better experience while developing spells. Running the queries will immediately give you feedback on typos, logical errors, or mismatches. This in turn will help us deploy these spells faster and avoid any potential mistakes.", "url": "https://dune.com/docs/spellbook/1-do-some-prerequisites%20and-set-up-Spellbook-dbt/#what-did-i-just-do"}
{"content": "Understanding Spell Models \u00b6 \n If you are just looking to understand the basic models  from the Github Repo  (https://github.com/duneanalytics/spellbook) , read through the  example model walkthroughs of transfers and balances of ERC20 tokens  (Example%20Spell%20Models/) \n ", "url": "https://dune.com/docs/spellbook/#understanding-spell-models"}
{"content": "7 Steps to adding a Spell \u00b6 \n Let\u2019s learn how to add a Spell!  \nBy the end of this guide, you\u2019ll have your local environment set up and the knowledge you need to add Spells. \n 7 steps to go: \n \n \n 1. \ud83d\udcbb Set Up Spellbook dbt locally  (1-do-some-prerequisites%20and-set-up-Spellbook-dbt/) \n 2. \ud83d\udee3\ufe0f Set Up Your File Structure for SQL, Schema, and Source Files  (2-set-up-your-file-structure-for-SQL-schema-and-source-files/) \n 3. \ud83d\udcd9 Identify and Define Sources  (3-identify-and-define-sources/) \n 4. \ud83e\uddea Define Schema and Tests  (4-define-expectations-with-schema-and-tests/) \n 5. \ud83d\udd8b\ufe0f Write Your Spell  (5-write-your-spell-as-SELECT-statement/) \n 6. \ud83c\udfa8 Configure Alias and Materialization  (6-configure-alias-and-materialization-strategy/) \n 7. \ud83e\uddd9 Make a Pull Request, Become an Archwizard  (7-make-a-pull-request-get-merged-become-an-archwizard/) \n \n \n \n Spellbook Model Creation Runs on Spark SQL \n Spellbook Spells are available on Dune V2, queryable from both Spark SQL and Dune SQL  V2 Query Engines  (../query/) . For now, Spells will continue to be written in Spark SQL and querying them with Dune SQL will require small syntax changes. While the changes needed to make Spells Dune SQL native are small, we want to make sure Dune SQL is rock solid before we implement them! \n \n ", "url": "https://dune.com/docs/spellbook/#7-steps-to-adding-a-spell"}
{"content": "Video Guides \u00b6 \n If you\u2019re more of a watcher, check out these video workshops. \n In collaboration with  MetricsDAO  (https://metricsdao.xyz/) ,  @agaperste  (https://dune.com/agaperste)  showed us how to add a Spell from scratch! \n \n In this  DuneCon workshop  (https://www.youtube.com/playlist?list=PLK3b5d4iK10eVQejE7O1JEwcBMA4uwdSC) , Dune Team member Megan Heintz (who came up with the name \"Spellbook\") walks us through Spellbook's infrastructure and how to migrate data to a Spell: \n \n In this tutorial,  @ilemi  (https://dune.com/ilemi)  aka Andrew Hong shows us the main protocol interactions (creating a pair, managing liquidity, swapping through pairs) and how to pull and transform data on Ethereum using. \n Read his guide here  (https://ath.mirror.xyz/K-S_Mwhj7osTBqN-AOWbCmfNn9TZViEkzICCmK-oObM)  or watch the video below:", "url": "https://dune.com/docs/spellbook/#video-guides"}
{"content": "Overview \u00b6 \n The \"Materialized View\" feature in DuneSQL allows you to use an existing query's results in another query. This powerful functionality enables you to break down bigger queries so that the complex/high compute logic only has to run a few times a day, and the queries you build on top run much faster. \n You have full control over this view, you can think of it as a simplified Spellbook table. You should think of using this feature any time you run into: \n \n Query timeouts (running longer than 30 mintes) \n Stage limits (exceeding stage limits in the planning stage, normally happens when you join too many tables) \n Memory limits (exceeding the memory limits, normally happens when you use too many large tables like  solana.transactions  or  ethereum.traces ) \n \n ", "url": "https://dune.com/docs/query/materialized-views/#overview"}
{"content": "To create a materialized view \u00b6 \n Write a new query or go to an existing query. (We suggest creating via team context on a plan with sufficient credits) \n \n Make sure all columns are explicitly named \n Save the query \n After saving a \u201cmaterialize\u201d button will appear below the run button. \n Click the materialize button, and set a refresh schedule. Each refresh uses up credits based on cluster used. \n \n \n You can find the example query  here  (https://dune.com/queries/2858381) , and it can be queried with just: \n  (#__codelineno-0-1) SELECT \n  (#__codelineno-0-2) *\n  (#__codelineno-0-3) FROM dune.dune.result_2858381\n \n Some key things to keep in mind:  \n \n A query result has a 200MB limit in the editor but a materialized view doesn\u2019t have storage limits. Even though the results will look truncated in the editor. \n This materialized view refresh schedule is DIFFERENT from the query scheduler. Results from running the query or the normal query scheduler will NOT update the materialized view.  \n Plans have total monthly storage limits (for premium plans, it\u2019s 50GB, plus it\u2019s 15GB, free is 1MB). \n You can delete your materialized view by archiving it. This works via the setting dialogue on the query page. \n \n ", "url": "https://dune.com/docs/query/materialized-views/#to-create-a-materialized-view"}
{"content": "To query a materialized view \u00b6 \n Wait for a materialized view to finish creation first. It should be roughly similar to the time the query normally takes to execute - maybe a bit longer due to time it takes to write the new table. \n Query the materialized view via  dune.<username>.result_<queryId>  (displayed in modal)\nIf your username starts with a number, you\u2019ll need to wrap the   in quotes i.e.  dune.\u201d123co\u201d.result567 \n Eventually, you can query by the materialized view name specified during the materialized view creation flow but that doesn\u2019t work yet. \n \n Info \n When you query a materialized view in another query, it does not rerun the materialized view (unlike query views).   \n \n Matviews are marked separately in your query list and can also be filtered on. \n Feedback:\nFeel free to message in Discord/Twitter any feedback you might have!", "url": "https://dune.com/docs/query/materialized-views/#to-query-a-materialized-view"}
{"content": "Skip to content\n          (#varchar-utility-functions) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/DuneSQL-reference/Functions-and-operators/varchar-utility-functions.md) \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/varchar-utility-functions/"}
{"content": "Overview \u00b6 \n The \"Query View\" feature in DuneSQL allows you to use an existing query as a view in another query. This powerful functionality enables you to create reusable queries, build complex queries, and take advantage of existing queries as views.  \n You can also pass on parameters when querying a query view. \n \n Info \n All upstream queries are executed as functional SQL views, which means that they will be executed every time they are queried. This means there currently is no performance benefit to using the \"Query a Query\" feature. If you are looking for a performance benefit, consider using  materialized views  (../materialized-views/)  instead. \n \n ", "url": "https://dune.com/docs/query/query-a-query/#overview"}
{"content": "Using Query View \u00b6 \n To use the \"Query View\" feature, you will need the queryID of the query you want to use as a view. The queryID can be found in the URL of a query. For example, if the URL of a query is  https://dune.com/queries/1746191  (https://dune.com/queries/1746191) , the queryID would be  1746191 . \n Once you have the queryID, you can use it in your new query using the following syntax: \n  (#__codelineno-0-1) select   *   from   query_ < queryID > \n \n For example, if you want to use the query with queryID 1746191 as a view in your new query, you would write:  \n  (#__codelineno-1-1) select   *   from   query_1746191   \n \n ", "url": "https://dune.com/docs/query/query-a-query/#using-query-view"}
{"content": "Adding Parameters When Using Query Views \u00b6 \n You can also pass on parameters when querying a query view. This allows you to use the same query view with different parameters in different queries. \n To pass on parameters when querying a query view, you need to use the following syntax: \n  (#__codelineno-2-1) Select   *   from   \"query_<queryID>(<parameter1>='<value1>', <parameter2>='<value2>', ...)\" \n \n For example, if you want to use the query with queryID 3256410 as a view in your new query and pass on the parameter  blockchain  with the value  ethereum , the setup would look like this:  \n  (#__codelineno-3-1) --query_3256410, our query to be invoked \n  (#__codelineno-3-2) Select   \n  (#__codelineno-3-3)      project , \n  (#__codelineno-3-4)      block_date , \n  (#__codelineno-3-5)      sum ( amount_usd )   as   amount_usd \n  (#__codelineno-3-6) from   dex . trades \n  (#__codelineno-3-7) where   blockchain   =   '{{blockchain}}' \n  (#__codelineno-3-8) and   block_time   >   now ()   -   interval   '7'   day   \n \n link to query  (https://dune.com/queries/3256410) \n  (#__codelineno-4-1) --query_3256401, our query that invokes the query_3256410 \n  (#__codelineno-4-2) Select   \n  (#__codelineno-4-3)      project , \n  (#__codelineno-4-4)      block_date , \n  (#__codelineno-4-5)      amount_usd   \n  (#__codelineno-4-6) from   \"query_3256410(blockchain='ethereum')\" \n \n link to query  (https://dune.com/queries/3256401) \n Parameters in the query view are passed on as strings and therefore always need to be wrapped in single quotes. Since we sometimes want to pass a  string  including the single quotes, we need to escape the single quotes in the query view. We can do that by adding a backslash in front of the single quote. Escaping single quotes means that the single quote will be treated as a literal character and not as a string delimiter. \n For example: \n  (#__codelineno-5-1) --query to be invoked \n  (#__codelineno-5-2) Select   \n  (#__codelineno-5-3)      project , \n  (#__codelineno-5-4)      block_date , \n  (#__codelineno-5-5)      sum ( amount_usd )   as   volume_in_usd \n  (#__codelineno-5-6) from   dex . trades \n  (#__codelineno-5-7) where   blockchain   =   {{ blockchain }} \n  (#__codelineno-5-8) -- we want to pass a string including the single quotes to this query \n \n  (#__codelineno-6-1) --query that invokes the query above \n  (#__codelineno-6-2) Select   \n  (#__codelineno-6-3)      project , \n  (#__codelineno-6-4)      block_date , \n  (#__codelineno-6-5)      volume_in_usd \n  (#__codelineno-6-6) from   \"query_3256410(blockchain='\\'ethereum\\'')\" \n  (#__codelineno-6-7) --note the escaped single quotes \n  (#__codelineno-6-8) --this will pass the parameter blockchain with the value 'ethereum' \n \n The backslash is not needed when passing on a parameter that doesn't need to be wrapped in single quotes on the receiving side, like  integers  or  booleans .\nYou can choose to handle this on the query view side or on the query that invokes the query view side. If you wrap your parameter in single quotes on the receiving side, you don't need to escape the single quotes on the query view side.  \n For example: \n  (#__codelineno-7-1) --query_3256410, our query to be invoked \n  (#__codelineno-7-2) Select   \n  (#__codelineno-7-3)      project , \n  (#__codelineno-7-4)      block_date , \n  (#__codelineno-7-5)      sum ( amount_usd )   as   amount_usd \n  (#__codelineno-7-6) from   dex . trades \n  (#__codelineno-7-7) where   blockchain   =   '{{blockchain}}' \n  (#__codelineno-7-8) and   block_time   >   now ()   -   interval   '7'   day   \n  (#__codelineno-7-9) --note the single quotes around the parameter blockchain \n \n  (#__codelineno-8-1) Select   \n  (#__codelineno-8-2)      project , \n  (#__codelineno-8-3)      block_date , \n  (#__codelineno-8-4)      amount_usd   \n  (#__codelineno-8-5) from   \"query_3256410(blockchain='ethereum')\" \n  (#__codelineno-8-6) --since we wrap the parameter blockchain in single quotes on the receiving side, we don't need to escape the single quotes on the query view side \n \n The table below shows how different parameter types are passed on when using the \"Query view\" feature: \n \n \n \n Parameter Type \n Syntax \n Example \n \n \n \n \n Literal \n query(tableName='labels.all', whateverKey='lala') \n Original Query : select * from {{tableName}}    Macro : select * from \"query_123(tableName='labels.all')\" \n \n \n Integer, Bigint \n query(integerKey='1') \n Original Query : select {{integerKey}}    Macro : select * from \"query_123(integerKey='1')\" \n \n \n Decimal, Double \n query(decimalKey='1.2')     query(realKey='1.2F')     query(doubleKey='1.2E0') \n Original Query : select {{realKey}}    Macro : select * from \"query_123(realKey='1.2F')\" \n \n \n Varchar \n query(varcharKey='\\'ethereum\\'') \n Original Query : select * from labels.all where name = {{varcharKey}}    Macro : select * from \"query_123(varcharKey='\\'DEX Trader\\'')\" \n \n \n Char \n query(charKey='\\'a\\'') \n Original Query : select {{charKey}}    Macro : select * from \"query_123(charKey='\\'a\\'')\" \n \n \n Varbinary \n query(varbinaryKey='0xabcd') \n Original Query : select * from labels.all where address = {{varbinaryKey}}    Macro : select * from \"query_123(varbinaryKey='0xabcd')\" \n \n \n UINT256 \n query(uint256Key='UINT256 \\'1\\'') \n Original Query : select * from arbitrum.transactions where gas_price = {{uint256Key}}    Macro : select * from \"query_123(uint256Key='uint256 \\'1\\'')\"    Original Query : select * from arbitrum.transactions where gas_price = uint256 '{{uint256Key}}'    Macro : select * from \"query_123(uint256Key='1')\" \n \n \n INT256 \n query(int256Key='INT256 \\'-1\\'') \n Original Query : select * from arbitrum.transactions where gas_price = {{int256Key}}    Macro : select * from \"query_123(int256Key='int256 \\'-1\\'')\"    Original Query : select * from arbitrum.transactions where gas_price = int256 '{{int256Key}}'    Macro : select * from \"query_123(int256Key='1')\" \n \n \n Date, Time, Timestamp \n query(dateKey='2023-01-02')     query(dateKey='date \\'2023-01-02\\'')     query(dateKey='13:45:30 +05:00')     query(dateKey='time \\'13:45:30 +05:00\\'')     query(dateKey='2023-08-24 13:45:30 UTC')     query(dateKey='timestamp \\'2023-08-24 13:45:30 UTC\\'') \n Original Query : select * from ethereum.blocks where time > {{dateKey}}    Macro : select * from \"query_123(dateKey='timestamp \\'2023-08-24\\'')\"    Original Query : select * from ethereum.blocks where time > timestamp '{{dateKey}}'    Macro : select * from \"query_123(dateKey='2023-08-24')\" \n \n \n Array \n query(arrayKey='array[1,2,3]')     query(arrayKey='array[uint256 \\'1\\', uint256 \\'2\\']')     query(arrayKey='array[\\'these\\', \\'are\\, \\'varchar\\]') \n Original Query : select * from dex_aggregator.trades where trace_address = {{arrayKey}}    Macro : select * from \"query_123(arrayKey='array[1, 2]')\" \n \n \n Boolean \n query(booleanKey='true') \n Original Query : select * from bitcoin.inputs where is_coinbase = {{booleanKey}}    Macro : select * from \"query_123(booleanKey='false')\" \n \n \n Row \n query(rowKey='row(1, uint256 \\'1\\', \\'hi\\')') \n Original Query : select {{rowKey}}    Macro : select * from \"query_123(rowKey='row(false, 1, uint256 \\'1\\', \\'hi\\')')\" \n \n \n Map \n query(mapKey='map(array[\\'key1\\', \\'key2\\'], array[\\'value1\\', \\'value2\\'])') \n Original Query : select {{mapKey}}    Macro : select * from \"query_123(mapKey='map(array[\\'key1\\', \\'key2\\'], array[\\'value1\\', \\'value2\\'])')\" \n \n \n \n ", "url": "https://dune.com/docs/query/query-a-query/#adding-parameters-when-using-query-views"}
{"content": "Limitations \u00b6 \n There are some important limitations and requirements to consider when using the \"Query a Query\" feature: \n \n Named output columns : All output columns of the query being queried must be named. For example, you cannot query  select 1  or  select count(*) from ethereum.transactions , but you can query  select 1 as v  and  select count(*) as total from ethereum.transactions . \n Saved queries : Only saved queries can be used with the \"Query a Query\" feature. \n Archived queries : Archived queries cannot be queried. \n Dune SQL : Only queries written in Dune SQL can be queried. \n Mixed cases on parameters:  If you pass parameters when querying a query, the parameter key and its values should be lower case (i.e.:  select \"query_123(Key=\\'VaLue\\')\"  will not work). \n List parameters:  the query you're querying cannot have parameters that use list options from the results of a separate query. \n \n \n Tip \n Querying private queries is a  premium feature  (https://dune.com/pricing)  only. You can't query private queries with a free or plus account.  \n \n ", "url": "https://dune.com/docs/query/query-a-query/#limitations"}
{"content": "Best Practices \u00b6 \n When using the \"Query View\" feature, consider the following best practices: \n \n Naming conventions : Ensure that your queries follow a consistent naming convention for output columns. This will make it easier to understand and reuse queries as views. \n Documentation : Provide clear documentation and comments for your queries, especially when they are intended to be used as views in other queries. \n Modularity : Break down complex queries into smaller, reusable components. This will make your queries more maintainable and easier to understand. \n Version control : If you need to update a query that is being used as a view in other queries, consider creating a new version of the query instead of modifying the existing one. This will help prevent unexpected changes in dependent queries. \n Forking  If you use the query of another user as a view in your query, consider forking the query instead of querying it. That way, you will not be affected by changes made to the  Original Query . On the other hand, you will also not be able to benefit from any improvements made to the  Original Query .", "url": "https://dune.com/docs/query/query-a-query/#best-practices"}
{"content": "Skip to content\n          (#varbinary-functions) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/DuneSQL-reference/Functions-and-operators/varbinary.md) \n Varbinary functions (DuneSQL) \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/varbinary/"}
{"content": "DuneSQL architecture \u00b6 \n DuneSQL is a TrinoSQL-based query engine designed for handling data stored in a columnar format on Dune.com. In Dune, the data is stored using the parquet file format, which combines row-oriented and column-oriented approaches. Understanding the nuances of parquet file storage and how it impacts query efficiency is essential for creating optimized queries on DuneSQL. \n ", "url": "https://dune.com/docs/query/writing-efficient-queries/#dunesql-architecture"}
{"content": "Parquet Files and Columnar Storage \u00b6 \n In parquet files, the data is partitioned by rows into multiple parquet files, and within each file, the data is further partitioned into row groups. However, the pages inside row groups store data in columns rather than rows. As a result, the database appears row-oriented at a higher level, but it reads data from column-oriented pages when accessing specific values. \n \n When querying for specific columns, this structure allows for efficient data access. On the other hand, if a query requires all columns of specific logical rows, multiple pages must be accessed since the data of one logical row is distributed across different pages. \n \n ", "url": "https://dune.com/docs/query/writing-efficient-queries/#parquet-files-and-columnar-storage"}
{"content": "Min/Max Values and Efficient Queries \u00b6 \n Each parquet file has a footer containing min/max values for every column stored within. This pattern is also repeated on a row group level, which stores metadata for columns within a specific row group. These min/max values enable the database to efficiently skip entire parquet files or row groups within files while scanning through a table, provided that the column is correlated with the file's sorting. \n However, the min/max values of strings, such as tx_hash strings and address strings in blockchain systems, are often not helpful, as they are randomly generated and not sequentially ordered. As a result, queries that reference these strings will be inefficient since all related pages need to be read into memory. \n \n ", "url": "https://dune.com/docs/query/writing-efficient-queries/#minmax-values-and-efficient-queries"}
{"content": "Writing Efficient Queries \u00b6 \n To write efficient queries on DuneSQL, it's crucial to use filter conditions based on columns that are sequentially ordered and correlated with the file's sorting. Columns like  block_time  and  block_number  are suitable for this purpose. For instance, consider the following optimized query: \n  (#__codelineno-0-1) SELECT   *   FROM   ethereum . transactions \n  (#__codelineno-0-2) WHERE   block_number   =   14854616 \n  (#__codelineno-0-3) AND   hash   =   0 xce1f1a2dd0c10fcf9385d14bc92c686c210e4accf00a3fe7ec2b5db7a5499cff ; \n \n By including the block_number column in the query, the engine can narrow down the search to a specific block, reducing the amount of data scanned and considerably speeding up the query. \n ", "url": "https://dune.com/docs/query/writing-efficient-queries/#writing-efficient-queries"}
{"content": "Exceptions \u00b6 \n A notable exception to the general rule of using sequentially ordered columns is the Solana dataset  account_activity , which is ordered by  account_keys  rather than  block_time . This allows for utilizing the min/max values for  account_keys  when building queries based on raw Solana data. \n ", "url": "https://dune.com/docs/query/writing-efficient-queries/#exceptions"}
{"content": "Additional Tips for Writing Efficient Queries on DuneSQL \u00b6 \n In addition to leveraging the columnar storage format and using sequentially ordered columns, as discussed in the previous section, here are more tips to help you write efficient queries on DuneSQL with TrinoSQL: \n \n \n Limit the columns in the SELECT clause : Only request the columns you need, as it reduces the amount of data the query engine needs to process. \n \n \n Use the LIMIT clause : If you're only interested in a specific number of rows, use the LIMIT clause to avoid processing more data than necessary. \n \n \n Leverage partition pruning : If your data is partitioned, use partition keys in the WHERE clause to help the query engine prune unnecessary partitions and reduce the amount of data scanned. In Dune almost all tables are partitioned by time and/or block number. \n \n \n Filter early and use predicate pushdown : Apply filters as early as possible in the query to reduce the amount of data being processed. This takes advantage of predicate pushdown, which pushes filter conditions down to the storage layer, reducing the amount of data read from storage. \n \n \n Use window functions : Window functions can be more efficient than self-joins or subqueries for computing aggregations over a set of rows related to the current row. \n \n \n Avoid using DISTINCT when possible : DISTINCT can be computationally expensive, especially on large datasets. If you can use GROUP BY or other aggregation methods to achieve the same result, it may improve query performance. Try using approx_distinct instead. \n \n \n Optimize subqueries : Subqueries can sometimes cause performance issues. Consider using Common Table Expressions (CTEs) or rewriting the query using JOINs to optimize subqueries. \n \n \n Optimize data types : Use appropriate data types for your columns, as it can improve query performance by reducing the amount of data processed. For example, varbinary operations are faster that varchar so be careful casting around too much. \n \n \n Make sure to join the smaller table to the larger table : This saves on memory use and will make your queries run faster. So you should be joining erc20 transfers onto ethereum transactions (as an example).  \n \n \n By following these tips, you can write more efficient queries on DuneSQL with TrinoSQL and optimize the performance of your data processing tasks. Remember that DuneSQL's unique structure, such as the parquet file format and columnar storage, should be taken into account when optimizing your queries to fully benefit from the system's capabilities. \n \n Query still not running? Try materialized views (beta) \n If your query still runs out of memory or time, try taking subquerys of it into a  materialized views  (https://dune.com/docs/query/materialized-views/) .", "url": "https://dune.com/docs/query/writing-efficient-queries/#additional-tips-for-writing-efficient-queries-on-dunesql"}
{"content": "Reserved keywords \u00b6 \n The following table lists all of the keywords that are reserved in\nDuneSQL, along with their status in the SQL standard. These reserved\nkeywords must be quoted (using double quotes) in order to be used as an\nidentifier. \n For example to query the transactions table for all transactions from a specific address you would use the following query with  from  in double quotes:  \n  (#__codelineno-0-1) Select   *   from   ethereum . transactions   \n  (#__codelineno-0-2) where   \"from\"   =   0 xc8ebccc5f5689fa8659d83713341e5ad19349448 \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/reserved-keywords/#reserved-keywords"}
{"content": "Reserved keywords \u00b6 \n \n \n \n Keyword \n SQL:2016 \n \n \n \n \n ALTER \n reserved \n \n \n AND \n reserved \n \n \n AS \n reserved \n \n \n BETWEEN \n reserved \n \n \n BY \n reserved \n \n \n CASE \n reserved \n \n \n CAST \n reserved \n \n \n CONSTRAINT \n reserved \n \n \n CREATE \n reserved \n \n \n CROSS \n reserved \n \n \n CUBE \n reserved \n \n \n CURRENT_CATALOG \n reserved \n \n \n CURRENT_DATE \n reserved \n \n \n CURRENT_PATH \n reserved \n \n \n CURRENT_ROLE \n reserved \n \n \n CURRENT_SCHEMA \n reserved \n \n \n CURRENT_TIME \n reserved \n \n \n CURRENT_TIMESTAMP \n reserved \n \n \n CURRENT_USER \n reserved \n \n \n DEALLOCATE \n reserved \n \n \n DELETE \n reserved \n \n \n DESCRIBE \n reserved \n \n \n DISTINCT \n reserved \n \n \n DROP \n reserved \n \n \n ELSE \n reserved \n \n \n END \n reserved \n \n \n ESCAPE \n reserved \n \n \n EXCEPT \n reserved \n \n \n EXECUTE \n reserved \n \n \n EXISTS \n reserved \n \n \n EXTRACT \n reserved \n \n \n FALSE \n reserved \n \n \n FOR \n reserved \n \n \n FROM \n reserved \n \n \n FULL \n reserved \n \n \n GROUP \n reserved \n \n \n GROUPING \n reserved \n \n \n HAVING \n reserved \n \n \n IN \n reserved \n \n \n INNER \n reserved \n \n \n INSERT \n reserved \n \n \n INTERSECT \n reserved \n \n \n INTO \n reserved \n \n \n IS \n reserved \n \n \n JOIN \n reserved \n \n \n JSON_ARRAY \n reserved \n \n \n JSON_EXISTS \n reserved \n \n \n JSON_OBJECT \n reserved \n \n \n JSON_QUERY \n reserved \n \n \n JSON_VALUE \n reserved \n \n \n LEFT \n reserved \n \n \n LIKE \n reserved \n \n \n LISTAGG \n reserved \n \n \n LOCALTIME \n reserved \n \n \n LOCALTIMESTAMP \n reserved \n \n \n NATURAL \n reserved \n \n \n NORMALIZE \n reserved \n \n \n NOT \n reserved \n \n \n NULL \n reserved \n \n \n ON \n reserved \n \n \n OR \n reserved \n \n \n ORDER \n reserved \n \n \n OUTER \n reserved \n \n \n PREPARE \n reserved \n \n \n RECURSIVE \n reserved \n \n \n RIGHT \n reserved \n \n \n ROLLUP \n reserved \n \n \n SELECT \n reserved \n \n \n SKIP \n reserved \n \n \n TABLE \n reserved \n \n \n THEN \n reserved \n \n \n TRIM \n reserved \n \n \n TRUE \n reserved \n \n \n UESCAPE \n reserved \n \n \n UNION \n reserved \n \n \n UNNEST \n reserved \n \n \n USING \n reserved \n \n \n VALUES \n reserved \n \n \n WHEN \n reserved \n \n \n WHERE \n reserved \n \n \n WITH \n reserved", "url": "https://dune.com/docs/query/DuneSQL-reference/reserved-keywords/#reserved-keywords_1"}
{"content": "Datatypes \u00b6 \n DuneSQL has a set of built-in data types, described below. \n Implicit Conversion and Casting to other datatypes is described in  the conversion function documentation  (../Functions-and-operators/conversion/) . \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#datatypes"}
{"content": "Boolean \u00b6 \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#boolean"}
{"content": "BOOLEAN \u00b6 \n This type captures boolean values  true  and  false . \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#boolean_1"}
{"content": "Integer \u00b6 \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#integer"}
{"content": "TINYINT \u00b6 \n A 8-bit signed two\\'s complement integer with a minimum value of  -2^7 \nand a maximum value of  2^7 - 1 . \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#tinyint"}
{"content": "SMALLINT \u00b6 \n A 16-bit signed two\\'s complement integer with a minimum value of\n -2^15  and a maximum value of  2^15 - 1 . \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#smallint"}
{"content": "INTEGER \u00b6 \n A 32-bit signed two\\'s complement integer with a minimum value of\n -2^31  and a maximum value of  2^31 - 1 . The name  INT  is also\navailable for this type. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#integer_1"}
{"content": "BIGINT \u00b6 \n A 64-bit signed two\\'s complement integer with a minimum value of\n -2^63  and a maximum value of  2^63 - 1 . \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#bigint"}
{"content": "UINT256  (Dune SQL) \u00b6 \n A 256-bit unsigned integer with a minimum value of 0 and a maximum value of 2^256 - 1. This data type can represent only non-negative integers, including very large positive integers, as well as zero. Since there is no sign bit, all 256 bits can be used to represent the magnitude of the number. This data type is commonly used in EVM smart contracts to represent balances and other quantities. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#uint256-dune-sql"}
{"content": "INT256  (Dune SQL) \u00b6 \n A 256-bit signed two's complement integer with a minimum value of -2^255 and a maximum value of 2^255 - 1. This data type can represent a wide range of values, including very large negative and positive integers, as well as zero. \n This data type is commonly used in EVM smart contracts to represent balances and other quantities, more specifically when the value can be negative.  \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#int256-dune-sql"}
{"content": "Floating-point \u00b6 \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#floating-point"}
{"content": "REAL \u00b6 \n A real is a 32-bit inexact, variable-precision implementing the IEEE\nStandard 754 for Binary Floating-Point Arithmetic. \n Example literals:  REAL '10.3' ,  REAL '10.3e0' ,  REAL '1.03e1' \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#real"}
{"content": "DOUBLE \u00b6 \n A double is a 64-bit inexact, variable-precision implementing the IEEE\nStandard 754 for Binary Floating-Point Arithmetic. \n Example literals:  DOUBLE '10.3' ,  DOUBLE '1.03e1' ,  10.3e0 ,  1.03e1 \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#double"}
{"content": "Fixed-precision \u00b6 \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#fixed-precision"}
{"content": "DECIMAL \u00b6 \n A fixed precision decimal number. Precision up to 38 digits is supported\nbut performance is best up to 18 digits. \n The decimal type takes two literal parameters: \n \n precision  - total number of digits \n scale  - number of digits in fractional part. Scale is optional\n    and defaults to 0. \n \n Example type definitions:  DECIMAL(10,3) ,  DECIMAL(20) \n Example literals:  DECIMAL '10.3' ,  DECIMAL '1234567890' ,  1.1 \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#decimal"}
{"content": "String \u00b6 \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#string"}
{"content": "VARCHAR \u00b6 \n Variable length character data with an optional maximum length. \n Example type definitions:  varchar ,  varchar(20) \n SQL statements support simple literal, as well as Unicode usage: \n \n literal string :  'Hello winter !' \n Unicode string with default escape character:\n     U&'Hello winter \\2603 !' \n Unicode string with custom escape character:\n     U&'Hello winter #2603 !' UESCAPE '#' \n \n A Unicode string is prefixed with  U&  and requires an escape character\nbefore any Unicode character usage with 4 digits. In the examples above\n \\2603  and  #2603  represent a snowman character. Long Unicode codes\nwith 6 digits require usage of the plus symbol before the code. For\nexample, you need to use  \\+01F600  for a grinning face emoji. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#varchar"}
{"content": "CHAR \u00b6 \n Fixed length character data. A  CHAR  type without length specified has\na default length of 1. A  CHAR(x)  value always has  x  characters. For\nexample, casting  dog  to  CHAR(7)  adds 4 implicit trailing spaces.\nLeading and trailing spaces are included in comparisons of  CHAR \nvalues. As a result, two character values with different lengths\n( CHAR(x)  and  CHAR(y)  where  x != y ) will never be equal. \n Example type definitions:  char ,  char(20) \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#char"}
{"content": "VARBINARY \u00b6 \n Variable length binary data. In Dune, we store addresses, hashes, calldata and logs as  varbinary  data types. \n SQL statements support usage of binary data with the prefix  0x . The\nbinary data has to use hexadecimal format. For example, the binary form\nof  eh?  is  X'65683F' . \n We have built custom functions to make it easier to work with varbinaries in DuneSQL. Check the  varbinary functions  (../Functions-and-operators/varbinary/)  page for more information. \n  (#__codelineno-0-1)      Select   *   from   ethereum . transactions   where   \"from\"   =   0 xc8ebccc5f5689fa8659d83713341e5ad19349448 \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#varbinary"}
{"content": "JSON \u00b6 \n JSON value type, which can be a JSON object, a JSON array, a JSON\nnumber, a JSON string,  true ,  false  or  null . \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#json"}
{"content": "Date and time \u00b6 \n See also  date and time functions  (../Functions-and-operators/conversion/) . \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#date-and-time"}
{"content": "DATE \u00b6 \n Calendar date (year, month, day). \n Example:  DATE '2001-08-22' \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#date"}
{"content": "TIME \u00b6 \n TIME  is an alias for  TIME(3)  (millisecond precision). \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#time"}
{"content": "TIME(P) \u00b6 \n Time of day (hour, minute, second) without a time zone with  P  digits\nof precision for the fraction of seconds. A precision of up to 12\n(picoseconds) is supported. \n Example:  TIME '01:02:03.456' \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#timep"}
{"content": "TIME WITH TIME ZONE \u00b6 \n Time of day (hour, minute, second, millisecond) with a time zone. Values\nof this type are rendered using the time zone from the value. Time zones\nare expressed as the numeric UTC offset value:\n  (#__codelineno-1-1)      SELECT   TIME   '01:02:03.456 -08:00' ; \n  (#__codelineno-1-2)      -- 1:02:03.456-08:00 \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#time-with-time-zone"}
{"content": "TIMESTAMP \u00b6 \n TIMESTAMP  is an alias for  TIMESTAMP(3)  (millisecond precision). \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#timestamp"}
{"content": "TIMESTAMP(P) \u00b6 \n Calendar date and time of day without a time zone with  P  digits of\nprecision for the fraction of seconds. A precision of up to 12\n(picoseconds) is supported. This type is effectively a combination of\nthe  DATE  and  TIME(P)  types. \n TIMESTAMP(P) WITHOUT TIME ZONE  is an equivalent name. \n Timestamp values can be constructed with the  TIMESTAMP  literal\nexpression. Alternatively, language constructs such as\n localtimestamp(p) , or a number of  date and time functions and\noperators </functions/datetime>  can\nreturn timestamp values. \n Casting to lower precision causes the value to be rounded, and not\ntruncated. Casting to higher precision appends zeros for the additional\ndigits. \n The following examples illustrate the behavior: \n  (#__codelineno-2-1)      SELECT   TIMESTAMP   '2020-06-10 15:55:23' ; \n  (#__codelineno-2-2)      -- 2020-06-10 15:55:23 \n  (#__codelineno-2-3) \n  (#__codelineno-2-4)      SELECT   TIMESTAMP   '2020-06-10 15:55:23.383345' ; \n  (#__codelineno-2-5)      -- 2020-06-10 15:55:23.383345 \n  (#__codelineno-2-6) \n  (#__codelineno-2-7)      SELECT   typeof ( TIMESTAMP   '2020-06-10 15:55:23.383345' ); \n  (#__codelineno-2-8)      -- timestamp(6) \n  (#__codelineno-2-9) \n  (#__codelineno-2-10)      SELECT   cast ( TIMESTAMP   '2020-06-10 15:55:23.383345'   as   TIMESTAMP ( 1 )); \n  (#__codelineno-2-11)       -- 2020-06-10 15:55:23.4 \n  (#__codelineno-2-12) \n  (#__codelineno-2-13)      SELECT   cast ( TIMESTAMP   '2020-06-10 15:55:23.383345'   as   TIMESTAMP ( 12 )); \n  (#__codelineno-2-14)      -- 2020-06-10 15:55:23.383345000000 \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#timestampp"}
{"content": "Window functions \u00b6 \n Window functions perform calculations across rows of the query result.\nThey run after the  HAVING  clause but before the  ORDER BY  clause.\nInvoking a window function requires special syntax using the  OVER \nclause to specify the window. For example, the following query ranks\norders for each clerk by price:\n  (#__codelineno-0-1)      SELECT   orderkey ,   clerk ,   totalprice , \n  (#__codelineno-0-2)             rank ()   OVER   ( PARTITION   BY   clerk \n  (#__codelineno-0-3)                          ORDER   BY   totalprice   DESC )   AS   rnk \n  (#__codelineno-0-4)      FROM   orders \n  (#__codelineno-0-5)      ORDER   BY   clerk ,   rnk \n \nThe window can be specified in two ways (see\n window_clause ):\n \n By a reference to a named window specification defined in the\n     WINDOW  clause, \n By an in-line window specification which allows to define window\n    components as well as refer to the window components pre-defined in\n    the  WINDOW  clause. \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/window/#window-functions"}
{"content": "Aggregate functions \u00b6 \n All  aggregate  can be used as window functions by adding the  OVER  clause. The aggregate function is\ncomputed for each row over the rows within the current row's window\nframe. \n For example, the following query produces a rolling sum of order prices\nby day for each clerk:\n  (#__codelineno-1-1)      SELECT   clerk ,   orderdate ,   orderkey ,   totalprice , \n  (#__codelineno-1-2)             sum ( totalprice )   OVER   ( PARTITION   BY   clerk \n  (#__codelineno-1-3)                                   ORDER   BY   orderdate )   AS   rolling_sum \n  (#__codelineno-1-4)      FROM   orders \n  (#__codelineno-1-5)      ORDER   BY   clerk ,   orderdate ,   orderkey \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/window/#aggregate-functions"}
{"content": "Ranking functions \u00b6 \n cume_dist() \u00b6  (#cume_dist) \n cume_dist()  \u2192 bigint \n Returns the cumulative distribution of a value in a group of values. The\nresult is the number of rows preceding or peer with the row in the\nwindow ordering of the window partition divided by the total number of\nrows in the window partition. Thus, any tie values in the ordering will\nevaluate to the same distribution value. \n dense_rank() \u00b6  (#dense_rank) \n dense_rank()  \u2192 bigint \n Returns the rank of a value in a group of values. This is similar to  rank , except that tie values do not produce gaps in the sequence. \n ntile() \u00b6  (#ntile) \n ntile(n)  \u2192 bigint \n Divides the rows for each window partition into  n  buckets ranging from  1  to at most  n . Bucket values will differ by at most  1 . If the number of rows in the partition does not divide evenly into the number of buckets, then the remainder values are distributed one per bucket, starting with the first bucket. \n For example, with  6  rows and  4  buckets, the bucket values would be as follows:  1   1   2   2   3   4 \n percent_rank() \u00b6  (#percent_rank) \n percent_rank()  \u2192 double \n Returns the percentage ranking of a value in group of values. The result is  (r - 1) / (n - 1)  where  r  is the  rank  of the row and  n  is the total number of rows in the window partition. \n rank() \u00b6  (#rank) \n rank()  \u2192 bigint \n Returns the rank of a value in a group of values. The rank is one plus the number of rows preceding the row that are not peer with the row. Thus, tie values in the ordering will produce gaps in the sequence. The ranking is performed for each window partition. \n row_number() \u00b6  (#row_number) \n row_number()  \u2192 bigint \n Returns a unique, sequential number for each row, starting with one, according to the ordering of rows within the window partition. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/window/#ranking-functions"}
{"content": "Value functions \u00b6 \n By default, null values are respected. If  IGNORE NULLS  is specified,\nall rows where  x  is null are excluded from the calculation. If\n IGNORE NULLS  is specified and  x  is null for all rows, the\n default_value  is returned, or if it is not specified,  null  is\nreturned. \n first_value() \u00b6  (#first_value) \n first_value(x)  \u2192 [same as input] \n Returns the first value of the window. \n last_value() \u00b6  (#last_value) \n last_value(x)  \u2192 [same as input] \n Returns the last value of the window. \n nth_value() \u00b6  (#nth_value) \n nth_value(x, offset)  \u2192 [same as input] \n Returns the value at the specified offset from the beginning of the window. Offsets start at  1 . The offset can be any scalar expression. If the offset is null or greater than the number of values in the window,  null  is returned. It is an error for the offset to be zero or negative. \n lead() \u00b6  (#lead) \n lead(x, offset , default_value)  \u2192 [same as input] \n Returns the value at  offset  rows after the current row in the window partition. Offsets start at  0 , which is the current row. The offset can be any scalar expression. The default  offset  is  1 . If the offset is null,  null  is returned. If the offset refers to a row that is not within the partition, the  default_value  is returned, or if it is not specified  null  is returned. The  lead  function requires that the window ordering be specified. Window frame must not be specified. \n lag() \u00b6  (#lag) \n lag(x, offset , default_value)  \u2192 [same as input] \n Returns the value at  offset  rows before the current row in the window partition. Offsets start at  0 , which is the current row. The offset can be any scalar expression. The default  offset  is  1 . If the offset is null,  null  is returned. If the offset refers to a row that is not within the partition, the  default_value  is returned, or if it is not specified  null  is returned. The  lag  function requires that the window ordering be specified. Window frame must not be specified.", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/window/#value-functions"}
{"content": "(https://github.com/duneanalytics/docs/edit/master/docs/query/DuneSQL-reference/Functions-and-operators/uuid.md) \n UUID functions \n uuid()  \u2192 uuid \n Returns a pseudo randomly generated  uuid_type (type 4).", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/uuid/"}
{"content": "Varchar Utility Functions \u00b6 \n Dune SQL offers a series of functions designed to ease some common tasks when working with varchar data. \n left() \u00b6  (#left) \n left(varchar, bigint)  \u2192 varchar \n This function returns the leftmost  x  characters from a string, if  x  is less than or equal to 0 the result is an empty string. The first argument is the original string, and the second argument is  x , the length of the resulting string. \n  (#__codelineno-0-1) SELECT   \n  (#__codelineno-0-2)      \"left\" ( '123456' ,   2 ) \n \nwill return  12 \n right() \u00b6  (#right) \n right(varchar, bigint)  \u2192 varchar \n This function returns the rightmost  x  characters from a string, if  x  is less than or equal to 0 the result is an empty string. The first argument is the original string, and the second argument is  x , the length of the resulting string. \n  (#__codelineno-1-1) SELECT   \n  (#__codelineno-1-2)      \"right\" ( '123456' ,   2 ) \n \nwill return  56 \n initcap() \u00b6  (#initcap) \n initcap(varchar)  \u2192 varchar \n This function returns a string with the first letter of each word in uppercase and all other letters in lowercase. Words are delimited by white space or characters that are not alphanumeric. The only argument is the original string. \n  (#__codelineno-2-1) SELECT   \n  (#__codelineno-2-2)      \"initcap\" ( 'hellO woRld' ) \n \nwill return  Hello World", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/varchar-utility-functions/#varchar-utility-functions"}
{"content": "Skip to content\n          (#extraction-functions) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/DuneSQL-reference/Functions-and-operators/url.md) \n URL functions \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/url/"}
{"content": "Skip to content\n          (#string-functions) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/DuneSQL-reference/Functions-and-operators/teradata.md) \n Teradata functions \n These functions provide compatibility with Teradata SQL. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/teradata/"}
{"content": "Skip to content\n          (#data-structures) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/DuneSQL-reference/Functions-and-operators/tdigest.md) \n T-Digest functions \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/tdigest/"}
{"content": "Varbinary Functions \u00b6 \n Dune SQL represents varbinarys using the varbinary type. \n To make it simpler to work with varbinarys we have the following helper functions, which work with these two kinds of representation. They simplify interactions with varbinarys, as they automatically account for the  0x -prefix and use byte index instead of character index. For instance, the varbinary_substring methods take indexes by byte, not by character (twice the varbinary length). \n You can use these function to extract data from undecoded events logs, or calldata. For instance, if you have a function that takes a  uint256  as an argument, you can use  varbinary_to_uint256  to extract the value from the calldata. You'll oftentimes need to use  varbinary_substring  to extract the correct part of the calldata or use other bytearray manipulation functions to get the correct value. \n  (#__codelineno-0-1) select   tx_hash , \n  (#__codelineno-0-2)         data , \n  (#__codelineno-0-3)         varbinary_substring ( data , 97 , 32 )   as   fee , \n  (#__codelineno-0-4)         varbinary_to_uint256 ( varbinary_substring ( data , 97 , 32 ))   as   fee_uint256 \n  (#__codelineno-0-5) from   optimism . logs \n  (#__codelineno-0-6) where   contract_address   =   0 xa1ace9ce6862e865937939005b1a6c5ac938a11f \n  (#__codelineno-0-7) and   topic0   =   0 xc9d5ada2ea384fe04826ecd1b258955ac73c3e2e20d755108eafde90bc5588d4 \n  (#__codelineno-0-8) -- sample transaction hash \n  (#__codelineno-0-9) and   tx_hash   IN   ( 0 x3e3c558e7f723e3bb7de1d8f5f920ca206e3e878984296a2b8e6af2969003a19 , \n  (#__codelineno-0-10)                  0 xccfd2033adfb1fdd14fdfc047fe554ba7549e396abc6c559e9528a4259295b89 ) \n \n \n Byte array functions \n Varbinary functions were previously called byte array functions. You might find e.g.  bytearray_to_uint256  in some of our older queries. These functions are identical to the varbinary functions and work as aliases.  \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/varbinary/#varbinary-functions"}
{"content": "Varbinary to Numeric Functions \u00b6 \n The varbinary conversion functions throw an overflow exception if the varbinary is larger than the number of bytes supported of the type, even if the most significant bytes are all zero. It is possible to use  varbinary_ltrim  in order to trim the zero bytes from the left. \n Here is a dashboard  (https://dune.com/dune/dune-sql-byte-array-functions-uint256-int256-support)  with examples covering all of the below functions. For a more comprehensive look at all special DuneSQL functions, use this  dashboard  (https://dune.com/cryptuschrist/dunesql-functions)  from  cryptuschrist  (https://dune.com/cryptuschrist) .  \n varbinary_to_integer() \u00b6  (#varbinary_to_integer) \n varbinary_to_integer(varbinary)  \u2192 integer \n Returns the  INTEGER  value of a big-endian varbinary of length <= 4 representing the integer in two's complement. If the varbinary has length < 4 it is padded with zero bytes. \n  (#__codelineno-1-1) -- convert bytearray to integer [result will be either 1 or 0] \n  (#__codelineno-1-2) -- if 1 = true, 0 = false \n  (#__codelineno-1-3) SELECT   tx_hash , \n  (#__codelineno-1-4)         varbinary_to_integer ( varbinary_ltrim ( varbinary_substring ( data , 1 , 32 )))   as   isQuote_number , \n  (#__codelineno-1-5)         CASE   WHEN    varbinary_to_integer ( varbinary_ltrim ( varbinary_substring ( data , 1 , 32 )))   =   1   THEN   TRUE   ELSE   FALSE   END   AS   isQuote \n  (#__codelineno-1-6) FROM   arbitrum . logs \n  (#__codelineno-1-7) WHERE   contract_address   =   0 xdaf4ffb05bfcb2c328c19135e3e74e1182c88283 \n  (#__codelineno-1-8) AND   topic0   =   0 xf1bc206c8d659bf05edd19865dbae82643062168ec3970d9d7c5468f900487d9 \n  (#__codelineno-1-9) LIMIT   10 \n \n varbinary_to_bigint() \u00b6  (#varbinary_to_bigint) \n varbinary_to_bigint(varbinary)  \u2192 bigint \n Returns the  BIGINT  value of a big-endian varbinary of length <= 8 representing the bigint in two's complement. If the varbinary has length < 8 it is padded with zero bytes. \n  (#__codelineno-2-1) -- convert bytearray to integer [result will be either 1 or 0] \n  (#__codelineno-2-2) -- if 1 = true, 0 = false \n  (#__codelineno-2-3) SELECT   tx_hash , \n  (#__codelineno-2-4)         varbinary_to_bigint ( varbinary_ltrim ( varbinary_substring ( data , 1 , 32 )))   as   isQuote_number , \n  (#__codelineno-2-5)         CASE   WHEN    varbinary_to_bigint ( varbinary_ltrim ( varbinary_substring ( data , 1 , 32 )))   =   1   THEN   TRUE   ELSE   FALSE   END   AS   isQuote \n  (#__codelineno-2-6) FROM   arbitrum . logs \n  (#__codelineno-2-7) WHERE   contract_address   =   0 xdaf4ffb05bfcb2c328c19135e3e74e1182c88283 \n  (#__codelineno-2-8) AND   topic0   =   0 xf1bc206c8d659bf05edd19865dbae82643062168ec3970d9d7c5468f900487d9 \n  (#__codelineno-2-9) LIMIT   10 \n \n varbinary_to_decimal() \u00b6  (#varbinary_to_decimal) \n varbinary_to_decimal(varbinary)  \u2192 decimal(38,0) \n Returns the  DECIMAL(38,0)  value of a big-endian varbinary of length <= 16 representing the decimal(38,0) in two's complement. If the varbinary has length < 16 it is padded with zero bytes. \n  (#__codelineno-3-1) -- using raw table to get usdc transfers amount \n  (#__codelineno-3-2) -- transfer topic0 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef \n  (#__codelineno-3-3) -- usdc contract_address = 0xaf88d065e77c8cc2239327c5edb3a432268e5831 \n  (#__codelineno-3-4) SELECT   tx_hash , \n  (#__codelineno-3-5)         data , \n  (#__codelineno-3-6)         varbinary_to_decimal ( varbinary_ltrim ( data ))   as   data_decimal \n  (#__codelineno-3-7) FROM   arbitrum . logs \n  (#__codelineno-3-8) WHERE   topic0   =   0 xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef \n  (#__codelineno-3-9) AND   contract_address   =   0 xaf88d065e77c8cc2239327c5edb3a432268e5831 \n  (#__codelineno-3-10) AND   block_time   >=   NOW ()   -   interval   '1'   day \n  (#__codelineno-3-11) LIMIT   50 \n \n varbinary_to_uint256() \u00b6  (#varbinary_to_uint256) \n varbinary_to_uint256(varbinary)  \u2192 uint256 \n Returns the  UINT256  of a big-endian varbinary of length <= 32 representing the unsigned integer. If the varbinary has length < 32 it is padded with zero bytes. \n  (#__codelineno-4-1) select   tx_hash , \n  (#__codelineno-4-2)         data , \n  (#__codelineno-4-3)         varbinary_substring ( data , 97 , 32 )   as   fee , \n  (#__codelineno-4-4)         varbinary_to_uint256 ( varbinary_substring ( data , 97 , 32 ))   as   fee_uint256 \n  (#__codelineno-4-5) from   optimism . logs \n  (#__codelineno-4-6) where   contract_address   =   0 xa1ace9ce6862e865937939005b1a6c5ac938a11f \n  (#__codelineno-4-7) and   topic0   =   0 xc9d5ada2ea384fe04826ecd1b258955ac73c3e2e20d755108eafde90bc5588d4 \n  (#__codelineno-4-8) -- sample transaction hash \n  (#__codelineno-4-9) and   tx_hash   IN   ( 0 x3e3c558e7f723e3bb7de1d8f5f920ca206e3e878984296a2b8e6af2969003a19 , \n  (#__codelineno-4-10)                  0 xccfd2033adfb1fdd14fdfc047fe554ba7549e396abc6c559e9528a4259295b89 ) \n \n varbinary_to_int256() \u00b6  (#varbinary_to_int256) \n varbinary_to_int256(varbinary)  \u2192 int256 \n Returns the  INT256  of a big-endian varbinary of length <= 32 representing the signed integer. If the varbinary has length < 32 it is padded with zero bytes. \n  (#__codelineno-5-1) select   tx_hash , \n  (#__codelineno-5-2)         data , \n  (#__codelineno-5-3)         varbinary_substring ( data , 65 , 32 )   as   sizeDelta , \n  (#__codelineno-5-4)         varbinary_to_int256 ( varbinary_substring ( data , 65 , 32 ))   as   sizeDelta_int256 \n  (#__codelineno-5-5) from   optimism . logs \n  (#__codelineno-5-6) where   contract_address   =   0 xa1ace9ce6862e865937939005b1a6c5ac938a11f \n  (#__codelineno-5-7) and   topic0   =   0 xc9d5ada2ea384fe04826ecd1b258955ac73c3e2e20d755108eafde90bc5588d4 \n  (#__codelineno-5-8) -- sample transaction hash \n  (#__codelineno-5-9) and   tx_hash   IN   ( 0 x3e3c558e7f723e3bb7de1d8f5f920ca206e3e878984296a2b8e6af2969003a19 , \n  (#__codelineno-5-10)                  0 xccfd2033adfb1fdd14fdfc047fe554ba7549e396abc6c559e9528a4259295b89 ) \n \n bytea2numeric() \u00b6  (#bytea2numeric) \n bytea2numeric(varbinary)  \u2192 bigint \n This function has been deprecated. It is an alias for  varbinary_to_bigint . \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/varbinary/#varbinary-to-numeric-functions"}
{"content": "Varbinary to text \u00b6 \n from_utf8() \u00b6  (#from_utf8) \n from_utf8(varbinary)  \u2192 varchar \n Converts a varbinary to a string using the UTF-8 encoding. \n  (#__codelineno-6-1) Select   from_utf8 ( 0 x48656c6c6f20576f726c64 ) \n  (#__codelineno-6-2) -- returns \"Hello World\" \n \n most commonly will have to be used like this: \n  (#__codelineno-7-1) Select   from_utf8 ( varbinary_ltrim ( 0 x0000000000000000006e66746e657264732e6169 )) \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/varbinary/#varbinary-to-text"}
{"content": "Text to varbinary \u00b6 \n from_hex() \u00b6  (#from_hex) \n from_hex(varchar)  \u2192 varbinary \n Converts a varbinary expression in datatype  string  to  varbinary  datatype \n  (#__codelineno-8-1) Select   from_hex ( '0x6574686275696c646572' ) \n  (#__codelineno-8-2) -- returns VARBINARY 0x6574686275696c646572 \n \n \n Warning \n you  cannot  use  cast(x as varbinary)  in these cases as it will actually encode the string as varbinary which is different from converting the expression to  varbinary .  \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/varbinary/#text-to-varbinary"}
{"content": "Varbinary Manipulation Functions \u00b6 \n varbinary_concat() \u00b6  (#varbinary_concat) \n varbinary_concat(varbinary, varbinary)  \u2192 varbinary   \n Concatenates two varbinarys or strings. \n  (#__codelineno-9-1) SELECT   varbinary_concat ( 0 xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 , \n  (#__codelineno-9-2)                          0 xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48 ) \n \n varbinary_concat(varchar, varchar)  \u2192 varchar \n Concatenates two varbinarys or strings. \n  (#__codelineno-10-1) -- concatenate varchar \n  (#__codelineno-10-2) -- using typeof to check the datatype \n  (#__codelineno-10-3) SELECT   varbinary_concat ( '0xabcd' ,   '0x00ab' )   as   varbinary_varchar_concat , \n  (#__codelineno-10-4)         typeof ( varbinary_concat ( '0xabcd' ,   '0x00ab' ))   as   varbinary_varchar_type \n \n varbinary_length() \u00b6  (#varbinary_length) \n varbinary_length(varbinary)  \u2192 bigint \n Returns the length of a varbinary. \n  (#__codelineno-11-1)   -- this will return 20 \n  (#__codelineno-11-2) SELECT   varbinary_length ( 0 xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 ) \n \n varbinary_length(varchar)  \u2192 bigint \n Returns the length of a string. \n  (#__codelineno-12-1)   -- this will return 20 \n  (#__codelineno-12-2) SELECT   typeof ( '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' )   as   data_type , \n  (#__codelineno-12-3)         varbinary_length ( '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' )   varchar_length \n \n varbinary_ltrim() \u00b6  (#varbinary_ltrim) \n varbinary_ltrim(varbinary)  \u2192 varbinary \n Removes zero bytes or spaces from the beginning of a varbinary \n  (#__codelineno-13-1)   -- this will remove the zeros at the front, \n  (#__codelineno-13-2)   -- returning 0xa2b80f9c09558945800ddf4f8786dcc8b1c44974 \n  (#__codelineno-13-3) SELECT   varbinary_ltrim ( 0 x000000000000000000000000a2b80f9c09558945800ddf4f8786dcc8b1c44974 ) \n \n varbinary_ltrim(varchar)  \u2192 varchar \n Removes spaces from the beginning of a string. \n  (#__codelineno-14-1)   -- this will remove the zeros at the front, \n  (#__codelineno-14-2)   -- returning 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 \n  (#__codelineno-14-3) SELECT   typeof ( '0x0000000000000000000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' )   as   data_type , \n  (#__codelineno-14-4)         varbinary_ltrim ( '0x0000000000000000000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' )   varchar_ltrim \n \n varbinary_rtrim() \u00b6  (#varbinary_rtrim) \n varbinary_rtrim(varbinary) or varbinary_rtrim(varchar)  \u2192 varbinary or varchar \n Removes zero bytes or spaces from the end of a varbinary or string. \n  (#__codelineno-15-1)   -- this will remove the zeros at the end, \n  (#__codelineno-15-2)   -- returning 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 \n  (#__codelineno-15-3) SELECT   varbinary_ltrim ( 0 xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000 ) \n \n varbinary_position() \u00b6  (#varbinary_position) \n varbinary_position(varbinary, varbinary)  \u2192 bigint \n Returns the index of the first occurrence of a given bytearray or string (or 0 if not found) within a varbinary or string. \n  (#__codelineno-16-1) -- get $ARKM claimers  \n  (#__codelineno-16-2) SELECT   *   FROM   ethereum . transactions \n  (#__codelineno-16-3) WHERE   block_time   >=   TIMESTAMP   '2023-07-17'   -- claim start date \n  (#__codelineno-16-4) AND   varbinary_position ( data , 0 x3d13f874 )   =   1   -- 0x3d13f874 is the methodID \n  (#__codelineno-16-5) AND   success \n  (#__codelineno-16-6) LIMIT   100 \n \n varbinary_position(varchar, varchar)  \u2192 bigint \n Returns the index of the first occurrence of a given bytearray or string (or 0 if not found) within a varbinary or string. \n  (#__codelineno-17-1) -- search for '0x6cc2' and return its position \n  (#__codelineno-17-2) SELECT   varbinary_position ( '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' , '0x6cc2' )   \n \n varbinary_replace() \u00b6  (#varbinary_replace) \n varbinary_replace(varbinary, varbinary, varbinary)  \u2192 varbinary \n Greedily replaces occurrences of a pattern within a varbinary. \n  (#__codelineno-18-1) -- replacing the blackhole address (ETH) \n  (#__codelineno-18-2) -- to WETH address \n  (#__codelineno-18-3) SELECT   varbinary_replace ( 0 x0000000000000000000000000000000000000000 , \n  (#__codelineno-18-4)                           0 x0000000000000000000000000000000000000000 , \n  (#__codelineno-18-5)                           0 xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 )    \n \n varbinary_replace(varchar, varchar, varchar)  \u2192 varchar \n Greedily replaces occurrences of a pattern within a string. \n  (#__codelineno-19-1) SELECT   varbinary_replace ( '0x0000000000000000000000000000000000000000a2b80f9c09558945800ddf4f8786dcc8b1c44974' , \n  (#__codelineno-19-2)                           '0x0000000000000000000000000000000000000000' , \n  (#__codelineno-19-3)                           '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' )    \n \n varbinary_reverse() \u00b6  (#varbinary_reverse) \n varbinary_reverse(varbinary)  \u2192 varbinary \n Reverses a given varbinary. \n  (#__codelineno-20-1) SELECT   varbinary_reverse ( 0 xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 ) \n \n varbinary_reverse(varchar)  \u2192 varchar \n Reverses a given string. \n  (#__codelineno-21-1) -- '0xabcdef' as original \n  (#__codelineno-21-2) -- '0xefcdab' as reversed \n  (#__codelineno-21-3) SELECT   '0xabcdef'   as   original , \n  (#__codelineno-21-4)         varbinary_reverse ( '0xabcdef' )   as   reversed \n \n varbinary_starts_with() \u00b6  (#varbinary_starts_with) \n varbinary_starts_with(varbinary, varbinary)  \u2192 boolean \n Determines whether a varbinary starts with a prefix. \n  (#__codelineno-22-1) -- get $ARKM claimers  \n  (#__codelineno-22-2) -- varbinary_starts_with checks whether  \n  (#__codelineno-22-3) -- data starts with 0x3d13f874 (claim methodID) \n  (#__codelineno-22-4) SELECT   *   FROM   ethereum . transactions \n  (#__codelineno-22-5) WHERE   block_time   >=   TIMESTAMP   '2023-07-17' \n  (#__codelineno-22-6) AND   varbinary_starts_with ( data , 0 x3d13f874 )   -- returns true if starts with 0x3d13f874 \n  (#__codelineno-22-7) AND   success \n  (#__codelineno-22-8) LIMIT   100 \n \n varbinary_starts_with(varchar, varchar)  \u2192 boolean \n Determines whether a string starts with a prefix. \n  (#__codelineno-23-1) -- returns true if starts with 0x3d13f874 \n  (#__codelineno-23-2) SELECT   varbinary_starts_with ( 0 x3d13f874abcd , 0 x3d13f874 )   \n \n varbinary_substring() \u00b6  (#varbinary_substring) \n varbinary_substring(varbinary, integer)  \u2192 varbinary \n Returns a suffix varbinary or string starting at a given index. \n  (#__codelineno-24-1) -- using varbinary_substring starting from the 21th index \n  (#__codelineno-24-2) -- this returns 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2  \n  (#__codelineno-24-3) SELECT   0 x0000000000000000000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2   as   original_bytearray , \n  (#__codelineno-24-4)         varbinary_substring ( 0 x0000000000000000000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 , 21 )   as   bytearraysubstring_data \n \n varbinary_substring(varchar, integer)  \u2192 varchar \n Returns a suffix string starting at a given index. \n Returns a sub varbinary or string of a given length starting at an index. \n  (#__codelineno-25-1) -- getting the sizeDelta using varbinary_substring \n  (#__codelineno-25-2) -- and converting to uint256 using varbinary_to_uint256 \n  (#__codelineno-25-3) SELECT   tx_hash , \n  (#__codelineno-25-4)         varbinary_substring ( data , 65 , 32 )   as   sizeDelta , \n  (#__codelineno-25-5)         varbinary_to_uint256 ( varbinary_substring ( data , 65 , 32 ))   as   sizeDelta_uint256 \n  (#__codelineno-25-6) FROM   optimism . logs \n  (#__codelineno-25-7) WHERE   contract_address   =   0 xa1ace9ce6862e865937939005b1a6c5ac938a11f \n  (#__codelineno-25-8) AND   topic0   =   0 xc9d5ada2ea384fe04826ecd1b258955ac73c3e2e20d755108eafde90bc5588d4 \n  (#__codelineno-25-9) -- some sample transaction hash \n  (#__codelineno-25-10) AND   tx_hash   IN   ( 0 x3e3c558e7f723e3bb7de1d8f5f920ca206e3e878984296a2b8e6af2969003a19 ,   \n  (#__codelineno-25-11)                  0 xccfd2033adfb1fdd14fdfc047fe554ba7549e396abc6c559e9528a4259295b89 )   \n \n varbinary_substring(varchar, integer, integer)  \u2192 varchar \n Returns a sub string of a given length starting at an index. \n  (#__codelineno-26-1) -- returns  '0xabcd' \n  (#__codelineno-26-2) SELECT   '0xabcdefabcdef'   as   varchar_data , \n  (#__codelineno-26-3)         varbinary_substring ( '0xabcdefabcdef' , 1 , 3 )   as   varchar_substring \n \n varbinary_substring(varbinary, integer, integer)  \u2192 varbinary \n  (#__codelineno-27-1) -- returns  0xabcd \n  (#__codelineno-27-2) SELECT   0 xabcdefabcdef   as   varbinary_data , \n  (#__codelineno-27-3)         varbinary_substring ( 0 xabcdefabcdef , 1 , 3 )   as   varbinary_substring", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/varbinary/#varbinary-manipulation-functions"}
{"content": "Skip to content\n          (#system-information) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/DuneSQL-reference/Functions-and-operators/system.md) \n System information \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/system/"}
{"content": "TIMESTAMP WITH TIME ZONE \u00b6 \n TIMESTAMP WITH TIME ZONE  is an alias for  TIMESTAMP(3) WITH TIME ZONE \n(millisecond precision). \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#timestamp-with-time-zone-data-type"}
{"content": "TIMESTAMP(P) WITH TIME ZONE \u00b6 \n Instant in time that includes the date and time of day with  P  digits\nof precision for the fraction of seconds and with a time zone. Values of\nthis type are rendered using the time zone from the value. Time zones\ncan be expressed in the following ways: \n \n UTC , with  GMT ,  Z , or  UT  usable as aliases for UTC. \n +hh:mm  or  -hh:mm  with  hh:mm  as an hour and minute offset from\n    UTC. Can be written with or without  UTC ,  GMT , or  UT  as an\n    alias for UTC. \n An  IANA time zone name  (https://www.iana.org/time-zones) . \n \n The following examples demonstrate some of these syntax options:\n  (#__codelineno-3-1)      SELECT   TIMESTAMP   '2001-08-22 03:04:05.321 UTC' ; \n  (#__codelineno-3-2)      -- 2001-08-22 03:04:05.321 UTC \n  (#__codelineno-3-3) \n  (#__codelineno-3-4)      SELECT   TIMESTAMP   '2001-08-22 03:04:05.321 -08:30' ; \n  (#__codelineno-3-5)      -- 2001-08-22 03:04:05.321 -08:30 \n  (#__codelineno-3-6) \n  (#__codelineno-3-7)      SELECT   TIMESTAMP   '2001-08-22 03:04:05.321 GMT-08:30' ; \n  (#__codelineno-3-8)      -- 2001-08-22 03:04:05.321 -08:30 \n  (#__codelineno-3-9) \n  (#__codelineno-3-10)      SELECT   TIMESTAMP   '2001-08-22 03:04:05.321 America/New_York' ; \n  (#__codelineno-3-11)      -- 2001-08-22 03:04:05.321 America/New_York \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#timestampp-with-time-zone"}
{"content": "INTERVAL YEAR TO MONTH \u00b6 \n Span of years and months. \n Example:  INTERVAL '3' MONTH \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#interval-year-to-month"}
{"content": "INTERVAL DAY TO SECOND \u00b6 \n Span of days, hours, minutes, seconds and milliseconds. \n Example:  INTERVAL '2' DAY \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#interval-day-to-second"}
{"content": "Structural \u00b6 \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#structural"}
{"content": "ARRAY \u00b6 \n An array of the given component type. \n Example:  ARRAY[1, 2, 3] \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#array"}
{"content": "MAP \u00b6 \n A map between the given component types. \n Example:  MAP(ARRAY['foo', 'bar'], ARRAY[1, 2]) \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#map"}
{"content": "ROW \u00b6 \n A structure made up of fields that allows mixed types. The fields may be\nof any SQL type. \n By default, row fields are not named, but names can be assigned. \n Example:  CAST(ROW(1, 2e0) AS ROW(x BIGINT, y DOUBLE)) \n Named row fields are accessed with field reference operator ( . ). \n Example:  CAST(ROW(1, 2.0) AS ROW(x BIGINT, y DOUBLE)).x \n Named or unnamed row fields are accessed by position with the subscript\noperator ( [] ). The position starts at  1  and must be a constant. \n Example:  ROW(1, 2.0)[1] \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#row"}
{"content": "Network address \u00b6 \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#network-address"}
{"content": "IPADDRESS \u00b6 \n An IP address that can represent either an IPv4 or IPv6 address.\nInternally, the type is a pure IPv6 address. Support for IPv4 is handled\nusing the  IPv4-mapped IPv6 address  range\n( 4291#section-2.5.5.2 ). When creating an\n IPADDRESS , IPv4 addresses will be mapped into that range. When\nformatting an  IPADDRESS , any address within the mapped range will be\nformatted as an IPv4 address. Other addresses will be formatted as IPv6\nusing the canonical format defined in  5952 {.interpreted-text\nrole=\"rfc\"}. \n Examples:  IPADDRESS '10.0.0.1' ,  IPADDRESS '2001:db8::1' \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#ipaddress"}
{"content": "UUID \u00b6 \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#uuid"}
{"content": "UUID \u00b6 \n This type represents a UUID (Universally Unique IDentifier), also known\nas a GUID (Globally Unique IDentifier), using the format defined in\n 4122 . \n Example:  UUID '12151fd2-7586-11e9-8f9e-2a86e4085a59' \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#uuid_1"}
{"content": "HyperLogLog \u00b6 \n Calculating the approximate distinct count can be done much more cheaply\nthan an exact count using the\n HyperLogLog  (https://en.wikipedia.org/wiki/HyperLogLog)  data sketch.\nSee  /functions/hyperloglog . \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#hyperloglog"}
{"content": "HyperLogLog \u00b6 \n A HyperLogLog sketch allows efficient computation of\n approx_distinct . It starts as a sparse\nrepresentation, switching to a dense representation when it becomes more\nefficient. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#hyperloglog_1"}
{"content": "P4HyperLogLog \u00b6 \n A P4HyperLogLog sketch is similar to\n hyperloglog_type , but it starts (and\nremains) in the dense representation. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#p4hyperloglog"}
{"content": "SetDigest \u00b6 \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#setdigest"}
{"content": "SetDigest \u00b6 \n A SetDigest (setdigest) is a data sketch structure used in calculating\n Jaccard similarity\ncoefficient  (https://en.wikipedia.org/wiki/Jaccard_index)  between two\nsets. \n SetDigest encapsulates the following components: \n \n HyperLogLog  (https://en.wikipedia.org/wiki/HyperLogLog) \n MinHash with a single hash\n    function  (http://en.wikipedia.org/wiki/MinHash#Variant_with_a_single_hash_function) \n \n The HyperLogLog structure is used for the approximation of the distinct\nelements in the original set. \n The MinHash structure is used to store a low memory footprint signature\nof the original set. The similarity of any two sets is estimated by\ncomparing their signatures. \n SetDigests are additive, meaning they can be merged together. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#setdigest_1"}
{"content": "Quantile digest \u00b6 \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#quantile-digest"}
{"content": "QDigest \u00b6 \n A quantile digest (qdigest) is a summary structure which captures the\napproximate distribution of data for a given input set, and can be\nqueried to retrieve approximate quantile values from the distribution.\nThe level of accuracy for a qdigest is tunable, allowing for more\nprecise results at the expense of space. \n A qdigest can be used to give approximate answer to queries asking for\nwhat value belongs at a certain quantile. A useful property of qdigests\nis that they are additive, meaning they can be merged together without\nlosing precision. \n A qdigest may be helpful whenever the partial results of\n approx_percentile  can be reused. For example, one may be interested in\na daily reading of the 99th percentile values that are read over the\ncourse of a week. Instead of calculating the past week of data with\n approx_percentile ,  qdigest s could be stored daily, and quickly\nmerged to retrieve the 99th percentile value. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#qdigest"}
{"content": "T-Digest \u00b6 \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#t-digest"}
{"content": "TDigest \u00b6 \n A T-digest (tdigest) is a summary structure which, similarly to qdigest,\ncaptures the approximate distribution of data for a given input set. It\ncan be queried to retrieve approximate quantile values from the\ndistribution. \n TDigest has the following advantages compared to QDigest: \n \n higher performance \n lower memory usage \n higher accuracy at high and low percentiles \n \n T-digests are additive, meaning they can be merged together.", "url": "https://dune.com/docs/query/DuneSQL-reference/datatypes/#tdigest"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/app/visualizations/counters/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/app/visualizations/charts-graphs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/app/visualizations/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/app/query-editor/version-history/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/app/query-editor/data-explorer/"}
{"content": "Extraction functions \u00b6 \n The URL extraction functions extract components from HTTP URLs (or any\nvalid URIs conforming to  2396 ). The\nfollowing syntax is supported: \n  (#__codelineno-0-1) [protocol:][//host[:port]][path][?query][#fragment]\n \n The extracted components do not contain URI syntax separators such as\n :  or  ? . \n url_extract_fragment() \u00b6  (#url_extract_fragment) \n url_extract_fragment(url)  \u2192 varchar \n Returns the fragment identifier from  url . \n url_extract_host() \u00b6  (#url_extract_host) \n url_extract_host(url)  \u2192 varchar \n Returns the host from  url . \n url_extract_parameter() \u00b6  (#url_extract_parameter) \n url_extract_parameter(url, name)  \u2192 varchar \n Returns the value of the f query string parameter named  name  from  url . Parameter extraction is handled in the typical manner as specified by RFC 1866#section-8.2.1. \n url_extract_path() \u00b6  (#url_extract_path) \n url_extract_path(url)  \u2192 varchar \n Returns the path from  url . \n url_extract_port() \u00b6  (#url_extract_port) \n url_extract_port(url)  \u2192 bigint \n Returns the port number from  url . \n url_extract_protocol() \u00b6  (#url_extract_protocol) \n url_extract_protocol(url)  \u2192 varchar \n Returns the protocol from  url . \n url_extract_query() \u00b6  (#url_extract_query) \n url_extract_query(url)  \u2192 varchar \n Returns the query string from  url . \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/url/#extraction-functions"}
{"content": "Encoding functions \u00b6 \n url_encode() \u00b6  (#url_encode) \n url_encode(value)  \u2192 varchar \n Escapes  value  by encoding it so that it can be safely included in URL query parameter names and values. \n url_decode() \u00b6  (#url_decode) \n url_decode(value)  \u2192 varchar \n Unescapes the URL encoded  value . This function is the inverse of  url_encode .", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/url/#encoding-functions"}
{"content": "String functions \u00b6 \n char2() \u00b6  (#char2) \n char2hexint(string)  \u2192 varchar \n Returns the hexadecimal representation of the UTF-16BE encoding of the string. \n index() \u00b6  (#index) \n index(string, substring)  \u2192 bigint \n Alias for  strpos  function. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/teradata/#string-functions"}
{"content": "Date functions \u00b6 \n The functions in this section use a format string that is compatible\nwith the Teradata datetime functions. The following table, based on the\nTeradata reference manual, describes the supported format specifiers: \n \n \n \n Specifier \n Description \n \n \n \n \n - / , . ; : \n Punctuation characters are ignored \n \n \n dd \n Day of month (1-31) \n \n \n hh \n Hour of day (1-12) \n \n \n hh24 \n Hour of the day (0-23) \n \n \n mi \n Minute (0-59) \n \n \n mm \n Month (01-12) \n \n \n ss \n Second (0-59) \n \n \n yyyy \n 4-digit year \n \n \n yy \n 2-digit year \n \n \n \n \n Warning \n Case insensitivity is not currently supported. All specifiers must be\nlowercase. \n \n to_char() \u00b6  (#to_char) \n to_char(timestamp, format)  \u2192 varchar \n Formats  timestamp  as a string using  format . \n to_timestamp() \u00b6  (#to_timestamp) \n to_timestamp(string, format)  \u2192 timestamp \n Parses  string  into a  TIMESTAMP  using  format . \n to_date() \u00b6  (#to_date) \n to_date(string, format)  \u2192 date \n Parses  string  into a  DATE  using  format .", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/teradata/#date-functions"}
{"content": "Data structures \u00b6 \n A T-digest is a data sketch which stores approximate percentile\ninformation. The Trino type for this data structure is called  tdigest .\nT-digests can be merged, and for storage and retrieval they can be cast\nto and from  VARBINARY . \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/tdigest/#data-structures"}
{"content": "Functions \u00b6 \n merge() \u00b6  (#merge) \n merge(tdigest)  \u2192 tdigest \n Aggregates all inputs into a single  tdigest . \n values_at_quantile() \u00b6  (#values_at_quantile) \n value_at_quantile(tdigest, quantile)  \u2192 double \n Returns the approximate percentile value from the T-digest, given the number  quantile  between 0 and 1. \n values_at_quantiles() \u00b6  (#values_at_quantiles) \n values_at_quantiles(tdigest, quantiles)  \u2192 array(double) \n Returns the approximate percentile values as an array, given the input T-digest and an array of values between 0 and 1, which represent the quantiles to return. \n tdigest_agg() \u00b6  (#tdigest_agg) \n tdigest_agg(x)  \u2192 tdigest \n Composes all input values of  x  into a  tdigest .  x  can be of any numeric type. \n tdigest_agg(x, w)  \u2192 tdigest \n Composes all input values of  x  into a  tdigest  using the per-item weight  w .  w  must be greater or equal than 1.  x  and  w  can be of any numeric type.", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/tdigest/#functions"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/app/query-editor/query-scheduler/"}
{"content": "System information \u00b6 \n Functions providing information about the Trino cluster system environment. More information is available by querying the various schemas and tables exposed by the  /connector/system . \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/system/#system-information"}
{"content": "Function \u00b6 \n version()  -> varchar \n Returns the Trino version used on the cluster. Equivalent to the value of the  node_version  column in the  system.runtime.nodes  table.", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/system/#function"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/api/api-reference/get-results/execution-status/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/api/api-reference/get-results/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/api/api-reference/execute-queries/cancel-execution/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/api/api-reference/execute-queries/execute-query-id/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/api/api-reference/execute-queries/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/raw/evm/transactions/"}
{"content": "", "url": "https://dune.com/docs/getting-started/data-tables/raw/evm/traces/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/raw/evm/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/raw/evm/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/raw/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/decoded/solana/idl-tables/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/decoded/evm/event-logs/"}
{"content": "Please wait \n This application is starting, you will be redirected once it is ready. \n If your are the application owner, check your logs for details.", "url": "https://dune.com/docs/getting-started/data-tables/decoded/evm/call-tables/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/decoded/evm/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/decoded/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/spellbook/top-tables/tokens/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/community/reservoir/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/community/neynar/farcaster/verifications/"}
{"content": "Please wait \n This application is starting, you will be redirected once it is ready. \n If your are the application owner, check your logs for details.", "url": "https://dune.com/docs/getting-started/data-tables/community/neynar/farcaster/user_data/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/community/neynar/farcaster/storage/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/community/neynar/farcaster/signers/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/community/neynar/farcaster/reactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/community/neynar/farcaster/profile_with_addresses/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/community/neynar/farcaster/links/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/community/neynar/farcaster/fnames/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/community/neynar/farcaster/fids/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/community/neynar/farcaster/casts/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/community/neynar/farcaster/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/community/flashbots/sandwiches/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/community/flashbots/sandwiched-swaps/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/community/flashbots/mev_summary/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/community/flashbots/liquidations/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/community/flashbots/arbitrages/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/community/flashbots/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/community/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/raw/bitcoin/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/raw/bitcoin/outputs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/raw/bitcoin/inputs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/raw/bitcoin/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/raw/bitcoin/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/raw/solana/vote-transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/raw/solana/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/raw/solana/rewards/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/raw/solana/instruction-calls/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/raw/solana/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/raw/solana/account-activity/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/raw/solana/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/raw/evm/withdrawals/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/community/reservoir/ask-events/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/community/reservoir/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/community/neynar/farcaster/verifications/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/community/neynar/farcaster/user_data/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/community/neynar/farcaster/storage/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/community/neynar/farcaster/signers/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/community/neynar/farcaster/reactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/community/neynar/farcaster/profile_with_addresses/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/community/neynar/farcaster/links/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/community/neynar/farcaster/fnames/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/community/neynar/farcaster/fids/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/community/neynar/farcaster/casts/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/community/neynar/farcaster/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/community/flashbots/sandwiches/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/community/flashbots/sandwiched-swaps/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/community/flashbots/mev_summary/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/community/flashbots/liquidations/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/community/flashbots/arbitrages/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/community/flashbots/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/community/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/raw/bitcoin/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/raw/bitcoin/outputs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/raw/bitcoin/inputs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/raw/bitcoin/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/raw/bitcoin/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/raw/solana/vote-transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/raw/solana/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/spellbook/top-tables/prices/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/spellbook/top-tables/nft.trades/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/spellbook/top-tables/labels/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/spellbook/top-tables/dex.trades/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/spellbook/top-tables/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/spellbook/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/data-tables/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/api/faq/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/api/api-reference/upload-data/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/api/api-reference/edit-queries/parameter-passing/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/api/api-reference/edit-queries/private-query/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/api/api-reference/edit-queries/archive-query/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/api/api-reference/edit-queries/get-query/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/api/api-reference/edit-queries/update-query/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/api/api-reference/edit-queries/create-query/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/api/api-reference/edit-queries/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/api/api-reference/get-results/import-sheets/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/api/api-reference/get-results/latest-results/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/api/api-reference/get-results/execution-results/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/raw/solana/rewards/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/raw/solana/instruction-calls/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/raw/solana/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/raw/solana/account-activity/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/raw/solana/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/raw/evm/withdrawals/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/raw/evm/transactions/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/raw/evm/traces/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/raw/evm/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/raw/evm/blocks/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/raw/evm/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/raw/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/decoded/solana/idl-tables/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/decoded/evm/event-logs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/decoded/evm/call-tables/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/decoded/evm/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/decoded/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/spellbook/top-tables/tokens/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/spellbook/top-tables/prices/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/spellbook/top-tables/nft.trades/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/spellbook/top-tables/labels/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/spellbook/top-tables/dex.trades/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/spellbook/top-tables/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/spellbook/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/data-tables/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/api/faq/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/api/api-reference/upload-data/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/api/api-reference/edit-queries/parameter-passing/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/api/api-reference/edit-queries/private-query/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/api/api-reference/edit-queries/archive-query/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/api/api-reference/edit-queries/get-query/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/api/api-reference/errors/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/api/api-reference/authentication/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/api/api-reference/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/api/quick-start/python/raw-walkthrough/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/api/quick-start/community-clients/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/api/quick-start/api-js/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/api/quick-start/api-py/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/api/quick-start/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/api/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/app/alerts/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/app/search/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/app/embeds/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/app/upload-data/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/app/wand-llm/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/app/teams/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/app/decoding-contracts/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/app/dashboards/"}
{"content": "Please wait \n This application is starting, you will be redirected once it is ready. \n If your are the application owner, check your logs for details.", "url": "https://dune.com/docs/getting-started/app/visualizations/tables/"}
{"content": "502 Bad Gateway \n nginx", "url": "https://dune.com/docs/getting-started/query-quick-start/api/api-reference/edit-queries/create-query/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/api/api-reference/edit-queries/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/api/api-reference/get-results/import-sheets/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/api/api-reference/get-results/latest-results/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/api/api-reference/get-results/execution-results/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/api/api-reference/get-results/execution-status/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/api/api-reference/get-results/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/api/api-reference/execute-queries/cancel-execution/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/api/api-reference/execute-queries/execute-query-id/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/api/api-reference/execute-queries/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/api/api-reference/errors/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/api/api-reference/authentication/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/api/api-reference/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/api/quick-start/python/raw-walkthrough/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/api/quick-start/community-clients/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/api/quick-start/api-js/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/api/quick-start/api-py/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/api/quick-start/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/api/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/app/alerts/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/app/search/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/app/embeds/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/app/upload-data/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/app/wand-llm/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/app/teams/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/app/decoding-contracts/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/app/dashboards/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/app/visualizations/tables/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/app/visualizations/counters/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/app/query-editor/parameters/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/app/query-editor/query-window/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/app/query-editor/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/app/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/quickstart/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/zh/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/app/visualizations/charts-graphs/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/app/visualizations/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/app/query-editor/version-history/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/app/query-editor/data-explorer/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/app/query-editor/query-scheduler/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/app/query-editor/parameters/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/app/query-editor/query-window/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/app/query-editor/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/app/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/quickstart/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/getting-started/query-quick-start/zh/"}
{"content": "Skip to content\n          (#string-operators) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/DuneSQL-reference/Functions-and-operators/string.md) \n String functions and operators \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/string/"}
{"content": "Skip to content\n          (#set-digest-functions) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/DuneSQL-reference/Functions-and-operators/setdigest.md) \n Set Digest functions \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/setdigest/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/zh/"}
{"content": "Skip to content\n          (#regexp_count) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/DuneSQL-reference/Functions-and-operators/regexp.md) \n Regular expression functions \n All of the regular expression functions use the  Java pattern  ()  syntax,\nwith a few notable exceptions: \n \n When using multi-line mode (enabled via the  (?m)  flag), only  \\n \n    is recognized as a line terminator. Additionally, the  (?d)  flag is\n    not supported and must not be used. \n Case-insensitive matching (enabled via the  (?i)  flag) is always\n    performed in a Unicode-aware manner. However, context-sensitive and\n    local-sensitive matching is not supported. Additionally, the  (?u) \n    flag is not supported and must not be used. \n Surrogate pairs are not supported. For example,  \\uD800\\uDC00  is\n    not treated as  U+10000  and must be specified as  \\x{10000} . \n Boundaries ( \\b ) are incorrectly handled for a non-spacing mark\n    without a base character. \n \\Q  and  \\E  are not supported in character classes (such as\n     [A-Z123] ) and are instead treated as literals. \n Unicode character classes ( \\p{prop} ) are supported with the\n    following differences: \n All underscores in names must be removed. For example, use\n     OldItalic  instead of  Old_Italic . \n Scripts must be specified directly, without the  Is ,  script= \n    or  sc=  prefixes. Example:  \\p{Hiragana} \n Blocks must be specified with the  In  prefix. The  block=  and\n     blk=  prefixes are not supported. Example:  \\p{Mongolian} \n Categories must be specified directly, without the  Is ,\n     general_category=  or  gc=  prefixes. Example:  \\p{L} \n Binary properties must be specified directly, without the  Is .\n    Example:  \\p{NoncharacterCodePoint} \n \n \n \n regexp_count() \u00b6  (#regexp_count) \n regexp_count(string, pattern)  \u2192 bigint \n Returns the number of occurrence of  pattern  in  string :\n  (#__codelineno-0-1)      SELECT   regexp_count ( '1a 2b 14m' ,   '\\s*[a-z]+\\s*' );   -- 3 \n \n regexp_extract_all() \u00b6  (#regexp_extract_all) \n regexp_extract_all(string, pattern)  \u2192 array(varchar) \n Returns the substring(s) matched by the regular expression  pattern  in\n string :\n  (#__codelineno-1-1)      SELECT   regexp_extract_all ( '1a 2b 14m' ,   '\\d+' );   -- [1, 2, 14] \n \n regexp_extract_all(string, pattern, group)  \u2192 array(varchar) \n Finds all occurrences of the regular expression  pattern  in  string \nand returns the  capturing group number  ()   group :\n  (#__codelineno-2-1)      SELECT   regexp_extract_all ( '1a 2b 14m' ,   '(\\d+)([a-z]+)' ,   2 );   -- ['a', 'b', 'm'] \n \n regexp_extract() \u00b6  (#regexp_extract) \n regexp_extract(string, pattern)  \u2192 varchar \n Returns the f substring matched by the regular expression  pattern \nin  string :\n  (#__codelineno-3-1)      SELECT   regexp_extract ( '1a 2b 14m' ,   '\\d+' );   -- 1 \n \n regexp_extract(string, pattern, group)  \u2192 varchar \n Finds the f occurrence of the regular expression  pattern  in\n string  and returns the  capturing group number  ()   group :\n  (#__codelineno-4-1)      SELECT   regexp_extract ( '1a 2b 14m' ,   '(\\d+)([a-z]+)' ,   2 );   -- 'a' \n \n regexp_like() \u00b6  (#regexp_like) \n regexp_like(string, pattern)  \u2192 boolean \n Evaluates the regular expression  pattern  and determines if it is\ncontained within  string . \n The  pattern  only needs to be contained within  string , rather than\nneeding to match all of  string . In other words, this performs a\n contains  operation rather than a  match  operation. You can match the\nentire string by anchoring the pattern using  ^  and  $ :\n  (#__codelineno-5-1)      SELECT   regexp_like ( '1a 2b 14m' ,   '\\d+b' );   -- true \n \n regexp_position() \u00b6  (#regexp_position) \n regexp_position(string, pattern)  \u2192 integer \n Returns the index of the f occurrence (counting from 1) of  pattern \nin  string . Returns -1 if not found:\n  (#__codelineno-6-1)      SELECT   regexp_position ( 'I have 23 apples, 5 pears and 13 oranges' ,   '\\b\\d+\\b' );   -- 8 \n \n regexp_position(string, pattern, start)  \u2192 integer \n Returns the index of the f occurrence of  pattern  in  string ,\nstarting from  start  (include  start ). Returns -1 if not found:\n  (#__codelineno-7-1)      SELECT   regexp_position ( 'I have 23 apples, 5 pears and 13 oranges' ,   '\\b\\d+\\b' ,   5 );   -- 8 \n  (#__codelineno-7-2)      SELECT   regexp_position ( 'I have 23 apples, 5 pears and 13 oranges' ,   '\\b\\d+\\b' ,   12 );   -- 19 \n \n regexp_position(string, pattern, start, occurrence)  \u2192 integer \n Returns the index of the nth  occurrence  of  pattern  in  string ,\nstarting from  start  (include  start ). Returns -1 if not found:\n  (#__codelineno-8-1)      SELECT   regexp_position ( 'I have 23 apples, 5 pears and 13 oranges' ,   '\\b\\d+\\b' ,   12 ,   1 );   -- 19 \n  (#__codelineno-8-2)      SELECT   regexp_position ( 'I have 23 apples, 5 pears and 13 oranges' ,   '\\b\\d+\\b' ,   12 ,   2 );   -- 31 \n  (#__codelineno-8-3)      SELECT   regexp_position ( 'I have 23 apples, 5 pears and 13 oranges' ,   '\\b\\d+\\b' ,   12 ,   3 ); \n \n regexp_replace() \u00b6  (#regexp_replace) \n regexp_replace(string, pattern)  \u2192 varchar \n Removes every instance of the substring matched by the regular\nexpression  pattern  from  string : \n SELECT regexp_replace('1a 2b 14m', '\\d+[ab] '); -- '14m'\n \n regexp_replace(string, pattern, replacement)  \u2192 varchar \n Replaces every instance of the substring matched by the regular\nexpression  pattern  in  string  with  replacement .  Capturing\ngroups  ()  can be referenced in  replacement  using  $g  for a numbered\ngroup or  ${name}  for a named group. A dollar sign ( $ ) may be\nincluded in the replacement by escaping it with a backslash ( \\$ ):\n  (#__codelineno-9-1)      SELECT   regexp_replace ( '1a 2b 14m' ,   '(\\d+)([ab]) ' ,   '3c$2 ' );   -- '3ca 3cb 14m' \n \n regexp_replace(string, pattern, function)  \u2192 varchar \n Replaces every instance of the substring matched by the regular\nexpression  pattern  in  string  using  function . The\n lambda expression <lambda>   function  is\ninvoked for each match with the  capturing groups  ()  passed as an array.\nCapturing group numbers start at one; there is no group for the entire\nmatch (if you need this, surround the entire expression with\nparenthesis). : \n SELECT regexp_replace('new york', '(\\w)(\\w*)', x -> upper(x[1]) || lower(x[2])); --'New York'\n \n regexp_split() \u00b6  (#regexp_split) \n regexp_split(string, pattern)  \u2192 array(varchar) \n Splits  string  using the regular expression  pattern  and returns an\narray. Trailing empty strings are preserved:\n  (#__codelineno-10-1)      SELECT   regexp_split ( '1a 2b 14m' ,   '\\s*[a-z]+\\s*' );   -- [1, 2, 14, ]", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/regexp/"}
{"content": "Please wait \n This application is starting, you will be redirected once it is ready. \n If your are the application owner, check your logs for details.", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/qdigest/"}
{"content": "Skip to content\n          (#feature-vector) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/DuneSQL-reference/Functions-and-operators/ml.md) \n The machine learning plugin provides machine learning functionality as\nan aggregation function. It enables you to train Support Vector Machine\n(SVM) based classifiers and regressors for the supervised learning\nproblems. \n \n Note: The machine learning functions are not optimized for distributed\nprocessing. The capability to train large data sets is limited by this\nexecution of the final training on a single instance. \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/ml/"}
{"content": "String operators \u00b6 \n The  ||  operator performs concatenation. \n The  LIKE  statement can be used for pattern matching and is documented\nin  like_operator . \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/string/#string-operators"}
{"content": "String functions \u00b6 \n \n Note \n These functions assume that the input strings contain valid UTF-8 encoded Unicode code points. There are no explicit checks for valid UTF-8, and the functions may return incorrect results on invalid UTF-8. Invalid UTF-8 data can be corrected with from_utf8. \n Additionally, the functions operate on Unicode code points and not user-visible characters (or grapheme clusters). Some     languages combine multiple code points into a single user-perceived character, the basic unit of a writing system for a     language, but the functions will treat each code point as a separate unit. \n The lower and upper functions do not perform locale-sensitive, context-sensitive, or one-to-many mappings required for some     languages. Specifically, this will return incorrect results for Lithuanian, Turkish, and Azeri. \n \n chr() \u00b6  (#chr) \n chr(n)  \u2192 varchar \nReturns the Unicode code point  n  as a single character string. \n codepoint() \u00b6  (#codepoint) \n codepoint(string)  \u2192 integer \nReturns the Unicode code point of the only character of  string . \n concat() \u00b6  (#concat) \n concat(string1, ..., stringN)  \u2192 varchar \nReturns the concatenation of  string1 ,  string2 ,  ... ,  stringN . This function provides the same functionality as the SQL-standard concatenation operator ( || ). \n concat_ws() \u00b6  (#concat_ws) \n concat_ws(string0, string1, ..., stringN)  \u2192 varchar \nReturns the concatenation of  string1 ,  string2 ,  ... ,  stringN  using  string0  as a separator. If  string0  is null, then the return value is null. Any null values provided in the arguments after the separator are skipped. \n concat_ws() \u00b6  (#concat_ws_1) \n concat_ws(string0, array(varchar))  \u2192 varchar \nReturns the concatenation of elements in the array using  string0  as a separator. If  string0  is null, then the return value is null. Any null values in the array are skipped. \n format() \u00b6  (#format) \n format(format, args...)  \u2192 varchar \nSee  format . \n hamming_distance() \u00b6  (#hamming_distance) \n hamming_distance(string1, string2)  \u2192 bigint \nReturns the Hamming distance of  string1  and  string2 , i.e. the number of positions at which the corresponding characters are different. Note that the two strings must have the same length. \n length() \u00b6  (#length) \n length(string)  \u2192 bigint \nReturns the length of  string  in characters. \n levenshtein_distance() \u00b6  (#levenshtein_distance) \n levenshtein_distance(string1, string2)  \u2192 bigint \nReturns the Levenshtein edit distance of  string1  and  string2 , i.e. the minimum number of single-character edits (insertions, deletions or substitutions) needed to change  string1  into  string2 . \n lower() \u00b6  (#lower) \n lower(string)  \u2192 varchar \nConverts  string  to lowercase. \n lpad() \u00b6  (#lpad) \n lpad(string, size, padstring)  \u2192 varchar \nLeft pads  string  to  size  characters with  padstring . If  size  is less than the length of  string , the result is truncated to  size  characters.  size  must not be negative and  padstring  must be non-empty. \n ltrim() \u00b6  (#ltrim) \n ltrim(string)  \u2192 varchar \nRemoves leading whitespace from  string . \n luhn_check() \u00b6  (#luhn_check) \n luhn_check(string)  \u2192 boolean \nTests whether a  string  of digits is valid according to the  Luhn algorithm  (https://en.wikipedia.org/wiki/Luhn_algorithm) .\nThis checksum function, also known as  modulo 10  or  mod 10 , is widely applied on credit card numbers and government identification numbers to distinguish valid numbers from mistyped, incorrect numbers. \n Valid identification number: \n select luhn_check('79927398713');\n-- true\n \n Invalid identification number: \n select luhn_check('79927398714');\n-- false\n \n position() \u00b6  (#position) \n position(substring IN string)  \u2192 bigint \n Returns the starting position of the first instance of  substring  in  string . Positions start with  1 . If not found,  0  is returned. \n Note: This SQL-standard function has special syntax and uses the  IN  keyword for the arguments. See also  strpos . \n replace() \u00b6  (#replace) \n replace(string, search)  \u2192 varchar \n Removes all instances of  search  from  string . \n replace(string, search, replace)  \u2192 varchar \n Replaces all instances of  search  with  replace  in  string . \n reverse() \u00b6  (#reverse) \n reverse(string)  \u2192 varchar \n Returns  string  with the characters \n rpad() \u00b6  (#rpad) \n rpad(string, size, padstring)  \u2192 varchar \n Right pads  string  to  size  characters with  padstring . If  size  is less than the length of  string , the result is truncated to  size  characters.  size  must not be negative and  padstring  must be non-empty. \n rtrim() \u00b6  (#rtrim) \n rtrim(string)  \u2192 varchar \n Removes trailing whitespace from  string . \n soundex() \u00b6  (#soundex) \n soundex(char)  \u2192 string \n soundex  returns a character string containing the phonetic representation of  char . \n It is typically used to evaluate the similarity of two expressions phonetically, that is how the string sounds when spoken:\n  (#__codelineno-0-1)      SELECT   name \n  (#__codelineno-0-2)      FROM   nation \n  (#__codelineno-0-3)      WHERE   SOUNDEX ( name )    =   SOUNDEX ( 'CHYNA' ); \n \n  (#__codelineno-1-1)      name  |\n  (#__codelineno-1-2)     -------+----\n  (#__codelineno-1-3)      CHINA |\n  (#__codelineno-1-4)     (1 row)\n \n split() \u00b6  (#split) \n split(string, delimiter)  \u2192 array(varchar) \n Splits  string  on  delimiter  and returns an array. \n split() \u00b6  (#split_1) \n split(string, delimiter, limit)  \u2192 array(varchar) \n Splits  string  on  delimiter  and returns an array of size at most  limit . The last element in the array always contain everything left in the  string .  limit  must be a positive number. \n split_part() \u00b6  (#split_part) \n split_part(string, delimiter, index)  \u2192 varchar \n Splits  string  on  delimiter  and returns the field  index . Field indexes start with  1 . If the index is larger than the number of fields, then null is returned. \n split_to_map() \u00b6  (#split_to_map) \n split_to_map(string, entryDelimiter, keyValueDelimiter)  \u2192 map \n Splits  string  by  entryDelimiter  and  keyValueDelimiter  and returns a map.  entryDelimiter  splits  string  into key-value pairs.  keyValueDelimiter  splits each pair into key and value. \n split_to_multimap() \u00b6  (#split_to_multimap) \n split_to_multimap(string, entryDelimiter, keyValueDelimiter)  \u2192 map(varchar, array(varchar)) \n Splits  string  by  entryDelimiter  and  keyValueDelimiter  and returns a map containing an array of values for each unique key.  entryDelimiter  splits  string  into key-value pairs.  keyValueDelimiter  splits each pair into key and value. The values for each key will be in the same order as they appeared in  string . \n strpos() \u00b6  (#strpos) \n strpos(string, substring)  \u2192 bigint \n Returns the starting position of the first instance of  substring  in  string . Positions start with  1 . If not found,  0  is returned. \n strpos(string, substring, instance)  \u2192 bigint \n Returns the position of the N-th  instance  of  substring  in  string . When  instance  is a negative number the search will start from the end of  string . Positions start with  1 . If not found,  0  is returned. \n starts_with() \u00b6  (#starts_with) \n starts_with(string, substring)  \u2192 boolean \n Tests whether  substring  is a prefix of  string . \n substring() \u00b6  (#substring) \n substr(string, start)  \u2192 varchar \n This is an alias for  substring . \n substring(string, start)  \u2192 varchar \n Returns the rest of  string  from the starting position  start . Positions start with  1 . A negative starting position is interpreted as being relative to the end of the string. \n substr(string, start, length)  \u2192 varchar \n This is an alias for  substring . \n substring(string, start, length)  \u2192 varchar \n Returns a substring from  string  of length  length  from the starting position  start . Positions start with  1 . A negative starting position is interpreted as being relative to the end of the string. \n translate() \u00b6  (#translate) \n translate(source, from, to)  \u2192 varchar \n Returns the  source  string translated by replacing characters found in the \n translate(source, from, to)  \u2192 varchar \n Returns the  source  string translated by replacing characters found in the  from  string with the corresponding characters in the  to  string. If the  from  string contains duplicates, only the first is used. If the  source  character does not exist in the  from  string, the  source  character will be copied without translation. If the index of the matching character in the  from  string is beyond the length of the  to  string, the  source  character will be omitted from the resulting string. \n Here are some examples illustrating the translate function:\n  (#__codelineno-2-1)      SELECT   translate ( 'abcd' ,   '' ,   '' );   -- 'abcd' \n  (#__codelineno-2-2)      SELECT   translate ( 'abcd' ,   'a' ,   'z' );   -- 'zbcd' \n  (#__codelineno-2-3)      SELECT   translate ( 'abcda' ,   'a' ,   'z' );   -- 'zbcdz' \n  (#__codelineno-2-4)      SELECT   translate ( 'Palho\u00e7a' ,   '\u00e7' , 'c' );   -- 'Palhoca' \n  (#__codelineno-2-5)      SELECT   translate ( 'abcd' ,   'b' ,   U & '\\+01F600' );   -- a\ud83d\ude00cd \n  (#__codelineno-2-6)      SELECT   translate ( 'abcd' ,   'a' ,   '' );   -- 'bcd' \n  (#__codelineno-2-7)      SELECT   translate ( 'abcd' ,   'a' ,   'zy' );   -- 'zbcd' \n  (#__codelineno-2-8)      SELECT   translate ( 'abcd' ,   'ac' ,   'z' );   -- 'zbd' \n  (#__codelineno-2-9)      SELECT   translate ( 'abcd' ,   'aac' ,   'zq' );   -- 'zbd' \n \n trim() \u00b6  (#trim) \n trim(string)  \u2192 varchar \n Removes leading and trailing whitespace from  string . \n trim( \\[ \\[ specification \\] \\[ string \\] FROM \\] source )  \u2192 varchar \n Removes any leading and/or trailing characters as specified up to and including  string  from  source :\n  (#__codelineno-3-1)      SELECT   trim ( '!'   FROM   '!foo!' );   -- 'foo' \n  (#__codelineno-3-2)      SELECT   trim ( LEADING   FROM   '  abcd' );    -- 'abcd' \n  (#__codelineno-3-3)      SELECT   trim ( BOTH   '$'   FROM   '$var$' );   -- 'var' \n  (#__codelineno-3-4)      SELECT   trim ( TRAILING   'ER'   FROM   upper ( 'worker' ));   -- 'WORK' \n \n upper() \u00b6  (#upper) \n upper(string)  \u2192 varchar \n Converts  string  to uppercase. \n word_stem() \u00b6  (#word_stem) \n word_stem(word)  \u2192 varchar \n Returns the stem of  word  in the English language. \n word_stem(word, lang)  \u2192 varchar \n Returns the stem of  word  in the  lang  language. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/string/#string-functions"}
{"content": "Unicode functions \u00b6 \n normalize() \u00b6  (#normalize) \n normalize(string)  \u2192 varchar \n Transforms  string  with NFC normalization form. \n normalize(string, form)  \u2192 varchar \n Transforms  string  with the specified normalization form.  form  must be one of the following keywords: \n \n \n \n Form \n Description \n \n \n \n \n NFD \n Canonical Decomposition \n \n \n NFC \n Canonical Decomposition, followed by Canonical Composition \n \n \n NFKD \n Compatibility Decomposition \n \n \n NFKC \n Compatibility Decomposition, followed by Canonical Composition \n \n \n \n \n Note \n This SQL-standard function has special syntax and requires specifying\n form  as a keyword, not as a string. \n \n to_utf8() \u00b6  (#to_utf8) \n to_utf8(string)  \u2192 varbinary \n Encodes  string  into a UTF-8 varbinary representation. \n from_utf8() \u00b6  (#from_utf8) \n from_utf8(binary)  \u2192 varchar \n Decodes a UTF-8 encoded string from  binary . Invalid UTF-8 sequences are replaced with the Unicode replacement character  U+FFFD . \n from_utf8(binary, replace)  \u2192 varchar \n Decodes a UTF-8 encoded string from  binary . Invalid UTF-8 sequences are replaced with  replace . The replacement string  replace  must either be a single character or empty (in which case invalid characters are removed).", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/string/#unicode-functions"}
{"content": "Skip to content\n          (#mathematical-operators) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/DuneSQL-reference/Functions-and-operators/math.md) \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/math/"}
{"content": "Skip to content\n          (#subscript-operator) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/DuneSQL-reference/Functions-and-operators/map.md) \n Map functions and operators \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/map/"}
{"content": "Skip to content\n          (#logical-operators) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/DuneSQL-reference/Functions-and-operators/logical.md) \n Logical operators \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/logical/"}
{"content": "Skip to content\n          (#_1) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/DuneSQL-reference/Functions-and-operators/list.md) \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list/"}
{"content": "Skip to content\n          (#aggregate) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/DuneSQL-reference/Functions-and-operators/list-by-topic.md) \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list-by-topic/"}
{"content": "Skip to content\n          (#limitations) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/DuneSQL-reference/Functions-and-operators/lambda.md) \n Lambda expressions \n Lambda expressions are anonymous functions which are passed as arguments\nto higher-order SQL functions. \n Lambda expressions are written with  -> :\n  (#__codelineno-0-1)     x -> x + 1\n  (#__codelineno-0-2)     (x, y) -> x + y\n  (#__codelineno-0-3)     x -> regexp_like(x, 'a+')\n  (#__codelineno-0-4)     x -> x[1] / x[2]\n  (#__codelineno-0-5)     x -> IF(x > 0, x, -x)\n  (#__codelineno-0-6)     x -> COALESCE(x, 0)\n  (#__codelineno-0-7)     x -> CAST(x AS JSON)\n  (#__codelineno-0-8)     x -> x + TRY(1 / 0)\n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/lambda/"}
{"content": "Skip to content\n          (#json-path-language) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/DuneSQL-reference/Functions-and-operators/json.md) \n The SQL standard describes functions and operators to process JSON data.\nThey allow you to access JSON data according to its structure, generate\nJSON data, and store it persistently in SQL tables. \n Importantly, the SQL standard imposes that there is no dedicated data\ntype to represent JSON data in SQL. Instead, JSON data is represented as\ncharacter or binary strings. Although Trino supports  JSON  type, it is\nnot used or produced by the following functions. \n Trino supports three functions for querying JSON data:\n json_exists<json_exists ,\n json_query<json_query , and\n json_value<json_value . \nEach of them is based on the same mechanism of exploring and processing JSON input using JSON path.   \n Trino also supports two functions for generating JSON data\n json_array<json_array , and\n json_object<json_object> . \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/json/"}
{"content": "Skip to content\n          (#data-structures) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/DuneSQL-reference/Functions-and-operators/hyperloglog.md) \n HyperLogLog functions \n Trino implements the  approx_distinct  (../aggregate/#approximate-aggregate-functions)  function using the  HyperLogLog  (https://en.wikipedia.org/wiki/HyperLogLog)  data structure. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/hyperloglog/"}
{"content": "Skip to content\n          (#decimal_literal) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/DuneSQL-reference/Functions-and-operators/decimal.md) \n Decimal functions and operators \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/decimal/"}
{"content": "Skip to content\n          (#date-and-time-operators) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/DuneSQL-reference/Functions-and-operators/datetime.md) \n Date and time functions and operators \n These functions and operators operate on\n date and time data types  (../../datatypes/) . \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/datetime/"}
{"content": "Skip to content\n          (#implicit-conversions) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/DuneSQL-reference/Functions-and-operators/conversion.md) \n Conversions \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/conversion/"}
{"content": "Skip to content\n          (#case) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/DuneSQL-reference/Functions-and-operators/conditional.md) \n Conditional expressions \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/conditional/"}
{"content": "Skip to content\n          (#comparison_operators) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/DuneSQL-reference/Functions-and-operators/comparison.md) \n Comparisons \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/comparison/"}
{"content": "Skip to content\n          (#chain-utility-functions) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/DuneSQL-reference/Functions-and-operators/chain-utility-functions.md) \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/chain-utility-functions/"}
{"content": "Skip to content\n          (#bit_count) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/DuneSQL-reference/Functions-and-operators/bitwise.md) \n Bitwise \n bit_count() \u00b6  (#bit_count) \n bit_count(x, bits)  \u2192 bigint\nCount the number of bits set in x (treated as bits-bit signed integer) in 2\u2019s complement representation:\n  (#__codelineno-0-1) SELECT   bit_count ( 9 ,   64 );   -- 2 \n  (#__codelineno-0-2) SELECT   bit_count ( 9 ,   8 );   -- 2 \n  (#__codelineno-0-3) SELECT   bit_count ( - 7 ,   64 );   -- 62 \n  (#__codelineno-0-4) SELECT   bit_count ( - 7 ,   8 );   -- 6 \n \n bitwise_and() \u00b6  (#bitwise_and) \n bitwise_and(x, y)  \u2192 bigint\nReturns the bitwise AND of x and y in 2\u2019s complement representation. \n Bitwise AND of 19 (binary: 10011) and 25 (binary: 11001) results in 17 (binary: 10001):\n  (#__codelineno-1-1) SELECT   bitwise_and ( 19 , 25 );   -- 17 \n \n bitwise_not(x)  \u2192 bigint\n Returns the bitwise NOT of x in 2\u2019s complement representation (NOT x = -x - 1): \n  (#__codelineno-2-1) SELECT   bitwise_not ( - 12 );   --  11 \n  (#__codelineno-2-2) SELECT   bitwise_not ( 19 );    -- -20 \n  (#__codelineno-2-3) SELECT   bitwise_not ( 25 );    -- -26 \n \n bitwise_or() \u00b6  (#bitwise_or) \n bitwise_or(x, y)  \u2192 bigint \n Returns the bitwise OR of x and y in 2\u2019s complement representation. \n Bitwise OR of 19 (binary: 10011) and 25 (binary: 11001) results in 27 (binary: 11011):\n  (#__codelineno-3-1) SELECT   bitwise_or ( 19 , 25 );   -- 27 \n \n bitwise_xor() \u00b6  (#bitwise_xor) \n bitwise_xor(x, y)  \u2192 bigint \n Returns the bitwise XOR of x and y in 2\u2019s complement representation. \n Bitwise XOR of 19 (binary: 10011) and 25 (binary: 11001) results in 10 (binary: 01010):\n  (#__codelineno-4-1) SELECT   bitwise_xor ( 19 , 25 );   -- 10 \n \n bitwise_left_shift() \u00b6  (#bitwise_left_shift) \n bitwise_left_shift(value, shift)  \u2192 [same as value]\nReturns the left shifted value of value. \n Shifting 1 (binary: 001) by two bits results in 4 (binary: 00100):\n  (#__codelineno-5-1) SELECT   bitwise_left_shift ( 1 ,   2 );   -- 4 \n \nShifting 5 (binary: 0101) by two bits results in 20 (binary: 010100):\n  (#__codelineno-6-1) SELECT   bitwise_left_shift ( 5 ,   2 );   -- 20 \n \nShifting a value by 0 always results in the original value:\n  (#__codelineno-7-1) SELECT   bitwise_left_shift ( 20 ,   0 );   -- 20 \n  (#__codelineno-7-2) SELECT   bitwise_left_shift ( 42 ,   0 );   -- 42 \n \nShifting 0 by a shift always results in 0:\n  (#__codelineno-8-1) SELECT   bitwise_left_shift ( 0 ,   1 );   -- 0 \n  (#__codelineno-8-2) SELECT   bitwise_left_shift ( 0 ,   2 );   -- 0 \n \n bitwise_right_shift() \u00b6  (#bitwise_right_shift) \n bitwise_right_shift(value, shift)  \u2192 [same as value] \n Returns the logical right shifted value of value. \n Shifting 8 (binary: 1000) by three bits results in 1 (binary: 001): \n  (#__codelineno-9-1) SELECT   bitwise_right_shift ( 8 ,   3 );   -- 1 \n \nShifting 9 (binary: 1001) by one bit results in 4 (binary: 100):\n  (#__codelineno-10-1) SELECT   bitwise_right_shift ( 9 ,   1 );   -- 4 \n \nShifting a value by 0 always results in the original value:\n  (#__codelineno-11-1) SELECT   bitwise_right_shift ( 20 ,   0 );   -- 20 \n  (#__codelineno-11-2) SELECT   bitwise_right_shift ( 42 ,   0 );   -- 42 \n \nShifting a value by 64 or more bits results in 0:\n  (#__codelineno-12-1) SELECT   bitwise_right_shift (   12 ,   64 );   -- 0 \n  (#__codelineno-12-2) SELECT   bitwise_right_shift ( - 45 ,   64 );   -- 0 \n \nShifting 0 by a shift always results in 0:\n  (#__codelineno-13-1) SELECT   bitwise_right_shift ( 0 ,   1 );   -- 0 \n  (#__codelineno-13-2) SELECT   bitwise_right_shift ( 0 ,   2 );   -- 0 \n \n bitwise_right_shift_arithmetic() \u00b6  (#bitwise_right_shift_arithmetic) \n bitwise_right_shift_arithmetic(value, shift)  \u2192 [same as value] \n Returns the arithmetic right shifted value of value. \n Returns the same values as bitwise_right_shift() when shifting by less than 64 bits. Shifting by 64 or more bits results in 0 for a positive and -1 for a negative value: \n  (#__codelineno-14-1) SELECT   bitwise_right_shift_arithmetic (   12 ,   64 );   -- 0 \n  (#__codelineno-14-2) SELECT   bitwise_right_shift_arithmetic ( - 45 ,   64 );   -- -1", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/bitwise/"}
{"content": "Skip to content\n          (#binary-operators) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/DuneSQL-reference/Functions-and-operators/binary.md) \n Binary \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/binary/"}
{"content": "Skip to content\n          (#functions) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/DuneSQL-reference/Functions-and-operators/base58.md) \n Base58 functions \n Base58 is a binary-to-text encoding scheme that is commonly used in Bitcoin and Solana. It uses an alphabet of 58 characters, which is the same as the Base64 encoding scheme, but omits the characters  0 ,  O ,  I , and  l  to avoid confusion between similar-looking letters and numbers. \n You can use the  from_base58  function to convert a Base58-encoded string to a  VARBINARY  value. For example, the following query converts the Base58-encoded string  3DZBMRwnSU8f  to a  VARBINARY  value: \n  (#__codelineno-0-1) SELECT   \n  (#__codelineno-0-2)      from_base58 ( '3DZBMRwnSU8f' ) \n  (#__codelineno-0-3) -- results in VARBINARY 0x030094357700000000 \n \n Now that we are able to convert Base58-encoded strings to  VARBINARY  values, we can use the  bytearray_to_bigint  function to convert the  VARBINARY  value to a  BIGINT  value. However, we need to consider more things: \n \n \n The decoded  VARBINARY  value does not only contain the data we want to convert to a  BIGINT  value. It also contains a discriminator that indicates which function of a solana program was called. We need to remove this discriminator before we can convert the  VARBINARY  value to a  BIGINT  value. We do this by using the  bytearray_substring  function. \n \n \n Solana uses little-endian byte order, so we need to reverse the byte order before we can convert the  VARBINARY  value to a  BIGINT  value. We do this by using the  bytearray_reverse  function. \n \n \n  (#__codelineno-1-1) SELECT   \n  (#__codelineno-1-2)      bytearray_to_bigint ( bytearray_reverse ( bytearray_substring ( from_base58 ( '3DZBMRwnSU8f' ),   2 ,   8 )))   as   token_sold_amount \n  (#__codelineno-1-3) -- results in BIGINT 2000000000 \n \n In a real-world scenario, here is how you would use these functions to decode a Base58-encoded string that represents a token amount in a Solana swap transaction: \n  (#__codelineno-2-1) SELECT \n  (#__codelineno-2-2) sp . call_inner_instructions [ 1 ]. data \n  (#__codelineno-2-3) , from_base58 ( sp . call_inner_instructions [ 1 ]. data )   as   first_step \n  (#__codelineno-2-4) , bytearray_substring ( from_base58 ( sp . call_inner_instructions [ 1 ]. data ),   2 ,   8 )   as   second_step \n  (#__codelineno-2-5) , bytearray_reverse ( bytearray_substring ( from_base58 ( sp . call_inner_instructions [ 1 ]. data ),   2 ,   8 ))   as   third_step \n  (#__codelineno-2-6) , bytearray_to_bigint ( bytearray_reverse ( bytearray_substring ( from_base58 ( sp . call_inner_instructions [ 1 ]. data ),   2 ,   8 )))   as   decoded_amount \n  (#__codelineno-2-7) FROM   whirlpool_solana . whirlpool_call_swap   sp \n  (#__codelineno-2-8) WHERE   sp . account_whirlpool   =   '7qbRF6YsyGuLUVs6Y1q64bdVrfe4ZcUUz1JRdoVNUJnm' \n  (#__codelineno-2-9) AND   call_tx_id   =   '44kmeC1edSfp21K5kKNVViJvLHG8XQqqu3KbHsrYcYZGmopWwBgP48c9u1DRBMGtQcbvyxd2TT8syY7ZvwpHqkhF' \n  (#__codelineno-2-10) and   call_block_slot   =   187701147 \n \n \u2192 Query in Dune  (https://dune.com/queries/2846422) \n \n Info \n This specific query decodes the token amount that was sold in a Solana swap transaction. While probably applicable for lots of other solana programs, it is not guaranteed to work for all solana programs. You might need to adjust the query to your specific use case, depending on the solana program you are querying. \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/base58/"}
{"content": "Set Digest functions \u00b6 \n Trino offers several functions that deal with the\n MinHash  (https://en.wikipedia.org/wiki/MinHash)  technique. \n MinHash is used to quickly estimate the  Jaccard similarity\ncoefficient  (https://en.wikipedia.org/wiki/Jaccard_index)  between two\nsets. \n It is commonly used in data mining to detect near-duplicate web pages at\nscale. By using this information, the search engines efficiently avoid\nshowing within the search results two pages that are nearly identical. \n The following example showcases how the Set Digest functions can be used\nto naively estimate the similarity between texts. The input texts are\nsplit by using the function  ngrams  to\n 4-shingles  (https://en.wikipedia.org/wiki/W-shingling)  which are used\nas input for creating a set digest of each initial text. The set digests\nare compared to each other to get an approximation of the similarity of\ntheir corresponding initial texts: \n  (#__codelineno-0-1) WITH   text_input ( id ,   text )   AS   ( \n  (#__codelineno-0-2)           VALUES \n  (#__codelineno-0-3)               ( 1 ,   'The quick brown fox jumps over the lazy dog' ), \n  (#__codelineno-0-4)               ( 2 ,   'The quick and the lazy' ), \n  (#__codelineno-0-5)               ( 3 ,   'The quick brown fox jumps over the dog' ) \n  (#__codelineno-0-6)       ), \n  (#__codelineno-0-7)       text_ngrams ( id ,   ngrams )   AS   ( \n  (#__codelineno-0-8)           SELECT   id , \n  (#__codelineno-0-9)                  transform ( \n  (#__codelineno-0-10)                    ngrams ( \n  (#__codelineno-0-11)                      split ( text ,   ' ' ), \n  (#__codelineno-0-12)                      4 \n  (#__codelineno-0-13)                    ), \n  (#__codelineno-0-14)                    token   ->   array_join ( token ,   ' ' ) \n  (#__codelineno-0-15)                  ) \n  (#__codelineno-0-16)           FROM   text_input \n  (#__codelineno-0-17)       ), \n  (#__codelineno-0-18)       minhash_digest ( id ,   digest )   AS   ( \n  (#__codelineno-0-19)           SELECT   id , \n  (#__codelineno-0-20)                  ( SELECT   make_set_digest ( v )   FROM   unnest ( ngrams )   u ( v )) \n  (#__codelineno-0-21)           FROM   text_ngrams \n  (#__codelineno-0-22)       ), \n  (#__codelineno-0-23)       setdigest_side_by_side ( id1 ,   digest1 ,   id2 ,   digest2 )   AS   ( \n  (#__codelineno-0-24)           SELECT   m1 . id   as   id1 , \n  (#__codelineno-0-25)                  m1 . digest   as   digest1 , \n  (#__codelineno-0-26)                  m2 . id   as   id2 , \n  (#__codelineno-0-27)                  m2 . digest   as   digest2 \n  (#__codelineno-0-28)           FROM   ( SELECT   id ,   digest   FROM   minhash_digest )   m1 \n  (#__codelineno-0-29)           JOIN   ( SELECT   id ,   digest   FROM   minhash_digest )   m2 \n  (#__codelineno-0-30)             ON   m1 . id   !=   m2 . id   AND   m1 . id   <   m2 . id \n  (#__codelineno-0-31)       ) \n  (#__codelineno-0-32) SELECT   id1 , \n  (#__codelineno-0-33)         id2 , \n  (#__codelineno-0-34)         intersection_cardinality ( digest1 ,   digest2 )   AS   intersection_cardinality , \n  (#__codelineno-0-35)         jaccard_index ( digest1 ,   digest2 )              AS   jaccard_index \n  (#__codelineno-0-36) FROM   setdigest_side_by_side \n  (#__codelineno-0-37) ORDER   BY   id1 ,   id2 ; \n \nResults:  \n \n \n \n id1 \n id2 \n intersection_cardinality \n jaccard_index \n \n \n \n \n 1 \n 2 \n 0 \n 0.0 \n \n \n 1 \n 3 \n 4 \n 0.6 \n \n \n 2 \n 3 \n 0 \n 0.0 \n \n \n \n The above result listing points out, as expected, that the texts with\nthe id 1 and 3 are quite similar. \n One may argue that the text with the id 2 is somewhat similar to the\ntexts with the id 1 and 3. Due to the fact in the example above\n4-shingles are taken into account for measuring the similarity of the\ntexts, there are no intersections found for the text pairs 1 and 2,\nrespectively 3 and 2 and therefore there the similarity index for\nthese text pairs is 0. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/setdigest/#set-digest-functions"}
{"content": "Data structures \u00b6 \n Trino implements Set Digest data sketches by encapsulating the following\ncomponents: \n \n HyperLogLog  (https://en.wikipedia.org/wiki/HyperLogLog) \n MinHash with a single hash\n    function  (http://en.wikipedia.org/wiki/MinHash#Variant_with_a_single_hash_function) \n \n The HyperLogLog structure is used for the approximation of the distinct\nelements in the original set. \n The MinHash structure is used to store a low memory footprint signature\nof the original set. The similarity of any two sets is estimated by\ncomparing their signatures. \n The Trino type for this data structure is called  setdigest . Trino\noffers the ability to merge multiple Set Digest data sketches. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/setdigest/#data-structures"}
{"content": "Serialization \u00b6 \n Data sketches can be serialized to and deserialized from  varbinary .\nThis allows them to be stored for later use. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/setdigest/#serialization"}
{"content": "Functions \u00b6 \n make_set_digest() \u00b6  (#make_set_digest) \n make_set_digest(x)  \u2192 setdigest \n Composes all input values of  x  into a  setdigest . \n Create a  setdigest  corresponding to a  bigint  array:\n  (#__codelineno-1-1)      SELECT   make_set_digest ( value ) \n  (#__codelineno-1-2)      FROM   ( VALUES   1 ,   2 ,   3 )   T ( value ); \n \nCreate a  setdigest  corresponding to a  varchar  array:\n SELECT make_set_digest(value)\nFROM (VALUES 'Trino', 'SQL', 'on', 'everything') T(value);\n \n merge_set_digest() \u00b6  (#merge_set_digest) \n merge_set_digest(setdigest, setdigest)  \u2192 setdigest \n Returns the  setdigest  of the aggregate union of the individual\n setdigest  Set Digest structures. \n Returns the cardinality of the set digest from its internal\n HyperLogLog  component. \n Examples:\n  (#__codelineno-2-1)      SELECT   cardinality ( make_set_digest ( value )) \n  (#__codelineno-2-2)      FROM   ( VALUES   1 ,   2 ,   2 ,   3 ,   3 ,   3 ,   4 ,   4 ,   4 ,   4 ,   5 )   T ( value ); \n  (#__codelineno-2-3)      -- 5 \n \n intersection_cardinality() \u00b6  (#intersection_cardinality) \n intersection_cardinality(x,y)  \u2192 long \n Returns the estimation for the cardinality of the intersection of the\ntwo set digests. \n x  and  y  must be of type  setdigest \n Examples:\n  (#__codelineno-3-1)      SELECT   intersection_cardinality ( make_set_digest ( v1 ),   make_set_digest ( v2 )) \n  (#__codelineno-3-2)      FROM   ( VALUES   ( 1 ,   1 ),   ( NULL ,   2 ),   ( 2 ,   3 ),   ( 3 ,   4 ))   T ( v1 ,   v2 ); \n  (#__codelineno-3-3)      -- 3 \n \n jaccard_index() \u00b6  (#jaccard_index) \n jaccard_index(x, y)  \u2192 double \n Returns the estimation of  Jaccard\nindex  (https://en.wikipedia.org/wiki/Jaccard_index)  for the two set\ndigests. \n x  and  y  must be of type  setdigest . \n Examples:\n  (#__codelineno-4-1)      SELECT   jaccard_index ( make_set_digest ( v1 ),   make_set_digest ( v2 )) \n  (#__codelineno-4-2)      FROM   ( VALUES   ( 1 ,   1 ),   ( NULL , 2 ),   ( 2 ,   3 ),   ( NULL ,   4 ))   T ( v1 ,   v2 ); \n  (#__codelineno-4-3)      -- 0.5 \n \n hash_counts() \u00b6  (#hash_counts) \n hash_counts(x)  \u2192 map(bigint, bigint) \n Returns a map containing the\n Murmur3Hash128  (https://en.wikipedia.org/wiki/MurmurHash#MurmurHash3) \nhashed values and the count of their occurences within the internal\n MinHash  structure belonging to  x . \n x  must be of type  setdigest . \n Examples:\n  (#__codelineno-5-1)      SELECT   hash_counts ( make_set_digest ( value )) \n  (#__codelineno-5-2)      FROM   ( VALUES   1 ,   1 ,   1 ,   2 ,   2 )   T ( value ); \n  (#__codelineno-5-3)      -- {19144387141682250=3, -2447670524089286488=2}", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/setdigest/#functions"}
{"content": "Skip to content\n          (#array-functions) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/DuneSQL-reference/Functions-and-operators/array.md) \n Array functions and operators \n Subscript operator: [] {subscript_operator} \n The  []  operator is used to access an element of an array and is\nindexed starting from one:\n  (#__codelineno-0-1)      SELECT   my_array [ 1 ]   AS   f_element \n \n Concatenation operator: || {concatenation_operator}\n The  ||  operator is used to concatenate an array with an array or an\nelement of the same type:\n  (#__codelineno-1-1)      SELECT   ARRAY [ 1 ]   ||   ARRAY [ 2 ]; \n  (#__codelineno-1-2)      -- [1, 2] \n  (#__codelineno-1-3) \n  (#__codelineno-1-4)      SELECT   ARRAY [ 1 ]   ||   2 ; \n  (#__codelineno-1-5)      -- [1, 2] \n  (#__codelineno-1-6) \n  (#__codelineno-1-7)      SELECT   2   ||   ARRAY [ 1 ]; \n  (#__codelineno-1-8)      -- [2, 1] \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/array/"}
{"content": "Feature vector \u00b6 \n To solve a problem with the machine learning technique, especially as a\nsupervised learning problem, it is necessary to represent the data set\nwith the sequence of pairs of labels and feature vector. A label is a\ntarget value you want to predict from the unseen feature and a feature\nis a A N-dimensional vector whose elements are numerical values. In\nTrino, a feature vector is represented as a map-type value, whose key is\nan index of each feature, so that it can express a sparse vector. Since\nclassifiers and regressors can recognize the map-type feature vector,\nthere is a function to construct the feature from the existing numerical\nvalues,  features : \n  (#__codelineno-0-1) SELECT   features ( 1 . 0 ,   2 . 0 ,   3 . 0 )   AS   features ; \n \nResult:  \n \n \n \n Features \n \n \n \n \n {0=1.0, 1=2.0, 2=3.0} \n \n \n \n The output from  features  can be directly passed to ML functions. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/ml/#feature-vector"}
{"content": "Classification \u00b6 \n Classification is a type of supervised learning problem to predict the\ndistinct label from the given feature vector. The interface looks\nsimilar to the construction of the SVM model from the sequence of pairs\nof labels and features implemented in Teradata Aster or  BigQuery\nML  (https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro) . The\nfunction to train a classification model looks like as follows:\n  (#__codelineno-1-1)      SELECT \n  (#__codelineno-1-2)        learn_classifier ( \n  (#__codelineno-1-3)          species , \n  (#__codelineno-1-4)          features ( sepal_length ,   sepal_width ,   petal_length ,   petal_width ) \n  (#__codelineno-1-5)        )   AS   model \n  (#__codelineno-1-6)      FROM \n  (#__codelineno-1-7)        iris \n \nIt returns the trained model in a serialized format.\n  (#__codelineno-2-1) model\n  (#__codelineno-2-2) -------------------------------------------------\n  (#__codelineno-2-3) 3c 43 6c 61 73 73 69 66 69 65 72 28 76 61 72 63\n  (#__codelineno-2-4) 68 61 72 29 3e\n \n classify  returns the predicted label by using the trained model. The trained model can not be saved natively,\nand needs to be passed in the format of a nested query:\n  (#__codelineno-3-1)      SELECT \n  (#__codelineno-3-2)        classify ( features ( 5 . 9 ,   3 ,   5 . 1 ,   1 . 8 ),   model )   AS   predicted_label \n  (#__codelineno-3-3)      FROM   ( \n  (#__codelineno-3-4)        SELECT \n  (#__codelineno-3-5)          learn_classifier ( species ,   features ( sepal_length ,   sepal_width ,   petal_length ,   petal_width ))   AS   model \n  (#__codelineno-3-6)        FROM \n  (#__codelineno-3-7)          iris \n  (#__codelineno-3-8)      )   t \n \n  (#__codelineno-4-1) predicted_label\n  (#__codelineno-4-2) -----------------\n  (#__codelineno-4-3) Iris-virginica\n \n As a result you need to run the training process at the same time when\npredicting values. Internally, the model is trained by\n libsvm  (https://www.csie.ntu.edu.tw/~cjlin/libsvm/) . You can use\n learn_libsvm_classifier  to control the\ninternal parameters of the model. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/ml/#classification"}
{"content": "Regression \u00b6 \n Regression is another type of supervised learning problem, predicting\ncontinuous value, unlike the classification problem. The target must be\nnumerical values that can be described as  double . \n The following code shows the creation of the model predicting\n sepal_length  from the other 3 features:\n  (#__codelineno-5-1)      SELECT \n  (#__codelineno-5-2)        learn_regressor ( sepal_length ,   features ( sepal_width ,   petal_length ,   petal_width ))   AS   model \n  (#__codelineno-5-3)      FROM \n  (#__codelineno-5-4)        iris \n \nThe way to use the model is similar to the classification case:\n  (#__codelineno-6-1)      SELECT \n  (#__codelineno-6-2)        regress ( features ( 3 ,   5 . 1 ,   1 . 8 ),   model )   AS   predicted_target \n  (#__codelineno-6-3)      FROM   ( \n  (#__codelineno-6-4)        SELECT \n  (#__codelineno-6-5)          learn_regressor ( sepal_length ,   features ( sepal_width ,   petal_length ,   petal_width ))   AS   model \n  (#__codelineno-6-6)        FROM   iris \n  (#__codelineno-6-7)      )   t ; \n \n  (#__codelineno-7-1) predicted_target\n  (#__codelineno-7-2) -------------------\n  (#__codelineno-7-3) 6.407376822560477\n \n Internally, the model is trained by\n libsvm  (https://www.csie.ntu.edu.tw/~cjlin/libsvm/) .\n learn_libsvm_regressor  provides you a\nway to control the training process. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/ml/#regression"}
{"content": "Machine learning functions \u00b6 \n features() \u00b6  (#features) \n features(double, ...)  \u2192 map(bigint, double) \nReturns the map representing the feature vector. \n learn_classifier() \u00b6  (#learn_classifier) \n learn_classifier(label, features)  \u2192 Classifier \n Returns an SVM-based classifier model, trained with the given label and\nfeature data sets. \n learn_libsvm_classifier() \u00b6  (#learn_libsvm_classifier) \n learn_libsvm_classifier(label, features, params)  \u2192 Classifier \n Returns an SVM-based classifier model, trained with the given label and\nfeature data sets. You can control the training process by libsvm\nparameters. \n classify() \u00b6  (#classify) \n classify(features, model)  \u2192 label \n Returns a label predicted by the given classifier SVM model. \n learn_regressor() \u00b6  (#learn_regressor) \n learn_regressor(target, features)  \u2192 Regressor \n Returns an SVM-based regressor model, trained with the given target and\nfeature data sets. \n learn_libsvm_regressor() \u00b6  (#learn_libsvm_regressor) \n learn_libsvm_regressor(target, features, params)  \u2192 Regressor \n Returns an SVM-based regressor model, trained with the given target and\nfeature data sets. You can control the training process by libsvm\nparameters. \n regress() \u00b6  (#regress) \n regress(features, model)  \u2192 target \n Returns a predicted target value by the given regressor SVM model.", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/ml/#machine-learning-functions-1"}
{"content": "Skip to content\n          (#aggregate-function-ordering-during-aggregation) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/DuneSQL-reference/Functions-and-operators/aggregate.md) \n Aggregate functions \n Aggregate functions operate on a set of values to compute a single\nresult. \n Except for  count ,  count_if ,  max_by ,  min_by  and  approx_distinct , all of these aggregate functions ignore null values and return null for no input rows or when all values are null. For example,  sum  returns null rather than zero and  avg  does not include null values in the count. The  coalesce  function can be used to convert null into zero. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/aggregate/"}
{"content": "Skip to content\n          (#dunesql-added-functions) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/DuneSQL-reference/Functions-and-operators/index.md) \n Overview \n This chapter describes the built-in SQL functions and operators supported by Trino. They allow you to implement complex functionality and behavior of the SQL executed by Trino operating on the underlying data sources. \n Using  SHOW FUNCTIONS  in the query editor returns a list of all available functions, including custom functions, with all supported arguments and a short description. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/"}
{"content": "Skip to content\n          (#functions-and-operators) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/DuneSQL-reference/index.md) \n DuneSQL Overview \n DuneSQL is a custom-built query engine designed for efficient analysis of blockchain data. Based on the open-source TrinoSQL engine, it incorporates additional optimizations to handle blockchain-specific requirements. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/"}
{"content": "Mathematical operators \u00b6 \n \n \n \n Operator \n Description \n \n \n \n \n + \n Addition \n \n \n - \n Subtraction \n \n \n * \n Multiplication \n \n \n / \n Division (integer division performs truncation) \n \n \n % \n Modulus (remainder) \n \n \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/math/#mathematical-operators"}
{"content": "Mathematical functions \u00b6 \n abs() \u00b6  (#abs) \n abs(x)  \u2192 same as input \nReturns the absolute value of  x . \n cbrt() \u00b6  (#cbrt) \n cbrt(x)  \u2192 double \nReturns the cube root of  x . \n ceil() \u00b6  (#ceil) \n ceil(x)  \u2192 same as input \nThis is an alias for  ceiling . \n ceiling() \u00b6  (#ceiling) \n ceiling(x)  \u2192 same as input \nReturns  x  rounded up to the nearest integer. \n degrees() \u00b6  (#degrees) \n degrees(x)  \u2192 double \nConverts angle  x  in radians to degrees. \n e() \u00b6  (#e) \n e()  \u2192 double \nReturns the constant Euler's number. \n exp() \u00b6  (#exp) \n exp(x)  \u2192 double \nReturns Euler's number raised to the power of  x . \n floor() \u00b6  (#floor) \n floor(x)  \u2192 same as input \nReturns  x  rounded down to the nearest integer. \n ln() \u00b6  (#ln) \n ln(x)  \u2192 double \nReturns the natural logarithm of  x . \n log() \u00b6  (#log) \n log(b, x)  \u2192 double \nReturns the base  b  logarithm of  x . \n log2() \u00b6  (#log2) \n log2(x)  \u2192 double \nReturns the base 2 logarithm of  x . \n log10() \u00b6  (#log10) \n log10(x)  \u2192 double \nReturns the base 10 logarithm of  x . \n mod() \u00b6  (#mod) \n mod(n, m)  \u2192 same as input \nReturns the modulus (remainder) of  n  divided by  m . \n pi() \u00b6  (#pi) \n pi()  \u2192 double \nReturns the constant Pi. \n pow() \u00b6  (#pow) \n pow(x, p)  \u2192 double \nThis is an alias for  power . \n power() \u00b6  (#power) \n power(x, p)  \u2192 double \nReturns  x  raised to the power of  p . \n radians() \u00b6  (#radians) \n radians(x)  \u2192 double \nConverts angle  x  in degrees to radians. \n round() \u00b6  (#round) \n round(x)  \u2192 same as input \nReturns  x  rounded to the nearest integer. \n round() \u00b6  (#round_1) \n round(x, d)  \u2192 same as input \nReturns  x  rounded to  d  decimal places. \n sign() \u00b6  (#sign) \n sign(x)  \u2192 same as input \nReturns the signum function of  x , that is:\n-   0 if the argument is 0,\n-   1 if the argument is greater than 0,\n-   -1 if the argument is less than 0.\nFor double arguments, the function additionally returns:\n-   NaN if the argument is NaN,\n-   1 if the argument is +Infinity,\n-   -1 if the argument is -Infinity. \n sqrt() \u00b6  (#sqrt) \n sqrt(x)  \u2192 double \nReturns the square root of  x . \n truncate() \u00b6  (#truncate) \n truncate(x)  \u2192 double \nReturns  x  rounded to integer by dropping digits after decimal point. \n width_bucket() \u00b6  (#width_bucket) \n width_bucket(x, bound1, bound2, n)  \u2192 bigint \nReturns the bin number of  x  in an equi-width histogram with the specified  bound1  and  bound2  bounds and  n  number of buckets. \n width_bucket() \u00b6  (#width_bucket_1) \n width_bucket(x, bins)  \u2192 bigint \nReturns the bin number of  x  according to the bins specified by the array  bins . The  bins  parameter must be an array of doubles and is assumed to be in sorted ascending order. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/math/#mathematical-functions"}
{"content": "Random functions \u00b6 \n rand() \u00b6  (#rand) \n rand()  \u2192 double \nThis is an alias for  random() . \n random() \u00b6  (#random) \n random()  \u2192 double \nReturns a pseudo-random value in the range 0.0 <= x < 1.0. \n random() \u00b6  (#random_1) \n random(n)  \u2192 same as input \nReturns a pseudo-random number between 0 and n (exclusive). \n random() \u00b6  (#random_2) \n random(m, n)  \u2192 same as input \nReturns a pseudo-random number between m and n (exclusive). \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/math/#random-functions"}
{"content": "Trigonometric functions \u00b6 \n All trigonometric function arguments are expressed in radians. See unit conversion functions  degrees  and  radians . \n acos() \u00b6  (#acos) \n acos(x)  \u2192 double \nReturns the arc cosine of  x . \n asin() \u00b6  (#asin) \n asin(x)  \u2192 double \nReturns the arc sine of  x . \n atan() \u00b6  (#atan) \n atan(x)  \u2192 double \nReturns the arc tangent of  x . \n atan2() \u00b6  (#atan2) \n atan2(y, x)  \u2192 double \nReturns the arc tangent of  y / x . \n cos() \u00b6  (#cos) \n cos(x)  \u2192 double \nReturns the cosine of  x . \n cosh() \u00b6  (#cosh) \n cosh(x)  \u2192 double \nReturns the hyperbolic cosine of  x . \n sin() \u00b6  (#sin) \n sin(x)  \u2192 double \nReturns the sine of  x . \n tan() \u00b6  (#tan) \n tan(x)  \u2192 double \nReturns the tangent of  x . \n sinh() \u00b6  (#sinh) \n sinh(x)  \u2192 double\nReturns the hyperbolic sine of  x . \n tanh() \u00b6  (#tanh) \n tanh(x)  \u2192 double \nReturns the hyperbolic tangent of  x . \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/math/#trigonometric-functions"}
{"content": "Floating point functions \u00b6 \n infinity() \u00b6  (#infinity) \n infinity()  \u2192 double \nReturns the constant representing positive infinity. \n is_finite() \u00b6  (#is_finite) \n is_finite(x)  \u2192 boolean \nDetermine if  x  is finite. \n is_infinite() \u00b6  (#is_infinite) \n is_infinite(x)  \u2192 boolean \nDetermine if  x  is infinite. \n is_nan() \u00b6  (#is_nan) \n is_nan(x)  \u2192 boolean \nDetermine if  x  is not-a-number. \n nan() \u00b6  (#nan) \n nan()  \u2192 double \nReturns the constant representing not-a-number. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/math/#floating-point-functions"}
{"content": "Base conversion functions \u00b6 \n from_base() \u00b6  (#from_base) \n from_base(string, radix)  \u2192 bigint \nReturns the value of  string  interpreted as a base- radix  number. \n to_base() \u00b6  (#to_base) \n to_base(x, radix)  \u2192 varchar \nReturns the base- radix  representation of  x . \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/math/#base-conversion-functions"}
{"content": "Statistical functions \u00b6 \n cosine_similarity() \u00b6  (#cosine_similarity) \n cosine_similarity(x, y)  \u2192 double \nReturns the cosine similarity between the sparse vectors  x  and  y :\n    SELECT cosine_similarity(MAP(ARRAY['a'], ARRAY[1.0]), MAP(ARRAY['a'], ARRAY[2.0])); -- 1.0 \n wilson_interval_lower() \u00b6  (#wilson_interval_lower) \n wilson_interval_lower(successes, trials, z)  \u2192 double \nReturns the lower bound of the Wilson score interval of a Bernoulli\ntrial process at a confidence specified by the z-score  z . \n wilson_interval_upper() \u00b6  (#wilson_interval_upper) \n wilson_interval_upper(successes, trials, z)  \u2192 double \nReturns the upper bound of the Wilson score interval of a Bernoulli\ntrial process at a confidence specified by the z-score  z . \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/math/#statistical-functions"}
{"content": "Cumulative distribution functions \u00b6 \n beta_cdf() \u00b6  (#beta_cdf) \n beta_cdf(a, b, v)  \u2192 double \nCompute the Beta cdf with given a, b parameters: P(N < v; a, b). The a,\nb parameters must be positive real numbers and value v must be a real\nvalue. The value v must lie on the interval [0, 1]. \n inverse_beta_cdf() \u00b6  (#inverse_beta_cdf) \n inverse_beta_cdf(a, b, p)  \u2192 double \nCompute the inverse of the Beta cdf with given a, b parameters for the\ncumulative probability (p): P(N < n). The a, b parameters must be\npositive real values. The probability p must lie on the interval [0,\n1]. \n inverse_normal_cdf() \u00b6  (#inverse_normal_cdf) \n inverse_normal_cdf(mean, sd, p)  \u2192 double \nCompute the inverse of the Normal cdf with given mean and standard \n normal_cdf() \u00b6  (#normal_cdf) \n normal_cdf(mean, sd, v)  \u2192 double \nCompute the Normal cdf with given mean and standard deviation (sd): P(N\n< v; mean, sd). The mean and value v must be real values and the\nstandard deviation must be a real and positive value.", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/math/#cumulative-distribution-functions"}
{"content": "Subscript operator: [] \u00b6 \n The  []  operator is used to retrieve the value corresponding to a given\nkey from a map:\n  (#__codelineno-0-1)      SELECT   name_to_age_map [ 'Bob' ]   AS   bob_age ; \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/map/#subscript-operator"}
{"content": "Map functions \u00b6 \n cardinality() \u00b6  (#cardinality) \n cardinality(x)  \u2192 bigint \n Returns the cardinality (size) of the map  x . \n element_at() \u00b6  (#element_at) \n element_at(map(K,V), key)  \u2192 V \n Returns value for given  key , or  NULL  if the key is not contained in\nthe map. \n map() \u00b6  (#map) \n map()  \u2192 map(unknown, unknown) \n Returns an empty map:\n  (#__codelineno-1-1)      SELECT   map (); \n  (#__codelineno-1-2)      -- {} \n \n map(array(K), array(V))  \u2192 map(K,V) \n Returns a map created using the given key/value arrays:\n  (#__codelineno-2-1)      SELECT   map ( ARRAY [ 1 , 3 ],   ARRAY [ 2 , 4 ]); \n  (#__codelineno-2-2)      -- {1 -> 2, 3 -> 4} \n \nSee also  map_agg  and  multimap_agg  for creating a map as an aggregation.\n map_from_entries() \u00b6  (#map_from_entries) \n map_from_entries(array(row(K,V)))  \u2192 map(K,V) \n Returns a map created from the given array of entries:\n  (#__codelineno-3-1)      SELECT   map_from_entries ( ARRAY [( 1 ,   'x' ),   ( 2 ,   'y' )]); \n  (#__codelineno-3-2)      -- {1 -> 'x', 2 -> 'y'} \n \n multimap_from_entries() \u00b6  (#multimap_from_entries) \n multimap_from_entries(array(row(K,V)))  \u2192 map(K,array(V)) \n Returns a multimap created from the given array of entries. Each key can\nbe associated with multiple values:\n  (#__codelineno-4-1)      SELECT   multimap_from_entries ( ARRAY [( 1 ,   'x' ),   ( 2 ,   'y' ),   ( 1 ,   'z' )]); \n  (#__codelineno-4-2)      -- {1 -> ['x', 'z'], 2 -> ['y']} \n \n map_entries() \u00b6  (#map_entries) \n map_entries(map(K,V))  \u2192 array(row(K,V)) \n Returns an array of all entries in the given map:\n  (#__codelineno-5-1)      SELECT   map_entries ( MAP ( ARRAY [ 1 ,   2 ],   ARRAY [ 'x' ,   'y' ])); \n  (#__codelineno-5-2)      -- [ROW(1, 'x'), ROW(2, 'y')] \n \n map_concat() \u00b6  (#map_concat) \n map_concat(map1(K,V), map2(K,V), ..., mapN(K,V))  \u2192 map(K,V) \n Returns the union of all the given maps. If a key is found in multiple\ngiven maps, that key\\'s value in the resulting map comes from the last\none of those maps. \n map_filter() \u00b6  (#map_filter) \n map_filter(map(K,V), function(K,V,boolean))  \u2192 map(K,V) \n Constructs a map from those entries of  map  for which  function \nreturns true:\n  (#__codelineno-6-1)      SELECT   map_filter ( MAP ( ARRAY [],   ARRAY []),   ( k ,   v )   ->   true ); \n  (#__codelineno-6-2)      -- {} \n  (#__codelineno-6-3) \n  (#__codelineno-6-4)      SELECT   map_filter ( MAP ( ARRAY [ 10 ,   20 ,   30 ],   ARRAY [ 'a' ,   NULL ,   'c' ]), \n  (#__codelineno-6-5)                        ( k ,   v )   ->   v   IS   NOT   NULL ); \n  (#__codelineno-6-6)      -- {10 -> a, 30 -> c} \n  (#__codelineno-6-7) \n  (#__codelineno-6-8)      SELECT   map_filter ( MAP ( ARRAY [ 'k1' ,   'k2' ,   'k3' ],   ARRAY [ 20 ,   3 ,   15 ]), \n  (#__codelineno-6-9)                        ( k ,   v )   ->   v   >   10 ); \n  (#__codelineno-6-10)      -- {k1 -> 20, k3 -> 15} \n \n map_keys() \u00b6  (#map_keys) \n map_keys(x(K,V))  \u2192 array(K) \n Returns all the keys in the map  x . \n map_values() \u00b6  (#map_values) \n map_values(x(K,V))  \u2192 array(V) \n Returns all the values in the map  x . \n map_zip_with() \u00b6  (#map_zip_with) \n map_zip_with(map(K,V1), map(K,V2), function(K,V1,V2,V3))  \u2192 map(K,V3) \n Merges the two given maps into a single map by applying  function  to\nthe pair of values with the same key. For keys only presented in one\nmap, NULL will be passed as the value for the missing key:\n  (#__codelineno-7-1)      SELECT   map_zip_with ( MAP ( ARRAY [ 1 ,   2 ,   3 ],   ARRAY [ 'a' ,   'b' ,   'c' ]), \n  (#__codelineno-7-2)                          MAP ( ARRAY [ 1 ,   2 ,   3 ],   ARRAY [ 'd' ,   'e' ,   'f' ]), \n  (#__codelineno-7-3)                          ( k ,   v1 ,   v2 )   ->   concat ( v1 ,   v2 )); \n  (#__codelineno-7-4)      -- {1 -> ad, 2 -> be, 3 -> cf} \n  (#__codelineno-7-5) \n  (#__codelineno-7-6)      SELECT   map_zip_with ( MAP ( ARRAY [ 'k1' ,   'k2' ],   ARRAY [ 1 ,   2 ]), \n  (#__codelineno-7-7)                          MAP ( ARRAY [ 'k2' ,   'k3' ],   ARRAY [ 4 ,   9 ]), \n  (#__codelineno-7-8)                          ( k ,   v1 ,   v2 )   ->   ( v1 ,   v2 )); \n  (#__codelineno-7-9)      -- {k1 -> ROW(1, null), k2 -> ROW(2, 4), k3 -> ROW(null, 9)} \n  (#__codelineno-7-10) \n  (#__codelineno-7-11)      SELECT   map_zip_with ( MAP ( ARRAY [ 'a' ,   'b' ,   'c' ],   ARRAY [ 1 ,   8 ,   27 ]), \n  (#__codelineno-7-12)                          MAP ( ARRAY [ 'a' ,   'b' ,   'c' ],   ARRAY [ 1 ,   2 ,   3 ]), \n  (#__codelineno-7-13)                          ( k ,   v1 ,   v2 )   ->   k   ||   CAST ( v1   /   v2   AS   VARCHAR )); \n  (#__codelineno-7-14)      -- {a -> a1, b -> b4, c -> c9} \n \n transform_keys() \u00b6  (#transform_keys) \n transform_keys(map(K1,V), function(K1,V,K2))  \u2192 map(K2,V) \n Returns a map that applies  function  to each entry of  map  and\ntransforms the keys:\n  (#__codelineno-8-1)      SELECT   transform_keys ( MAP ( ARRAY [],   ARRAY []),   ( k ,   v )   ->   k   +   1 ); \n  (#__codelineno-8-2)      -- {} \n  (#__codelineno-8-3) \n  (#__codelineno-8-4)      SELECT   transform_keys ( MAP ( ARRAY   [ 1 ,   2 ,   3 ],   ARRAY   [ 'a' ,   'b' ,   'c' ]), \n  (#__codelineno-8-5)                            ( k ,   v )   ->   k   +   1 ); \n  (#__codelineno-8-6)      -- {2 -> a, 3 -> b, 4 -> c} \n  (#__codelineno-8-7) \n  (#__codelineno-8-8)      SELECT   transform_keys ( MAP ( ARRAY   [ 'a' ,   'b' ,   'c' ],   ARRAY   [ 1 ,   2 ,   3 ]), \n  (#__codelineno-8-9)                            ( k ,   v )   ->   v   *   v ); \n  (#__codelineno-8-10)      -- {1 -> 1, 4 -> 2, 9 -> 3} \n  (#__codelineno-8-11) \n  (#__codelineno-8-12)      SELECT   transform_keys ( MAP ( ARRAY   [ 'a' ,   'b' ],   ARRAY   [ 1 ,   2 ]), \n  (#__codelineno-8-13)                            ( k ,   v )   ->   k   ||   CAST ( v   as   VARCHAR )); \n  (#__codelineno-8-14)      -- {a1 -> 1, b2 -> 2} \n  (#__codelineno-8-15) \n  (#__codelineno-8-16)      SELECT   transform_keys ( MAP ( ARRAY   [ 1 ,   2 ],   ARRAY   [ 1 . 0 ,   1 . 4 ]), \n  (#__codelineno-8-17)                            ( k ,   v )   ->   MAP ( ARRAY [ 1 ,   2 ],   ARRAY [ 'one' ,   'two' ])[ k ]); \n  (#__codelineno-8-18)      -- {one -> 1.0, two -> 1.4} \n \n transform_values() \u00b6  (#transform_values) \n transform_values(map(K,V1), function(K,V1,V2))  \u2192 map(K,V2) \n Returns a map that applies  function  to each entry of  map  and\ntransforms the values:\n  (#__codelineno-9-1)      SELECT   transform_values ( MAP ( ARRAY [],   ARRAY []),   ( k ,   v )   ->   v   +   1 ); \n  (#__codelineno-9-2)      -- {} \n  (#__codelineno-9-3) \n  (#__codelineno-9-4)      SELECT   transform_values ( MAP ( ARRAY   [ 1 ,   2 ,   3 ],   ARRAY   [ 10 ,   20 ,   30 ]), \n  (#__codelineno-9-5)                              ( k ,   v )   ->   v   +   k ); \n  (#__codelineno-9-6)      -- {1 -> 11, 2 -> 22, 3 -> 33} \n  (#__codelineno-9-7) \n  (#__codelineno-9-8)      SELECT   transform_values ( MAP ( ARRAY   [ 1 ,   2 ,   3 ],   ARRAY   [ 'a' ,   'b' ,   'c' ]), \n  (#__codelineno-9-9)                              ( k ,   v )   ->   k   *   k ); \n  (#__codelineno-9-10)      -- {1 -> 1, 2 -> 4, 3 -> 9} \n  (#__codelineno-9-11) \n  (#__codelineno-9-12)      SELECT   transform_values ( MAP ( ARRAY   [ 'a' ,   'b' ],   ARRAY   [ 1 ,   2 ]), \n  (#__codelineno-9-13)                              ( k ,   v )   ->   k   ||   CAST ( v   as   VARCHAR )); \n  (#__codelineno-9-14)      -- {a -> a1, b -> b2} \n  (#__codelineno-9-15) \n  (#__codelineno-9-16)      SELECT   transform_values ( MAP ( ARRAY   [ 1 ,   2 ],   ARRAY   [ 1 . 0 ,   1 . 4 ]), \n  (#__codelineno-9-17)                              ( k ,   v )   ->   MAP ( ARRAY [ 1 ,   2 ],   ARRAY [ 'one' ,   'two' ])[ k ] \n  (#__codelineno-9-18)                                ||   '_'   ||   CAST ( v   AS   VARCHAR )); \n  (#__codelineno-9-19)      -- {1 -> one_1.0, 2 -> two_1.4}", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/map/#map-functions"}
{"content": "Logical operators \u00b6 \n \n \n \n Operator \n Description \n Example \n \n \n \n \n AND \n True if both values are true \n a AND b \n \n \n OR \n True if either value is true \n a OR b \n \n \n NOT \n True if the value is false \n NOT a \n \n \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/logical/#logical-operators"}
{"content": "Effect of NULL on logical operators \u00b6 \n The result of an  AND  comparison may be  NULL  if one or both sides of\nthe expression are  NULL . If at least one side of an  AND  operator is\n FALSE  the expression evaluates to  FALSE :\n  (#__codelineno-0-1)      SELECT   CAST ( null   AS   boolean )   AND   true ;   -- null \n  (#__codelineno-0-2) \n  (#__codelineno-0-3)      SELECT   CAST ( null   AS   boolean )   AND   false ;   -- false \n  (#__codelineno-0-4) \n  (#__codelineno-0-5)      SELECT   CAST ( null   AS   boolean )   AND   CAST ( null   AS   boolean );   -- null \n \nThe result of an  OR  comparison may be  NULL  if one or both sides of\nthe expression are  NULL . If at least one side of an  OR  operator is\n TRUE  the expression evaluates to  TRUE :\n  (#__codelineno-1-1)      SELECT   CAST ( null   AS   boolean )   OR   CAST ( null   AS   boolean );   -- null \n  (#__codelineno-1-2) \n  (#__codelineno-1-3)      SELECT   CAST ( null   AS   boolean )   OR   false ;   -- null \n  (#__codelineno-1-4) \n  (#__codelineno-1-5)      SELECT   CAST ( null   AS   boolean )   OR   true ;   -- true \n \n The following truth table demonstrates the handling of  NULL  in  AND \nand  OR : \n \n \n \n a \n b \n a AND b \n a OR b \n \n \n \n \n TRUE \n TRUE \n TRUE \n TRUE \n \n \n TRUE \n FALSE \n FALSE \n TRUE \n \n \n TRUE \n NULL \n NULL \n TRUE \n \n \n FALSE \n TRUE \n FALSE \n TRUE \n \n \n FALSE \n FALSE \n FALSE \n FALSE \n \n \n FALSE \n NULL \n FALSE \n NULL \n \n \n NULL \n TRUE \n NULL \n TRUE \n \n \n NULL \n FALSE \n FALSE \n NULL \n \n \n NULL \n NULL \n NULL \n NULL \n \n \n \n The logical complement of  NULL  is  NULL  as shown in the following\nexample:\n  (#__codelineno-2-1)      SELECT   NOT   CAST ( null   AS   boolean );   -- null \n \nThe following truth table demonstrates the handling of  NULL  in  NOT :\n \n \n \n a \n NOT a \n \n \n \n \n TRUE \n FALSE \n \n \n FALSE \n TRUE \n \n \n NULL \n NULL", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/logical/#effect-of-null-on-logical-operators"}
{"content": "# \u00b6 \n \n [] substring operator <subscript_operator> {.interpreted-text\n    role=\"ref\"} \n || concatenation operator <concatenation_operator> {.interpreted-text\n    role=\"ref\"} \n \\< comparison operator <comparison_operators> {.interpreted-text\n    role=\"ref\"} \n \\> comparison operator <comparison_operators> {.interpreted-text\n    role=\"ref\"} \n <= comparison operator <comparison_operators> {.interpreted-text\n    role=\"ref\"} \n >= comparison operator <comparison_operators> {.interpreted-text\n    role=\"ref\"} \n = comparison operator <comparison_operators> {.interpreted-text\n    role=\"ref\"} \n <> comparison operator <comparison_operators> {.interpreted-text\n    role=\"ref\"} \n \\!= comparison operator <comparison_operators> {.interpreted-text\n    role=\"ref\"} \n -> lambda expression <lambda_expressions> {.interpreted-text\n    role=\"ref\"} \n + mathematical operator <mathematical_operators> {.interpreted-text\n    role=\"ref\"} \n - mathematical operator <mathematical_operators> {.interpreted-text\n    role=\"ref\"} \n * mathematical operator <mathematical_operators> {.interpreted-text\n    role=\"ref\"} \n / mathematical operator <mathematical_operators> {.interpreted-text\n    role=\"ref\"} \n % mathematical operator <mathematical_operators> {.interpreted-text\n    role=\"ref\"} \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list/#_1"}
{"content": "A \u00b6 \n \n abs \n acos \n ALL <quantified_comparison_predicates> {.interpreted-text\n    role=\"ref\"} \n all_match \n AND <logical_operators> \n ANY <quantified_comparison_predicates> {.interpreted-text\n    role=\"ref\"} \n any_match \n approx_distinct \n approx_most_frequent \n approx_percentile \n approx_set \n arbitrary \n array_agg \n array_distinct \n array_except \n array_intersect \n array_join \n array_max \n array_min \n array_position \n array_remove \n array_sort \n array_union \n arrays_overlap \n asin \n AT TIME ZONE <at_time_zone_operator> \n at_timezone \n atan \n atan2 \n avg \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list/#a"}
{"content": "B \u00b6 \n \n bar \n beta_cdf \n BETWEEN <range_operator> \n bing_tile \n bing_tile_at \n bing_tile_coordinates \n bing_tile_polygon \n bing_tile_quadkey \n bing_tile_zoom_level \n bing_tiles_around \n bit_count \n bitwise_and \n bitwise_and_agg \n bitwise_left_shift \n bitwise_not \n bitwise_or \n bitwise_or_agg \n bitwise_right_shift \n bitwise_right_shift_arithmetic \n bitwise_xor \n bool_and \n bool_or \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list/#b"}
{"content": "C \u00b6 \n \n cardinality \n CASE <case_expression> \n cast \n cbrt \n ceil \n ceiling \n char2hexint \n checksum \n chr \n classify \n coalesce <coalesce_function> \n codepoint \n color \n combinations \n concat \n concat_ws \n contains \n contains_sequence \n convex_hull_agg \n corr \n cos \n cosh \n cosine_similarity \n count \n count_if \n covar_pop \n covar_samp \n crc32 \n cume_dist \n current_date \n current_groups \n current_time \n current_timestamp \n current_timezone \n current_user \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list/#c"}
{"content": "D \u00b6 \n \n date \n date_add \n date_diff \n date_format \n date_parse \n date_trunc \n day \n day_of_month \n day_of_week \n day_of_year \n DECIMAL <decimal_literal> \n degrees \n dense_rank \n dow \n doy \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list/#d"}
{"content": "E \u00b6 \n \n e \n element_at \n empty_approx_set \n evaluate_classifier_predictions \n every \n extract \n exp \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list/#e"}
{"content": "F \u00b6 \n \n features \n filter \n f_value \n flatten \n floor \n format \n format_datetime \n format_number \n from_base \n from_base32 \n from_base64 \n from_base64url \n from_big_endian_32 \n from_big_endian_64 \n from_encoded_polyline \n from_geojson_geometry \n from_hex \n from_ieee754_32 \n from_ieee754_64 \n from_iso8601_date \n from_iso8601_timestamp \n from_iso8601_timestamp_nanos \n from_unixtime \n from_unixtime_nanos \n from_utf8 \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list/#f"}
{"content": "G \u00b6 \n \n geometric_mean \n geometry_from_hadoop_shape \n geometry_invalid_reason \n geometry_nearest_points \n geometry_to_bing_tiles \n geometry_union \n geometry_union_agg \n great_circle_distance \n greatest \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list/#g"}
{"content": "H \u00b6 \n \n hamming_distance \n hash_counts \n histogram \n hmac_md5 \n hmac_sha1 \n hmac_sha256 \n hmac_sha512 \n hour \n human_readable_seconds \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list/#h"}
{"content": "I \u00b6 \n \n if <if_function> \n index \n infinity \n intersection_cardinality \n inverse_beta_cdf \n inverse_normal_cdf \n is_finite \n is_infinite \n is_json_scalar \n is_nan \n IS NOT DISTINCT <is_distinct_operator> {.interpreted-text\n    role=\"ref\"} \n IS NOT NULL <is_null_operator> \n IS DISTINCT <is_distinct_operator> \n IS NULL <is_null_operator> \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list/#i"}
{"content": "J \u00b6 \n \n jaccard_index \n json_array() <json_array> \n json_array_contains \n json_array_get \n json_array_length \n json_exists() <json_exists> \n json_extract \n json_extract_scalar \n json_format \n json_object() <json_object> \n json_parse \n json_query() <json_query> \n json_size \n json_value() <json_value> \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list/#j"}
{"content": "K \u00b6 \n \n kurtosis \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list/#k"}
{"content": "L \u00b6 \n \n lag \n last_day_of_month \n last_value \n lead \n learn_classifier \n learn_libsvm_classifier \n learn_libsvm_regressor \n learn_regressor \n least \n length \n levenshtein_distance \n line_interpolate_point \n line_interpolate_points \n line_locate_point \n listagg \n ln \n localtime \n localtimestamp \n log \n log10 \n log2 \n lower \n lpad \n ltrim \n luhn_check \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list/#l"}
{"content": "M \u00b6 \n \n make_set_digest \n map \n map_agg \n map_concat \n map_entries \n map_filter \n map_from_entries \n map_keys \n map_union \n map_values \n map_zip_with \n max \n max_by \n md5 \n merge \n merge_set_digest \n millisecond \n min \n min_by \n minute \n mod \n month \n multimap_agg \n multimap_from_entries \n murmur3 \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list/#m"}
{"content": "N \u00b6 \n \n nan \n ngrams \n none_match \n normal_cdf \n normalize \n NOT <logical_operators> \n NOT BETWEEN <range_operator> \n now \n nth_value \n ntile \n nullif <nullif_function> \n numeric_histogram \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list/#n"}
{"content": "O \u00b6 \n \n objectid \n objectid_timestamp \n OR <logical_operators> \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list/#o"}
{"content": "P \u00b6 \n \n parse_datetime \n parse_duration \n parse_data_size \n percent_rank \n pi \n position \n pow \n power \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list/#p"}
{"content": "Q \u00b6 \n \n qdigest_agg \n quarter \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list/#q"}
{"content": "R \u00b6 \n \n radians \n rand \n random \n rank \n reduce \n reduce_agg \n regexp_count \n regexp_extract \n regexp_extract_all \n regexp_like \n regexp_position \n regexp_replace \n regexp_split \n regress \n regr_intercept \n regr_slope \n render \n repeat \n replace \n reverse \n rgb \n round \n row_number \n rpad \n rtrim \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list/#r"}
{"content": "S \u00b6 \n \n second \n sequence \n sha1 \n sha256 \n sha512 \n shuffle \n sign \n simplify_geometry \n sin \n skewness \n slice \n SOME <quantified_comparison_predicates> {.interpreted-text\n    role=\"ref\"} \n soundex \n spatial_partitioning \n spatial_partitions \n split \n split_part \n split_to_map \n split_to_multimap \n spooky_hash_v2_32 \n spooky_hash_v2_64 \n sqrt \n ST_Area \n ST_AsBinary \n ST_AsText \n ST_Boundary \n ST_Buffer \n ST_Centroid \n ST_Contains \n ST_ConvexHull \n ST_CoordDim \n ST_Crosses \n ST_Difference \n ST_Dimension \n ST_Disjoint \n ST_Distance \n ST_EndPoint \n ST_Envelope \n ST_EnvelopeAsPts \n ST_Equals \n ST_ExteriorRing \n ST_Geometries \n ST_GeometryFromText \n ST_GeometryN \n ST_GeometryType \n ST_GeomFromBinary \n ST_InteriorRingN \n ST_InteriorRings \n ST_Intersection \n ST_Intersects \n ST_IsClosed \n ST_IsEmpty \n ST_IsRing \n ST_IsSimple \n ST_IsValid \n ST_Length \n ST_LineFromText \n ST_LineString \n ST_MultiPoint \n ST_NumGeometries \n ST_NumInteriorRing \n ST_NumPoints \n ST_Overlaps \n ST_Point \n ST_PointN \n ST_Points \n ST_Polygon \n ST_Relate \n ST_StartPoint \n ST_SymDifference \n ST_Touches \n ST_Union \n ST_Within \n ST_X \n ST_XMax \n ST_XMin \n ST_Y \n ST_YMax \n ST_YMin \n starts_with \n stddev \n stddev_pop \n stddev_samp \n strpos \n substr \n substring \n sum \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list/#s"}
{"content": "T \u00b6 \n \n tan \n tanh \n tdigest_agg \n timestamp_objectid \n timezone_hour \n timezone_minute \n to_base \n to_base32 \n to_base64 \n to_base64url \n to_big_endian_32 \n to_big_endian_64 \n to_char \n to_date \n to_encoded_polyline \n to_geojson_geometry \n to_geometry \n to_hex \n to_ieee754_32 \n to_ieee754_64 \n to_iso8601 \n to_milliseconds \n to_spherical_geography \n to_timestamp \n to_unixtime \n to_utf8 \n transform \n transform_keys \n transform_values \n translate \n trim \n trim_array \n truncate \n try <try_function> \n try_cast \n typeof \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list/#t"}
{"content": "U \u00b6 \n \n upper \n url_decode \n url_encode \n url_extract_fragment \n url_extract_host \n url_extract_parameter \n url_extract_path \n url_extract_protocol \n url_extract_port \n url_extract_query \n uuid \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list/#u"}
{"content": "V \u00b6 \n \n value_at_quantile \n values_at_quantiles \n var_pop \n var_samp \n variance \n version \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list/#v"}
{"content": "W \u00b6 \n \n week \n week_of_year \n width_bucket \n wilson_interval_lower \n wilson_interval_upper \n with_timezone \n word_stem \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list/#w"}
{"content": "X \u00b6 \n \n xxhash64 \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list/#x"}
{"content": "Y \u00b6 \n \n year \n year_of_week \n yow \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list/#y"}
{"content": "Aggregate \u00b6 \n For more details, see  aggregate \n \n approx_distinct \n approx_most_frequent \n approx_percentile \n approx_set() \n arbitrary \n array_agg \n avg \n bitwise_and_agg \n bitwise_or_agg \n bool_and \n bool_or \n checksum \n corr \n count \n count_if \n covar_pop \n covar_samp \n every \n geometric_mean \n histogram \n kurtosis \n map_agg \n map_union \n max \n max_by \n merge() \n min \n min_by \n multimap_agg \n numeric_histogram \n qdigest_agg() \n regr_intercept \n regr_slope \n skewness \n sum \n stddev \n stddev_pop \n stddev_samp \n tdigest_agg() \n variance \n var_pop \n var_samp \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list-by-topic/#aggregate"}
{"content": "Array \u00b6 \n For more details, see  array \n \n all_match \n any_match \n array_distinct \n array_except \n array_intersect \n array_join \n array_max \n array_min \n array_position \n array_remove \n array_sort \n array_union \n arrays_overlap \n cardinality \n combinations \n concat() \n contains \n element_at \n filter \n flatten \n ngrams \n none_match \n reduce \n repeat \n reverse() \n sequence \n shuffle \n slice \n transform \n trim_array \n zip \n zip_with \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list-by-topic/#array"}
{"content": "Binary \u00b6 \n For more details, see  binary \n \n concat() \n crc32 \n from_base32 \n from_base64 \n from_base64url \n from_big_endian_32 \n from_big_endian_64 \n from_hex \n from_ieee754_32 \n from_ieee754_64 \n hmac_md5 \n hmac_sha1 \n hmac_sha256 \n hmac_sha512 \n length() \n lpad() \n md5 \n murmur3 \n reverse() \n rpad() \n sha1 \n sha256 \n sha512 \n spooky_hash_v2_32 \n spooky_hash_v2_64 \n substr() \n to_base32 \n to_base64 \n to_base64url \n to_big_endian_32 \n to_big_endian_64 \n to_hex \n to_ieee754_32 \n to_ieee754_64 \n xxhash64 \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list-by-topic/#binary"}
{"content": "Bitwise \u00b6 \n For more details, see  bitwise \n \n bit_count \n bitwise_and \n bitwise_left_shift \n bitwise_not \n bitwise_or \n bitwise_right_shift \n bitwise_right_shift_arithmetic \n bitwise_xor \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list-by-topic/#bitwise"}
{"content": "Color \u00b6 \n For more details, see  color \n \n bar \n color \n render \n rgb \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list-by-topic/#color"}
{"content": "Comparison \u00b6 \n For more details, see  comparison \n \n greatest \n least \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list-by-topic/#comparison"}
{"content": "Conditional \u00b6 \n For more details, see  conditional \n \n coalesce <coalesce_function> \n if <if_function> \n nullif <nullif_function> \n try <try_function> \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list-by-topic/#conditional"}
{"content": "Conversion \u00b6 \n For more details, see  conversion \n \n cast \n format \n try_cast \n typeof \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list-by-topic/#conversion"}
{"content": "Date and time \u00b6 \n For more details, see  datetime \n \n AT TIME ZONE <at_time_zone_operator> \n current_date \n current_time \n current_timestamp \n localtime \n localtimestamp \n current_timezone \n date \n date_add \n date_diff \n date_format \n date_parse \n date_trunc \n format_datetime \n from_iso8601_date \n from_iso8601_timestamp \n from_unixtime \n from_unixtime_nanos \n human_readable_seconds \n last_day_of_month \n now \n parse_duration \n to_iso8601 \n to_milliseconds \n to_unixtime \n with_timezone \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list-by-topic/#date-and-time"}
{"content": "Geospatial \u00b6 \n For more details, see  geospatial \n \n bing_tile \n bing_tile_at \n bing_tile_coordinates \n bing_tile_polygon \n bing_tile_quadkey \n bing_tile_zoom_level \n bing_tiles_around \n convex_hull_agg \n from_encoded_polyline \n from_geojson_geometry \n geometry_from_hadoop_shape \n geometry_invalid_reason \n geometry_nearest_points \n geometry_to_bing_tiles \n geometry_union \n geometry_union_agg \n great_circle_distance \n line_interpolate_point \n line_locate_point \n simplify_geometry \n ST_Area \n ST_AsBinary \n ST_AsText \n ST_Boundary \n ST_Buffer \n ST_Centroid \n ST_Contains \n ST_ConvexHull \n ST_CoordDim \n ST_Crosses \n ST_Difference \n ST_Dimension \n ST_Disjoint \n ST_Distance \n ST_EndPoint \n ST_Envelope \n ST_Equals \n ST_ExteriorRing \n ST_Geometries \n ST_GeometryFromText \n ST_GeometryN \n ST_GeometryType \n ST_GeomFromBinary \n ST_InteriorRings \n ST_InteriorRingN \n ST_Intersects \n ST_Intersection \n ST_IsClosed \n ST_IsEmpty \n ST_IsSimple \n ST_IsRing \n ST_IsValid \n ST_Length \n ST_LineFromText \n ST_LineString \n ST_MultiPoint \n ST_NumGeometries \n ST_NumInteriorRing \n ST_NumPoints \n ST_Overlaps \n ST_Point \n ST_PointN \n ST_Points \n ST_Polygon \n ST_Relate \n ST_StartPoint \n ST_SymDifference \n ST_Touches \n ST_Union \n ST_Within \n ST_X \n ST_XMax \n ST_XMin \n ST_Y \n ST_YMax \n ST_YMin \n to_encoded_polyline \n to_geojson_geometry \n to_geometry \n to_spherical_geography \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list-by-topic/#geospatial"}
{"content": "HyperLogLog \u00b6 \n For more details, see  hyperloglog \n \n approx_set \n cardinality() \n empty_approx_set \n merge \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list-by-topic/#hyperloglog"}
{"content": "JSON \u00b6 \n For more details, see  json \n \n is_json_scalar \n json_array() <json_array> \n json_array_contains \n json_array_get \n json_array_length \n json_exists() <json_exists> \n json_extract \n json_extract_scalar \n json_format \n json_parse \n json_object() <json_object> \n json_query() <json_query> \n json_size \n json_value() <json_value> \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list-by-topic/#json"}
{"content": "Lambda \u00b6 \n For more details, see  lambda \n \n any_match \n reduce_agg \n regexp_replace \n transform \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list-by-topic/#lambda"}
{"content": "Machine learning \u00b6 \n For more details, see  ml \n \n classify \n features \n learn_classifier \n learn_libsvm_classifier \n learn_libsvm_regressor \n learn_regressor \n regress \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list-by-topic/#machine-learning"}
{"content": "Map \u00b6 \n For more details, see  map \n \n cardinality \n element_at \n map \n map_concat \n map_entries \n map_filter \n map_from_entries \n map_keys \n map_values \n map_zip_with \n multimap_from_entries \n transform_keys \n transform_values \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list-by-topic/#map"}
{"content": "Math \u00b6 \n For more details, see  math \n \n abs \n acos \n asin \n atan \n beta_cdf \n cbrt \n ceil \n cos \n cosh \n cosine_similarity \n degrees \n e \n exp \n floor \n from_base \n infinity \n inverse_beta_cdf \n inverse_normal_cdf \n is_finite \n is_nan \n ln \n log \n log2 \n log10 \n mod \n nan \n normal_cdf \n pi \n pow \n power \n radians \n rand \n random \n round \n sign \n sin \n sqrt \n tan \n tanh \n to_base \n truncate \n width_bucket \n wilson_interval_lower \n wilson_interval_upper \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list-by-topic/#math"}
{"content": "Quantile digest \u00b6 \n For more details, see  qdigest \n \n merge() \n qdigest_agg \n value_at_quantile \n values_at_quantiles \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list-by-topic/#quantile-digest"}
{"content": "Regular expression \u00b6 \n For more details, see  regexp \n \n regexp_count \n regexp_extract \n regexp_extract_all \n regexp_like \n regexp_position \n regexp_replace \n regexp_split \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list-by-topic/#regular-expression"}
{"content": "Session \u00b6 \n For more details, see  session \n \n current_catalog \n current_groups \n current_schema \n current_user \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list-by-topic/#session"}
{"content": "Limitations \u00b6 \n Most SQL expressions can be used in a lambda body, with a few\nexceptions: \n \n Subqueries are not supported:  x -> 2 + (SELECT 3) \n Aggregations are not supported:  x -> max(y) \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/lambda/#limitations"}
{"content": "Examples \u00b6 \n Obtain the squared elements of an array column with\n transform :\n  (#__codelineno-1-1)      SELECT   numbers , \n  (#__codelineno-1-2)             transform ( numbers ,   n   ->   n   *   n )   as   squared_numbers \n  (#__codelineno-1-3)      FROM   ( \n  (#__codelineno-1-4)          VALUES \n  (#__codelineno-1-5)              ( ARRAY [ 1 ,   2 ]), \n  (#__codelineno-1-6)              ( ARRAY [ 3 ,   4 ]), \n  (#__codelineno-1-7)              ( ARRAY [ 5 ,   6 ,   7 ]) \n  (#__codelineno-1-8)      )   AS   t ( numbers ); \n \n Results :  \n \n \n \n numbers \n squared_numbers \n \n \n \n \n [1, 2] \n [1, 4] \n \n \n [3, 4] \n [9, 16] \n \n \n [5, 6, 7] \n [25, 36, 49] \n \n \n \n The function  transform  can be also\nemployed to safely cast the elements of an array to strings:\n  (#__codelineno-2-1)      SELECT   transform ( prices ,   n   ->   TRY_CAST ( n   AS   VARCHAR )   ||   '$' )   as   price_tags \n  (#__codelineno-2-2)      FROM   ( \n  (#__codelineno-2-3)          VALUES \n  (#__codelineno-2-4)              ( ARRAY [ 100 ,   200 ]), \n  (#__codelineno-2-5)              ( ARRAY [ 30 ,   4 ]) \n  (#__codelineno-2-6)      )   AS   t ( prices ); \n \n Results : \n \n \n \n price_tags \n \n \n \n \n [100 , 200 ] \n \n \n [30 , 4 ] \n \n \n \n Besides the array column being manipulated, other columns can be\ncaptured as well within the lambda expression. The following statement\nprovides a showcase of this feature for calculating the value of the\nlinear function  f(x) = ax + b  with  transform :\n  (#__codelineno-3-1)      SELECT   xvalues , \n  (#__codelineno-3-2)             a , \n  (#__codelineno-3-3)             b , \n  (#__codelineno-3-4)             transform ( xvalues ,   x   ->   a   *   x   +   b )   as   linear_function_values \n  (#__codelineno-3-5)      FROM   ( \n  (#__codelineno-3-6)          VALUES \n  (#__codelineno-3-7)              ( ARRAY [ 1 ,   2 ],   10 ,   5 ), \n  (#__codelineno-3-8)              ( ARRAY [ 3 ,   4 ],   4 ,   2 ) \n  (#__codelineno-3-9)      )   AS   t ( xvalues ,   a ,   b ); \n \n Results : \n \n \n \n xvalues \n a \n b \n linear_function_values \n \n \n \n \n [1, 2] \n 10 \n 5 \n [15, 25] \n \n \n [3, 4] \n 4 \n 2 \n [14, 18] \n \n \n \n Find the array elements containing at least one value greater than  100 \nwith  any_match :\n  (#__codelineno-4-1)      SELECT   numbers \n  (#__codelineno-4-2)      FROM   ( \n  (#__codelineno-4-3)          VALUES \n  (#__codelineno-4-4)              ( ARRAY [ 1 , NULL , 3 ]), \n  (#__codelineno-4-5)              ( ARRAY [ 10 , 20 , 30 ]), \n  (#__codelineno-4-6)              ( ARRAY [ 100 , 200 , 300 ]) \n  (#__codelineno-4-7)      )   AS   t ( numbers ) \n  (#__codelineno-4-8)      WHERE   any_match ( numbers ,   n   ->    COALESCE ( n ,   0 )   >   100 ); \n  (#__codelineno-4-9)      -- [100, 200, 300] \n \nCapitalize the f word in a string via  regexp_replace :\n  (#__codelineno-5-1)      SELECT   regexp_replace ( 'once upon a time ...' ,   '^(\\w)(\\w*)(\\s+.*)$' , x   ->   upper ( x [ 1 ])   ||   x [ 2 ]   ||   x [ 3 ]); \n  (#__codelineno-5-2)      -- Once upon a time ... \n \n Lambda expressions can be also applied in aggregation functions.\nFollowing statement is a sample the overly complex calculation of the\nsum of all elements of a column by making use of  reduce_agg :\n  (#__codelineno-6-1)      SELECT   reduce_agg ( value ,   0 ,   ( a ,   b )   ->   a   +   b ,   ( a ,   b )   ->   a   +   b )   sum_values \n  (#__codelineno-6-2)      FROM   ( \n  (#__codelineno-6-3)          VALUES   ( 1 ),   ( 2 ),   ( 3 ),   ( 4 ),   ( 5 ) \n  (#__codelineno-6-4)      )   AS   t ( value ); \n  (#__codelineno-6-5)      -- 15", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/lambda/#examples"}
{"content": "JSON path language \u00b6 \n The JSON path language is a special language, used exclusively by\ncertain SQL operators to specify the query to perform on the JSON input.\nAlthough JSON path expressions are embedded in SQL queries, their syntax\nsignificantly differs from SQL. The semantics of predicates, operators,\netc. in JSON path expressions generally follow the semantics of SQL. The\nJSON path language is case-sensitive for keywords and identifiers. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/json/#json-path-language"}
{"content": "JSON path syntax and semantics \u00b6 \n JSON path expressions are recursive structures. Although the name\n\"path\" suggests a linear sequence of operations going step by step\ndeeper into the JSON structure, a JSON path expression is in fact a\ntree. It can access the input JSON item multiple times, in multiple\nways, and combine the results. Moreover, the result of a JSON path\nexpression is not a single item, but an ordered sequence of items. Each\nof the sub-expressions takes one or more input sequences, and returns a\nsequence as the result. \n \n Note \n In the lax mode, most path operations f unnest all JSON arrays in\nthe input sequence. Any divergence from this rule is mentioned in the\nfollowing listing. Path modes are explained in\n json_path_modes  (#json_path_modes) . \n \n The JSON path language features are divided into: literals, variables,\narithmetic binary expressions, arithmetic unary expressions, and a group\nof operators collectively known as accessors. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/json/#json_path_syntax_and_semantics"}
{"content": "literals \u00b6 \n \n \n numeric literals \n They include exact and approximate numbers, and are interpreted as\nif they were SQL values. \n \n \n  (#__codelineno-0-1) -1, 1.2e3, NaN\n \n \n \n string literals \n They are enclosed in double quotes. \n \n \n  (#__codelineno-1-1) \"Some text\"\n \n \n boolean literals \n \n  (#__codelineno-2-1) true, false\n \n \n \n null literal \n It has the semantics of the JSON null, not of SQL null. See\n json_comparison_rules . \n \n \n  (#__codelineno-3-1) null\n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/json/#literals"}
{"content": "variables \u00b6 \n \n \n context variable \n It refers to the currently processed input of the JSON function. \n \n \n  (#__codelineno-4-1) $\n \n \n \n named variable \n It refers to a named parameter by its name. \n \n \n  (#__codelineno-5-1) $param\n \n \n \n current item variable \n It is used inside the filter expression to refer to the currently\nprocessed item from the input sequence. \n \n \n  (#__codelineno-6-1) @\n \n \n \n last subscript variable \n It refers to the last index of the innermost enclosing array. Array\nindexes in JSON path expressions are zero-based. \n \n \n  (#__codelineno-7-1) last\n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/json/#variables"}
{"content": "arithmetic binary expressions \u00b6 \n The JSON path language supports five arithmetic binary operators: \n  (#__codelineno-8-1) <path1> + <path2>\n  (#__codelineno-8-2) <path1> - <path2>\n  (#__codelineno-8-3) <path1> * <path2>\n  (#__codelineno-8-4) <path1> / <path2>\n  (#__codelineno-8-5) <path1> % <path2>\n \n Both operands,  <path1>  and  <path2> , are evaluated to sequences of\nitems. For arithmetic binary operators, each input sequence must contain\na single numeric item. The arithmetic operation is performed according\nto SQL semantics, and it returns a sequence containing a single element\nwith the result. \n The operators follow the same precedence rules as in SQL arithmetic\noperations, and parentheses can be used for grouping. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/json/#arithmetic-binary-expressions"}
{"content": "arithmetic unary expressions \u00b6 \n  (#__codelineno-9-1) + <path>\n  (#__codelineno-9-2) - <path>\n \n The operand  <path>  is evaluated to a sequence of items. Every item\nmust be a numeric value. The unary plus or minus is applied to every\nitem in the sequence, following SQL semantics, and the results form the\nreturned sequence. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/json/#arithmetic-unary-expressions"}
{"content": "member accessor \u00b6 \n The member accessor returns the value of the member with the specified\nkey for each JSON object in the input sequence. \n  (#__codelineno-10-1) <path>.key\n  (#__codelineno-10-2) <path>.\"key\"\n \n The condition when a JSON object does not have such a member is called a\nstructural error. In the lax mode, it is suppressed, and the faulty\nobject is excluded from the result. \n Let  <path>  return a sequence of three JSON objects: \n  (#__codelineno-11-1) {\"customer\" : 100, \"region\" : \"AFRICA\"},\n  (#__codelineno-11-2) {\"region\" : \"ASIA\"},\n  (#__codelineno-11-3) {\"customer\" : 300, \"region\" : \"AFRICA\", \"comment\" : null}\n \n the expression  <path>.customer  succeeds in the f and the third\nobject, but the second object lacks the required member. In strict mode,\npath evaluation fails. In lax mode, the second object is silently\nskipped, and the resulting sequence is  100, 300 . \n All items in the input sequence must be JSON objects. \n \n Note \n Trino does not support JSON objects with duplicate keys. \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/json/#member-accessor"}
{"content": "wildcard member accessor \u00b6 \n Returns values from all key-value pairs for each JSON object in the\ninput sequence. All the partial results are concatenated into the\nreturned sequence. \n  (#__codelineno-12-1) <path>.*\n \n Let  <path>  return a sequence of three JSON objects: \n  (#__codelineno-13-1) {\"customer\" : 100, \"region\" : \"AFRICA\"},\n  (#__codelineno-13-2) {\"region\" : \"ASIA\"},\n  (#__codelineno-13-3) {\"customer\" : 300, \"region\" : \"AFRICA\", \"comment\" : null}\n \n The results is: \n  (#__codelineno-14-1) 100, \"AFRICA\", \"ASIA\", 300, \"AFRICA\", null\n \n All items in the input sequence must be JSON objects. \n The order of values returned from a single JSON object is arbitrary. The\nsub-sequences from all JSON objects are concatenated in the same order\nin which the JSON objects appear in the input sequence. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/json/#wildcard-member-accessor"}
{"content": "descendant member accessor \u00b6 \n Returns the values associated with the specified key in all JSON objects on all\nlevels of nesting in the input sequence. \n  (#__codelineno-15-1)     <path>..key\n  (#__codelineno-15-2)     <path>..\"key\"\n \n The order of returned values is that of preorder depth first search. First, the\nenclosing object is visited, and then all child nodes are visited. \n This method does not perform array unwrapping in the lax mode. The results\nare the same in the lax and strict modes. The method traverses into JSON\narrays and JSON objects. Non-structural JSON items are skipped. \n Let  <path>  be a sequence containing a JSON object: \n  (#__codelineno-16-1)     {\n  (#__codelineno-16-2)         \"id\" : 1,\n  (#__codelineno-16-3)         \"notes\" : [{\"type\" : 1, \"comment\" : \"foo\"}, {\"type\" : 2, \"comment\" : null}],\n  (#__codelineno-16-4)         \"comment\" : [\"bar\", \"baz\"]\n  (#__codelineno-16-5)     }\n \n  (#__codelineno-17-1)     <path>..comment --> [\"bar\", \"baz\"], \"foo\", null\n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/json/#descendant-member-accessor"}
{"content": "array accessor \u00b6 \n Returns the elements at the specified indexes for each JSON array in the\ninput sequence. Indexes are zero-based. \n  (#__codelineno-18-1) <path>[ <subscripts> ]\n \n The  <subscripts>  list contains one or more subscripts. Each subscript\nspecifies a single index or a range (ends inclusive): \n  (#__codelineno-19-1) <path>[<path1>, <path2> to <path3>, <path4>,...]\n \n In lax mode, any non-array items resulting from the evaluation of the\ninput sequence are wrapped into single-element arrays. Note that this is\nan exception to the rule of automatic array wrapping. \n Each array in the input sequence is processed in the following way: \n \n The variable  last  is set to the last index of the array. \n All subscript indexes are computed in order of declaration. For a\n    singleton subscript  <path1> , the result must be a singleton\n    numeric item. For a range subscript  <path2> to <path3> , two\n    numeric items are expected. \n The specified array elements are added in order to the output\n    sequence. \n \n Let  <path>  return a sequence of three JSON arrays: \n  (#__codelineno-20-1) [0, 1, 2], [\"a\", \"b\", \"c\", \"d\"], [null, null]\n \n The following expression returns a sequence containing the last element\nfrom every array: \n  (#__codelineno-21-1) <path>[last] --> 2, \"d\", null\n \n The following expression returns the third and fourth element from every\narray: \n  (#__codelineno-22-1) <path>[2 to 3] --> 2, \"c\", \"d\"\n \n Note that the f array does not have the fourth element, and the last\narray does not have the third or fourth element. Accessing non-existent\nelements is a structural error. In strict mode, it causes the path\nexpression to fail. In lax mode, such errors are suppressed, and only\nthe existing elements are returned. \n Another example of a structural error is an improper range specification\nsuch as  5 to 3 . \n Note that the subscripts may overlap, and they do not need to follow the\nelement order. The order in the returned sequence follows the\nsubscripts: \n  (#__codelineno-23-1) <path>[1, 0, 0] --> 1, 0, 0, \"b\", \"a\", \"a\", null, null, null\n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/json/#array-accessor"}
{"content": "wildcard array accessor \u00b6 \n Returns all elements of each JSON array in the input sequence. \n  (#__codelineno-24-1) <path>[*]\n \n In lax mode, any non-array items resulting from the evaluation of the\ninput sequence are wrapped into single-element arrays. Note that this is\nan exception to the rule of automatic array wrapping. \n The output order follows the order of the original JSON arrays. Also,\nthe order of elements within the arrays is preserved. \n Let  <path>  return a sequence of three JSON arrays: \n  (#__codelineno-25-1) [0, 1, 2], [\"a\", \"b\", \"c\", \"d\"], [null, null]\n  (#__codelineno-25-2) <path>[*] --> 0, 1, 2, \"a\", \"b\", \"c\", \"d\", null, null\n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/json/#wildcard-array-accessor"}
{"content": "filter \u00b6 \n Retrieves the items from the input sequence which satisfy the predicate. \n  (#__codelineno-26-1) <path>?( <predicate> )\n \n JSON path predicates are syntactically similar to boolean expressions in\nSQL. However, the semantics are different in many aspects: \n \n They operate on sequences of items. \n They have their own error handling (they never fail). \n They behave different depending on the lax or strict mode. \n \n The predicate evaluates to  true ,  false , or  unknown . Note that some\npredicate expressions involve nested JSON path expression. When\nevaluating the nested path, the variable  @  refers to the currently\nexamined item from the input sequence. \n The following predicate expressions are supported: \n \n Conjunction \n \n  (#__codelineno-27-1) <predicate1> && <predicate2>\n \n \n Disjunction \n \n  (#__codelineno-28-1) <predicate1> || <predicate2>\n \n \n Negation \n \n  (#__codelineno-29-1) ! <predicate>\n \n \n exists  predicate \n \n  (#__codelineno-30-1) exists( <path> )\n \n Returns  true  if the nested path evaluates to a non-empty sequence, and\n false  when the nested path evaluates to an empty sequence. If the path\nevaluation throws an error, returns  unknown . \n \n starts with  predicate \n \n  (#__codelineno-31-1) <path> starts with \"Some text\"\n  (#__codelineno-31-2) <path> starts with $variable\n \n The nested  <path>  must evaluate to a sequence of textual items, and\nthe other operand must evaluate to a single textual item. If evaluating\nof either operand throws an error, the result is  unknown . All items\nfrom the sequence are checked for starting with the right operand. The\nresult is  true  if a match is found, otherwise  false . However, if any\nof the comparisons throws an error, the result in the strict mode is\n unknown . The result in the lax mode depends on whether the match or\nthe error was found f. \n \n is unknown  predicate \n \n  (#__codelineno-32-1) ( <predicate> ) is unknown\n \n Returns  true  if the nested predicate evaluates to  unknown , and\n false  otherwise. \n \n Comparisons \n \n  (#__codelineno-33-1) <path1> == <path2>\n  (#__codelineno-33-2) <path1> <> <path2>\n  (#__codelineno-33-3) <path1> != <path2>\n  (#__codelineno-33-4) <path1> < <path2>\n  (#__codelineno-33-5) <path1> > <path2>\n  (#__codelineno-33-6) <path1> <= <path2>\n  (#__codelineno-33-7) <path1> >= <path2>\n \n Both operands of a comparison evaluate to sequences of items. If either\nevaluation throws an error, the result is  unknown . Items from the left\nand right sequence are then compared pairwise. Similarly to the\n starts with  predicate, the result is  true  if any of the comparisons\nreturns  true , otherwise  false . However, if any of the comparisons\nthrows an error, for example because the compared types are not\ncompatible, the result in the strict mode is  unknown . The result in\nthe lax mode depends on whether the  true  comparison or the error was\nfound f. \n Comparison rules \u00b6  (#json_comparison_rules) \n Null values in the context of comparison behave different than SQL null: \n \n null == null -->  true \n null != null, null \\< null, ... -->  false \n null compared to a scalar value -->  false \n null compared to a JSON array or a JSON object -->  false \n \n When comparing two scalar values,  true  or  false  is returned if the\ncomparison is successfully performed. The semantics of the comparison is\nthe same as in SQL. In case of an error, e.g. comparing text and number,\n unknown  is returned. \n Comparing a scalar value with a JSON array or a JSON object, and\ncomparing JSON arrays/objects is an error, so  unknown  is returned. \n Examples of filter \u00b6  (#examples-of-filter) \n Let  <path>  return a sequence of three JSON objects: \n  (#__codelineno-34-1) {\"customer\" : 100, \"region\" : \"AFRICA\"},\n  (#__codelineno-34-2) {\"region\" : \"ASIA\"},\n  (#__codelineno-34-3) {\"customer\" : 300, \"region\" : \"AFRICA\", \"comment\" : null}\n \n  (#__codelineno-35-1) <path>?(@.region != \"ASIA\") --> {\"customer\" : 100, \"region\" : \"AFRICA\"},\n  (#__codelineno-35-2)                                 {\"customer\" : 300, \"region\" : \"AFRICA\", \"comment\" : null}\n  (#__codelineno-35-3) <path>?(!exists(@.customer)) --> {\"region\" : \"ASIA\"}\n \n The following accessors are collectively referred to as  item\nmethods . \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/json/#filter"}
{"content": "double() \u00b6 \n Converts numeric or text values into double values. \n  (#__codelineno-36-1) <path>.double()\n \n Let  <path>  return a sequence  -1, 23e4, \"5.6\" : \n  (#__codelineno-37-1) <path>.double() --> -1e0, 23e4, 5.6e0\n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/json/#double"}
{"content": "ceiling(), floor(), and abs() \u00b6 \n Gets the ceiling, the floor or the absolute value for every numeric item\nin the sequence. The semantics of the operations is the same as in SQL. \n Let  <path>  return a sequence  -1.5, -1, 1.3 : \n  (#__codelineno-38-1) <path>.ceiling() --> -1.0, -1, 2.0\n  (#__codelineno-38-2) <path>.floor() --> -2.0, -1, 1.0\n  (#__codelineno-38-3) <path>.abs() --> 1.5, 1, 1.3\n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/json/#ceiling-floor-and-abs"}
{"content": "keyvalue() \u00b6 \n Returns a collection of JSON objects including one object per every\nmember of the original object for every JSON object in the sequence. \n  (#__codelineno-39-1) <path>.keyvalue()\n \n The returned objects have three members: \n \n \\\"name\\\", which is the original key, \n \\\"value\\\", which is the original bound value, \n \\\"id\\\", which is the unique number, specific to an input object. \n \n Let  <path>  be a sequence of three JSON objects: \n  (#__codelineno-40-1) {\"customer\" : 100, \"region\" : \"AFRICA\"},\n  (#__codelineno-40-2) {\"region\" : \"ASIA\"},\n  (#__codelineno-40-3) {\"customer\" : 300, \"region\" : \"AFRICA\", \"comment\" : null}\n \n  (#__codelineno-41-1) <path>.keyvalue() --> {\"name\" : \"customer\", \"value\" : 100, \"id\" : 0},\n  (#__codelineno-41-2)                       {\"name\" : \"region\", \"value\" : \"AFRICA\", \"id\" : 0},\n  (#__codelineno-41-3)                       {\"name\" : \"region\", \"value\" : \"ASIA\", \"id\" : 1},\n  (#__codelineno-41-4)                       {\"name\" : \"customer\", \"value\" : 300, \"id\" : 2},\n  (#__codelineno-41-5)                       {\"name\" : \"region\", \"value\" : \"AFRICA\", \"id\" : 2},\n  (#__codelineno-41-6)                       {\"name\" : \"comment\", \"value\" : null, \"id\" : 2}\n \n It is required that all items in the input sequence are JSON objects. \n The order of the returned values follows the order of the original JSON\nobjects. However, within objects, the order of returned entries is\narbitrary. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/json/#keyvalue"}
{"content": "type() \u00b6 \n Returns a textual value containing the type name for every item in the\nsequence. \n  (#__codelineno-42-1) <path>.type()\n \n This method does not perform array unwrapping in the lax mode. \n The returned values are: \n \n \"null\"  for JSON null, \n \"number\"  for a numeric item, \n \"string\"  for a textual item, \n \"boolean\"  for a boolean item, \n \"date\"  for an item of type date, \n \"time without time zone\"  for an item of type time, \n \"time with time zone\"  for an item of type time with time zone, \n \"timestamp without time zone\"  for an item of type timestamp, \n \"timestamp with time zone\"  for an item of type timestamp with time\n    zone, \n \"array\"  for JSON array, \n \"object\"  for JSON object, \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/json/#type"}
{"content": "size() \u00b6 \n Returns a numeric value containing the size for every JSON array in the\nsequence. \n  (#__codelineno-43-1) <path>.size()\n \n This method does not perform array unwrapping in the lax mode. Instead,\nall non-array items are wrapped in singleton JSON arrays, so their size\nis  1 . \n It is required that all items in the input sequence are JSON arrays. \n Let  <path>  return a sequence of three JSON arrays: \n  (#__codelineno-44-1) [0, 1, 2], [\"a\", \"b\", \"c\", \"d\"], [null, null]\n  (#__codelineno-44-2) <path>.size() --> 3, 4, 2\n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/json/#size"}
{"content": "Data structures \u00b6 \n Trino implements HyperLogLog data sketches as a set of 32-bit buckets\nwhich store a  maximum hash . They can be stored sparsely (as a map from\nbucket ID to bucket), or densely (as a contiguous memory block). The\nHyperLogLog data structure starts as the sparse representation,\nswitching to dense when it is more efficient. The P4HyperLogLog\nstructure is initialized densely and remains dense for its lifetime. \n hyperloglog_type  implicitly casts to\n p4hyperloglog_type , while one can\nexplicitly cast  HyperLogLog  to  P4HyperLogLog :\n  (#__codelineno-0-1)     cast(hll AS P4HyperLogLog)\n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/hyperloglog/#data-structures"}
{"content": "Serialization \u00b6 \n Data sketches can be serialized to and deserialized from  varbinary .\nThis allows them to be stored for later use. Combined with the ability\nto merge multiple sketches, this allows one to calculate\n approx_distinct  of the elements of a partition of a query, then for the entirety of a query with very little\ncost. \n For example, calculating the  HyperLogLog  for daily unique users will\nallow weekly or monthly unique users to be calculated incrementally by\ncombining the dailies. This is similar to computing weekly revenue by\nsumming daily revenue. Uses of  approx_distinct  with  GROUPING SETS  can be converted to use  HyperLogLog . \nExamples: \n  (#__codelineno-1-1)    CREATE   TABLE   visit_summaries   (    \n  (#__codelineno-1-2)      visit_date   date , \n  (#__codelineno-1-3)      hll   varbinary \n  (#__codelineno-1-4)    ) \n  (#__codelineno-1-5)    INSERT   INTO   visit_summaries \n  (#__codelineno-1-6)    SELECT   visit_date ,   cast ( approx_set ( user_id )   AS   varbinary ) \n  (#__codelineno-1-7)    FROM   user_visits \n  (#__codelineno-1-8)    GROUP   BY   visit_date ; \n  (#__codelineno-1-9) \n  (#__codelineno-1-10)    SELECT   cardinality ( merge ( cast ( hll   AS   HyperLogLog )))   AS   weekly_unique_users \n  (#__codelineno-1-11)    FROM   visit_summaries \n  (#__codelineno-1-12)    WHERE   visit_date   >=   current_date   -   interval   '7'   day ; \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/hyperloglog/#serialization"}
{"content": "Functions \u00b6 \n approx_set() \u00b6  (#approx_set) \n approx_set(x)  \u2192 HyperLogLog \n Returns the  HyperLogLog  sketch of the input data set of  x . This data\nsketch underlies  approx_distinct  and can be stored and used later by calling  cardinality() . \n cardinality() \u00b6  (#cardinality) \n cardinality(hll)  \u2192 bigint \n This will perform  approx_distinct  on\nthe data summarized by the  hll  HyperLogLog data sketch. \n empty_hll() \u00b6  (#empty_hll) \n empty_hll()  \u2192 HyperLogLog \n Returns an empty  HyperLogLog . \n merge() \u00b6  (#merge) \n merge(hyperloglog)  \u2192 HyperLogLog\nReturns the  HyperLogLog  of the aggregate union of the individual  hll \nHyperLogLog structures.", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/hyperloglog/#functions"}
{"content": "Decimal literals \u00b6 \n Use the  DECIMAL 'xxxxxxx.yyyyyyy'  syntax to define a decimal literal. \n The precision of a decimal type for a literal will be equal to the\nnumber of digits in the literal (including trailing and leading zeros).\nThe scale will be equal to the number of digits in the fractional part\n(including trailing zeros). \n \n \n \n Example literal \n Data type \n \n \n \n \n DECIMAL '0' \n DECIMAL(1) \n \n \n DECIMAL '12345' \n DECIMAL(5) \n \n \n DECIMAL '0000012345.1234500000' \n DECIMAL(20, 10) \n \n \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/decimal/#decimal_literal"}
{"content": "Binary arithmetic decimal operators \u00b6 \n Standard mathematical operators are supported. The table below explains\nprecision and scale calculation rules for result. Assuming  x  is of\ntype  DECIMAL(xp, xs)  and  y  is of type  DECIMAL(yp, ys) . \n \n \n \n Operation \n Result type precision \n Result type scale \n \n \n \n \n x + y  and  x -y \n min(38,1 +max(xs, ys) + max(xp - xs, yp - ys)) \n max(xs, ys) \n \n \n x * y \n min(38, xp + yp) \n xs + ys \n \n \n x / y \n min(38, xp + ys + max(0, ys-xs)) \n max(xs, ys) \n \n \n x % y \n min(xp - xs, yp - ys) + max(xs, bs) \n max(xs, ys) \n \n \n \n If the mathematical result of the operation is not exactly representable\nwith the precision and scale of the result data type, then an exception\ncondition is raised:  Value is out of range . \n When operating on decimal types with different scale and precision, the\nvalues are first coerced to a common super type. For types near the\nlargest representable precision (38), this can result in \"Value is out of\nrange\" errors when one of the operands doesn't fit in the common super\ntype. For example, the common super type of decimal(38, 0) and\ndecimal(38, 1) is decimal(38, 1), but certain values that fit in\ndecimal(38, 0) cannot be represented as a decimal(38, 1). \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/decimal/#binary-arithmetic-decimal-operators"}
{"content": "Comparison operators \u00b6 \n All standard  comparison  work for the\ndecimal type. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/decimal/#comparison-operators"}
{"content": "Unary decimal operators \u00b6 \n The  -  operator performs negation. The type of result is same as type\nof argument.", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/decimal/#unary-decimal-operators"}
{"content": "Date and time operators \u00b6 \n \n \n \n Operator \n Example \n Result \n \n \n \n \n + \n date '2012-08-08' + interval '2' day \n 2012-08-10 \n \n \n + \n time '01:00' + interval '3' hour \n 04:00:00.000 \n \n \n + \n timestamp '2012-08-08 01:00' + interval '29' hour \n 2012-08-09 06:00:00.000 \n \n \n + \n timestamp '2012-10-31 01:00' + interval '1' month \n 2012-11-30 01:00:00.000 \n \n \n + \n interval '2' day + interval '3' hour \n 2 03:00:00.000 \n \n \n + \n interval '3' year + interval '5' month \n 3-5 \n \n \n - \n date '2012-08-08' - interval '2' day \n 2012-08-06 \n \n \n - \n time '01:00' - interval '3' hour \n 22:00:00.000 \n \n \n - \n timestamp '2012-08-08 01:00' - interval '29' hour \n 2012-08-06 20:00:00.000 \n \n \n - \n timestamp '2012-10-31 01:00' - interval '1' month \n 2012-09-30 01:00:00.000 \n \n \n - \n interval '2' day - interval '3' hour \n 1 21:00:00.000 \n \n \n - \n interval '3' year - interval '5' month \n 2-7 \n \n \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/datetime/#date-and-time-operators"}
{"content": "Time zone conversion \u00b6 \n The  AT TIME ZONE  operator sets the time zone of a timestamp:\n  (#__codelineno-0-1)      SELECT   timestamp   '2012-10-31 01:00 UTC' ; \n  (#__codelineno-0-2)      -- 2012-10-31 01:00:00.000 UTC \n  (#__codelineno-0-3) \n  (#__codelineno-0-4)      SELECT   timestamp   '2012-10-31 01:00 UTC'   AT   TIME   ZONE   'America/Los_Angeles' ; \n  (#__codelineno-0-5)      -- 2012-10-30 18:00:00.000 America/Los_Angeles \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/datetime/#time-zone-conversion"}
{"content": "Date and time functions \u00b6 \n current_date \u00b6  (#current_date) \n current_date \n Returns the current date as of the start of the query. \n current_time \u00b6  (#current_time) \n current_time \n Returns the current time with time zone as of the start of the query. \n current_timestamp \u00b6  (#current_timestamp) \n current_timestamp \n Returns the current timestamp with time zone as of the start of the\nquery, with  3  digits of subsecond precision, \n current_timestamp() \u00b6  (#current_timestamp_1) \n current_timestamp(p) \n Returns the current  timestamp with time zone\nas timestamp-with-time-zone-data-type of the start of the query, with p` digits of subsecond precision:\n  (#__codelineno-1-1)      SELECT   current_timestamp ( 6 ); \n  (#__codelineno-1-2)      -- 2020-06-24 08:25:31.759993 America/Los_Angeles \n \n current_timezone() \u00b6  (#current_timezone) \n current_timezone()  \u2192 varchar \n Returns the current time zone in the format defined by IANA (e.g.,\n America/Los_Angeles ) or as fixed offset from UTC (e.g.,  +08:35 ) \n date() \u00b6  (#date) \n date(x)  \u2192 date \n This is an alias for  CAST(x AS date) . \n last_day_of_month() \u00b6  (#last_day_of_month) \n last_day_of_month(x)  \u2192 date \n Returns the last day of the month. \n from_iso8601_timestamp() \u00b6  (#from_iso8601_timestamp) \n from_iso8601_timestamp(string)  \u2192 timestamp(3) with time zone \n Parses the ISO 8601 formatted date  string , optionally with time and\ntime zone, into a  timestamp(3) with time zone . The time defaults to\n 00:00:00.000 , and the time zone defaults to the session time zone:\n  (#__codelineno-2-1)      SELECT   from_iso8601_timestamp ( '2020-05-11' ); \n  (#__codelineno-2-2)      -- 2020-05-11 00:00:00.000 America/Vancouver \n  (#__codelineno-2-3) \n  (#__codelineno-2-4)      SELECT   from_iso8601_timestamp ( '2020-05-11T11:15:05' ); \n  (#__codelineno-2-5)      -- 2020-05-11 11:15:05.000 America/Vancouver \n  (#__codelineno-2-6) \n  (#__codelineno-2-7)      SELECT   from_iso8601_timestamp ( '2020-05-11T11:15:05.055+01:00' ); \n  (#__codelineno-2-8)      -- 2020-05-11 11:15:05.055 +01:00 \n \n from_iso8601_timestamp_nanos() \u00b6  (#from_iso8601_timestamp_nanos) \n from_iso8601_timestamp_nanos(string)  \u2192 timestamp(9) with time zone \n Parses the ISO 8601 formatted date and time  string . The time zone\ndefaults to the session time zone:\n  (#__codelineno-3-1)      SELECT   from_iso8601_timestamp_nanos ( '2020-05-11T11:15:05' ); \n  (#__codelineno-3-2)      -- 2020-05-11 11:15:05.000000000 America/Vancouver \n  (#__codelineno-3-3) \n  (#__codelineno-3-4)      SELECT   from_iso8601_timestamp_nanos ( '2020-05-11T11:15:05.123456789+01:00' ); \n  (#__codelineno-3-5)      -- 2020-05-11 11:15:05.123456789 +01:00 \n \n from_iso8601_date() \u00b6  (#from_iso8601_date) \n from_iso8601_date(string)  \u2192 date \n Parses the ISO 8601 formatted date  string  into a  date . The date can\nbe a calendar date, a week date using ISO week numbering, or year and\nday of year combined:\n  (#__codelineno-4-1)      SELECT   from_iso8601_date ( '2020-05-11' ); \n  (#__codelineno-4-2)      -- 2020-05-11 \n  (#__codelineno-4-3) \n  (#__codelineno-4-4)      SELECT   from_iso8601_date ( '2020-W10' ); \n  (#__codelineno-4-5)      -- 2020-03-02 \n  (#__codelineno-4-6) \n  (#__codelineno-4-7)      SELECT   from_iso8601_date ( '2020-123' ); \n  (#__codelineno-4-8)      -- 2020-05-02 \n \n at_timezone() \u00b6  (#at_timezone) \n at_timezone(timestamp, zone)  \u2192 timestamp(p) with time zone \n Returns the timestamp specified in timestamp with the time zone converted from the session time zone to the time zone specified in zone with precision p. In the following example, the session time zone is set to America/New_York, which is three hours ahead of America/Los_Angeles: \n  (#__codelineno-5-1) SELECT   current_timezone () \n  (#__codelineno-5-2) -- America/New_York \n \n  (#__codelineno-6-1) SELECT   at_timezone ( TIMESTAMP   '2022-11-01 09:08:07.321' ,   'America/Los_Angeles' ) \n  (#__codelineno-6-2) -- 2022-11-01 06:08:07.321 America/Los_Angeles \n \n with_timezone() \u00b6  (#with_timezone) \n with_timezone(timestamp, zone)  \u2192 timestamp(p) with time zone \n Returns the timestamp specified in  timestamp  with the time zone specified in  zone  with precision  p . \n  (#__codelineno-7-1) SELECT   current_timezone () \n  (#__codelineno-7-2) -- America/New_York \n  (#__codelineno-7-3) \n  (#__codelineno-7-4) SELECT   with_timezone ( TIMESTAMP   '2022-11-01 09:08:07.321' ,   'America/Los_Angeles' ) \n  (#__codelineno-7-5) -- 2022-11-01 09:08:07.321 America/Los_Angeles \n \n from_unixtime() \u00b6  (#from_unixtime) \n from_unixtime(unixtime)  \u2192 timestamp(3) with time zone \n Returns the UNIX timestamp  unixtime  as a timestamp with time zone.\n unixtime  is the number of seconds since  1970-01-01 00:00:00 UTC . \n from_unixtime() \u00b6  (#from_unixtime_1) \n from_unixtime(unixtime, zone)  \u2192 timestamp(3) with time zone \n Returns the UNIX timestamp  unixtime  as a timestamp with time zone\nusing  zone  for the time zone.  unixtime  is the number of seconds\nsince  1970-01-01 00:00:00 UTC . \n from_unixtime() \u00b6  (#from_unixtime_2) \n from_unixtime(unixtime, hours, minutes)  \u2192 timestamp(3) with time zone \n Returns the UNIX timestamp  unixtime  as a timestamp with time zone\nusing  hours  and  minutes  for the time zone offset.  unixtime  is the\nnumber of seconds since  1970-01-01 00:00:00  in  double  data type. \n from_unixtime_nanos() \u00b6  (#from_unixtime_nanos) \n from_unixtime_nanos(unixtime)  \u2192 timestamp(9) with time zone \n Returns the UNIX timestamp  unixtime  as a timestamp with time zone.\n unixtime  is the number of nanoseconds since\n 1970-01-01 00:00:00.000000000 UTC :\n  (#__codelineno-8-1)      SELECT   from_unixtime_nanos ( 100 ); \n  (#__codelineno-8-2)      -- 1970-01-01 00:00:00.000000100 UTC \n  (#__codelineno-8-3) \n  (#__codelineno-8-4)      SELECT   from_unixtime_nanos ( DECIMAL   '1234' ); \n  (#__codelineno-8-5)      -- 1970-01-01 00:00:00.000001234 UTC \n  (#__codelineno-8-6) \n  (#__codelineno-8-7)      SELECT   from_unixtime_nanos ( DECIMAL   '1234.499' ); \n  (#__codelineno-8-8)      -- 1970-01-01 00:00:00.000001234 UTC \n  (#__codelineno-8-9) \n  (#__codelineno-8-10)      SELECT   from_unixtime_nanos ( DECIMAL   '-1234' ); \n  (#__codelineno-8-11)      -- 1969-12-31 23:59:59.999998766 UTC \n \n now() \u00b6  (#now) \n now()  \u2192 timestamp(3) with time zone \n This is an alias for  current_timestamp . \n to_iso8601() \u00b6  (#to_iso8601) \n to_iso8601(x)  \u2192 varchar \n Formats  x  as an ISO 8601 string.  x  can be date, timestamp, or\ntimestamp with time zone. \n to_milliseconds() \u00b6  (#to_milliseconds) \n to_milliseconds(interval)  \u2192 bigint \n Returns the day-to-second  interval  as milliseconds. \n to_unixtime() \u00b6  (#to_unixtime) \n to_unixtime(timestamp)  \u2192 double \n Returns  timestamp  as a UNIX timestamp. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/datetime/#date-and-time-functions"}
{"content": "Truncation function \u00b6 \n The  date_trunc  function supports the following units: \n \n \n \n Unit \n Example \n Truncated Value \n \n \n \n \n second \n 2001-08-22 03:04:05.000 \n 2001-08-22 03:04:05.000 \n \n \n minute \n 2001-08-22 03:04:00.000 \n 2001-08-22 03:04:00.000 \n \n \n hour \n 2001-08-22 03:00:00.000 \n 2001-08-22 03:00:00.000 \n \n \n day \n 2001-08-22 00:00:00.000 \n 2001-08-22 00:00:00.000 \n \n \n week \n 2001-08-20 00:00:00.000 \n 2001-08-20 00:00:00.000 \n \n \n month \n 2001-08-01 00:00:00.000 \n 2001-08-01 00:00:00.000 \n \n \n quarter \n 2001-07-01 00:00:00.000 \n 2001-07-01 00:00:00.000 \n \n \n year \n 2001-01-01 00:00:00.000 \n 2001-01-01 00:00:00.000 \n \n \n \n The above examples use the timestamp  2001-08-22 03:04:05.321  as the\ninput. \n date_trunc() \u00b6  (#date_trunc) \n date_trunc(unit, x)  \u2192 [same as input] \n Returns  x  truncated to  unit :\n  (#__codelineno-9-1)      SELECT   date_trunc ( 'day'   ,   TIMESTAMP   '2022-10-20 05:10:00' ); \n  (#__codelineno-9-2)      -- 2022-10-20 00:00:00.000 \n  (#__codelineno-9-3) \n  (#__codelineno-9-4)      SELECT   date_trunc ( 'month'   ,   TIMESTAMP   '2022-10-20 05:10:00' ); \n  (#__codelineno-9-5)      -- 2022-10-01 00:00:00.000 \n  (#__codelineno-9-6) \n  (#__codelineno-9-7)      SELECT   date_trunc ( 'year' ,   TIMESTAMP   '2022-10-20 05:10:00' ); \n  (#__codelineno-9-8)      -- 2022-01-01 00:00:00.000 \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/datetime/#truncation-function"}
{"content": "Interval functions \u00b6 \n The functions in this section support the following interval units: \n \n \n \n Unit \n Description \n \n \n \n \n millisecond \n Milliseconds \n \n \n second \n Seconds \n \n \n minute \n Minutes \n \n \n hour \n Hours \n \n \n day \n Days \n \n \n week \n Weeks \n \n \n month \n Months \n \n \n quarter \n Quarters of a year \n \n \n year \n Years \n \n \n \n date_add() \u00b6  (#date_add) \n date_add(unit, value, timestamp)  \u2192 same as input \n Adds an interval  value  of type  unit  to  timestamp . Subtraction can\nbe performed by using a negative value:\n  (#__codelineno-10-1)      SELECT   date_add ( 'second' ,   86 ,   TIMESTAMP   '2020-03-01 00:00:00' ); \n  (#__codelineno-10-2)      -- 2020-03-01 00:01:26.000 \n  (#__codelineno-10-3) \n  (#__codelineno-10-4)      SELECT   date_add ( 'hour' ,   9 ,   TIMESTAMP   '2020-03-01 00:00:00' ); \n  (#__codelineno-10-5)      -- 2020-03-01 09:00:00.000 \n  (#__codelineno-10-6) \n  (#__codelineno-10-7)      SELECT   date_add ( 'day' ,   - 1 ,   TIMESTAMP   '2020-03-01 00:00:00 UTC' ); \n  (#__codelineno-10-8)      -- 2020-02-29 00:00:00.000 UTC \n \n date_diff() \u00b6  (#date_diff) \n date_diff(unit, timestamp1, timestamp2)  \u2192 bigint \n Returns  timestamp2 - timestamp1  expressed in terms of  unit :\n  (#__codelineno-11-1)      SELECT   date_diff ( 'second' ,   TIMESTAMP   '2020-03-01 00:00:00' ,   TIMESTAMP   '2020-03-02 00:00:00' ); \n  (#__codelineno-11-2)      -- 86400 \n  (#__codelineno-11-3) \n  (#__codelineno-11-4)      SELECT   date_diff ( 'hour' ,   TIMESTAMP   '2020-03-01 00:00:00 UTC' ,   TIMESTAMP   '2020-03-02 00:00:00 UTC' ); \n  (#__codelineno-11-5)      -- 24 \n  (#__codelineno-11-6) \n  (#__codelineno-11-7)      SELECT   date_diff ( 'day' ,   DATE   '2020-03-01' ,   DATE   '2020-03-02' ); \n  (#__codelineno-11-8)      -- 1 \n  (#__codelineno-11-9) \n  (#__codelineno-11-10)      SELECT   date_diff ( 'second' ,   TIMESTAMP   '2020-06-01 12:30:45.000000000' ,   TIMESTAMP   '2020-06-02 12:30:45.123456789' ); \n  (#__codelineno-11-11)      -- 86400 \n  (#__codelineno-11-12) \n  (#__codelineno-11-13)      SELECT   date_diff ( 'millisecond' ,   TIMESTAMP   '2020-06-01 12:30:45.000000000' ,   TIMESTAMP   '2020-06-02 12:30:45.123456789' ); \n  (#__codelineno-11-14)      -- 86400123 \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/datetime/#interval-functions"}
{"content": "Duration function \u00b6 \n The  parse_duration  function supports the following units: \n \n \n \n Unit \n Description \n \n \n \n \n ns \n Nanoseconds \n \n \n us \n Microseconds \n \n \n ms \n Milliseconds \n \n \n s \n Seconds \n \n \n m \n Minutes \n \n \n h \n Hours \n \n \n d \n Days \n \n \n \n parse_duration() \u00b6  (#parse_duration) \n parse_duration(string)  \u2192 interval \n Parses  string  of format  value unit  into an interval, where  value \nis fractional number of  unit  values:\n  (#__codelineno-12-1)      SELECT   parse_duration ( '42.8ms' ); \n  (#__codelineno-12-2)      -- 0 00:00:00.043 \n  (#__codelineno-12-3) \n  (#__codelineno-12-4)      SELECT   parse_duration ( '3.81 d' ); \n  (#__codelineno-12-5)      -- 3 19:26:24.000 \n  (#__codelineno-12-6) \n  (#__codelineno-12-7)      SELECT   parse_duration ( '5m' ); \n  (#__codelineno-12-8)      -- 0 00:05:00.000 \n \n human_readable_seconds() \u00b6  (#human_readable_seconds) \n human_readable_seconds(double)  \u2192 varchar \n Formats the double value of  seconds  into a human readable string\ncontaining  weeks ,  days ,  hours ,  minutes , and  seconds :\n  (#__codelineno-13-1)      SELECT   human_readable_seconds ( 96 ); \n  (#__codelineno-13-2)      -- 1 minute, 36 seconds \n  (#__codelineno-13-3) \n  (#__codelineno-13-4)      SELECT   human_readable_seconds ( 3762 ); \n  (#__codelineno-13-5)      -- 1 hour, 2 minutes, 42 seconds \n  (#__codelineno-13-6) \n  (#__codelineno-13-7)      SELECT   human_readable_seconds ( 56363463 ); \n  (#__codelineno-13-8)      -- 93 weeks, 1 day, 8 hours, 31 minutes, 3 seconds \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/datetime/#duration-function"}
{"content": "MySQL date functions \u00b6 \n The functions in this section use a format string that is compatible\nwith the MySQL  date_parse  and  str_to_date  functions. The following\ntable, based on the MySQL manual, describes the format specifiers: \n \n \n \n Specifier \n Description \n \n \n \n \n %a \n Abbreviated weekday name ( Sun  ..  Sat ) \n \n \n %b \n Abbreviated month name ( Jan  ..  Dec ) \n \n \n %c \n Month, numeric ( 1  ..  12 )[^1] \n \n \n %D \n Day of the month with English suffix ( 0th ,  1st ,  2nd ,  3rd , ...) \n \n \n %d \n Day of the month, numeric ( 01  ..  31 )[^2] \n \n \n %e \n Day of the month, numeric ( 1  ..  31 )[^3] \n \n \n %f \n Fraction of second (6 digits for printing:  000000  ..  999000 ; 1 - 9 digits for parsing:  0  ..  999999999 )[^4] \n \n \n %H \n Hour ( 00  ..  23 ) \n \n \n %h \n Hour ( 01  ..  12 ) \n \n \n %I \n Hour ( 01  ..  12 ) \n \n \n %i \n Minutes, numeric ( 00  ..  59 ) \n \n \n %j \n Day of year ( 001  ..  366 ) \n \n \n %k \n Hour ( 0  ..  23 ) \n \n \n %l \n Hour ( 1  ..  12 ) \n \n \n %M \n Month name ( January  ..  December ) \n \n \n %m \n Month, numeric ( 01  ..  12 )[^5] \n \n \n %p \n AM  or  PM \n \n \n %r \n Time of day, 12-hour (equivalent to  %h:%i:%s %p ) \n \n \n %S \n Seconds ( 00  ..  59 ) \n \n \n %s \n Seconds ( 00  ..  59 ) \n \n \n %T \n Time of day, 24-hour (equivalent to  %H:%i:%s ) \n \n \n %U \n Week ( 00  ..  53 ), where Sunday is the first day of the week \n \n \n %u \n Week ( 00  ..  53 ), where Monday is the first day of the week \n \n \n %V \n Week ( 01  ..  53 ), where Sunday is the first day of the week; used with  %X \n \n \n %v \n Week ( 01  ..  53 ), where Monday is the first day of the week; used with  %x \n \n \n %W \n Weekday name ( Sunday  ..  Saturday ) \n \n \n %w \n Day of the week ( 0  ..  6 ), where Sunday is the first day of the week[^6] \n \n \n %X \n Year for the week where Sunday is the first day of the week, numeric, four digits; used with  %V \n \n \n %x \n Year for the week, where Monday is the first day of the week, numeric, four digits; used with  %v \n \n \n %Y \n Year, numeric, four digits \n \n \n %y \n Year, numeric (two digits)[^7] \n \n \n %% \n A literal  %  character \n \n \n %x \n x , for any  x  not \n \n \n \n The following specifiers are not currently supported:\n %D %U %u %V %w %X \n date_format(timestamp, format)  \u2192 varchar \n Formats  timestamp  as a string using  format :\n  (#__codelineno-14-1)      SELECT   date_format ( TIMESTAMP   '2022-10-20 05:10:00' ,   '%m-%d-%Y %H' ); \n  (#__codelineno-14-2)      -- 10-20-2022 05 \n \n date_parse(string, format)  \u2192 timestamp \n Parses  string  into a timestamp using  format :\n  (#__codelineno-15-1)      SELECT   date_parse ( '2022/10/20/05' ,   '%Y/%m/%d/%H' ); \n  (#__codelineno-15-2)      -- 2022-10-20 05:00:00.000 \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/datetime/#mysql-date-functions"}
{"content": "Java date functions \u00b6 \n The functions in this section use a format string that is compatible\nwith JodaTime\\'s\n DateTimeFormat  (http://joda-time.sourceforge.net/apidocs/org/joda/time/format/DateTimeFormat.html) \npattern format. \n format_datetime() \u00b6  (#format_datetime) \n format_datetime(timestamp, format)  \u2192 varchar \n Formats  timestamp  as a string using  format . \n parse_datetime() \u00b6  (#parse_datetime) \n parse_datetime(string, format)  \u2192 timestamp \n Parses  string  into a timestamp with time zone using  format . \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/datetime/#java-date-functions"}
{"content": "Extraction function \u00b6 \n The  extract  function supports the following fields: \n \n \n \n Field \n Description \n \n \n \n \n YEAR \n year \n \n \n QUARTER \n quarter \n \n \n MONTH \n month \n \n \n WEEK \n week \n \n \n DAY \n day \n \n \n DAY_OF_MONTH \n day \n \n \n DAY_OF_WEEK \n day_of_week \n \n \n DOW \n day_of_week \n \n \n DAY_OF_YEAR \n day_of_year \n \n \n DOY \n day_of_year \n \n \n YEAR_OF_WEEK \n year_of_week \n \n \n YOW \n year_of_week \n \n \n HOUR \n hour \n \n \n MINUTE \n minute \n \n \n SECOND \n second \n \n \n TIMEZONE_HOUR \n timezone_hour \n \n \n TIMEZONE_MINUTE \n timezone_minute \n \n \n \n The types supported by the  extract  function vary depending on the\nfield to be extracted. Most fields support all date and time types. \n extract(field FROM x)  \u2192 bigint \n Returns  field  from  x :\n  (#__codelineno-16-1)      SELECT   extract ( YEAR   FROM   TIMESTAMP   '2022-10-20 05:10:00' ); \n  (#__codelineno-16-2)      -- 2022 \n \n \n Note \n This SQL-standard function uses special syntax for specifying the\narguments. \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/datetime/#extraction-function"}
{"content": "Convenience extraction functions \u00b6 \n day() \u00b6  (#day) \n day(x)  \u2192 bigint \n Returns the day of the month from  x . \n day_of_month() \u00b6  (#day_of_month) \n day_of_month(x)  \u2192 bigint \n This is an alias for  day . \n day_of_week() \u00b6  (#day_of_week) \n day_of_week(x)  \u2192 bigint \n Returns the ISO day of the week from  x . The value ranges from  1  (Monday) to  7  (Sunday). \n day_of_year() \u00b6  (#day_of_year) \n day_of_year(x)  \u2192 bigint \n Returns the day of the year from  x . The value ranges from  1  to  366 . \n dow() \u00b6  (#dow) \n dow(x)  \u2192 bigint \n This is an alias for  day_of_week . \n doy() \u00b6  (#doy) \n doy(x)  \u2192 bigint \n This is an alias for  day_of_year . \n hour() \u00b6  (#hour) \n hour(x)  \u2192 bigint \n Returns the hour of the day from  x . The value ranges from  0  to  23 . \n millisecond() \u00b6  (#millisecond) \n millisecond(x)  \u2192 bigint \n Returns the millisecond of the second from  x . \n minute() \u00b6  (#minute) \n minute(x)  \u2192 bigint \n Returns the minute of the hour from  x . \n month() \u00b6  (#month) \n month(x)  \u2192 bigint \n Returns the month of the year from  x . \n quarter() \u00b6  (#quarter) \n quarter(x)  \u2192 bigint \n Returns the quarter of the year from  x . The value ranges from  1  to  4 . \n second() \u00b6  (#second) \n second(x)  \u2192 bigint \n Returns the second of the minute from  x . \n timezone_hour() \u00b6  (#timezone_hour) \n timezone_hour(timestamp)  \u2192 bigint \n Returns the hour of the time zone offset from  timestamp . \n timezone_minute() \u00b6  (#timezone_minute) \n timezone_minute(timestamp)  \u2192 bigint \n Returns the minute of the time zone offset from  timestamp . \n week() \u00b6  (#week) \n week(x)  \u2192 bigint \n Returns the  ISO week  ()  of the year from  x . The value ranges from  1  to  53 . \n week_of_year() \u00b6  (#week_of_year) \n week_of_year(x)  \u2192 bigint \n This is an alias for  week . \n year() \u00b6  (#year) \n year(x)  \u2192 bigint \n Returns the year from  x . \n year_of_week() \u00b6  (#year_of_week) \n year_of_week(x)  \u2192 bigint \n Returns the year of the  ISO week  ()  from  x . \n yow() \u00b6  (#yow) \n yow(x)  \u2192 bigint \n This is an alias for  year_of_week . \n [^1]: This specifier does not support  0  as a month or day.\n[^2]: This specifier does not support  0  as a month or day.\n[^3]: This specifier does not support  0  as a month or day.\n[^4]: Timestamp is truncated to milliseconds.\n[^5]: This specifier does not support  0  as a month or day.\n[^6]: This specifier is not supported yet. Consider using  day_of_week  (it uses  1-7  instead of  0-6 ).\n[^7]: When parsing, two-digit year format assumes range  1970  ..  2069 , so \"70\" will result in year  1970  but \"69\" will produce  2069 .", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/datetime/#convenience-extraction-functions"}
{"content": "Implicit Conversions \u00b6 \n DuneSQL will implicitly convert numeric and character values to the correct type if such a conversion is possible. \nDuneSQL will not convert implicitly between character and numeric types. \nFor example, a query that expects a  VARCHAR  will not automatically convert a  BIGINT  value to an equivalent  VARCHAR . \n When necessary, values can be explicitly cast to a particular type using the  cast function  (#cast) . \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/conversion/#implicit-conversions"}
{"content": "Implicit Casting with numeric types \u00b6 \n DuneSQL has added support for implicit casts when performing operations with  INT256  and  UINT256  and other numeric types like  INTEGER ,  BIGINTEGER ,  DECIMAL , or  DOUBLE .\nThis allows you to use  INT256  and  UINT256  without adding casts explicitly. \n Whenever DuneSQL needs to find a common type for  INT256  or  UINT256  and another numeric type, it will generally go towards the bigger type. \nWe consider  INT256  to be bigger than  UINT256 . In some cases, this might lead to an overflow error when trying to include  UINT256  and  INT256  values into the same expression.  \n TINYINT ,  SMALLINT ,  INTEGER ,  BIGINT , and  DECIMAL  type with zero scale, like  DECIMAL(2,0)  will be converted to  INT256  or  UINT256 .\nPlease note that some conversions to  UINT256  will fail, since this type cannot hold negative values. \n For operations involving  INT256  or  UINT256  and  DECIMAL  type with non-zero scale, like  DECIMAL(2,1) ,\nthe result type is  DOUBLE . Also, for operations involving  INT256  or  UINT256  and  REAL  or  DOUBLE  types, the result type is  DOUBLE .\nPlease note that  DOUBLE  is an approximate numeric type and hence the conversion might lose some precision.\nYou can use explicit cast to override DuneSQL conversion rules. \n With implicit conversion, this arithmetic expression: \n  (#__codelineno-0-1) SELECT   2   *   UINT256   '1' ; \n \n will be equivalent to: \n  (#__codelineno-1-1) SELECT   CAST ( 2   AS   UINT256 )   *   UINT256   '1' ; \n \n Similarly, this comparison: \n  (#__codelineno-2-1) SELECT   INT256   '1'   >   0 ; \n \n will be equivalent to: \n  (#__codelineno-3-1) SELECT   INT256   '1'   >   CAST ( 0   AS   INT256 ); \n \n DuneSQL uses implicit conversions in many other contexts. Here are some examples: \n  (#__codelineno-4-1) SELECT   COALESCE ( 1 ,   INT256   '2' ); \n  (#__codelineno-4-2) -- will resolve to INT256 \n \n  (#__codelineno-5-1) SELECT   CASE   \n  (#__codelineno-5-2)      WHEN   false   THEN   BIGINT   '0'   \n  (#__codelineno-5-3)      WHEN   false   THEN   INT256   '1'   \n  (#__codelineno-5-4)      WHEN   true   THEN   UINT256   '2'   \n  (#__codelineno-5-5) END ; \n  (#__codelineno-5-6) -- will resolve to INT256 \n \n  (#__codelineno-6-1) SELECT   *   FROM   ( \n  (#__codelineno-6-2)      ( VALUES   TINYINT   '0' )   \n  (#__codelineno-6-3)      UNION   \n  (#__codelineno-6-4)      ( VALUES   INT256   '1' )   \n  (#__codelineno-6-5)      UNION   \n  (#__codelineno-6-6)      ( VALUES   DOUBLE   '2' )); \n  (#__codelineno-6-7) -- will resolve to DOUBLE \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/conversion/#implicit-casting-with-numeric-types"}
{"content": "Conversion functions \u00b6 \n cast() \u00b6  (#cast) \n cast(value AS type)  \u2192 type \n Explicitly cast a value as a type. This can be used to cast a varchar to\na numeric value type and vice versa. \n try_cast() \u00b6  (#try_cast) \n try_cast(value AS type)  \u2192 type \n Like  cast , but returns  null  if the cast\nfails. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/conversion/#conversion-functions"}
{"content": "Formatting \u00b6 \n format() \u00b6  (#format) \n format(format, args\\...)  \u2192 varchar \n Returns a formatted string using the specified  format\nstring  (https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/Formatter.html#syntax) \nand arguments:\n  (#__codelineno-7-1)      SELECT   format ( '%s%%' ,   123 ); \n  (#__codelineno-7-2)      -- '123%' \n  (#__codelineno-7-3) \n  (#__codelineno-7-4)      SELECT   format ( '%.5f' ,   pi ()); \n  (#__codelineno-7-5)      -- '3.14159' \n  (#__codelineno-7-6) \n  (#__codelineno-7-7)      SELECT   format ( '%03d' ,   8 ); \n  (#__codelineno-7-8)      -- '008' \n  (#__codelineno-7-9) \n  (#__codelineno-7-10)      SELECT   format ( '%,.2f' ,   1234567 . 89 ); \n  (#__codelineno-7-11)      -- '1,234,567.89' \n  (#__codelineno-7-12) \n  (#__codelineno-7-13)      SELECT   format ( '%-7s,%7s' ,   'hello' ,   'world' ); \n  (#__codelineno-7-14)      -- 'hello  ,  world' \n  (#__codelineno-7-15) \n  (#__codelineno-7-16)      SELECT   format ( '%2$s %3$s %1$s' ,   'a' ,   'b' ,   'c' ); \n  (#__codelineno-7-17)      -- 'b c a' \n  (#__codelineno-7-18) \n  (#__codelineno-7-19)      SELECT   format ( '%1$tA, %1$tB %1$te, %1$tY' ,   date   '2006-07-04' ); \n  (#__codelineno-7-20)      -- 'Tuesday, July 4, 2006' \n \n format_number() \u00b6  (#format_number) \n format_number(number)  \u2192 varchar\nReturns a formatted string using a unit symbol: \n SELECT format_number(123456); -- '123K'\nSELECT format_number(1000000); -- '1M'\n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/conversion/#formatting"}
{"content": "Miscellaneous \u00b6 \n typeof() \u00b6  (#typeof) \n typeof(expr)  \u2192 varchar \n Returns the name of the type of the provided expression:\n  (#__codelineno-8-1)      SELECT   typeof ( 123 );   -- integer \n  (#__codelineno-8-2)      SELECT   typeof ( 'cat' );   -- varchar(3) \n  (#__codelineno-8-3)      SELECT   typeof ( cos ( 2 )   +   1 . 5 );   -- double", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/conversion/#miscellaneous"}
{"content": "CASE \u00b6 \n The standard SQL  CASE  expression has two forms. The \"simple\" form\nsearches each  value  expression from left to right until it finds one\nthat equals  expression : \n  (#__codelineno-0-1) CASE expression\n  (#__codelineno-0-2)     WHEN value THEN result\n  (#__codelineno-0-3)     [ WHEN ... ]\n  (#__codelineno-0-4)     [ ELSE result ]\n  (#__codelineno-0-5) END\n \n The  result  for the matching  value  is returned. If no match is found,\nthe  result  from the  ELSE  clause is returned if it exists, otherwise\nnull is returned. Example:\n  (#__codelineno-1-1)      SELECT   a , \n  (#__codelineno-1-2)             CASE   a \n  (#__codelineno-1-3)                 WHEN   1   THEN   'one' \n  (#__codelineno-1-4)                 WHEN   2   THEN   'two' \n  (#__codelineno-1-5)                 ELSE   'many' \n  (#__codelineno-1-6)             END \n \nThe \"searched\" form evaluates each boolean  condition  from left to\nright until one is true and returns the matching  result :\n  (#__codelineno-2-1) CASE\n  (#__codelineno-2-2)     WHEN condition THEN result\n  (#__codelineno-2-3)     [ WHEN ... ]\n  (#__codelineno-2-4)     [ ELSE result ]\n  (#__codelineno-2-5) END\n \n If no conditions are true, the  result  from the  ELSE  clause is\nreturned if it exists, otherwise null is returned. Example:\n  (#__codelineno-3-1)      SELECT   a ,   b , \n  (#__codelineno-3-2)             CASE \n  (#__codelineno-3-3)                 WHEN   a   =   1   THEN   'aaa' \n  (#__codelineno-3-4)                 WHEN   b   =   2   THEN   'bbb' \n  (#__codelineno-3-5)                 ELSE   'ccc' \n  (#__codelineno-3-6)             END \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/conditional/#case"}
{"content": "IF \u00b6 \n The  IF  expression has two forms, one supplying only a  true_value  and\nthe other supplying both a  true_value  and a  false_value : \n if(condition, true_value) \n Evaluates and returns  true_value  if  condition  is true, otherwise\nnull is returned and  true_value  is not evaluated. \n if(condition, true_value, false_value) \n Evaluates and returns  true_value  if  condition  is true, otherwise\nevaluates and returns  false_value . \n The following  IF  and  CASE  expressions are equivalent: \n  (#__codelineno-4-1) SELECT \n  (#__codelineno-4-2)    orderkey , \n  (#__codelineno-4-3)    totalprice , \n  (#__codelineno-4-4)    IF ( totalprice   >=   150000 ,   'High Value' ,   'Low Value' ) \n  (#__codelineno-4-5) FROM   tpch . sf1 . orders ; \n \n  (#__codelineno-5-1) SELECT \n  (#__codelineno-5-2)    orderkey , \n  (#__codelineno-5-3)    totalprice , \n  (#__codelineno-5-4)    CASE \n  (#__codelineno-5-5)      WHEN   totalprice   >=   150000   THEN   'High Value' \n  (#__codelineno-5-6)      ELSE   'Low Value' \n  (#__codelineno-5-7)    END \n  (#__codelineno-5-8) FROM   tpch . sf1 . orders ; \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/conditional/#if"}
{"content": "COALESCE \u00b6 \n coalesce(value1, value2\\[, \\...\\]) \n Returns the f non-null  value  in the argument list. Like a  CASE \nexpression, arguments are only evaluated if necessary. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/conditional/#coalesce_function"}
{"content": "NULLIF \u00b6 \n nullif(value1, value2) \n Returns null if  value1  equals  value2 , otherwise returns  value1 . \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/conditional/#nullif"}
{"content": "TRY \u00b6 \n try(expression) \n Evaluate an expression and handle certain types of errors by returning\n NULL . \n In cases where it is preferable that queries produce  NULL  or default\nvalues instead of failing when corrupt or invalid data is encountered,\nthe  TRY  function may be useful. To specify default values, the  TRY \nfunction can be used in conjunction with the  COALESCE  function. \n The following errors are handled by  TRY : \n \n Division by zero \n Invalid cast or function argument \n Numeric value out of range \n \n Examples \n Source table with some invalid data: \n  (#__codelineno-6-1) SELECT   *   FROM   shipping ; \n \n  (#__codelineno-7-1) origin_state | origin_zip | packages | total_cost\n  (#__codelineno-7-2) --------------+------------+----------+------------\n  (#__codelineno-7-3) California   |      94131 |       25 |        100\n  (#__codelineno-7-4) California   |      P332a |        5 |         72\n  (#__codelineno-7-5) California   |      94025 |        0 |        155\n  (#__codelineno-7-6) New Jersey   |      08544 |      225 |        490\n  (#__codelineno-7-7) (4 rows)\n \n Query failure without  TRY : \n  (#__codelineno-8-1) SELECT   CAST ( origin_zip   AS   BIGINT )   FROM   shipping ; \n \n  (#__codelineno-9-1) Query failed: Cannot cast 'P332a' to BIGINT\n \n NULL  values with  TRY : \n  (#__codelineno-10-1) SELECT   TRY ( CAST ( origin_zip   AS   BIGINT ))   FROM   shipping ; \n \n  (#__codelineno-11-1) origin_zip\n  (#__codelineno-11-2) ------------\n  (#__codelineno-11-3)      94131\n  (#__codelineno-11-4)      NULL\n  (#__codelineno-11-5)      94025\n  (#__codelineno-11-6)      08544\n  (#__codelineno-11-7) (4 rows)\n \n Query failure without  TRY : \n  (#__codelineno-12-1) SELECT   total_cost   /   packages   AS   per_package   FROM   shipping ; \n \n  (#__codelineno-13-1) Query failed: Division by zero\n \n Default values with  TRY  and  COALESCE : \n  (#__codelineno-14-1) SELECT   COALESCE ( TRY ( total_cost   /   packages ),   0 )   AS   per_package   FROM   shipping ; \n \n  (#__codelineno-15-1) per_package\n  (#__codelineno-15-2) -------------\n  (#__codelineno-15-3)          4\n  (#__codelineno-15-4)         14\n  (#__codelineno-15-5)          0\n  (#__codelineno-15-6)         19\n  (#__codelineno-15-7) (4 rows)", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/conditional/#try"}
{"content": "Comparison operators \u00b6 \n \n \n \n Operator \n Description \n \n \n \n \n < \n Less than \n \n \n > \n Greater than \n \n \n <= \n Less than or equal to \n \n \n >= \n Greater than or equal to \n \n \n = \n Equal \n \n \n <> \n Not equal \n \n \n != \n Not equal (non-standard but popular syntax) \n \n \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/comparison/#comparison_operators"}
{"content": "Range operator: BETWEEN \u00b6 \n The  BETWEEN  operator tests if a value is within a specified range. It\nuses the syntax  value BETWEEN min AND max :\n  (#__codelineno-0-1)      SELECT   3   BETWEEN   2   AND   6 ; \n \nThe statement shown above is equivalent to the following statement:\n  (#__codelineno-1-1)      SELECT   3   >=   2   AND   3   <=   6 ; \n \nTo test if a value does not fall within the specified range use\n NOT BETWEEN :\n  (#__codelineno-2-1)      SELECT   3   NOT   BETWEEN   2   AND   6 ; \n \nThe statement shown above is equivalent to the following statement:\n  (#__codelineno-3-1)      SELECT   3   <   2   OR   3   >   6 ; \n \nA  NULL  in a  BETWEEN  or  NOT BETWEEN  statement is evaluated using\nthe standard  NULL  evaluation rules applied to the equivalent\nexpression above:\n  (#__codelineno-4-1)      SELECT   NULL   BETWEEN   2   AND   4 ;   -- null \n  (#__codelineno-4-2) \n  (#__codelineno-4-3)      SELECT   2   BETWEEN   NULL   AND   6 ;   -- null \n  (#__codelineno-4-4) \n  (#__codelineno-4-5)      SELECT   2   BETWEEN   3   AND   NULL ;   -- false \n  (#__codelineno-4-6) \n  (#__codelineno-4-7)      SELECT   8   BETWEEN   NULL   AND   6 ;   -- false \n \nThe  BETWEEN  and  NOT BETWEEN  operators can also be used to evaluate\nany orderable type. For example, a  VARCHAR :\n  (#__codelineno-5-1)      SELECT   'Paul'   BETWEEN   'John'   AND   'Ringo' ;   -- true \n \nNote that the value, min, and max parameters to  BETWEEN  and\n NOT BETWEEN  must be the same type. For example, Trino will produce an\nerror if you ask it if John is between 2.3 and 35.2.\n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/comparison/#range-operator-between"}
{"content": "IS NULL and IS NOT NULL \u00b6 \n The  IS NULL  and  IS NOT NULL  operators test whether a value is null\n(undefined). Both operators work for all data types. \n Using  NULL  with  IS NULL  evaluates to true:\n  (#__codelineno-6-1)      select   NULL   IS   NULL ;   -- true \n \nBut any other constant does not:\n  (#__codelineno-7-1)      SELECT   3 . 0   IS   NULL ;   -- false \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/comparison/#is-null-and-is-not-null"}
{"content": "IS DISTINCT FROM and IS NOT DISTINCT FROM \u00b6 \n In SQL a  NULL  value signifies an unknown value, so any comparison\ninvolving a  NULL  will produce  NULL . The  IS DISTINCT FROM  and\n IS NOT DISTINCT FROM  operators treat  NULL  as a known value and both\noperators guarantee either a true or false outcome even in the presence\nof  NULL  input:\n  (#__codelineno-8-1)      SELECT   NULL   IS   DISTINCT   FROM   NULL ;   -- false \n  (#__codelineno-8-2) \n  (#__codelineno-8-3)      SELECT   NULL   IS   NOT   DISTINCT   FROM   NULL ;   -- true \n \nIn the example shown above, a  NULL  value is not considered distinct\nfrom  NULL . When you are comparing values which may include  NULL  use\nthese operators to guarantee either a  TRUE  or  FALSE  result.\n The following truth table demonstrate the handling of  NULL  in\n IS DISTINCT FROM  and  IS NOT DISTINCT FROM : \n \n \n \n a \n b \n a = b \n a \\<> b \n a DISTINCT b \n a NOT DISTINCT b \n \n \n \n \n 1 \n 1 \n TRUE \n FALSE \n FALSE \n >  TRUE \n \n \n 1 \n 2 \n FALSE \n TRUE \n TRUE \n >  FALSE \n \n \n 1 \n NULL \n NULL \n NULL \n TRUE \n >  FALSE \n \n \n NULL \n NULL \n NULL \n NULL \n FALSE \n >  TRUE \n \n \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/comparison/#is_distinct_operator"}
{"content": "GREATEST and LEAST \u00b6 \n These functions are not in the SQL standard, but are a common extension.\nLike most other functions in Trino, they return null if any argument is\nnull. Note that in some other databases, such as PostgreSQL, they only\nreturn null if all arguments are null. \n The following types are supported:  DOUBLE ,  BIGINT ,  VARCHAR ,\n TIMESTAMP ,  TIMESTAMP WITH TIME ZONE ,  DATE \n greatest () \u00b6  (#greatest) \n greatest(value1, value2, ..., valueN)  \u2192  [same as input] \n Returns the largest of the provided values. \n least () \u00b6  (#least) \n least(value1, value2, ..., valueN)  \u2192  [same as input] \n Returns the smallest of the provided values. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/comparison/#greatest-and-least"}
{"content": "Quantified comparison predicates: ALL, ANY and SOME \u00b6 \n The  ALL ,  ANY  and  SOME  quantifiers can be used together with\ncomparison operators in the following way: \n  (#__codelineno-9-1) expression operator quantifier ( subquery )\n \n For example:\n  (#__codelineno-10-1)      SELECT   'hello'   =   ANY   ( VALUES   'hello' ,   'world' );   -- true \n  (#__codelineno-10-2) \n  (#__codelineno-10-3)      SELECT   21   <   ALL   ( VALUES   19 ,   20 ,   21 );   -- false \n  (#__codelineno-10-4) \n  (#__codelineno-10-5)      SELECT   42   >=   SOME   ( SELECT   41   UNION   ALL   SELECT   42   UNION   ALL   SELECT   43 );   -- true \n \nHere are the meanings of some quantifier and comparison operator\ncombinations:\n \n \n \n Expression \n Meaning \n \n \n \n \n A = ALL (...) \n Evaluates to  true  when  A  is equal to all values. \n \n \n A <> ALL (...) \n Evaluates to  true  when  A  doesn't match any value. \n \n \n A < ALL (...) \n Evaluates to  true  when  A  is smaller than the smallest value. \n \n \n A = ANY (...) \n Evaluates to  true  when  A  is equal to any of the values. This form is equivalent to  A IN (...) . \n \n \n A <> ANY (...) \n Evaluates to  true  when  A  doesn't match one or more values. \n \n \n A < ANY (...) \n Evaluates to  true  when  A  is smaller than the biggest value. \n \n \n \n ANY  and  SOME  have the same meaning and can be used interchangeably. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/comparison/#quantified_comparison_predicates"}
{"content": "Pattern comparison: LIKE \u00b6 \n The  LIKE  operator can be used to compare values with a pattern:\n  (#__codelineno-11-1)     ... column [NOT] LIKE 'pattern' ESCAPE 'character';\n \nMatching characters is case sensitive, and the pattern supports two\nsymbols for matching:\n \n _  matches any single character \n %  matches zero or more characters \n \n Typically it is often used as a condition in  WHERE  statements. An\nexample is a query to find all continents starting with  E , which\nreturns  Europe :\n  (#__codelineno-12-1)      SELECT   *   FROM   ( VALUES   'America' ,   'Asia' ,   'Africa' ,   'Europe' ,   'Australia' ,   'Antarctica' )   AS   t   ( continent ) \n  (#__codelineno-12-2)      WHERE   continent   LIKE   'E%' ; \n \nYou can negate the result by adding  NOT , and get all other continents,\nall not starting with  E :\n  (#__codelineno-13-1)      SELECT   *   FROM   ( VALUES   'America' ,   'Asia' ,   'Africa' ,   'Europe' ,   'Australia' ,   'Antarctica' )   AS   t   ( continent ) \n  (#__codelineno-13-2)      WHERE   continent   NOT   LIKE   'E%' ; \n \n If you only have one specific character to match, you can use the  _ \nsymbol for each character. The following query uses two underscores and\nproduces only  Asia  as result:\n  (#__codelineno-14-1)      SELECT   *   FROM   ( VALUES   'America' ,   'Asia' ,   'Africa' ,   'Europe' ,   'Australia' ,   'Antarctica' )   AS   t   ( continent ) \n  (#__codelineno-14-2)      WHERE   continent   LIKE   'A__A' ; \n \n The wildcard characters  _  and  %  must be escaped to allow you to\nmatch them as literals. This can be achieved by specifying the  ESCAPE \ncharacter to use:\n  (#__codelineno-15-1)      SELECT   'South_America'   LIKE   'South\\_America'   ESCAPE   '\\' ; \n \n The above query returns  true  since the escaped underscore symbol\nmatches. If you need to match the used escape character as well, you can\nescape it. \n If you want to match for the chosen escape character, you simply escape\nitself. For example, you can use  \\\\  to match for  '''' .", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/comparison/#pattern-comparison-like"}
{"content": "Chain Utility Functions \u00b6 \n Dune SQL offers a series of functions designed to ease some common tasks when working with blockchain data. \n These functions are helpful to generate links to the explorer of a chain, to specific addresses, or to specific transactions.\nMost of the time you'll want to use  get_href()  in combination with one of the other functions to generate a clickable link to a specific address or transaction. \n  (#__codelineno-0-1) Select \n  (#__codelineno-0-2)      get_href ( get_chain_explorer_address ( 'ethereum' ,   to ),   cast ( to   as   varchar )) \n  (#__codelineno-0-3) FROM   ethereum . transactions \n  (#__codelineno-0-4) limit   100 \n \n This sql code will generate a clickable link pointing to the explorer of the Ethereum chain for each address in the  to  column. The displayed link will be the address itself. \n You can find all the functions in action on this dashboard:  Chain Utility Functions  (https://dune.com/dune/chain-utility-functions) \n get_href() \u00b6  (#get_href) \n get_href(varchar, varchar)  \u2192 varchar \n This function converts a link and associated text into a clickable hyperlink. The first argument is the link, and the second argument is the text to be displayed. \n  (#__codelineno-1-1) SELECT   \n  (#__codelineno-1-2)      get_href ( 'https://dune.com' ,   'Dune' ) \n \n get_chain_explorer_address() \u00b6  (#get_chain_explorer_address) \n get_chain_explorer_address(varchar, varchar)  \u2192 varchar \n This function generates a URL for the explorer of a specified chain (provided as a varchar) for a given address (also provided as a varchar). \n  (#__codelineno-2-1) SELECT   \n  (#__codelineno-2-2)      get_chain_explorer_address ( 'ethereum' ,   cast ( to   as   varchar ))   \n  (#__codelineno-2-3) FROM   ethereum . transactions   \n  (#__codelineno-2-4) limit   100 \n \n get_chain_explorer_address() \u00b6  (#get_chain_explorer_address_1) \n get_chain_explorer_address(varchar, varbinary)  \u2192 varchar \n This function generates a URL for the explorer of a specified chain (provided as a varchar) for a given address (provided as a varbinary). \n  (#__codelineno-3-1) SELECT   \n  (#__codelineno-3-2)      get_chain_explorer_address ( 'ethereum' ,   to )   \n  (#__codelineno-3-3) FROM   ethereum . transactions   \n  (#__codelineno-3-4) limit   100 \n \n get_chain_explorer_tx_hash() \u00b6  (#get_chain_explorer_tx_hash) \n get_chain_explorer_tx_hash(varchar, varchar)  \u2192 varchar \n This function generates a URL for the explorer of a specified chain (provided as a varchar) for a given transaction hash (also provided as a varchar). \n  (#__codelineno-4-1) SELECT   \n  (#__codelineno-4-2)      get_chain_explorer_tx_hash ( 'ethereum' ,   cast ( hash   as   varchar ))   \n  (#__codelineno-4-3) FROM   ethereum . transactions   \n  (#__codelineno-4-4) limit   100 \n \n get_chain_explorer_tx_hash() \u00b6  (#get_chain_explorer_tx_hash_1) \n get_chain_explorer_tx_hash(varchar, varbinary)  \u2192 varchar \n This function generates a URL for the explorer of a specified chain (provided as a varchar) for a given transaction hash (provided as a varbinary). \n  (#__codelineno-5-1) SELECT   \n  (#__codelineno-5-2)      get_chain_explorer_tx_hash ( 'ethereum' ,   hash )   \n  (#__codelineno-5-3) FROM   ethereum . transactions   \n  (#__codelineno-5-4) limit   100 \n \n get_chain_explorer() \u00b6  (#get_chain_explorer) \n get_chain_explorer(varchar)  \u2192 varchar \n This function returns the URL of the explorer for a specified chain (provided as a varchar). \n  (#__codelineno-6-1) SELECT   \n  (#__codelineno-6-2)      get_chain_explorer ( 'ethereum' ) \n \n get_balancer_link() \u00b6  (#get_balancer_link) \n get_balancer_link(varchar, varchar)  \u2192 varchar \n This function returns a link to access a specific pool on the Balancer app. The first argument is the chain, and the second argument is the pool Id (provided as varchar). \n  (#__codelineno-7-1) SELECT   \n  (#__codelineno-7-2)      get_balancer_link ( blockchain ,   cast ( pool_id   as   varchar )) \n  (#__codelineno-7-3) FROM   balancer . trades \n  (#__codelineno-7-4) limit   100 \n \n get_balancer_link() \u00b6  (#get_balancer_link_1) \n get_balancer_link(varchar, varbinary)  \u2192 varchar \n This function returns a link to access a specific pool on the Balancer app. The first argument is the chain, and the second argument is the pool Id (provided as varbinary). \n  (#__codelineno-8-1) SELECT   \n  (#__codelineno-8-2)      get_balancer_link ( blockchain ,   pool_id ) \n  (#__codelineno-8-3) FROM   balancer . trades \n  (#__codelineno-8-4) limit   100 \n \n all_evm_chains() \u00b6  (#all_evm_chains) \n all_evm_chains()  \u2192 array(varchar) \n  (#__codelineno-9-1) SELECT   \n  (#__codelineno-9-2)      all_evm_chains () \n \n This function returns an array listing all the EVM chains available on Dune. \n all_op_chains() \u00b6  (#all_op_chains) \n all_op_chains()  \u2192 array(varchar) \n  (#__codelineno-10-1) SELECT   \n  (#__codelineno-10-2)      all_op_chains () \n \n This function returns an array listing all the Optimism chains available on Dune.", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/chain-utility-functions/#chain-utility-functions"}
{"content": "Binary operators \u00b6 \n The  ||  operator performs concatenation. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/binary/#binary-operators"}
{"content": "Binary functions \u00b6 \n concat() \u00b6  (#concat) \n concat(binary1, ..., binaryN)  \u2192 varbinary \n Returns the concatenation of binary1, binary2, ..., binaryN. This function provides the same functionality as the SQL-standard concatenation operator (||). \n length() \u00b6  (#length) \n length(binary)  \u2192 bigint \n Returns the length of binary in bytes. \n lpad() \u00b6  (#lpad) \n lpad(binary, size, padbinary)  \u2192 varbinary \n Left pads binary to size bytes with padbinary. If size is less than the length of binary, the result is truncated to size characters. size must not be negative and padbinary must be non-empty. \n rpad() \u00b6  (#rpad) \n rpad(binary, size, padbinary)  \u2192 varbinary \n Right pads binary to size bytes with padbinary. If size is less than the length of binary, the result is truncated to size characters. size must not be negative and padbinary must be non-empty. \n substr() \u00b6  (#substr) \n substr(binary, start)  \u2192 varbinary \n Returns the rest of binary from the starting position start, measured in bytes. Positions start with 1. A negative starting position is interpreted as being relative to the end of the string. \n substr(binary, start, length)  \u2192 varbinary \n Returns a substring from binary of length length from the starting position start, measured in bytes. Positions start with 1. A negative starting position is interpreted as being relative to the end of the string. \n reverse() \u00b6  (#reverse) \n reverse(binary)  \u2192 varbinary \n Returns binary with the bytes in reverse order. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/binary/#binary-functions"}
{"content": "Base64 encoding functions \u00b6 \n from_base64() \u00b6  (#from_base64) \n from_base64(string)  \u2192 varbinary \n Decodes binary data from the base64 encoded string. \n to_base64() \u00b6  (#to_base64) \n to_base64(binary)  \u2192 varchar \n Encodes binary into a base64 string representation. \n from_base64url() \u00b6  (#from_base64url) \n from_base64url(string)  \u2192 varbinary \n Decodes binary data from the base64 encoded string using the URL safe alphabet. \n to_base64url() \u00b6  (#to_base64url) \n to_base64url(binary)  \u2192 varchar \n Encodes binary into a base64 string representation using the URL safe alphabet. \n from_base32() \u00b6  (#from_base32) \n from_base32(string)  \u2192 varbinary \n Decodes binary data from the base32 encoded string. \n to_base32() \u00b6  (#to_base32) \n to_base32(binary)  \u2192 varchar \n Encodes binary into a base32 string representation. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/binary/#base64-encoding-functions"}
{"content": "Hex encoding functions \u00b6 \n from_hex() \u00b6  (#from_hex) \n from_hex(string)  \u2192 varbinary \n Decodes binary data from the hex encoded string. \n to_hex() \u00b6  (#to_hex) \n to_hex(binary)  \u2192 varchar \n Encodes binary into a hex string representation. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/binary/#hex-encoding-functions"}
{"content": "Integer encoding functions \u00b6 \n from_big_endian_32() \u00b6  (#from_big_endian_32) \n from_big_endian_32(binary)  \u2192 integer \n Decodes the 32-bit two\u2019s complement big-endian binary. The input must be exactly 4 bytes. \n to_big_endian_32() \u00b6  (#to_big_endian_32) \n to_big_endian_32(integer)  \u2192 varbinary \n Encodes integer into a 32-bit two\u2019s complement big-endian format. \n from_big_endian_64() \u00b6  (#from_big_endian_64) \n from_big_endian_64(binary)  \u2192 bigint \n Decodes the 64-bit two\u2019s complement big-endian binary. The input must be exactly 8 bytes. \n to_big_endian_64() \u00b6  (#to_big_endian_64) \n to_big_endian_64(bigint)  \u2192 varbinary \n Encodes bigint into a 64-bit two\u2019s complement big-endian format. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/binary/#integer-encoding-functions"}
{"content": "Floating-point encoding functions \u00b6 \n from_ieee754_32() \u00b6  (#from_ieee754_32) \n from_ieee754_32(binary)  \u2192 real \n Decodes the 32-bit big-endian binary in IEEE 754 single-precision floating-point format. The input must be exactly 4 bytes. \n to_ieee754_32() \u00b6  (#to_ieee754_32) \n to_ieee754_32(real)  \u2192 varbinary \n Encodes real into a 32-bit big-endian binary according to IEEE 754 single-precision floating-point format. \n from_ieee754_64() \u00b6  (#from_ieee754_64) \n from_ieee754_64(binary)  \u2192 double \n Decodes the 64-bit big-endian binary in IEEE 754 double-precision floating-point format. The input must be exactly 8 bytes. \n to_ieee754_64() \u00b6  (#to_ieee754_64) \n to_ieee754_64(double)  \u2192 varbinary \n Encodes double into a 64-bit big-endian binary according to IEEE 754 double-precision floating-point format. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/binary/#floating-point-encoding-functions"}
{"content": "Hashing functions \u00b6 \n crc32() \u00b6  (#crc32) \n crc32(binary)  \u2192 bigint \n Computes the CRC-32 of binary. For general purpose hashing, use xxhash64(), as it is much faster and produces a better quality hash. \n md5() \u00b6  (#md5) \n md5(binary)  \u2192 varbinary \n Computes the MD5 hash of binary. \n sha1() \u00b6  (#sha1) \n sha1(binary)  \u2192 varbinary \n Computes the SHA1 hash of binary. \n sha256() \u00b6  (#sha256) \n sha256(binary)  \u2192 varbinary \n Computes the SHA256 hash of binary. \n sha512() \u00b6  (#sha512) \n sha512(binary)  \u2192 varbinary \n Computes the SHA512 hash of binary. \n spooky_hash_v2_32() \u00b6  (#spooky_hash_v2_32) \n spooky_hash_v2_32(binary)  \u2192 varbinary \n Computes the 32-bit SpookyHashV2 hash of binary. \n spooky_hash_v2_64() \u00b6  (#spooky_hash_v2_64) \n spooky_hash_v2_64(binary)  \u2192 varbinary \n Computes the 64-bit SpookyHashV2 hash of binary. \n xxhash64() \u00b6  (#xxhash64) \n xxhash64(binary)  \u2192 varbinary \n Computes the 64-bit xxHash hash of binary. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/binary/#hashing-functions"}
{"content": "HMAC functions \u00b6 \n hmac_md5() \u00b6  (#hmac_md5) \n hmac_md5(binary, key)  \u2192 varbinary \n Computes HMAC with MD5 of binary with the given key. \n hmac_sha1() \u00b6  (#hmac_sha1) \n hmac_sha1(binary, key)  \u2192 varbinary \n Computes HMAC with SHA1 of binary with the given key. \n hmac_sha256() \u00b6  (#hmac_sha256) \n hmac_sha256(binary, key)  \u2192 varbinary \n Computes HMAC with SHA256 of binary with the given key. \n hmac_sha512() \u00b6  (#hmac_sha512) \n hmac_sha512(binary, key)  \u2192 varbinary \n Computes HMAC with SHA512 of binary with the given key.", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/binary/#hmac-functions"}
{"content": "Functions \u00b6 \n from_base58() \u00b6  (#from_base58) \n from_base58(varchar)  \u2192  varbinary \n Converts a Base58-encoded string to a  VARBINARY  value. \n  (#__codelineno-3-1) SELECT   \n  (#__codelineno-3-2)      from_base58 ( '3DZBMRwnSU8f' ) \n  (#__codelineno-3-3) -- results in VARBINARY 0x030094357700000000 \n \n to_base58() \u00b6  (#to_base58) \n to_base58(varbinary)  \u2192  varchar \n Converts a  VARBINARY  value to a Base58-encoded string. \n  (#__codelineno-4-1) SELECT   \n  (#__codelineno-4-2)      to_base58 ( 0 x030094357700000000 ) \n  (#__codelineno-4-3) -- results in base58 encoded varchar 3DZBMRwnSU8f", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/base58/#functions"}
{"content": "Skip to content\n          (#overview) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/query-executions.md) \n ", "url": "https://dune.com/docs/query/query-executions/"}
{"content": "Array functions \u00b6 \n allmatch() \u00b6  (#allmatch) \n allmatch(array(T), function(T,boolean))  \u2192 boolean \n Returns whether all elements of an array match the given predicate.\nReturns  true  if all the elements match the predicate (a special case\nis when the array is empty);  false  if one or more elements don\\'t\nmatch;  NULL  if the predicate function returns  NULL  for one or more\nelements and  true  for all other elements. \n anymatch() \u00b6  (#anymatch) \n any_match(array(T), function(T,boolean))  \u2192 boolean \n Returns whether any elements of an array match the given predicate.\nReturns  true  if one or more elements match the predicate;  false  if\nnone of the elements matches (a special case is when the array is\nempty);  NULL  if the predicate function returns  NULL  for one or more\nelements and  false  for all other elements. \n array_distinct() \u00b6  (#array_distinct) \n array_distinct(x)  \u2192 array \n Remove duplicate values from the array  x . \n array_except() \u00b6  (#array_except) \n array_except(x, y)  \u2192 array \n Returns an array of elements in  x  but not in  y , without duplicates. \n array_histogram() \u00b6  (#array_histogram) \n array_histogram(x)  \u2192 map \n Returns a map where the keys are the unique elements in the input array  x  and the values are the number of times that each element appears in  x . Null values are ignored.\n  (#__codelineno-2-1)      SELECT   array_histogram ( ARRAY [ 42 ,   7 ,   42 ,   NULL ]); \n  (#__codelineno-2-2)      -- {42=2, 7=1} \n \n Returns an empty map if the input array has no non-null elements.\n  (#__codelineno-3-1)      SELECT   array_histogram ( ARRAY [ NULL ,   NULL ]); \n  (#__codelineno-3-2)      -- {} \n \n array_intersect() \u00b6  (#array_intersect) \n array_intersect(x, y)  \u2192 array \n Returns an array of the elements in the intersection of  x  and  y , without duplicates. \n array_join() \u00b6  (#array_join) \n array_join(x, delimiter, null_replacement)  \u2192 varchar \n Concatenates the elements of the given array using the delimiter and an optional string to replace nulls. \n array_max() \u00b6  (#array_max) \n array_max(x)  \u2192 x \n Returns the maximum value of input array. \n array_min() \u00b6  (#array_min) \n array_min(x)  \u2192 x \n Returns the minimum value of input array. \n array_position() \u00b6  (#array_position) \n array_position(x, element)  \u2192 bigint \n Returns the position of the f occurrence of the element in the array. Returns  NULL  if the element is not found. The position is counted from 1. \n array_remove() \u00b6  (#array_remove) \n array_remove(x, element)  \u2192 array \n Returns an array of elements in  x  without the element  element . \n array_sort() \u00b6  (#array_sort) \n array_sort(x)  \u2192 array \n Sorts and returns the array  x . The elements of  x  must be orderable. Null elements will be placed at the end of the returned array. The sort is stable, meaning that the relative order of elements that are equal is preserved. \n array_sort(array(T), function(T,T,int))  \u2192 array(T) \n Sorts and returns the  array  based on the given comparator  function . The comparator will take two nullable arguments representing two nullable elements of the  array . It returns -1, 0, or 1 as the f nullable element is less than, equal to, or greater than the second nullable element. If the comparator function returns other values (including  NULL ), the query will fail and raise an error.\n  (#__codelineno-4-1)      SELECT   array_sort ( ARRAY [ 3 ,   2 ,   5 ,   1 ,   2 ], \n  (#__codelineno-4-2)                    ( x ,   y )   ->   IF ( x   <   y ,   1 ,   IF ( x   =   y ,   0 ,   - 1 ))); \n  (#__codelineno-4-3) -- [5, 3, 2, 2, 1] \n  (#__codelineno-4-4) \n  (#__codelineno-4-5) SELECT   array_sort ( ARRAY [ 'bc' ,   'ab' ,   'dc' ], \n  (#__codelineno-4-6)                    ( x ,   y )   ->   IF ( x   <   y ,   1 ,   IF ( x   =   y ,   0 ,   - 1 ))); \n  (#__codelineno-4-7) -- ['dc', 'bc', 'ab'] \n  (#__codelineno-4-8) \n  (#__codelineno-4-9) \n  (#__codelineno-4-10) SELECT   array_sort ( ARRAY [ 3 ,   2 ,   null ,   5 ,   null ,   1 ,   2 ], \n  (#__codelineno-4-11)                    -- sort null first with descending order \n  (#__codelineno-4-12)                    ( x ,   y )   ->   CASE   WHEN   x   IS   NULL   THEN   - 1 \n  (#__codelineno-4-13)                                   WHEN   y   IS   NULL   THEN   1 \n  (#__codelineno-4-14)                                   WHEN   x   <   y   THEN   1 \n  (#__codelineno-4-15)                                   WHEN   x   =   y   THEN   0 \n  (#__codelineno-4-16)                                   ELSE   - 1   END ); \n  (#__codelineno-4-17) -- [null, null, 5, 3, 2, 2, 1] \n  (#__codelineno-4-18) \n  (#__codelineno-4-19) SELECT   array_sort ( ARRAY [ 3 ,   2 ,   null ,   5 ,   null ,   1 ,   2 ], \n  (#__codelineno-4-20)                    -- sort null last with descending order \n  (#__codelineno-4-21)                    ( x ,   y )   ->   CASE   WHEN   x   IS   NULL   THEN   1 \n  (#__codelineno-4-22)                                   WHEN   y   IS   NULL   THEN   - 1 \n  (#__codelineno-4-23)                                   WHEN   x   <   y   THEN   1 \n  (#__codelineno-4-24)                                   WHEN   x   =   y   THEN   0 \n  (#__codelineno-4-25)                                   ELSE   - 1   END ); \n  (#__codelineno-4-26) -- [5, 3, 2, 2, 1, null, null] \n  (#__codelineno-4-27) \n  (#__codelineno-4-28) SELECT   array_sort ( ARRAY [ 'a' ,   'abcd' ,   'abc' ], \n  (#__codelineno-4-29)                    -- sort by string length \n  (#__codelineno-4-30)                    ( x ,   y )   ->   IF ( length ( x )   <   length ( y ),   - 1 , \n  (#__codelineno-4-31)                                 IF ( length ( x )   =   length ( y ),   0 ,   1 ))); \n  (#__codelineno-4-32) -- ['a', 'abc', 'abcd'] \n  (#__codelineno-4-33) \n  (#__codelineno-4-34) SELECT   array_sort ( ARRAY [ ARRAY [ 2 ,   3 ,   1 ],   ARRAY [ 4 ,   2 ,   1 ,   4 ],   ARRAY [ 1 ,   2 ]], \n  (#__codelineno-4-35)                    -- sort by array length \n  (#__codelineno-4-36)                    ( x ,   y )   ->   IF ( cardinality ( x )   <   cardinality ( y ),   - 1 , \n  (#__codelineno-4-37)                                 IF ( cardinality ( x )   =   cardinality ( y ),   0 ,   1 ))); \n  (#__codelineno-4-38) -- [[1, 2], [2, 3, 1], [4, 2, 1, 4]] \n \n array_union() \u00b6  (#array_union) \n array_union(x, y)  \u2192 array \n Returns an array of the elements in the union of  x  and  y , without duplicates. \n array_overlap() \u00b6  (#array_overlap) \n array_overlap(x, y)  \u2192 boolean \n Tests if arrays x and y have any non-null elements in common. Returns null if there are no non-null elements in common but either array contains null. \n cardinality() \u00b6  (#cardinality) \n cardinality(x)  \u2192 bigint \n Returns the cardinality (size) of the array x. \n concat() \u00b6  (#concat) \n concat(array1, array2, ..., arrayN)  \u2192 array \n Concatenates the arrays array1, array2, ..., arrayN. This function provides the same functionality as the SQL-standard concatenation operator (||). \n combinations() \u00b6  (#combinations) \n combinations(array(T), n)  -> array(array(T))   \n Returns n-element sub-groups of input array. If the input array has no duplicates, combinations returns n-element subsets.\n  (#__codelineno-5-1) SELECT   combinations ( ARRAY [ 'foo' ,   'bar' ,   'baz' ],   2 ); \n  (#__codelineno-5-2) -- [['foo', 'bar'], ['foo', 'baz'], ['bar', 'baz']] \n  (#__codelineno-5-3) \n  (#__codelineno-5-4) SELECT   combinations ( ARRAY [ 1 ,   2 ,   3 ],   2 ); \n  (#__codelineno-5-5) -- [[1, 2], [1, 3], [2, 3]] \n  (#__codelineno-5-6) \n  (#__codelineno-5-7) SELECT   combinations ( ARRAY [ 1 ,   2 ,   2 ],   2 ); \n  (#__codelineno-5-8) -- [[1, 2], [1, 2], [2, 2]] \n \nOrder of sub-groups is deterministic but unspecified. Order of elements within a sub-group deterministic but unspecified. n must be not be greater than 5, and the total size of sub-groups generated must be smaller than 100,000.\n contains() \u00b6  (#contains) \n contains(x, element)  \u2192 boolean \n Returns true if the array x contains the element. \n contains_sequence() \u00b6  (#contains_sequence) \n contains_sequence(x, seq)  \u2192 boolean \n Return true if array x contains all of array seq as a subsequence (all values in the same consecutive order). \n element_at() \u00b6  (#element_at) \n element_at(array(E), index)  \u2192 E \n Returns element of array at given index. If index > 0, this function provides the same functionality as the SQL-standard subscript operator ([]), except that the function returns NULL when accessing an index larger than array length, whereas the subscript operator would fail in such a case. If index < 0, element_at accesses elements from the last to the first. \n filter() \u00b6  (#filter) \n filter(array(T), function(T, boolean))  -> array(T) \n Constructs an array from those elements of array for which function returns true:\n  (#__codelineno-6-1) SELECT   filter ( ARRAY [],   x   ->   true ); \n  (#__codelineno-6-2) -- [] \n  (#__codelineno-6-3) \n  (#__codelineno-6-4) SELECT   filter ( ARRAY [ 5 ,   - 6 ,   NULL ,   7 ],   x   ->   x   >   0 ); \n  (#__codelineno-6-5) -- [5, 7] \n  (#__codelineno-6-6) \n  (#__codelineno-6-7) SELECT   filter ( ARRAY [ 5 ,   NULL ,   7 ,   NULL ],   x   ->   x   IS   NOT   NULL ); \n  (#__codelineno-6-8) -- [5, 7] \n \n flatten() \u00b6  (#flatten) \n flatten(x)  \u2192 array \n Flattens an array(array(T)) to an array(T) by concatenating the contained arrays. \n ngrams() \u00b6  (#ngrams) \n ngrams(array(T), n)  -> array(array(T)) \n Returns n-grams (sub-sequences of adjacent n elements) for the array. The order of the n-grams in the result is unspecified. \n  (#__codelineno-7-1) SELECT   ngrams ( ARRAY [ 'foo' ,   'bar' ,   'baz' ,   'foo' ],   2 ); \n  (#__codelineno-7-2) -- [['foo', 'bar'], ['bar', 'baz'], ['baz', 'foo']] \n  (#__codelineno-7-3) \n  (#__codelineno-7-4) SELECT   ngrams ( ARRAY [ 'foo' ,   'bar' ,   'baz' ,   'foo' ],   3 ); \n  (#__codelineno-7-5) -- [['foo', 'bar', 'baz'], ['bar', 'baz', 'foo']] \n  (#__codelineno-7-6) \n  (#__codelineno-7-7) SELECT   ngrams ( ARRAY [ 'foo' ,   'bar' ,   'baz' ,   'foo' ],   4 ); \n  (#__codelineno-7-8) -- [['foo', 'bar', 'baz', 'foo']] \n  (#__codelineno-7-9) \n  (#__codelineno-7-10) SELECT   ngrams ( ARRAY [ 'foo' ,   'bar' ,   'baz' ,   'foo' ],   5 ); \n  (#__codelineno-7-11) -- [['foo', 'bar', 'baz', 'foo']] \n  (#__codelineno-7-12) \n  (#__codelineno-7-13) SELECT   ngrams ( ARRAY [ 1 ,   2 ,   3 ,   4 ],   2 ); \n  (#__codelineno-7-14) -- [[1, 2], [2, 3], [3, 4]] \n \n none_match() \u00b6  (#none_match) \n none_match(array(T), function(T, boolean))  \u2192 boolean \n Returns whether no elements of an array match the given predicate. Returns true if none of the elements matches the predicate (a special case is when the array is empty); false if one or more elements match; NULL if the predicate function returns NULL for one or more elements and false for all other elements. \n reduce() \u00b6  (#reduce) \n reduce(array(T), initialState S, inputFunction(S, T, S), outputFunction(S, R))  \u2192 R \n Returns a single value reduced from array. inputFunction will be invoked for each element in array in order. In addition to taking the element, inputFunction takes the current state, initially initialState, and returns the new state. outputFunction will be invoked to turn the final state into the result value. It may be the identity function (i -> i). \n  (#__codelineno-8-1) SELECT   reduce ( ARRAY [],   0 , \n  (#__codelineno-8-2)                ( s ,   x )   ->   s   +   x , \n  (#__codelineno-8-3)                s   ->   s ); \n  (#__codelineno-8-4) -- 0 \n  (#__codelineno-8-5) \n  (#__codelineno-8-6) SELECT   reduce ( ARRAY [ 5 ,   20 ,   50 ],   0 , \n  (#__codelineno-8-7)                ( s ,   x )   ->   s   +   x , \n  (#__codelineno-8-8)                s   ->   s ); \n  (#__codelineno-8-9) -- 75 \n  (#__codelineno-8-10) \n  (#__codelineno-8-11) SELECT   reduce ( ARRAY [ 5 ,   20 ,   NULL ,   50 ],   0 , \n  (#__codelineno-8-12)                ( s ,   x )   ->   s   +   x , \n  (#__codelineno-8-13)                s   ->   s ); \n  (#__codelineno-8-14) -- NULL \n  (#__codelineno-8-15) \n  (#__codelineno-8-16) SELECT   reduce ( ARRAY [ 5 ,   20 ,   NULL ,   50 ],   0 , \n  (#__codelineno-8-17)                ( s ,   x )   ->   s   +   coalesce ( x ,   0 ), \n  (#__codelineno-8-18)                s   ->   s ); \n  (#__codelineno-8-19) -- 75 \n  (#__codelineno-8-20) \n  (#__codelineno-8-21) SELECT   reduce ( ARRAY [ 5 ,   20 ,   NULL ,   50 ],   0 , \n  (#__codelineno-8-22)                ( s ,   x )   ->   IF ( x   IS   NULL ,   s ,   s   +   x ), \n  (#__codelineno-8-23)                s   ->   s ); \n  (#__codelineno-8-24) -- 75 \n  (#__codelineno-8-25) \n  (#__codelineno-8-26) SELECT   reduce ( ARRAY [ 2147483647 ,   1 ],   BIGINT   '0' , \n  (#__codelineno-8-27)                ( s ,   x )   ->   s   +   x , \n  (#__codelineno-8-28)                s   ->   s ); \n  (#__codelineno-8-29) -- 2147483648 \n  (#__codelineno-8-30) \n  (#__codelineno-8-31) -- calculates arithmetic average \n  (#__codelineno-8-32) SELECT   reduce ( ARRAY [ 5 ,   6 ,   10 ,   20 ], \n  (#__codelineno-8-33)                CAST ( ROW ( 0 . 0 ,   0 )   AS   ROW ( sum   DOUBLE ,   count   INTEGER )), \n  (#__codelineno-8-34)                ( s ,   x )   ->   CAST ( ROW ( x   +   s . sum ,   s . count   +   1 )   AS \n  (#__codelineno-8-35)                               ROW ( sum   DOUBLE ,   count   INTEGER )), \n  (#__codelineno-8-36)                s   ->   IF ( s . count   =   0 ,   NULL ,   s . sum   /   s . count )); \n  (#__codelineno-8-37) -- 10.25 \n \n repeat() \u00b6  (#repeat) \n repeat(element, count)  \u2192 array \n Repeat element for count times. \n reverse() \u00b6  (#reverse) \n reverse(x)  \u2192 array \n Returns an array which has the reversed order of array x. \n sequence() \u00b6  (#sequence) \n sequence(start, stop) \n Generate a sequence of integers from start to stop, incrementing by 1 if start is less than or equal to stop, otherwise -1. \n sequence(start, stop, step) \n Generate a sequence of integers from start to stop, incrementing by step. \n sequence(start, stop) \n Generate a sequence of dates from start date to stop date, incrementing by 1 day if start date is less than or equal to stop date, otherwise -1 day. \n sequence(start, stop, step) \n Generate a sequence of dates from start to stop, incrementing by step. The type of step can be either INTERVAL DAY TO SECOND or INTERVAL YEAR TO MONTH. \n sequence(start, stop, step) \n Generate a sequence of timestamps from start to stop, incrementing by step. The type of step can be either INTERVAL DAY TO SECOND or INTERVAL YEAR TO MONTH. \n shuffle() \u00b6  (#shuffle) \n shuffle(x)  \u2192 array \n Generate a random permutation of the given array x. \n slice() \u00b6  (#slice) \n slice(x, start, length)  \u2192 array \n Subsets array x starting from index start (or starting from the end if start is negative) with a length of length. \n trim_array() \u00b6  (#trim_array) \n trim_array(x, n)  \u2192 array \n Remove n elements from the end of array: \n  (#__codelineno-9-1) SELECT   trim_array ( ARRAY [ 1 ,   2 ,   3 ,   4 ],   1 ); \n  (#__codelineno-9-2) -- [1, 2, 3] \n  (#__codelineno-9-3) \n  (#__codelineno-9-4) SELECT   trim_array ( ARRAY [ 1 ,   2 ,   3 ,   4 ],   2 ); \n  (#__codelineno-9-5) -- [1, 2] \n \n transform() \u00b6  (#transform) \n transform(array(T), function(T, R))  \u2192 array(R) \n Returns an array of the results of applying the given function to each element of the given array. The function must be deterministic and must return the same type for each invocation with the same argument. If the function returns NULL, the result of the transform is NULL. \n  (#__codelineno-10-1) SELECT   transform ( ARRAY [],   x   ->   x   +   1 ); \n  (#__codelineno-10-2) -- [] \n  (#__codelineno-10-3) \n  (#__codelineno-10-4) SELECT   transform ( ARRAY [ 5 ,   6 ],   x   ->   x   +   1 ); \n  (#__codelineno-10-5) -- [6, 7] \n  (#__codelineno-10-6) \n  (#__codelineno-10-7) SELECT   transform ( ARRAY [ 5 ,   NULL ,   6 ],   x   ->   coalesce ( x ,   0 )   +   1 ); \n  (#__codelineno-10-8) -- [6, 1, 7] \n  (#__codelineno-10-9) \n  (#__codelineno-10-10) SELECT   transform ( ARRAY [ 'x' ,   'abc' ,   'z' ],   x   ->   x   ||   '0' ); \n  (#__codelineno-10-11) -- ['x0', 'abc0', 'z0'] \n  (#__codelineno-10-12) \n  (#__codelineno-10-13) SELECT   transform ( ARRAY [ ARRAY [ 1 ,   NULL ,   2 ],   ARRAY [ 3 ,   NULL ]], \n  (#__codelineno-10-14)                   a   ->   filter ( a ,   x   ->   x   IS   NOT   NULL )); \n  (#__codelineno-10-15) -- [[1, 2], [3]] \n \n zip() \u00b6  (#zip) \n zip(array1, array2[, ...])  \u2192 array(row) \n Merges the given arrays, element-wise, into a single array of rows. The M-th element of the N-th argument will be the N-th field of the M-th output element. If the arguments have an uneven length, missing values are filled with NULL. \n  (#__codelineno-11-1) SELECT   zip ( ARRAY [ 1 ,   2 ],   ARRAY [ '1b' ,   null ,   '3b' ]); \n  (#__codelineno-11-2) -- [ROW(1, '1b'), ROW(2, null), ROW(null, '3b')] \n \n zip_with() \u00b6  (#zip_with) \n zip_with(array1, array2, function)  \u2192 array(R) \n Merges the given arrays, element-wise, into a single array using function. The M-th element of the N-th argument will be the N-th argument of the M-th invocation of function. If the arguments have an uneven length, missing values are filled with NULL. \n  (#__codelineno-12-1) SELECT   zip_with ( ARRAY [ 1 ,   3 ,   5 ],   ARRAY [ 'a' ,   'b' ,   'c' ], \n  (#__codelineno-12-2)                  ( x ,   y )   ->   ( y ,   x )); \n  (#__codelineno-12-3) -- [ROW('a', 1), ROW('b', 3), ROW('c', 5)] \n  (#__codelineno-12-4) \n  (#__codelineno-12-5) SELECT   zip_with ( ARRAY [ 1 ,   2 ],   ARRAY [ 3 ,   4 ], \n  (#__codelineno-12-6)                  ( x ,   y )   ->   x   +   y ); \n  (#__codelineno-12-7) -- [4, 6] \n  (#__codelineno-12-8) \n  (#__codelineno-12-9) SELECT   zip_with ( ARRAY [ 'a' ,   'b' ,   'c' ],   ARRAY [ 'd' ,   'e' ,   'f' ], \n  (#__codelineno-12-10)                  ( x ,   y )   ->   concat ( x ,   y )); \n  (#__codelineno-12-11) -- ['ad', 'be', 'cf'] \n  (#__codelineno-12-12) \n  (#__codelineno-12-13) SELECT   zip_with ( ARRAY [ 'a' ],   ARRAY [ 'd' ,   null ,   'f' ], \n  (#__codelineno-12-14)                  ( x ,   y )   ->   coalesce ( x ,   y )); \n  (#__codelineno-12-15) -- ['a', null, 'f']", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/array/#array-functions"}
{"content": "Skip to content\n          (#dunesql-features) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/query/index.md) \n Query \n Querying for blockchain data on Dune is powered by DuneSQL, a custom-built query engine designed for efficient analysis of blockchain data. \n ", "url": "https://dune.com/docs/query/"}
{"content": "Skip to content\n          (#bring-your-own-data) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/bring-your-own-data.md) \n ", "url": "https://dune.com/docs/data-tables/bring-your-own-data/"}
{"content": "Skip to content\n          (#tokens) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/community/reservoir/tokens.md) \n ", "url": "https://dune.com/docs/data-tables/community/reservoir/tokens/"}
{"content": "Skip to content\n          (#token-floor-ask-events) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/community/reservoir/token-floor-ask-events.md) \n ", "url": "https://dune.com/docs/data-tables/community/reservoir/token-floor-ask-events/"}
{"content": "Skip to content\n          (#token-attributes) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/community/reservoir/token-attributes.md) \n ", "url": "https://dune.com/docs/data-tables/community/reservoir/token-attributes/"}
{"content": "Skip to content\n          (#sales) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/community/reservoir/sales.md) \n ", "url": "https://dune.com/docs/data-tables/community/reservoir/sales/"}
{"content": "Skip to content\n          (#collections) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/community/reservoir/collections.md) \n ", "url": "https://dune.com/docs/data-tables/community/reservoir/collections/"}
{"content": "Ordering during aggregation \u00b6 \n Some aggregate functions such as  array_agg  produce different results depending on the order of input values. This ordering can be specified by writing an  order-by-clause  within the aggregate function: \n  (#__codelineno-0-1)      array_agg ( x   ORDER   BY   y   DESC ) \n  (#__codelineno-0-2)      array_agg ( x   ORDER   BY   x ,   y ,   z ) \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/aggregate/#aggregate-function-ordering-during-aggregation"}
{"content": "Filtering during aggregation \u00b6 \n The  FILTER  keyword can be used to remove rows from aggregation\nprocessing with a condition expressed using a  WHERE  clause. This is\nevaluated for each row before it is used in the aggregation and is\nsupported for all aggregate functions. \n  (#__codelineno-1-1) aggregate_function (...)   FILTER   ( WHERE   < condition > ) \n \n A common and very useful example is to use  FILTER  to remove nulls from\nconsideration when using  array_agg :\n  (#__codelineno-2-1)      SELECT   array_agg ( name )   FILTER   ( WHERE   name   IS   NOT   NULL ) \n  (#__codelineno-2-2)      FROM   region ; \n \nAs another example, imagine you want to add a condition on the count for\nIris flowers, modifying the following query:\n  (#__codelineno-3-1)      SELECT   species , \n  (#__codelineno-3-2)             count ( * )   AS   count \n  (#__codelineno-3-3)      FROM   iris \n  (#__codelineno-3-4)      GROUP   BY   species ; \n \n  (#__codelineno-4-1) species    | count\n  (#__codelineno-4-2) -----------+-------\n  (#__codelineno-4-3) setosa     |   50\n  (#__codelineno-4-4) virginica  |   50\n  (#__codelineno-4-5) versicolor |   50\n \n If you just use a normal  WHERE  statement you lose information: \n SELECT species,\n    count(*) AS count\nFROM iris\nWHERE petal_length_cm > 4\nGROUP BY species;\n \n  (#__codelineno-5-1) species    | count\n  (#__codelineno-5-2) -----------+-------\n  (#__codelineno-5-3) virginica  |   50\n  (#__codelineno-5-4) versicolor |   34\n \n Using a filter you retain all information: \n SELECT species,\n       count(*) FILTER (where petal_length_cm > 4) AS count\nFROM iris\nGROUP BY species;\n \n  (#__codelineno-6-1) species    | count\n  (#__codelineno-6-2) -----------+-------\n  (#__codelineno-6-3) virginica  |   50\n  (#__codelineno-6-4) setosa     |    0\n  (#__codelineno-6-5) versicolor |   34\n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/aggregate/#aggregate-function-filtering-during-aggregation"}
{"content": "General aggregate functions \u00b6 \n arbitrary() \u00b6  (#arbitrary) \n arbitrary(x)  \u2192 [same as input] \n Returns an arbitrary non-null value of  x , if one exists. \n any_value() \u00b6  (#any_value) \n any_value(x)  \u2192 [same as input] \n Returns an arbitrary non-null value of  x , if one exists. This is an alias for  arbitrary . \n array_agg() \u00b6  (#array_agg) \n array_agg(x)  \u2192 [same as input] \n Returns an array created from the input  x  elements. \n avg() \u00b6  (#avg) \n avg(x)  \u2192 double \n Returns the average (arithmetic mean) of all input values. \n avg(time interval type)  \u2192 time interval type \n Returns the average interval length of all input values. \n bool_and() \u00b6  (#bool_and) \n bool_and(boolean)  \u2192 boolean \n Returns  TRUE  if every input value is  TRUE , otherwise  FALSE . \n bool_or() \u00b6  (#bool_or) \n bool_or(boolean)  \u2192 boolean \n Returns  TRUE  if any input value is  TRUE , otherwise  FALSE . \n checksum() \u00b6  (#checksum) \n checksum(x)  \u2192 varbinary \n Returns an order-insensitive checksum of the given values. \n count() \u00b6  (#count) \n count(*)  \u2192 bigint \n Returns the number of input rows. \n count(x)  \u2192 bigint \n Returns the number of non-null input values. \n count_if() \u00b6  (#count_if) \n count_if(x)  \u2192 bigint \n Returns the number of  TRUE  input values. This function is equivalent to  count(CASE WHEN x THEN 1 END) . \n every() \u00b6  (#every) \n every(boolean)  \u2192 boolean \n This is an alias for  bool_and . \n geometric_mean() \u00b6  (#geometric_mean) \n geometric_mean(x)  \u2192 double \n Returns the geometric mean of all input values. \n listagg() \u00b6  (#listagg) \n listagg(x, separator)  \u2192 varchar \n Returns the concatenated input values, separated by the  separator  string. \n Synopsis:\n  (#__codelineno-7-1)      LISTAGG (   expression   [,   separator ]   [ ON   OVERFLOW   overflow_behaviour ]) \n  (#__codelineno-7-2)          WITHIN   GROUP   ( ORDER   BY   sort_item ,   [...]) \n \nIf  separator  is not specified, the empty string will be used as\n separator .\n In its simplest form the function looks like:\n  (#__codelineno-8-1)      SELECT   listagg ( value ,   ',' )   WITHIN   GROUP   ( ORDER   BY   value )   csv_value \n  (#__codelineno-8-2)      FROM   ( VALUES   'a' ,   'c' ,   'b' )   t ( value ); \n \nand results in:\n  (#__codelineno-9-1)     csv_value\n  (#__codelineno-9-2)     -----------\n  (#__codelineno-9-3)     'a,b,c'\n \nThe overflow behaviour is by default to throw an error in case that the\nlength of the output of the function exceeds  1048576  bytes:\n  (#__codelineno-10-1)      SELECT   listagg ( value ,   ','   ON   OVERFLOW   ERROR )   WITHIN   GROUP   ( ORDER \n  (#__codelineno-10-2)      BY   value )   csv_value \n  (#__codelineno-10-3)      FROM   ( VALUES   'a' ,   'c' ,   'b' )   t ( value ); \n \nand results in:\n  (#__codelineno-11-1)     csv_value\n  (#__codelineno-11-2)     -----------\n  (#__codelineno-11-3)     'a,c,b'\n \nThe overflow behaviour can also be to truncate the output:\n  (#__codelineno-12-1)      SELECT   listagg ( value ,   ','   ON   OVERFLOW   TRUNCATE )   WITHIN   GROUP   ( ORDER \n  (#__codelineno-12-2)      BY   value )   csv_value \n  (#__codelineno-12-3)      FROM   ( VALUES   'a' ,   'c' ,   'b' )   t ( value ); \n \nand results in:\n  (#__codelineno-13-1)     csv_value\n  (#__codelineno-13-2)     -----------\n  (#__codelineno-13-3)     'a,b'\n \nThe overflow behaviour can also be to skip the overflowed values:\n  (#__codelineno-14-1)      SELECT   listagg ( value ,   ','   ON   OVERFLOW   SKIP )   WITHIN   GROUP   ( ORDER \n  (#__codelineno-14-2)      BY   value )   csv_value \n \nThe current implementation of  LISTAGG  function does not support window\nframes.\n max() \u00b6  (#max) \n max(x)  \u2192 [same as input] \n Returns the maximum value of all input values. \n max(x, n)  \u2192 array<[same as x]> \n Returns  n  largest values of all input values of  x . \n max_by() \u00b6  (#max_by) \n max_by(x, y)  \u2192 [same as x] \n Returns the value of  x  associated with the maximum value of  y  over all input values. \n max_by(x, y, n)  \u2192 array<[same as x]> \n Returns  n  values of  x  associated with the  n  largest of all input values of  y  in descending order of  y . \n min() \u00b6  (#min) \n min(x)  \u2192 [same as input] \n Returns the minimum value of all input values. \n min(x, n)  \u2192 array<[same as x]> \n Returns  n  smallest values of all input values of  x . \n min_by() \u00b6  (#min_by) \n min_by(x, y)  \u2192 [same as x] \n Returns the value of  x  associated with the minimum value of  y  over all input values. \n min_by(x, y, n)  \u2192 array<[same as x]> \n Returns  n  values of  x  associated with the  n  smallest of all input values of  y  in ascending order of  y . \n sum() \u00b6  (#sum) \n sum(x)  \u2192 [same as input] \n Returns the sum of all input values. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/aggregate/#general-aggregate-functions"}
{"content": "Bitwise aggregate functions \u00b6 \n bitwise_and_agg() \u00b6  (#bitwise_and_agg) \n bitwise_and_agg(x)  \u2192 bigint \n Returns the bitwise AND of all input values in 2's complement representation. \n bitwise_or_agg() \u00b6  (#bitwise_or_agg) \n bitwise_or_agg(x)  \u2192 bigint \n Returns the bitwise OR of all input values in 2's complement representation. \n histogram() \u00b6  (#histogram) \n histogram(x)  \u2192 map \n Returns a map containing the count of the number of times each input value occurs. \n map_agg() \u00b6  (#map_agg) \n map_agg(key, value)  \u2192 map \n Returns a map created from the input  key  /  value  pairs. \n map_union() \u00b6  (#map_union) \n map_union(x(K,V))  \u2192 map \n Returns the union of all the input maps. If a key is found in multiple input maps, that key's value in the resulting map comes from an arbitrary input map. \n map_union_agg() \u00b6  (#map_union_agg) \n map_union_agg(x(K,V))  \u2192 map \n Returns the union of all the input maps. If a key is found in multiple input maps, that key's value in the resulting map comes from the last input map. \n multimap_agg() \u00b6  (#multimap_agg) \n multimap_agg(key, value)  \u2192 multimap \n Returns a multimap created from the input  key  /  value  pairs. \n multimap_union() \u00b6  (#multimap_union) \n multimap_union(x(K,V))  \u2192 multimap \n Returns the union of all the input multimaps. If a key is found in multiple input multimaps, that key's values in the resulting multimap are the union of all the values from the input multimaps. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/aggregate/#bitwise-aggregate-functions"}
{"content": "Approximate aggregate functions \u00b6 \n approx_distinct() \u00b6  (#approx_distinct) \n approx_distinct(x)  \u2192 bigint \n Returns the approximate number of distinct input values. This function provides an approximation of  count(DISTINCT x) . Zero is returned if all input values are null. \n This function should produce a standard error of 2.3%, which is the standard deviation of the (approximately normal) error distribution over all possible sets. It does not guarantee an upper bound on the error for any specific input set. \n approx_distinct(x, e)  \u2192 bigint \n Returns the approximate number of distinct input values. This function provides an approximation of  count(DISTINCT x) . Zero is returned if all input values are null. \n This function should produce a standard error of no more than  e , which is the standard deviation of the (approximately normal) error distribution over all possible sets. It does not guarantee an upper bound on the error for any specific input set. The current implementation of this function requires that  e  be in the range of 0.0040625 to 0.26000. \n approx_most_frequent() \u00b6  (#approx_most_frequent) \n approx_most_frequent(x, k)  \u2192 map<[same as x], bigint> \n Computes the top frequent values up to  buckets  elements approximately.\nApproximate estimation of the function enables us to pick up the\nfrequent values with less memory. Larger  capacity  improves the\naccuracy of underlying algorithm with sacrificing the memory capacity.\nThe returned value is a map containing the top elements with\ncorresponding estimated frequency. \n The error of the function depends on the permutation of the values and\nits cardinality. We can set the capacity same as the cardinality of the\nunderlying data to achieve the least error. \n buckets  and  capacity  must be  bigint .  value  can be numeric or\nstring type. \n The function uses the stream summary data structure proposed in the\npaper  Efficient Computation of Frequent and Top-k Elements in Data\nStreams  (https://www.cse.ust.hk/~raywong/comp5331/References/EfficientComputationOfFrequentAndTop-kElementsInDataStreams.pdf) \nby A. Metwalley, D. Agrawl and A. Abbadi. \n approx_percentile() \u00b6  (#approx_percentile) \n approx_percentile(x, percentage)  \u2192 [same as x] \n Returns the approximate percentile for all input values of  x  at the given  percentage . The value of  percentage  must be between zero and one and must be constant for all input rows. \n approx_percentile(x, percentages)  \u2192 array<[same as x]> \n Returns the approximate percentile for all input values of  x  at each of the specified percentages. Each element of the  percentages  array must be between zero and one, and the array must be constant for all input rows. \n approx_percentile(x, w, percentage)  \u2192 [same as x] \n Returns the approximate weighed percentile for all input values of  x  using the per-item weight  w  at the percentage  percentage . Weights must be greater or equal to 1. Integer-value weights can be thought of as a replication count for the value  x  in the percentile set. The value of  percentage  must be between zero and one and must be constant for all input rows. \n approx_percentile(x, w, percentages)  \u2192 array<[same as x]> \n Returns the approximate weighed percentile for all input values of  x  using the per-item weight  w  at each of the given percentages specified in the array. Weights must be greater or equal to 1. Integer-value weights can be thought of as a replication count for the value  x  in the percentile set. Each element of the  percentages  array must be between zero and one, and the array must be constant for all input rows. \n approx_set() \u00b6  (#approx_set) \n approx_set(x)  \u2192 HyperLogLog \n See  hyperloglog . \n merge() \u00b6  (#merge) \n merge(x)  \u2192 HyperLogLog \n See  hyperloglog . \n merge(qdigest(T))  \u2192 qdigest(T) \n See  qdigest . \n merge(tdigest)  \u2192 tdigest \n See  tdigest . \n numeric_histogram() \u00b6  (#numeric_histogram) \n numeric_histogram(buckets, value)  \u2192 map \n Computes an approximate histogram with up to  buckets  number of buckets for all  value s. This function is equivalent to the variant of  numeric_histogram  that takes a  weight , with a per-item weight of  1 . \n numeric_histogram(buckets, value, weight)  \u2192 map \n Computes an approximate histogram with up to  buckets  number of buckets for all  value s with a per-item weight of  weight . The algorithm is based loosely on: \n  (#__codelineno-15-1) Yael Ben-Haim and Elad Tom-Tov, \"A streaming parallel decision tree algorithm\", J. Machine Learning Research 11 (2010), pp. 849--872.\n \n buckets  must be a  bigint .  value  and  weight  must be numeric. \n qdigest_agg() \u00b6  (#qdigest_agg) \n qdigest_agg(x)  \u2192 qdigest \n See  Quantile digest functions  (../qdigest/) . \n qdigest_agg() \u00b6  (#qdigest_agg_1) \n qdigest_agg(x, w)  \u2192 qdigest \n See  Quantile digest functions  (../qdigest/) . \n tdigest_agg() \u00b6  (#tdigest_agg) \n tdigest_agg(x)  \u2192 tdigest \n See  T-Digest functions  (../tdigest/) . \n tdigest_agg() \u00b6  (#tdigest_agg_1) \n tdigest_agg(x, w)  \u2192 tdigest \n See  T-Digest functions  (../tdigest/) . \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/aggregate/#approximate-aggregate-functions"}
{"content": "Statistical aggregate functions \u00b6 \n corr() \u00b6  (#corr) \n corr(x, y)  \u2192 double \n Returns correlation coefficient of input values. \n covar_pop() \u00b6  (#covar_pop) \n covar_pop(y, x)  \u2192 double \n Returns the population covariance of input values. \n covar_samp() \u00b6  (#covar_samp) \n covar_samp(y, x)  \u2192 double \n Returns the sample covariance of input values. \n kurtosis() \u00b6  (#kurtosis) \n kurtosis(x)  \u2192 double \n Returns the excess kurtosis of all input values. Unbiased estimate using the following expression:\n  (#__codelineno-16-1) kurtosis(x) = n(n+1)/((n-1)(n-2)(n-3))sum[(x_i-mean)^4]/stddev(x)^4-3(n-1)^2/((n-2)(n-3))\n \n regr_intercept() \u00b6  (#regr_intercept) \n regr_intercept(y, x)  \u2192 double \n Returns linear regression intercept of input values.  y  is the dependent value and  x  is the independent value. \n regr_slope() \u00b6  (#regr_slope) \n regr_slope(y, x)  \u2192 double \n Returns linear regression slope of input values.  y  is the dependent value and  x  is the independent value. \n skewness() \u00b6  (#skewness) \n skewness(x)  \u2192 double \n Returns the skewness of all input values. Returns the Fisher\u2019s moment coefficient of  skewness  (https://en.wikipedia.org/wiki/Skewness)  of all input values. \n stddev() \u00b6  (#stddev) \n stddev(x)  \u2192 double \n Returns the standard deviation of all input values. \n stddev_pop() \u00b6  (#stddev_pop) \n stddev_pop(x)  \u2192 double \n Returns the population standard deviation of all input values. \n stddev_samp() \u00b6  (#stddev_samp) \n stddev_samp(x)  \u2192 double \n Returns the sample standard deviation of all input values. \n variance() \u00b6  (#variance) \n variance(x)  \u2192 double \n Returns the variance of all input values. \n var_pop() \u00b6  (#var_pop) \n var_pop(x)  \u2192 double \n Returns the population variance of all input values. \n var_samp() \u00b6  (#var_samp) \n var_samp(x)  \u2192 double \n Returns the sample variance of all input values. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/aggregate/#statistical-aggregate-functions"}
{"content": "Lambda aggregate functions \u00b6 \n reduce_agg() \u00b6  (#reduce_agg) \n reduce_agg(inputValue T, initialState S, inputFunction(S, T, S), combineFunction(S, S, S))  \u2192 S \n Reduces all input values into a single value.  inputFunction  will be\ninvoked for each non-null input value. In addition to taking the input\nvalue,  inputFunction  takes the current state, initially\n initialState , and returns the new state.  combineFunction  will be\ninvoked to combine two states into a new state. The final state is\nreturned:\n  (#__codelineno-17-1)      SELECT   id ,   reduce_agg ( value ,   0 ,   ( a ,   b )   ->   a   +   b ,   ( a ,   b )   ->   a   +   b ) \n  (#__codelineno-17-2)      FROM   ( \n  (#__codelineno-17-3)          VALUES \n  (#__codelineno-17-4)              ( 1 ,   3 ), \n  (#__codelineno-17-5)              ( 1 ,   4 ), \n  (#__codelineno-17-6)              ( 1 ,   5 ), \n  (#__codelineno-17-7)              ( 2 ,   6 ), \n  (#__codelineno-17-8)              ( 2 ,   7 ) \n  (#__codelineno-17-9)      )   AS   t ( id ,   value ) \n  (#__codelineno-17-10)      GROUP   BY   id ; \n  (#__codelineno-17-11)      -- (1, 12) \n  (#__codelineno-17-12)      -- (2, 13) \n \n  (#__codelineno-18-1)      SELECT   id ,   reduce_agg ( value ,   1 ,   ( a ,   b )   ->   a   *   b ,   ( a ,   b )   ->   a   *   b ) \n  (#__codelineno-18-2)      FROM   ( \n  (#__codelineno-18-3)          VALUES \n  (#__codelineno-18-4)              ( 1 ,   3 ), \n  (#__codelineno-18-5)              ( 1 ,   4 ), \n  (#__codelineno-18-6)              ( 1 ,   5 ), \n  (#__codelineno-18-7)              ( 2 ,   6 ), \n  (#__codelineno-18-8)              ( 2 ,   7 ) \n  (#__codelineno-18-9)      )   AS   t ( id ,   value ) \n  (#__codelineno-18-10)      GROUP   BY   id ; \n  (#__codelineno-18-11)      -- (1, 60) \n  (#__codelineno-18-12)      -- (2, 42) \n \n The state type must be a boolean, integer, floating-point, or\ndate/time/interval.", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/aggregate/#lambda-aggregate-functions"}
{"content": "DuneSQL Added Functions: \u00b6 \n \n Varbinary datatypes  (varbinary/) \n Base58  (base58/) \n Chain Utility Functions  (chain-utility-functions/) \n Varchar Utility Functions  (varchar-utility-functions/) \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/#dunesql-added-functions"}
{"content": "Trino Base Functions: \u00b6 \n \n Aggregate  (aggregate/)   \n Array  (array/)   \n Binary  (binary/)   \n Bitwise  (bitwise/) \n Comparison  (comparison/)   \n Conditional  (conditional/)   \n Conversion  (conversion/)   \n Date and time  (datetime/)   \n Decimal  (decimal/)   \n HyperLogLog  (hyperloglog/)   \n JSON  (json/)   \n Lambda  (lambda/)   \n Logical  (logical/)   \n Map  (map/)   \n Math  (math/)   \n Quantile digest  (qdigest/)   \n Regular expression  (regexp/)   \n Set Digest  (setdigest/)   \n String  (string/)   \n System  (system/)   \n Teradata  (teradata/)   \n T-Digest  (tdigest/)   \n URL  (url/)   \n UUID  (uuid/) \n Window  (window/)", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/#trino-base-functions"}
{"content": "Functions and Operators \u00b6 \n DuneSQL provides a wide array of functions and operators that enable you to perform various operations on your data. These include arithmetic, string manipulation, date and time calculations, and much more. \n \n \n \u2192 Functions and Operators  (Functions-and-operators/) \n \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/#functions-and-operators"}
{"content": "Data Types \u00b6 \n DuneSQL supports a variety of data types, including numeric, string, date, time, and boolean. Additionally, DuneSQL introduces custom data types and functions to better handle unique aspects of blockchain data, such as varbinary data types for addresses and hashes, as well as int256 and uint256 data types for large numeric values. \n \n \n \u2192 Data Types  (datatypes/) \n \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/#data-types"}
{"content": "SQL Statement Syntax \u00b6 \n DuneSQL follows the standard SQL syntax, which consists of a series of clauses that define how data should be retrieved, manipulated, or stored. Commonly used clauses include SELECT, FROM, WHERE, GROUP BY, ORDER BY, and LIMIT. Each clause serves a specific purpose and can be combined to create complex queries that meet your data analysis needs. \n Since DuneSQL is administrated by Dune, all  create ,  update ,  delete ,  drop  and other administrative statements are disabled. This is to ensure that the data in the database is not modified in any way. \nHowever, you can  query queries  (../query-a-query/)  in DuneSQL to replace the ability to create views and tables. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/#sql-statement-syntax"}
{"content": "Reserved Keywords \u00b6 \n DuneSQL has a number of reserved keywords that cannot be used as identifiers, such as table or column names. These keywords are used by DuneSQL to perform specific functions and cannot be used for other purposes.  \n \n \n \u2192 Reserved Keywords  (reserved-keywords/)", "url": "https://dune.com/docs/query/DuneSQL-reference/#reserved-keywords"}
{"content": "Skip to content\n          (#collection-top-bid-events) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/community/reservoir/collection-top-bid-events.md) \n ", "url": "https://dune.com/docs/data-tables/community/reservoir/collection-top-bid-events/"}
{"content": "Z \u00b6 \n \n zip \n zip_with", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list/#z"}
{"content": "Set Digest \u00b6 \n For more details, see  setdigest \n \n make_set_digest \n merge_set_digest \n cardinality() <setdigest-cardinality> {.interpreted-text\n    role=\"ref\"} \n intersection_cardinality \n jaccard_index \n hash_counts \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list-by-topic/#set-digest"}
{"content": "String \u00b6 \n For more details, see  string \n \n chr \n codepoint \n concat \n concat_ws \n format \n from_utf8 \n hamming_distance \n length \n levenshtein_distance \n lower \n lpad \n ltrim \n luhn_check \n normalize \n position \n replace \n reverse \n rpad \n rtrim \n soundex \n split \n split_part \n split_to_map \n split_to_multimap \n starts_with \n strpos \n substr \n substring \n to_utf8 \n translate \n trim \n upper \n word_stem \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list-by-topic/#string"}
{"content": "System \u00b6 \n For more details, see  system \n \n version \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list-by-topic/#system"}
{"content": "T-Digest \u00b6 \n For more details, see  tdigest \n \n merge() \n tdigest_agg \n value_at_quantile() \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list-by-topic/#t-digest"}
{"content": "Teradata \u00b6 \n For more details, see  teradata \n \n char2hexint \n index \n to_char \n to_timestamp \n to_date \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list-by-topic/#teradata"}
{"content": "URL \u00b6 \n For more details, see  url \n \n url_decode \n url_encode \n url_extract_fragment \n url_extract_host \n url_extract_parameter \n url_extract_path \n url_extract_port \n url_extract_protocol \n url_extract_query \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list-by-topic/#url"}
{"content": "UUID \u00b6 \n For more details, see  uuid \n \n uuid \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list-by-topic/#uuid"}
{"content": "Window \u00b6 \n For more details, see  window \n \n cume_dist \n dense_rank \n f_value \n lag \n last_value \n lead \n nth_value \n ntile \n percent_rank \n rank \n row_number", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/list-by-topic/#window"}
{"content": "Limitations \u00b6 \n The SQL standard describes the  datetime()  JSON path item method and\nthe  like_regex()  JSON path predicate. Trino does not support them. \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/json/#limitations"}
{"content": "JSON path modes \u00b6 \n The JSON path expression can be evaluated in two modes: strict and lax.\nIn the strict mode, it is required that the input JSON data strictly\nfits the schema required by the path expression. In the lax mode, the\ninput JSON data can diverge from the expected schema. \n The following table shows the differences between the two modes. \n \n \n \n Condition \n strict mode \n lax mode \n \n \n \n \n Performing an operation which requires a non-array on an array, e.g.: \n ERROR \n The array is automatically unnested, and the operation is performed on each array element.  $.key  requires a JSON object   $.floor()  requires a numeric value \n \n \n Performing an operation which requires an array on a non-array, e.g.: \n ERROR \n The non-array item is automatically wrapped in a singleton array, and the operation is performed on the array.  $[0] ,  $[*] ,  $.size() \n \n \n A structural error: accessing a non-existent element of an array or a non-existent member of a JSON object, e.g.: \n ERROR \n The error is suppressed, and the operation results in an empty sequence.  $[-1]  (array index out of bounds)  $.key , where the input JSON object does not have a member `key \n \n \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/json/#json_path_modes"}
{"content": "Examples of the lax mode behavior \u00b6 \n Let  <path>  return a sequence of three items, a JSON array, a JSON\nobject, and a scalar numeric value: \n  (#__codelineno-45-1) [1, \"a\", null], {\"key1\" : 1.0, \"key2\" : true}, -2e3\n \n The following example shows the wildcard array accessor in the lax mode.\nThe JSON array returns all its elements, while the JSON object and the\nnumber are wrapped in singleton arrays and then unnested, so effectively\nthey appear unchanged in the output sequence: \n  (#__codelineno-46-1) <path>[*] --> 1, \"a\", null, {\"key1\" : 1.0, \"key2\" : true}, -2e3\n \n When calling the  size()  method, the JSON object and the number are\nalso wrapped in singleton arrays: \n  (#__codelineno-47-1) <path>.size() --> 3, 1, 1\n \n In some cases, the lax mode cannot prevent failure. In the following\nexample, even though the JSON array is unwrapped prior to calling the\n floor()  method, the item  \"a\"  causes type mismatch. \n  (#__codelineno-48-1) <path>.floor() --> ERROR\n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/json/#examples-of-the-lax-mode-behavior"}
{"content": "json_exists \u00b6 \n The  json_exists  function determines whether a JSON value satisfies a\nJSON path specification. \n  (#__codelineno-49-1) JSON_EXISTS(\n  (#__codelineno-49-2)     json_input [ FORMAT JSON [ ENCODING { UTF8 | UTF16 | UTF32 } ] ],\n  (#__codelineno-49-3)     json_path\n  (#__codelineno-49-4)     [ PASSING json_argument [, ...] ]\n  (#__codelineno-49-5)     [ { TRUE | FALSE | UNKNOWN | ERROR } ON ERROR ]\n  (#__codelineno-49-6)     )\n \n The  json_path  is evaluated using the  json_input  as the context\nvariable ( $ ), and the passed arguments as the named variables\n( $variable_name ). The returned value is  true  if the path returns a\nnon-empty sequence, and  false  if the path returns an empty sequence.\nIf an error occurs, the returned value depends on the  ON ERROR  clause.\nThe default value returned  ON ERROR  is  FALSE . The  ON ERROR  clause\nis applied for the following kinds of errors: \n \n Input conversion errors, such as malformed JSON \n JSON path evaluation errors, e.g. division by zero \n \n json_input  is a character string or a binary string. It should contain\na single JSON item. For a binary string, you can specify encoding. \n json_path  is a string literal, containing the path mode specification,\nand the path expression, following the syntax rules described in\n json_path_syntax_and_semantics . \n  (#__codelineno-50-1) 'strict ($.price + $.tax)?(@ > 99.9)'\n  (#__codelineno-50-2) 'lax $[0 to 1].floor()?(@ > 10)'\n \n In the  PASSING  clause you can pass arbitrary expressions to be used by\nthe path expression. \n  (#__codelineno-51-1) PASSING orders.totalprice AS O_PRICE,\n  (#__codelineno-51-2)         orders.tax % 10 AS O_TAX\n \n The passed parameters can be referenced in the path expression by named\nvariables, prefixed with  $ . \n  (#__codelineno-52-1) 'lax $?(@.price > $O_PRICE || @.tax > $O_TAX)'\n \n Additionally to SQL values, you can pass JSON values, specifying the\nformat and optional encoding: \n  (#__codelineno-53-1) PASSING orders.json_desc FORMAT JSON AS o_desc,\n  (#__codelineno-53-2)         orders.binary_record FORMAT JSON ENCODING UTF16 AS o_rec\n \n Note that the JSON path language is case-sensitive, while the unquoted\nSQL identifiers are upper-cased. Therefore, it is recommended to use\nquoted identifiers in the  PASSING  clause: \n  (#__codelineno-54-1) 'lax $.$KeyName' PASSING nation.name AS KeyName --> ERROR; no passed value found\n  (#__codelineno-54-2) 'lax $.$KeyName' PASSING nation.name AS \"KeyName\" --> correct\n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/json/#json_exists"}
{"content": "Examples \u00b6 \n Let  customers  be a table containing two columns:  id:bigint ,\n description:varchar . \n \n \n \n id \n description \n \n \n \n \n 101 \n '{\"comment\" : \"nice\", \"children\" : [10, 13, 16]}' \n \n \n 102 \n '{\"comment\" : \"problematic\", \"children\" : [8, 11]}' \n \n \n 103 \n '{\"comment\" : \"knows best\", \"children\" : [2]}' \n \n \n \n The following query checks which customers have children above the age\nof 10: \n  (#__codelineno-55-1) SELECT \n  (#__codelineno-55-2)        id , \n  (#__codelineno-55-3)        json_exists ( \n  (#__codelineno-55-4)                    description , \n  (#__codelineno-55-5)                    'lax $.children[*]?(@ > 10)' \n  (#__codelineno-55-6)                   )   AS   children_above_ten \n  (#__codelineno-55-7) FROM   customers \n \n  (#__codelineno-56-1)   id    children_above_ten\n  (#__codelineno-56-2)   ----- --------------------\n  (#__codelineno-56-3)   101   true\n  (#__codelineno-56-4)   102   true\n  (#__codelineno-56-5)   103   false\n \nIn the following query, the path mode is strict. We check the third\nchild for each customer. This should cause a structural error for the\ncustomers who do not have three or more children. This error is handled\naccording to the  ON ERROR  clause.\n  (#__codelineno-57-1) SELECT\n  (#__codelineno-57-2)       id,\n  (#__codelineno-57-3)       json_exists(\n  (#__codelineno-57-4)                   description,\n  (#__codelineno-57-5)                   'strict $.children[2]?(@ > 10)'\n  (#__codelineno-57-6)                   UNKNOWN ON ERROR\n  (#__codelineno-57-7)                  ) AS child_3_above_ten\n  (#__codelineno-57-8) FROM customers\n \n  (#__codelineno-58-1)   id    child_3_above_ten\n  (#__codelineno-58-2)   ----- -------------------\n  (#__codelineno-58-3)   101   true\n  (#__codelineno-58-4)   102   NULL\n  (#__codelineno-58-5)   103   NULL\n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/json/#examples"}
{"content": "json_query \u00b6 \n The  json_query  function extracts a JSON value from a JSON value. \n  (#__codelineno-59-1) JSON_QUERY(\n  (#__codelineno-59-2)     json_input [ FORMAT JSON [ ENCODING { UTF8 | UTF16 | UTF32 } ] ],\n  (#__codelineno-59-3)     json_path\n  (#__codelineno-59-4)     [ PASSING json_argument [, ...] ]\n  (#__codelineno-59-5)     [ RETURNING type [ FORMAT JSON [ ENCODING { UTF8 | UTF16 | UTF32 } ] ] ]\n  (#__codelineno-59-6)     [ WITHOUT [ ARRAY ] WRAPPER |\n  (#__codelineno-59-7)       WITH [ { CONDITIONAL | UNCONDITIONAL } ] [ ARRAY ] WRAPPER ]\n  (#__codelineno-59-8)     [ { KEEP | OMIT } QUOTES [ ON SCALAR STRING ] ]\n  (#__codelineno-59-9)     [ { ERROR | NULL | EMPTY ARRAY | EMPTY OBJECT } ON EMPTY ]\n  (#__codelineno-59-10)     [ { ERROR | NULL | EMPTY ARRAY | EMPTY OBJECT } ON ERROR ]\n  (#__codelineno-59-11)     )\n \n The  json_path  is evaluated using the  json_input  as the context\nvariable ( $ ), and the passed arguments as the named variables\n( $variable_name ). \n The returned value is a JSON item returned by the path. By default, it\nis represented as a character string ( varchar ). In the  RETURNING \nclause, you can specify other character string type or  varbinary . With\n varbinary , you can also specify the desired encoding. \n json_input  is a character string or a binary string. It should contain\na single JSON item. For a binary string, you can specify encoding. \n json_path  is a string literal, containing the path mode specification,\nand the path expression, following the syntax rules described in\n json_path_syntax_and_semantics . \n  (#__codelineno-60-1) 'strict $.keyvalue()?(@.name == $cust_id)'\n  (#__codelineno-60-2) 'lax $[5 to last]'\n \n In the  PASSING  clause you can pass arbitrary expressions to be used by\nthe path expression. \n  (#__codelineno-61-1) PASSING orders.custkey AS CUST_ID\n \n The passed parameters can be referenced in the path expression by named\nvariables, prefixed with  $ . \n  (#__codelineno-62-1) 'strict $.keyvalue()?(@.value == $CUST_ID)'\n \n Additionally to SQL values, you can pass JSON values, specifying the\nformat and optional encoding: \n  (#__codelineno-63-1) PASSING orders.json_desc FORMAT JSON AS o_desc,\n  (#__codelineno-63-2)         orders.binary_record FORMAT JSON ENCODING UTF16 AS o_rec\n \n Note that the JSON path language is case-sensitive, while the unquoted\nSQL identifiers are upper-cased. Therefore, it is recommended to use\nquoted identifiers in the  PASSING  clause: \n  (#__codelineno-64-1) 'lax $.$KeyName' PASSING nation.name AS KeyName --> ERROR; no passed value found\n  (#__codelineno-64-2) 'lax $.$KeyName' PASSING nation.name AS \"KeyName\" --> correct\n \n The  ARRAY WRAPPER  clause lets you modify the output by wrapping the\nresults in a JSON array.  WITHOUT ARRAY WRAPPER  is the default option.\n WITH CONDITIONAL ARRAY WRAPPER  wraps every result which is not a\nsingleton JSON array or JSON object.  WITH UNCONDITIONAL ARRAY WRAPPER \nwraps every result. \n The  QUOTES  clause lets you modify the result for a scalar string by\nremoving the double quotes being part of the JSON string representation. \n Examples \u00b6  (#examples_1) \n Let  customers  be a table containing two columns:  id:bigint ,\n description:varchar . \n id    description \n \n 101   \\'{\\\"comment\\\" : \\\"nice\\\", \\\"children\\\" : [10, 13, 16]}\\'\n  102   \\'{\\\"comment\\\" : \\\"problematic\\\", \\\"children\\\" : [8, 11]}\\'\n  103   \\'{\\\"comment\\\" : \\\"knows best\\\", \\\"children\\\" : [2]}\\' \n The following query gets the  children  array for each customer: \n  (#__codelineno-65-1) SELECT\n  (#__codelineno-65-2)       id,\n  (#__codelineno-65-3)       json_query(\n  (#__codelineno-65-4)                  description,\n  (#__codelineno-65-5)                  'lax $.children'\n  (#__codelineno-65-6)                 ) AS children\n  (#__codelineno-65-7) FROM customers\n \n  (#__codelineno-66-1)   id    children\n  (#__codelineno-66-2)   ----- ------------------\n  (#__codelineno-66-3)   101   \\'\\[10,13,16\\]\\'\n  (#__codelineno-66-4)   102   \\'\\[8,11\\]\\'\n  (#__codelineno-66-5)   103   \\'\\[2\\]\\'\n \nThe following query gets the collection of children for each customer.\nNote that the  json_query  function can only output a single JSON item.\nIf you don\\'t use array wrapper, you get an error for every customer\nwith multiple children. The error is handled according to the  ON ERROR \nclause.\n  (#__codelineno-67-1) SELECT\n  (#__codelineno-67-2)       id,\n  (#__codelineno-67-3)       json_query(\n  (#__codelineno-67-4)                  description,\n  (#__codelineno-67-5)                  'lax $.children[*]'\n  (#__codelineno-67-6)                  WITHOUT ARRAY WRAPPER\n  (#__codelineno-67-7)                  NULL ON ERROR\n  (#__codelineno-67-8)                 ) AS children\n  (#__codelineno-67-9) FROM customers\n \n  (#__codelineno-68-1)   id    children\n  (#__codelineno-68-2)   ----- ----------\n  (#__codelineno-68-3)   101   NULL\n  (#__codelineno-68-4)   102   NULL\n  (#__codelineno-68-5)   103   \\'2\\'\n \n The following query gets the last child for each customer, wrapped in a\nJSON array: \n  (#__codelineno-69-1) SELECT\n  (#__codelineno-69-2)       id,\n  (#__codelineno-69-3)       json_query(\n  (#__codelineno-69-4)                  description,\n  (#__codelineno-69-5)                  'lax $.children[last]'\n  (#__codelineno-69-6)                  WITH ARRAY WRAPPER\n  (#__codelineno-69-7)                 ) AS last_child\n  (#__codelineno-69-8) FROM customers\n \n  (#__codelineno-70-1)   id    last_child\n  (#__codelineno-70-2)   ----- ------------\n  (#__codelineno-70-3)   101   \\'\\[16\\]\\'\n  (#__codelineno-70-4)   102   \\'\\[11\\]\\'\n  (#__codelineno-70-5)   103   \\'\\[2\\]\\'\n \nThe following query gets all children above the age of 12 for each\ncustomer, wrapped in a JSON array. The second and the third customer\ndon\\'t have children of this age. Such case is handled according to the\n ON EMPTY  clause. The default value returned  ON EMPTY  is  NULL . In\nthe following example,  EMPTY ARRAY ON EMPTY  is specified.\n  (#__codelineno-71-1) SELECT\n  (#__codelineno-71-2)       id,\n  (#__codelineno-71-3)       json_query(\n  (#__codelineno-71-4)                  description,\n  (#__codelineno-71-5)                  'strict $.children[*]?(@ > 12)'\n  (#__codelineno-71-6)                  WITH ARRAY WRAPPER\n  (#__codelineno-71-7)                  EMPTY ARRAY ON EMPTY\n  (#__codelineno-71-8)                 ) AS children\n  (#__codelineno-71-9) FROM customers\n \n  (#__codelineno-72-1)   id    children\n  (#__codelineno-72-2)   ----- ---------------\n  (#__codelineno-72-3)   101   \\'\\[13,16\\]\\'\n  (#__codelineno-72-4)   102   \\'\\[\\]\\'\n  (#__codelineno-72-5)   103   \\'\\[\\]\\'\n \nThe following query shows the result of the  QUOTES  clause. Note that\n KEEP QUOTES  is the default.\n  (#__codelineno-73-1) SELECT\n  (#__codelineno-73-2)       id,\n  (#__codelineno-73-3)       json_query(description, 'strict $.comment' KEEP QUOTES) AS quoted_comment,\n  (#__codelineno-73-4)       json_query(description, 'strict $.comment' OMIT QUOTES) AS unquoted_comment\n  (#__codelineno-73-5) FROM customers\n \n  (#__codelineno-74-1)   id    quoted_comment        unquoted_comment\n  (#__codelineno-74-2)   ----- --------------------- ------------------\n  (#__codelineno-74-3)   101   \\'\\\"nice\\\"\\'          \\'nice\\'\n  (#__codelineno-74-4)   102   \\'\\\"problematic\\\"\\'   \\'problematic\\'\n  (#__codelineno-74-5)   103   \\'\\\"knows best\\\"\\'    \\'knows best\\'\n \nIf an error occurs, the returned value depends on the  ON ERROR  clause.\nThe default value returned  ON ERROR  is  NULL . One example of error is\nmultiple items returned by the path. Other errors caught and handled\naccording to the  ON ERROR  clause are:\n \n Input conversion errors, such as malformed JSON \n JSON path evaluation errors, e.g. division by zero \n Output conversion errors \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/json/#json_query"}
{"content": "json_value \u00b6 \n The  json_value  function extracts a scalar SQL value from a JSON value. \n  (#__codelineno-75-1) JSON_VALUE(\n  (#__codelineno-75-2)     json_input [ FORMAT JSON [ ENCODING { UTF8 | UTF16 | UTF32 } ] ],\n  (#__codelineno-75-3)     json_path\n  (#__codelineno-75-4)     [ PASSING json_argument [, ...] ]\n  (#__codelineno-75-5)     [ RETURNING type ]\n  (#__codelineno-75-6)     [ { ERROR | NULL | DEFAULT expression } ON EMPTY ]\n  (#__codelineno-75-7)     [ { ERROR | NULL | DEFAULT expression } ON ERROR ]\n  (#__codelineno-75-8)     )\n \n The  json_path  is evaluated using the  json_input  as the context\nvariable ( $ ), and the passed arguments as the named variables\n( $variable_name ). \n The returned value is the SQL scalar returned by the path. By default,\nit is converted to string ( varchar ). In the  RETURNING  clause, you\ncan specify other desired type: a character string type, numeric,\nboolean or datetime type. \n json_input  is a character string or a binary string. It should contain\na single JSON item. For a binary string, you can specify encoding. \n json_path  is a string literal, containing the path mode specification,\nand the path expression, following the syntax rules described in\n json_path_syntax_and_semantics . \n  (#__codelineno-76-1) 'strict $.price + $tax'\n  (#__codelineno-76-2) 'lax $[last].abs().floor()'\n \n In the  PASSING  clause you can pass arbitrary expressions to be used by\nthe path expression. \n  (#__codelineno-77-1) PASSING orders.tax AS O_TAX\n \n The passed parameters can be referenced in the path expression by named\nvariables, prefixed with  $ . \n  (#__codelineno-78-1) 'strict $[last].price + $O_TAX'\n \n Additionally to SQL values, you can pass JSON values, specifying the\nformat and optional encoding: \n  (#__codelineno-79-1) PASSING orders.json_desc FORMAT JSON AS o_desc,\n  (#__codelineno-79-2)         orders.binary_record FORMAT JSON ENCODING UTF16 AS o_rec\n \n Note that the JSON path language is case-sensitive, while the unquoted\nSQL identifiers are upper-cased. Therefore, it is recommended to use\nquoted identifiers in the  PASSING  clause: \n  (#__codelineno-80-1) 'lax $.$KeyName' PASSING nation.name AS KeyName --> ERROR; no passed value found\n  (#__codelineno-80-2) 'lax $.$KeyName' PASSING nation.name AS \"KeyName\" --> correct\n \n If the path returns an empty sequence, the  ON EMPTY  clause is applied.\nThe default value returned  ON EMPTY  is  NULL . You can also specify\nthe default value: \n  (#__codelineno-81-1) DEFAULT -1 ON EMPTY\n \n If an error occurs, the returned value depends on the  ON ERROR  clause.\nThe default value returned  ON ERROR  is  NULL . One example of error is\nmultiple items returned by the path. Other errors caught and handled\naccording to the  ON ERROR  clause are: \n \n Input conversion errors, such as malformed JSON \n JSON path evaluation errors, e.g. division by zero \n Returned scalar not convertible to the desired type \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/json/#json_value"}
{"content": "Examples \u00b6 \n Let  customers  be a table containing two columns:  id:bigint ,\n description:varchar . \n id    description \n \n 101   \\'{\\\"comment\\\" : \\\"nice\\\", \\\"children\\\" : [10, 13, 16]}\\'\n  102   \\'{\\\"comment\\\" : \\\"problematic\\\", \\\"children\\\" : [8, 11]}\\'\n  103   \\'{\\\"comment\\\" : \\\"knows best\\\", \\\"children\\\" : [2]}\\' \n The following query gets the  comment  for each customer as  char(12) : \n  (#__codelineno-82-1) SELECT id, json_value(\n  (#__codelineno-82-2)                       description,\n  (#__codelineno-82-3)                       'lax $.comment'\n  (#__codelineno-82-4)                       RETURNING char(12)\n  (#__codelineno-82-5)                      ) AS comment\n  (#__codelineno-82-6) FROM customers\n \n  (#__codelineno-83-1)   id    comment\n  (#__codelineno-83-2)   ----- ------------------\n  (#__codelineno-83-3)   101   \\'nice \\'\n  (#__codelineno-83-4)   102   \\'problematic \\'\n  (#__codelineno-83-5)   103   \\'knows best \\'\n \nThe following query gets the f child\\'s age for each customer as\n tinyint :\n  (#__codelineno-84-1) SELECT id, json_value(\n  (#__codelineno-84-2)                       description,\n  (#__codelineno-84-3)                       'lax $.children[0]'\n  (#__codelineno-84-4)                       RETURNING tinyint\n  (#__codelineno-84-5)                      ) AS child\n  (#__codelineno-84-6) FROM customers\n \n  (#__codelineno-85-1)   id    child\n  (#__codelineno-85-2)   ----- -------\n  (#__codelineno-85-3)   101   10\n  (#__codelineno-85-4)   102   8\n  (#__codelineno-85-5)   103   2\n \nThe following query gets the third child\\'s age for each customer. In\nthe strict mode, this should cause a structural error for the customers\nwho do not have the third child. This error is handled according to the\n ON ERROR  clause.\n  (#__codelineno-86-1) SELECT id, json_value(\n  (#__codelineno-86-2)                       description,\n  (#__codelineno-86-3)                       'strict $.children[2]'\n  (#__codelineno-86-4)                       DEFAULT 'err' ON ERROR\n  (#__codelineno-86-5)                      ) AS child\n  (#__codelineno-86-6) FROM customers\n \n  (#__codelineno-87-1)   id    child\n  (#__codelineno-87-2)   ----- ---------\n  (#__codelineno-87-3)   101   \\'16\\'\n  (#__codelineno-87-4)   102   \\'err\\'\n  (#__codelineno-87-5)   103   \\'err\\'\n \nAfter changing the mode to lax, the structural error is suppressed, and\nthe customers without a third child produce empty sequence. This case is\nhandled according to the  ON EMPTY  clause.\n  (#__codelineno-88-1) SELECT id, json_value(\n  (#__codelineno-88-2)                       description,\n  (#__codelineno-88-3)                       'lax $.children[2]'\n  (#__codelineno-88-4)                       DEFAULT 'missing' ON EMPTY\n  (#__codelineno-88-5)                      ) AS child\n  (#__codelineno-88-6) FROM customers\n \n  (#__codelineno-89-1)   id    child\n  (#__codelineno-89-2)   ----- -------------\n  (#__codelineno-89-3)   101   \\'16\\'\n  (#__codelineno-89-4)   102   \\'missing\\'\n  (#__codelineno-89-5)   103   \\'missing\\'\n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/json/#examples_2"}
{"content": "json_array \u00b6 \n The  json_array  function creates a JSON array containing given\nelements. \n  (#__codelineno-90-1) JSON_ARRAY(\n  (#__codelineno-90-2)     [ array_element [, ...]\n  (#__codelineno-90-3)       [ { NULL ON NULL | ABSENT ON NULL } ] ],\n  (#__codelineno-90-4)     [ RETURNING type [ FORMAT JSON [ ENCODING { UTF8 | UTF16 | UTF32 } ] ] ]\n  (#__codelineno-90-5)     )\n \n Argument types \u00b6  (#argument-types) \n The array elements can be arbitrary expressions. Each passed value is\nconverted into a JSON item according to its type, and optional  FORMAT \nand  ENCODING  specification. \n You can pass SQL values of types boolean, numeric, and character string.\nThey are converted to corresponding JSON literals:\n  (#__codelineno-91-1)      SELECT   json_array ( true ,   12 e - 1 ,   'text' ) \n  (#__codelineno-91-2)      --> '[true,1.2,\"text\"]' \n \nAdditionally to SQL values, you can pass JSON values. They are character\nor binary strings with a specified format and optional encoding:\n  (#__codelineno-92-1)     SELECT json_array(\n  (#__codelineno-92-2)                       '[  \"text\"  ] ' FORMAT JSON,\n  (#__codelineno-92-3)                       X'5B0035005D00' FORMAT JSON ENCODING UTF16\n  (#__codelineno-92-4)                      )\n  (#__codelineno-92-5)     --> '[[\"text\"],[5]]'\n \n You can also nest other JSON-returning functions. In that case, the\n FORMAT  option is implicit:\n  (#__codelineno-93-1)      SELECT   json_array ( \n  (#__codelineno-93-2)                        json_query ( '{\"key\" : [  \"value\"  ]}' ,   'lax $.key' ) \n  (#__codelineno-93-3)                       ) \n  (#__codelineno-93-4)      --> '[[\"value\"]]' \n \nOther passed values are cast to varchar, and they become JSON text\nliterals:\n  (#__codelineno-94-1)      SELECT   json_array ( \n  (#__codelineno-94-2)                        DATE   '2001-01-31' , \n  (#__codelineno-94-3)                        UUID   '12151fd2-7586-11e9-8f9e-2a86e4085a59' \n  (#__codelineno-94-4)                       ) \n  (#__codelineno-94-5)      --> '[\"2001-01-31\",\"12151fd2-7586-11e9-8f9e-2a86e4085a59\"]' \n \nYou can omit the arguments altogether to get an empty array:\n  (#__codelineno-95-1)      SELECT   json_array ()   --> '[]' \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/json/#json_array"}
{"content": "Null handling \u00b6 \n If a value passed for an array element is  null , it is treated\naccording to the specified null treatment option. If  ABSENT ON NULL  is\nspecified, the null element is omitted in the result. If  NULL ON NULL \nis specified, JSON  null  is added to the result.  ABSENT ON NULL  is\nthe default configuration:\n  (#__codelineno-96-1)      SELECT   json_array ( true ,   null ,   1 ) \n  (#__codelineno-96-2)      --> '[true,1]' \n  (#__codelineno-96-3) \n  (#__codelineno-96-4)      SELECT   json_array ( true ,   null ,   1   ABSENT   ON   NULL ) \n  (#__codelineno-96-5)      --> '[true,1]' \n  (#__codelineno-96-6) \n  (#__codelineno-96-7)      SELECT   json_array ( true ,   null ,   1   NULL   ON   NULL ) \n  (#__codelineno-96-8)      --> '[true,null,1]' \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/json/#null-handling"}
{"content": "Returned type \u00b6 \n The SQL standard imposes that there is no dedicated data type to\nrepresent JSON data in SQL. Instead, JSON data is represented as\ncharacter or binary strings. By default, the  json_array  function\nreturns varchar containing the textual representation of the JSON array.\nWith the  RETURNING  clause, you can specify other character string\ntype:\n  (#__codelineno-97-1)      SELECT   json_array ( true ,   1   RETURNING   VARCHAR ( 100 )) \n  (#__codelineno-97-2)      --> '[true,1]' \n \n You can also specify to use varbinary and the required encoding as\nreturn type. The default encoding is UTF8:\n  (#__codelineno-98-1)      SELECT   json_array ( true ,   1   RETURNING   VARBINARY ) \n  (#__codelineno-98-2)      --> X'5b 74 72 75 65 2c 31 5d' \n  (#__codelineno-98-3) \n  (#__codelineno-98-4)      SELECT   json_array ( true ,   1   RETURNING   VARBINARY   FORMAT   JSON   ENCODING   UTF8 ) \n  (#__codelineno-98-5)      --> X'5b 74 72 75 65 2c 31 5d' \n  (#__codelineno-98-6) \n  (#__codelineno-98-7)      SELECT   json_array ( true ,   1   RETURNING   VARBINARY   FORMAT   JSON   ENCODING   UTF16 ) \n  (#__codelineno-98-8)      --> X'5b 00 74 00 72 00 75 00 65 00 2c 00 31 00 5d 00' \n  (#__codelineno-98-9) \n  (#__codelineno-98-10)      SELECT   json_array ( true ,   1   RETURNING   VARBINARY   FORMAT   JSON   ENCODING   UTF32 ) \n  (#__codelineno-98-11)      --> X'5b 00 00 00 74 00 00 00 72 00 00 00 75 00 00 00 65 00 00 00 2c 00 00 00 31 00 00 00 5d 00 00 00' \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/json/#returned-type"}
{"content": "json_object \u00b6 \n The  json_object  function creates a JSON object containing given\nkey-value pairs. \n  (#__codelineno-99-1) JSON_OBJECT(\n  (#__codelineno-99-2)     [ key_value [, ...]\n  (#__codelineno-99-3)       [ { NULL ON NULL | ABSENT ON NULL } ] ],\n  (#__codelineno-99-4)       [ { WITH UNIQUE [ KEYS ] | WITHOUT UNIQUE [ KEYS ] } ]\n  (#__codelineno-99-5)     [ RETURNING type [ FORMAT JSON [ ENCODING { UTF8 | UTF16 | UTF32 } ] ] ]\n  (#__codelineno-99-6)     )\n \n Argument passing conventions \u00b6  (#argument-passing-conventions) \n There are two conventions for passing keys and values:\n  (#__codelineno-100-1)      SELECT   json_object ( 'key1'   :   1 ,   'key2'   :   true ) \n  (#__codelineno-100-2)      --> '{\"key1\":1,\"key2\":true}' \n  (#__codelineno-100-3) \n  (#__codelineno-100-4)      SELECT   json_object ( KEY   'key1'   VALUE   1 ,   KEY   'key2'   VALUE   true ) \n  (#__codelineno-100-5)      --> '{\"key1\":1,\"key2\":true}' \n \nIn the second convention, you can omit the  KEY  keyword:\n  (#__codelineno-101-1)      SELECT   json_object ( 'key1'   VALUE   1 ,   'key2'   VALUE   true ) \n  (#__codelineno-101-2)      --> '{\"key1\":1,\"key2\":true}' \n \n Argument types \u00b6  (#argument-types_1) \n The keys can be arbitrary expressions. They must be of character string\ntype. Each key is converted into a JSON text item, and it becomes a key\nin the created JSON object. Keys must not be null. \n The values can be arbitrary expressions. Each passed value is converted\ninto a JSON item according to its type, and optional  FORMAT  and\n ENCODING  specification. \n You can pass SQL values of types boolean, numeric, and character string.\nThey are converted to corresponding JSON literals:\n  (#__codelineno-102-1)      SELECT   json_object ( 'x'   :   true ,   'y'   :   12 e - 1 ,   'z'   :   'text' ) \n  (#__codelineno-102-2)      --> '{\"x\":true,\"y\":1.2,\"z\":\"text\"}' \n \nAdditionally to SQL values, you can pass JSON values. They are character\nor binary strings with a specified format and optional encoding:\n  (#__codelineno-103-1)      SELECT   json_object ( \n  (#__codelineno-103-2)                         'x'   :   '[  \"text\"  ] '   FORMAT   JSON , \n  (#__codelineno-103-3)                         'y'   :   X '5B0035005D00'   FORMAT   JSON   ENCODING   UTF16 \n  (#__codelineno-103-4)                        ) \n  (#__codelineno-103-5)      --> '{\"x\":[\"text\"],\"y\":[5]}' \n \nYou can also nest other JSON-returning functions. In that case, the\n FORMAT  option is implicit:\n  (#__codelineno-104-1)      SELECT   json_object ( \n  (#__codelineno-104-2)                         'x'   :   json_query ( '{\"key\" : [  \"value\"  ]}' ,   'lax $.key' ) \n  (#__codelineno-104-3)                        ) \n  (#__codelineno-104-4)      --> '{\"x\":[\"value\"]}' \n \nOther passed values are cast to varchar, and they become JSON text\nliterals:\n  (#__codelineno-105-1)      SELECT   json_object ( \n  (#__codelineno-105-2)                         'x'   :   DATE   '2001-01-31' , \n  (#__codelineno-105-3)                         'y'   :   UUID   '12151fd2-7586-11e9-8f9e-2a86e4085a59' \n  (#__codelineno-105-4)                        ) \n  (#__codelineno-105-5)      --> '{\"x\":\"2001-01-31\",\"y\":\"12151fd2-7586-11e9-8f9e-2a86e4085a59\"}' \n \n You can omit the arguments altogether to get an empty object:\n  (#__codelineno-106-1)      SELECT   json_object ()   --> '{}' \n \n Null handling \u00b6  (#null-handling_1) \n The values passed for JSON object keys must not be null. It is allowed\nto pass  null  for JSON object values. A null value is treated according\nto the specified null treatment option. If  NULL ON NULL  is specified,\na JSON object entry with  null  value is added to the result. If\n ABSENT ON NULL  is specified, the entry is omitted in the result.\n NULL ON NULL  is the default configuration.:\n  (#__codelineno-107-1)      SELECT   json_object ( 'x'   :   null ,   'y'   :   1 ) \n  (#__codelineno-107-2)      --> '{\"x\":null,\"y\":1}' \n  (#__codelineno-107-3) \n  (#__codelineno-107-4)      SELECT   json_object ( 'x'   :   null ,   'y'   :   1   NULL   ON   NULL ) \n  (#__codelineno-107-5)      --> '{\"x\":null,\"y\":1}' \n  (#__codelineno-107-6) \n  (#__codelineno-107-7)      SELECT   json_object ( 'x'   :   null ,   'y'   :   1   ABSENT   ON   NULL ) \n  (#__codelineno-107-8)      --> '{\"y\":1}' \n \n Key uniqueness \u00b6  (#key-uniqueness) \n If a duplicate key is encountered, it is handled according to the\nspecified key uniqueness constraint. \n If  WITH UNIQUE KEYS  is specified, a duplicate key results in a query\nfailure:\n  (#__codelineno-108-1)      SELECT   json_object ( 'x'   :   null ,   'x'   :   1   WITH   UNIQUE   KEYS ) \n  (#__codelineno-108-2)      --> failure: \"duplicate key passed to JSON_OBJECT function\" \n \n Note that this option is not supported if any of the arguments has a\n FORMAT  specification. \n If  WITHOUT UNIQUE KEYS  is specified, duplicate keys are not supported\ndue to implementation limitation.  WITHOUT UNIQUE KEYS  is the default\nconfiguration. \n Returned type \u00b6  (#returned-type_1) \n The SQL standard imposes that there is no dedicated data type to\nrepresent JSON data in SQL. Instead, JSON data is represented as\ncharacter or binary strings. By default, the  json_object  function\nreturns varchar containing the textual representation of the JSON\nobject. With the  RETURNING  clause, you can specify other character\nstring type:\n  (#__codelineno-109-1)      SELECT   json_object ( 'x'   :   1   RETURNING   VARCHAR ( 100 )) \n  (#__codelineno-109-2)      --> '{\"x\":1}' \n \nYou can also specify to use varbinary and the required encoding as\nreturn type. The default encoding is UTF8:\n  (#__codelineno-110-1)      SELECT   json_object ( 'x'   :   1   RETURNING   VARBINARY ) \n  (#__codelineno-110-2)      --> X'7b 22 78 22 3a 31 7d' \n  (#__codelineno-110-3) \n  (#__codelineno-110-4)      SELECT   json_object ( 'x'   :   1   RETURNING   VARBINARY   FORMAT   JSON   ENCODING   UTF8 ) \n  (#__codelineno-110-5)      --> X'7b 22 78 22 3a 31 7d' \n  (#__codelineno-110-6) \n  (#__codelineno-110-7)      SELECT   json_object ( 'x'   :   1   RETURNING   VARBINARY   FORMAT   JSON   ENCODING   UTF16 ) \n  (#__codelineno-110-8)      --> X'7b 00 22 00 78 00 22 00 3a 00 31 00 7d 00' \n  (#__codelineno-110-9) \n  (#__codelineno-110-10)      SELECT   json_object ( 'x'   :   1   RETURNING   VARBINARY   FORMAT   JSON   ENCODING   UTF32 ) \n  (#__codelineno-110-11)      --> X'7b 00 00 00 22 00 00 00 78 00 00 00 22 00 00 00 3a 00 00 00 31 00 00 00 7d 00 00 00' \n \n \n Warning \n The following functions and operators are not compliant with the SQL\nstandard, and should be considered deprecated. According to the SQL\nstandard, there shall be no  JSON  data type. Instead, JSON values\nshould be represented as string values. The remaining functionality of\nthe following functions is covered by the functions described\npreviously. \n \n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/json/#json_object"}
{"content": "Cast to JSON \u00b6 \n The following types can be cast to JSON: \n \n BOOLEAN \n TINYINT \n SMALLINT \n INTEGER \n BIGINT \n REAL \n DOUBLE \n VARCHAR \n \n Additionally,  ARRAY ,  MAP , and  ROW  types can be cast to JSON when\nthe following requirements are met: \n \n ARRAY  types can be cast when the element type of the array is one\n    of the supported types. \n MAP  types can be cast when the key type of the map is  VARCHAR \n    and the value type of the map is a supported type, \n ROW  types can be cast when every field type of the row is a\n    supported type. \n \n \n Note \n Cast operations with supported  character string types\n<string-data-types>  treat the input as a\nstring, not validated as JSON. This means that a cast operation with a\nstring-type input of invalid JSON results in a successful cast to invalid\nJSON. \n Instead, consider using the  json_parse \nfunction to create validated JSON from a string. \n \n The following examples show the behavior of casting to JSON with these\ntypes:\n  (#__codelineno-111-1)      SELECT   CAST ( NULL   AS   JSON ); \n  (#__codelineno-111-2)      -- NULL \n  (#__codelineno-111-3) \n  (#__codelineno-111-4)      SELECT   CAST ( 1   AS   JSON ); \n  (#__codelineno-111-5)      -- JSON '1' \n  (#__codelineno-111-6) \n  (#__codelineno-111-7)      SELECT   CAST ( 9223372036854775807   AS   JSON ); \n  (#__codelineno-111-8)      -- JSON '9223372036854775807' \n  (#__codelineno-111-9) \n  (#__codelineno-111-10)      SELECT   CAST ( 'abc'   AS   JSON ); \n  (#__codelineno-111-11)      -- JSON '\"abc\"' \n  (#__codelineno-111-12) \n  (#__codelineno-111-13)      SELECT   CAST ( true   AS   JSON ); \n  (#__codelineno-111-14)      -- JSON 'true' \n  (#__codelineno-111-15) \n  (#__codelineno-111-16)      SELECT   CAST ( 1 . 234   AS   JSON ); \n  (#__codelineno-111-17)      -- JSON '1.234' \n  (#__codelineno-111-18) \n  (#__codelineno-111-19)      SELECT   CAST ( ARRAY [ 1 ,   23 ,   456 ]   AS   JSON ); \n  (#__codelineno-111-20)      -- JSON '[1,23,456]' \n  (#__codelineno-111-21) \n  (#__codelineno-111-22)      SELECT   CAST ( ARRAY [ 1 ,   NULL ,   456 ]   AS   JSON ); \n  (#__codelineno-111-23)      -- JSON '[1,null,456]' \n  (#__codelineno-111-24) \n  (#__codelineno-111-25)      SELECT   CAST ( ARRAY [ ARRAY [ 1 ,   23 ],   ARRAY [ 456 ]]   AS   JSON ); \n  (#__codelineno-111-26)      -- JSON '[[1,23],[456]]' \n  (#__codelineno-111-27) \n  (#__codelineno-111-28)      SELECT   CAST ( MAP ( ARRAY [ 'k1' ,   'k2' ,   'k3' ],   ARRAY [ 1 ,   23 ,   456 ])   AS   JSON ); \n  (#__codelineno-111-29)      -- JSON '{\"k1\":1,\"k2\":23,\"k3\":456}' \n  (#__codelineno-111-30) \n  (#__codelineno-111-31)      SELECT   CAST ( CAST ( ROW ( 123 ,   'abc' ,   true )   AS \n  (#__codelineno-111-32)                  ROW ( v1   BIGINT ,   v2   VARCHAR ,   v3   BOOLEAN ))   AS   JSON ); \n  (#__codelineno-111-33)      -- JSON '{\"v1\":123,\"v2\":\"abc\",\"v3\":true}' \n \nCasting from NULL to  JSON  is not straightforward. Casting from a\nstandalone  NULL  will produce SQL  NULL  instead of  JSON 'null' .\nHowever, when casting from arrays or map containing  NULL s, the\nproduced  JSON  will have  null s in it.\n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/json/#cast-to-json"}
{"content": "Cast from JSON \u00b6 \n Casting to  BOOLEAN ,  TINYINT ,  SMALLINT ,  INTEGER ,  BIGINT ,\n REAL ,  DOUBLE  or  VARCHAR  is supported. Casting to  ARRAY  and  MAP \nis supported when the element type of the array is one of the supported\ntypes, or when the key type of the map is  VARCHAR  and value type of\nthe map is one of the supported types. Behaviors of the casts are shown\nwith the examples below:\n  (#__codelineno-112-1)      SELECT   CAST ( JSON   'null'   AS   VARCHAR ); \n  (#__codelineno-112-2)      -- NULL \n  (#__codelineno-112-3) \n  (#__codelineno-112-4)      SELECT   CAST ( JSON   '1'   AS   INTEGER ); \n  (#__codelineno-112-5)      -- 1 \n  (#__codelineno-112-6) \n  (#__codelineno-112-7)      SELECT   CAST ( JSON   '9223372036854775807'   AS   BIGINT ); \n  (#__codelineno-112-8)      -- 9223372036854775807 \n  (#__codelineno-112-9) \n  (#__codelineno-112-10)      SELECT   CAST ( JSON   '\"abc\"'   AS   VARCHAR ); \n  (#__codelineno-112-11)      -- abc \n  (#__codelineno-112-12) \n  (#__codelineno-112-13)      SELECT   CAST ( JSON   'true'   AS   BOOLEAN ); \n  (#__codelineno-112-14)      -- true \n  (#__codelineno-112-15) \n  (#__codelineno-112-16)      SELECT   CAST ( JSON   '1.234'   AS   DOUBLE ); \n  (#__codelineno-112-17)      -- 1.234 \n  (#__codelineno-112-18) \n  (#__codelineno-112-19)      SELECT   CAST ( JSON   '[1,23,456]'   AS   ARRAY ( INTEGER )); \n  (#__codelineno-112-20)      -- [1, 23, 456] \n  (#__codelineno-112-21) \n  (#__codelineno-112-22)      SELECT   CAST ( JSON   '[1,null,456]'   AS   ARRAY ( INTEGER )); \n  (#__codelineno-112-23)      -- [1, NULL, 456] \n  (#__codelineno-112-24) \n  (#__codelineno-112-25)      SELECT   CAST ( JSON   '[[1,23],[456]]'   AS   ARRAY ( ARRAY ( INTEGER ))); \n  (#__codelineno-112-26)      -- [[1, 23], [456]] \n  (#__codelineno-112-27) \n  (#__codelineno-112-28)      SELECT   CAST ( JSON   '{\"k1\":1,\"k2\":23,\"k3\":456}'   AS   MAP ( VARCHAR ,   INTEGER )); \n  (#__codelineno-112-29)      -- {k1=1, k2=23, k3=456} \n  (#__codelineno-112-30) \n  (#__codelineno-112-31)      SELECT   CAST ( JSON   '{\"v1\":123,\"v2\":\"abc\",\"v3\":true}'   AS \n  (#__codelineno-112-32)                  ROW ( v1   BIGINT ,   v2   VARCHAR ,   v3   BOOLEAN )); \n  (#__codelineno-112-33)      -- {v1=123, v2=abc, v3=true} \n  (#__codelineno-112-34) \n  (#__codelineno-112-35)      SELECT   CAST ( JSON   '[123,\"abc\",true]'   AS \n  (#__codelineno-112-36)                  ROW ( v1   BIGINT ,   v2   VARCHAR ,   v3   BOOLEAN )); \n  (#__codelineno-112-37)      -- {v1=123, v2=abc, v3=true} \n \n JSON arrays can have mixed element types and JSON maps can have mixed\nvalue types. This makes it impossible to cast them to SQL arrays and\nmaps in some cases. To address this, Trino supports partial casting of\narrays and maps:\n  (#__codelineno-113-1)      SELECT   CAST ( JSON   '[[1, 23], 456]'   AS   ARRAY ( JSON )); \n  (#__codelineno-113-2)      -- [JSON '[1,23]', JSON '456'] \n  (#__codelineno-113-3) \n  (#__codelineno-113-4)      SELECT   CAST ( JSON   '{\"k1\": [1, 23], \"k2\": 456}'   AS   MAP ( VARCHAR ,   JSON )); \n  (#__codelineno-113-5)      -- {k1 = JSON '[1,23]', k2 = JSON '456'} \n  (#__codelineno-113-6) \n  (#__codelineno-113-7)      SELECT   CAST ( JSON   '[null]'   AS   ARRAY ( JSON )); \n  (#__codelineno-113-8)      -- [JSON 'null'] \n \nWhen casting from  JSON  to  ROW , both JSON array and JSON object are\nsupported.\n ", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/json/#cast-from-json"}
{"content": "Other JSON functions \u00b6 \n In addition to the functions explained in more details in the preceding\nsections, the following functions are available: \n is_json_scalar() \u00b6  (#is_json_scalar) \n is_json_scalar  \u2192 boolean \n Determine if  json  is a scalar (i.e. a JSON number, a JSON string,\n true ,  false  or  null ):\n  (#__codelineno-114-1)      SELECT   is_json_scalar ( '1' );           -- true \n  (#__codelineno-114-2)      SELECT   is_json_scalar ( '[1, 2, 3]' );   -- false \n \n json_array_contains() \u00b6  (#json_array_contains) \n json_array_contains(json, value)  \u2192 boolean \n Determine if  value  exists in  json  (a string containing a JSON\narray):\n  (#__codelineno-115-1)      SELECT   json_array_contains ( '[1, 2, 3]' ,   2 );   -- true \n \n json_array_get() \u00b6  (#json_array_get) \n json_array_get(json_array, index)  \u2192 json \n \n Warning \n The semantics of this function are broken. If the extracted element is a\nstring, it will be converted into an invalid  JSON  value that is not\nproperly quoted (the value will not be surrounded by quotes and any\ninterior quotes will not be escaped). \n We recommend against using this function. It cannot be fixed without\nimpacting existing usages and may be removed in a future release. \n \n Returns the element at the specified index into the  json_array . The\nindex is zero-based:\n  (#__codelineno-116-1)      SELECT   json_array_get ( '[\"a\", [3, 9], \"c\"]' ,   0 );   -- JSON 'a' (invalid JSON) \n  (#__codelineno-116-2)      SELECT   json_array_get ( '[\"a\", [3, 9], \"c\"]' ,   1 );   -- JSON '[3,9]' \n \nThis function also supports negative indexes for fetching element\nindexed from the end of an array:\n  (#__codelineno-117-1)      SELECT   json_array_get ( '[\"c\", [3, 9], \"a\"]' ,   - 1 );   -- JSON 'a' (invalid JSON) \n  (#__codelineno-117-2)      SELECT   json_array_get ( '[\"c\", [3, 9], \"a\"]' ,   - 2 );   -- JSON '[3,9]' \n \nIf the element at the specified index doesn\\'t exist, the function\nreturns null:\n  (#__codelineno-118-1)      SELECT   json_array_get ( '[]' ,   0 );                  -- NULL \n  (#__codelineno-118-2)      SELECT   json_array_get ( '[\"a\", \"b\", \"c\"]' ,   10 );    -- NULL \n  (#__codelineno-118-3)      SELECT   json_array_get ( '[\"c\", \"b\", \"a\"]' ,   - 10 );   -- NULL \n \n json_array_length() \u00b6  (#json_array_length) \n json_array_length  \u2192 bigint \n Returns the array length of  json  (a string containing a JSON array):\n  (#__codelineno-119-1)      SELECT   json_array_length ( '[1, 2, 3]' );   -- 3 \n \n json_extract(json, json_path)  \u2192 json \n Evaluates the  JSONPath  () -like expression  json_path  on  json  (a\nstring containing JSON) and returns the result as a JSON string:\n  (#__codelineno-120-1)      SELECT   json_extract ( json ,   '$.store.book' ); \n  (#__codelineno-120-2)      SELECT   json_extract ( json ,   '$.store[book]' ); \n  (#__codelineno-120-3)      SELECT   json_extract ( json ,   '$.store[\"book name\"]' ); \n \n json_extract_scalar() \u00b6  (#json_extract_scalar) \n json_extract_scalar(json, json_path)  \u2192 varchar \n Like  json_extract , but returns the\nresult value as a string (as opposed to being encoded as JSON). The\nvalue referenced by  json_path  must be a scalar (boolean, number or\nstring):\n  (#__codelineno-121-1)      SELECT   json_extract_scalar ( '[1, 2, 3]' ,   '$[2]' ); \n  (#__codelineno-121-2)      SELECT   json_extract_scalar ( json ,   '$.store.book[0].author' ); \n \n  (#__codelineno-122-1) WITH   json_table   AS   ( \n  (#__codelineno-122-2)      SELECT \n  (#__codelineno-122-3)          json_parse ( json_content )   AS   parsed_json \n  (#__codelineno-122-4)      FROM \n  (#__codelineno-122-5)          ( VALUES \n  (#__codelineno-122-6)              ( '{\"name\": \"John\", \"value\": 42}' ), \n  (#__codelineno-122-7)              ( '{\"name\": \"Jane\", \"value\": 36}' ) \n  (#__codelineno-122-8)          )   AS   json_data   ( json_content ) \n  (#__codelineno-122-9) ) \n  (#__codelineno-122-10) SELECT \n  (#__codelineno-122-11)      json_extract_scalar ( parsed_json ,   '$.name' )   AS   name , \n  (#__codelineno-122-12)      json_extract_scalar ( parsed_json ,   '$.value' )   AS   value \n  (#__codelineno-122-13) FROM \n  (#__codelineno-122-14)      json_table ; \n \n json_format() \u00b6  (#json_format) \n json_format(json)  \u2192 varchar \n Returns the JSON text serialized from the input JSON value. This is\ninverse function to  json_parse . :\n  (#__codelineno-123-1)      SELECT   json_format ( JSON   '[1, 2, 3]' );   -- '[1,2,3]' \n  (#__codelineno-123-2)      SELECT   json_format ( JSON   '\"a\"' );         -- '\"a\"' \n \n json_format  and  CAST(json AS VARCHAR) \nhave completely different semantics. \n json_format  serializes the input JSON\nvalue to JSON text conforming to  7159 .\nThe JSON value can be a JSON object, a JSON array, a JSON string, a JSON\nnumber,  true ,  false  or  null :\n  (#__codelineno-124-1)      SELECT   json_format ( JSON   '{\"a\": 1, \"b\": 2}' );   -- '{\"a\":1,\"b\":2}' \n  (#__codelineno-124-2)      SELECT   json_format ( JSON   '[1, 2, 3]' );          -- '[1,2,3]' \n  (#__codelineno-124-3)      SELECT   json_format ( JSON   '\"abc\"' );              -- '\"abc\"' \n  (#__codelineno-124-4)      SELECT   json_format ( JSON   '42' );                 -- '42' \n  (#__codelineno-124-5)      SELECT   json_format ( JSON   'true' );               -- 'true' \n  (#__codelineno-124-6)      SELECT   json_format ( JSON   'null' );               -- 'null' \n \n CAST(json AS VARCHAR)  casts the JSON value to the corresponding SQL\nVARCHAR value. For JSON string, JSON number,  true ,  false  or  null ,\nthe cast behavior is same as the corresponding SQL type. JSON object and\nJSON array cannot be cast to VARCHAR. :\n  (#__codelineno-125-1)      SELECT   CAST ( JSON   '{\"a\": 1, \"b\": 2}'   AS   VARCHAR );   -- ERROR! \n  (#__codelineno-125-2)      SELECT   CAST ( JSON   '[1, 2, 3]'   AS   VARCHAR );          -- ERROR! \n  (#__codelineno-125-3)      SELECT   CAST ( JSON   '\"abc\"'   AS   VARCHAR );              -- 'abc' (the double quote is gone) \n  (#__codelineno-125-4)      SELECT   CAST ( JSON   '42'   AS   VARCHAR );                 -- '42' \n  (#__codelineno-125-5)      SELECT   CAST ( JSON   'true'   AS   VARCHAR );               -- 'true' \n  (#__codelineno-125-6)      SELECT   CAST ( JSON   'null'   AS   VARCHAR );               -- NULL \n \n json_parse() \u00b6  (#json_parse) \n json_parse(string)  \u2192 json \n Returns the JSON value deserialized from the input JSON text. This is\ninverse function to  json_format :\n  (#__codelineno-126-1)      SELECT   json_parse ( '[1, 2, 3]' );     -- JSON '[1,2,3]' \n  (#__codelineno-126-2)      SELECT   json_parse ( '\"abc\"' );         -- JSON '\"abc\"' \n \n \n Note \n json_parse  and  CAST(string AS JSON) \nhave completely different semantics. \n \n json_parse  expects a JSON text\nconforming to  7159 , and returns the JSON\nvalue deserialized from the JSON text. The JSON value can be a JSON\nobject, a JSON array, a JSON string, a JSON number,  true ,  false  or\n null . :\n  (#__codelineno-127-1)      SELECT   json_parse ( 'not_json' );           -- ERROR! \n  (#__codelineno-127-2)      SELECT   json_parse ( '[\"a\": 1, \"b\": 2]' );   -- JSON '[\"a\": 1, \"b\": 2]' \n  (#__codelineno-127-3)      SELECT   json_parse ( '[1, 2, 3]' );          -- JSON '[1,2,3]' \n  (#__codelineno-127-4)      SELECT   json_parse ( '\"abc\"' );              -- JSON '\"abc\"' \n  (#__codelineno-127-5)      SELECT   json_parse ( '42' );                 -- JSON '42' \n  (#__codelineno-127-6)      SELECT   json_parse ( 'true' );               -- JSON 'true' \n  (#__codelineno-127-7)      SELECT   json_parse ( 'null' );               -- JSON 'null' \n \n CAST(string AS JSON)  takes any VARCHAR value as input, and returns a\nJSON string with its value set to input string. :\n  (#__codelineno-128-1)      SELECT   CAST ( 'not_json'   AS   JSON );           -- JSON '\"not_json\"' \n  (#__codelineno-128-2)      SELECT   CAST ( '[\"a\": 1, \"b\": 2]'   AS   JSON );   -- JSON '\"[\\\"a\\\": 1, \\\"b\\\": 2]\"' \n  (#__codelineno-128-3)      SELECT   CAST ( '[1, 2, 3]'   AS   JSON );          -- JSON '\"[1, 2, 3]\"' \n  (#__codelineno-128-4)      SELECT   CAST ( '\"abc\"'   AS   JSON );              -- JSON '\"\\\"abc\\\"\"' \n  (#__codelineno-128-5)      SELECT   CAST ( '42'   AS   JSON );                 -- JSON '\"42\"' \n  (#__codelineno-128-6)      SELECT   CAST ( 'true'   AS   JSON );               -- JSON '\"true\"' \n  (#__codelineno-128-7)      SELECT   CAST ( 'null'   AS   JSON );               -- JSON '\"null\"' \n \n json_size() \u00b6  (#json_size) \n json_size(json, json_path)  \u2192 bigint \n Like  json_extract , but returns the size\nof the value. For objects or arrays, the size is the number of members,\nand the size of a scalar value is zero:\n  (#__codelineno-129-1)      SELECT   json_size ( '{\"x\": {\"a\": 1, \"b\": 2}}' ,   '$.x' );     -- 2 \n  (#__codelineno-129-2)      SELECT   json_size ( '{\"x\": [1, 2, 3]}' ,   '$.x' );            -- 3 \n  (#__codelineno-129-3)      SELECT   json_size ( '{\"x\": {\"a\": 1, \"b\": 2}}' ,   '$.x.a' );   -- 0", "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/json/#other-json-functions"}
{"content": "Overview \u00b6 \n Queries on Dune need to be triggered and will be executed on one of our query engines. \n Query executions can be triggered by any user/team in Dune for public queries and by the owner of the query for private queries. Query executions can be triggered through the query editor, the dashboard editor, or via the API. We also automatically refresh popular dashboards automatically in regular intervals.  \n The query engine determines the amount of resources allocated to your query. The larger the query engine, the more resources are allocated to your query. This means that queries executed on a larger query engine will run faster and are less likely to time out. \n ", "url": "https://dune.com/docs/query/query-executions/#overview"}
{"content": "Query executions triggers \u00b6 \n Query executions on Dune are triggered in four ways: \n \n \n Interactive executions  are manually triggered by a user clicking the \"Run\" button in the query editor page or refreshing an entire dashboard. Interactive executions can be routed via the community, medium, or large cluster, depending on the query engine selected. \n \n \n Scheduled executions  are triggered at a specific time and frequency. Scheduled executions can be routed via the medium or large cluster, depending on the execution tier selected. \n \n \n API executions  are triggered by an API call. API executions can be routed via the community, medium, or large cluster, depending on the query engine selected. \n \n \n Popular dashboards  are automatically refreshed based on their popularity. We measure popularity based on the number of views a dashboard has received. The most popular dashboards are refreshed every hour, the less popular dashboards are refreshed every 24 hours. Popular dashboards are refreshed via the community cluster. \n \n \n Here is an overview of the different execution triggers: \n interactive dashboard execution  (#__tabbed_1_1) interactive query execution  (#__tabbed_1_2) scheduled query execution  (#__tabbed_1_3) scheduled dashboard execution  (#__tabbed_1_4) API query execution  (#__tabbed_1_5) popular dashboard executions  (#__tabbed_1_6) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n You can trigger query executions via the API. This is useful if you want to embed a query result in your own application or if you want to trigger a query execution via a cron job. \n \u2192 API executions  (../../api/api-reference/execute-queries/) \n \n \n Popular dashboards are automatically refreshed based on their popularity. We measure popularity based on the number of views a dashboard has received. The most popular dashboards are refreshed every hour, the less popular dashboards are refreshed every 24 hours. Popular dashboards are refreshed via the community cluster. \n \n \n \n \n Learn more about the different execution triggers: \n \n \n \n Interactive executions \u00b6  (#interactive-executions) \n \n Trigger: user clicks \"Run\" button in query editor or refreshes dashboard \n \u2192 Interactive executions  (../../app/query-editor/query-window/) \n \n \n Scheduled executions \u00b6  (#scheduled-executions) \n \n Trigger: scheduled dashboard or query \n \u2192 Scheduled queries  (../../app/query-editor/query-scheduler/)   \n \u2192 Scheduled dashboards  (../../app/dashboards/#keeping-your-dashboard-up-to-date) \n \n \n API executions \u00b6  (#api-executions) \n \n Trigger: API call \n \u2192 API executions  (../../api/api-reference/execute-queries/) \n \n \n Popular dashboards \u00b6  (#popular-dashboards) \n \n Trigger: Dashboard popularity \n \n \n \n ", "url": "https://dune.com/docs/query/query-executions/#query-executions-triggers"}
{"content": "Query engine size \u00b6 \n Dune has three query engine sizes:  community ,  medium , and  large . The query engine size determines the amount of resources allocated to your query. The larger the query engine, the more resources are allocated to your query. This means that queries executed on a larger query engine will run faster and are less likely to time out. \n \n Free engine size \u00b6  (#free-engine-size) \n The community engine is the default query engine for all queries on Dune. It is a shared cluster, meaning that it is used by all Dune users. This means that the community cluster can be busy at times, if many users are running queries at the same time. \nTo avoid long loading times and timeouts, we recommend using the medium or large engine for resource-intensive queries.  \nExecutions on the community engine are free of charge. \n Medium engine size \u00b6  (#medium-engine-size) \n The medium engine is built to handle most queries on Dune. It is cheap, reliable and fast. The medium engine will scale up and down depening on the demand. \nExecutions on the medium engine cost 10 credits. \n Large engine size \u00b6  (#large-engine-size) \n The large engine is built to handle the most resource-intensive queries on Dune. It's blazing fast, reliable and can easily deal with large amounts of data. The large engine also scales up and down depending on the demand.  \n In addition to that, the large engine is also the only engine that can handle queries that requires lots of planning time. This mostly happens when you query a large amount of data, when you use a lot of joins or large aggregate window functions. \n Executions on the large engine cost 20 credits.", "url": "https://dune.com/docs/query/query-executions/#query-engine-size"}
{"content": "Skip to content\n          (#collection-floor-ask-events) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/community/reservoir/collection-floor-ask-events.md) \n ", "url": "https://dune.com/docs/data-tables/community/reservoir/collection-floor-ask-events/"}
{"content": "Skip to content\n          (#bids) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/community/reservoir/bids.md) \n ", "url": "https://dune.com/docs/data-tables/community/reservoir/bids/"}
{"content": "Skip to content\n          (#bid-events) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/community/reservoir/bid-events.md) \n ", "url": "https://dune.com/docs/data-tables/community/reservoir/bid-events/"}
{"content": "Skip to content\n          (#attributes) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/community/reservoir/attributes.md) \n ", "url": "https://dune.com/docs/data-tables/community/reservoir/attributes/"}
{"content": "DuneSQL Features \u00b6 \n DuneSQL offers several useful features for working with blockchain data: \n \n Blockchain varbinary data types  (DuneSQL-reference/datatypes/#varbinary) : Designed for storing addresses, hashes, and other encoded data. \n Native support for uint256 and int256 data types  (DuneSQL-reference/datatypes/#UINT256) : Ideal for handling large numbers commonly found in blockchain data, with built-in functions for ease of use. \n Columnar storage format  (storage/)  Optimized for fast reads, this format organizes data in columns rather than rows, enabling quick access to single columns for aggregation or filtering. \n Querying a query  (query-a-query/) : DuneSQL allows you to query a query, which is great for creating reusable queries, building up complex queries, and reusing queries as views. \n \n \n Sunsetting Old Query Engines \n We are sunsetting our old query engines, SparkSQL and PostgreSQL. Please find all information in the  Migrating to DuneSQL  (../migrations/)  section of our documentation. \n \n ", "url": "https://dune.com/docs/query/#dunesql-features"}
{"content": "Using DuneSQL \u00b6 \n DuneSQL is our query engine for blockchain data. It is a fork of TrinoSQL, which is an open-source, distributed SQL query engine for running interactive analytic queries against data sources of all sizes ranging from gigabytes to petabytes. \n We have created extensive documentation for DuneSQL, which you can find in the  DuneSQL Reference  (DuneSQL-reference/)  section of our documentation. Here you will be able to find: \n \n \n \n Functions and operators \u00b6  (#functions-and-operators) \n \n A reference guide to DuneSQL functions and operators. \n \u2192 Functions and operators  (DuneSQL-reference/Functions-and-operators/) \n \n \n Data types \u00b6  (#data-types) \n \n A reference guide to DuneSQL data types. \n \u2192 Data types  (DuneSQL-reference/datatypes/) \n \n \n Reserved keywords \u00b6  (#reserved-keywords) \n \n A list of reserved keywords in DuneSQL. \n \u2192 Reserved keywords  (DuneSQL-reference/reserved-keywords/) \n \n \n \n ", "url": "https://dune.com/docs/query/#using-dunesql"}
{"content": "Writing efficient queries \u00b6 \n An efficient query-writing process requires knowledge of how DuneSQL and data storage works. \n \n \n \u2192 Writing efficient queries  (writing-efficient-queries/) \n \n \n ", "url": "https://dune.com/docs/query/#writing-efficient-queries"}
{"content": "Querying a query \u00b6 \n DuneSQL allows you to query a query, which is great for creating reusable queries, building up complex queries, and reusing queries as views. \n \n \n \u2192 Querying a query  (query-a-query/) \n \n \n ", "url": "https://dune.com/docs/query/#querying-a-query"}
{"content": "Resources and Support \u00b6 \n For assistance with DuneSQL, consider the following resources: \n \n Google search for TrinoSQL-related queries \n Talk to your favorite AI assistant about TrinoSQL-related questions \n the official Trino docs - Functions and Operators  (https://trino.io/docs/current/functions.html) \n \n Join our #dune-sql  Discord channel  (https://discord.gg/FjwGvbgDFS)  to connect with our team and the community for help and support. \n ", "url": "https://dune.com/docs/query/#resources-and-support"}
{"content": "Feedback and Suggestions \u00b6 \n We appreciate your feedback and suggestions for improvement. Please email us at dunesql-feedback@dune.com with any concerns or ideas for optimization.", "url": "https://dune.com/docs/query/#feedback-and-suggestions"}
{"content": "Bring your own data \u00b6 \n You can upload your own data to Dune via the API or the UI. This allows you to combine your own data with the data available on Dune. This data could be: \n \n product data \n custom contract mappings \n labels \n macroeconomic data \n off-chain data like snapshot votes \n on-chain data from blockchains we don't support yet \n ... \n \n Your imagination is really the limit here. The only requirement is that this data does not contain any personally identifiable information or breach any copyright. \n \n \n \n Upload data via the User Interface \u00b6  (#upload-data-via-the-user-interface) \n Upload data via dune.com \n \u2192 App Docs  (../../app/upload-data/) \n \n \n Upload data via the API \u00b6  (#upload-data-via-the-api) \n Programmatically upload data via the API \n \u2192 API docs  (../../api/api-reference/upload-data/) \n \n \n \n ", "url": "https://dune.com/docs/data-tables/bring-your-own-data/#bring-your-own-data"}
{"content": "Large Amounts of Data \u00b6 \n If you want to share valuable off-chain data on Dune with your community, we are happy to discuss custom arrangements. Please reach indicate your interest via this  form  (https://bit.ly/dune-data-integration) . \n This is only applicable for datasets with positive externalities for the Dune community. Examples include: \n \n Farcaster  (../community/neynar/farcaster/) \n Reservoir  (../community/reservoir/) \n Flashbots  (../community/flashbots/)", "url": "https://dune.com/docs/data-tables/bring-your-own-data/#large-amounts-of-data"}
{"content": "Tokens \u00b6 \n ", "url": "https://dune.com/docs/data-tables/community/reservoir/tokens/#tokens"}
{"content": "reservoir.tokens \u00b6 \n This table contains records with information about each NFT token. \n Query examples can be found here: \n https://dune.com/queries/1303052/2232521  (https://dune.com/queries/1303052/2232521) \n https://dune.com/queries/1303064/2232571  (https://dune.com/queries/1303064/2232571) \n \n \n \n Column name \n Type \n Description \n \n \n \n \n id \n string \n Internal token id \n \n \n contract \n string \n Contract address \n \n \n token_id \n string \n Id of the token in the collection \n \n \n name \n string \n NFT name \n \n \n description \n string \n NFT description \n \n \n collection_id \n string \n Associated Collection id \n \n \n owner \n string \n Owner wallet address \n \n \n floor_ask_id \n string \n Floor ask id \n \n \n floor_ask_value \n bigint \n Floor ask value \n \n \n floor_ask_maker \n string \n Floor ask maker wallet address \n \n \n floor_ask_valid_from \n bigint \n Floor ask Listing start time \n \n \n floor_ask_valid_to \n bigint \n Floor ask Listing end time \n \n \n floor_ask_source \n string \n Floor ask source (e.g. opensea.io) \n \n \n last_sale_value \n bigint \n Associated transaction timestamp \n \n \n last_sale_timestamp \n bigint \n Associated transaction timestamp \n \n \n created_at \n timestamp \n Timestamp the token was created \n \n \n updated_at \n timestamp \n Timestamp the token was updated", "url": "https://dune.com/docs/data-tables/community/reservoir/tokens/#reservoirtokens"}
{"content": "Token Floor Ask Events \u00b6 \n ", "url": "https://dune.com/docs/data-tables/community/reservoir/token-floor-ask-events/#token-floor-ask-events"}
{"content": "reservoir.token_floor_ask_events \u00b6 \n This table contains records with information about each NFT token floor ask change. \n Query examples can be found here: \n https://dune.com/queries/1302852/2232169  (https://dune.com/queries/1302852/2232169) \n https://dune.com/queries/1302854/2232173  (https://dune.com/queries/1302854/2232173) \n \n \n \n Column name \n Type \n Description \n \n \n \n \n id \n bigint \n Internal token attribute id \n \n \n kind \n string \n Event type (new-order, expiry, sale, cancel, balance-change, approval-change, bootstrap, revalidation, reprice) \n \n \n contract \n string \n Contract address \n \n \n token_id \n string \n Id of the token in the collection \n \n \n order_id \n string \n Associated Ask id \n \n \n maker \n string \n Associated Ask maker wallet address \n \n \n price \n decimal \n Associated ask price (native currency) \n \n \n previous_price \n decimal \n Associated ask price (native currency) \n \n \n nonce \n string \n The order nonce of the maker \n \n \n valid_from \n bigint \n Associated ask validity start \n \n \n valid_until \n bigint \n Associated ask validity expiration \n \n \n source \n string \n Source of the order (e.g. opensea.io) \n \n \n tx_hash \n string \n Associated transaction hash \n \n \n tx_timestamp \n bigint \n Associated transaction timestamp \n \n \n created_at \n timestamp \n Timestamp the event was recorded", "url": "https://dune.com/docs/data-tables/community/reservoir/token-floor-ask-events/#reservoirtoken_floor_ask_events"}
{"content": "Token Attributes \u00b6 \n ", "url": "https://dune.com/docs/data-tables/community/reservoir/token-attributes/#token-attributes"}
{"content": "reservoir.token_attributes \u00b6 \n This table contains records with information about each NFT token attribute. \n Query examples can be found here: \n https://dune.com/queries/1302940/2232326  (https://dune.com/queries/1302940/2232326) \n \n \n \n Column name \n Type \n Description \n \n \n \n \n id \n bigint \n Internal token attribute id \n \n \n contract \n string \n Contract address \n \n \n token_id \n string \n Id of the token in the collection \n \n \n attribute_id \n bigint \n Internal attribute id \n \n \n collection_id \n string \n Internal collection id \n \n \n key \n string \n Attribute name \n \n \n value \n string \n Attribute value \n \n \n created_at \n timestamp \n Timestamp the token attribute was created \n \n \n updated_at \n timestamp \n Timestamp the token attribute was updated", "url": "https://dune.com/docs/data-tables/community/reservoir/token-attributes/#reservoirtoken_attributes"}
{"content": "Sales \u00b6 \n ", "url": "https://dune.com/docs/data-tables/community/reservoir/sales/#sales"}
{"content": "reservoir.sales \u00b6 \n This table contains records with information about each sale. \n Query examples can be found here: \n https://dune.com/queries/1302771/2232036  (https://dune.com/queries/1302771/2232036) \n https://dune.com/queries/1302775/2232040  (https://dune.com/queries/1302775/2232040) \n \n \n \n Column name \n Type \n Description \n \n \n \n \n id \n string \n Internal sale id \n \n \n contract \n string \n Contract address \n \n \n token_id \n string \n Id of the token in the collection \n \n \n order_id \n string \n Associated order id \n \n \n order_kind \n string \n Protocol name (e.g. seaport) \n \n \n order_side \n string \n Order type (ask / bid) \n \n \n order_source \n string \n Source of the listing (e.g. opensea.io) \n \n \n from \n string \n Maker wallet address \n \n \n to \n string \n Taker wallet address \n \n \n price \n decimal \n Sale price (native currency) \n \n \n usd_price \n string \n Sale price in USD \n \n \n currency_address \n string \n The currency address used for this sale \n \n \n currency_symbol \n string \n The currency symbol used for this sale \n \n \n currency_price \n decimal \n Sale price \n \n \n amount \n string \n Amount of tokens sold \n \n \n fill_source \n string \n Where the order was filled \n \n \n aggregator_source \n string \n aggregator source (e.g. reservoir) \n \n \n wash_trading_score \n int \n Internal wash trading score (based on past sales) \n \n \n is_primary \n boolean \n Is paid mint? \n \n \n tx_hash \n string \n Associated transaction hash \n \n \n tx_log_index \n int \n Associated transaction log index \n \n \n tx_batch_index \n int \n Associated transaction batch index \n \n \n tx_timestamp \n bigint \n Associated transaction timestamp \n \n \n created_at \n timestamp \n Timestamp the sale was recorded \n \n \n updated_at \n timestamp \n Timestamp the sale was updated", "url": "https://dune.com/docs/data-tables/community/reservoir/sales/#reservoirsales"}
{"content": "Skip to content\n          (#attribute-keys) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/community/reservoir/attribute-keys.md) \n ", "url": "https://dune.com/docs/data-tables/community/reservoir/attribute-keys/"}
{"content": "Collections \u00b6 \n ", "url": "https://dune.com/docs/data-tables/community/reservoir/collections/#collections"}
{"content": "reservoir.collections \u00b6 \n This table contains records with information about each NFT collection. \n Query examples can be found here: \n https://dune.com/queries/1302781/2232054  (https://dune.com/queries/1302781/2232054) \n https://dune.com/queries/1302788/2232065  (https://dune.com/queries/1302788/2232065) \n \n \n \n Column name \n Type \n Description \n \n \n \n \n id \n string \n Internal collection id \n \n \n slug \n string \n Collection slug \n \n \n name \n string \n Collection name \n \n \n description \n string \n Collection description \n \n \n token_count \n bigint \n Id of the token in the collection \n \n \n contract \n string \n Contract address \n \n \n day1_rank \n bigint \n Ranking in the previous day \n \n \n day7_rank \n bigint \n Ranking in the previous 7 days \n \n \n day30_rank \n bigint \n Ranking in the previous 30 days \n \n \n all_time_rank \n bigint \n All time ranking \n \n \n day1_volume \n decimal \n Trade volume in the previous day \n \n \n day7_volume \n decimal \n Trade volume in the previous 7 days \n \n \n day30_volume \n decimal \n Trade volume in the previous 30 days \n \n \n all_time_volume \n decimal \n All time trade volume \n \n \n day1_volume_change \n double \n Trade volume change in the previous day \n \n \n day7_volume_change \n double \n Trade volume change in the previous 7 days \n \n \n day30_volume_change \n double \n Trade volume change in the previous 30 days \n \n \n floor\\ask_value \n decimal \n Current floor sale price (native currency) \n \n \n day1_floor_sale_value \n decimal \n Floor sale price in the previous day \n \n \n day7_floor_sale_value \n decimal \n Floor sale price 7 days ago \n \n \n day30_floor_sale_value \n decimal \n Floor sale price 30 days ago \n \n \n day1_floor_sale_change \n double \n Floor sale price change from previous day \n \n \n day7_floor_sale_change \n double \n Floor sale price change from 7 days ago \n \n \n day30_floor_sale_change \n double \n Floor sale price change from 30 days ago \n \n \n created_at \n timestamp \n Timestamp the collection was created \n \n \n updated_at \n timestamp \n Timestamp the collection was updated", "url": "https://dune.com/docs/data-tables/community/reservoir/collections/#reservoircollections"}
{"content": "Collection Top Bid Events \u00b6 \n ", "url": "https://dune.com/docs/data-tables/community/reservoir/collection-top-bid-events/#collection-top-bid-events"}
{"content": "reservoir.collection_top_bid_events \u00b6 \n This table contains records with information about each collection top bid change. \n \n \n \n Column name \n Type \n Description \n \n \n \n \n id \n string \n Internal event id \n \n \n kind \n string \n Event type (new-order, expiry, sale, cancel, balance-change, approval-change, bootstrap, revalidation, reprice) \n \n \n collection_id \n string \n Collection id \n \n \n contract \n string \n Contract address \n \n \n token_id \n string \n Id of the token in the collection \n \n \n order_id \n string \n Associated bid id \n \n \n maker \n string \n Associated bid maker wallet address \n \n \n price \n string \n Associated bid price (native currency) \n \n \n previous_price \n decimal \n previous top bid price (native currency) \n \n \n valid_until \n bigint \n Associated bid validity expiration \n \n \n source \n string \n Source of the order (e.g. opensea.io) \n \n \n tx_hash \n string \n Associated transaction hash \n \n \n tx_timestamp \n bigint \n Associated transaction timestamp \n \n \n created_at \n timestamp \n Timestamp the event was recorded", "url": "https://dune.com/docs/data-tables/community/reservoir/collection-top-bid-events/#reservoircollection_top_bid_events"}
{"content": "Skip to content\n          (#asks) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/community/reservoir/asks.md) \n ", "url": "https://dune.com/docs/data-tables/community/reservoir/asks/"}
{"content": "Skip to content\n          (#ask-events) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/community/reservoir/ask-events.md) \n ", "url": "https://dune.com/docs/data-tables/community/reservoir/ask-events/"}
{"content": "Skip to content\n          (#reservoir) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/community/reservoir/index.md) \n ", "url": "https://dune.com/docs/data-tables/community/reservoir/"}
{"content": "Skip to content\n          (#verifications) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/community/neynar/farcaster/verifications.md) \n ", "url": "https://dune.com/docs/data-tables/community/neynar/farcaster/verifications/"}
{"content": "Skip to content\n          (#user-data) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/community/neynar/farcaster/user_data.md) \n ", "url": "https://dune.com/docs/data-tables/community/neynar/farcaster/user_data/"}
{"content": "Skip to content\n          (#storage) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/community/neynar/farcaster/storage.md) \n ", "url": "https://dune.com/docs/data-tables/community/neynar/farcaster/storage/"}
{"content": "Skip to content\n          (#signers) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/community/neynar/farcaster/signers.md) \n ", "url": "https://dune.com/docs/data-tables/community/neynar/farcaster/signers/"}
{"content": "Skip to content\n          (#reactions) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/community/neynar/farcaster/reactions.md) \n ", "url": "https://dune.com/docs/data-tables/community/neynar/farcaster/reactions/"}
{"content": "Skip to content\n          (#profile-with-addresses) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/community/neynar/farcaster/profile_with_addresses.md) \n ", "url": "https://dune.com/docs/data-tables/community/neynar/farcaster/profile_with_addresses/"}
{"content": "Skip to content\n          (#links) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/community/neynar/farcaster/links.md) \n ", "url": "https://dune.com/docs/data-tables/community/neynar/farcaster/links/"}
{"content": "Skip to content\n          (#fnames) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/community/neynar/farcaster/fnames.md) \n ", "url": "https://dune.com/docs/data-tables/community/neynar/farcaster/fnames/"}
{"content": "Skip to content\n          (#fids) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/community/neynar/farcaster/fids.md) \n ", "url": "https://dune.com/docs/data-tables/community/neynar/farcaster/fids/"}
{"content": "Please wait \n This application is starting, you will be redirected once it is ready. \n If your are the application owner, check your logs for details.", "url": "https://dune.com/docs/data-tables/community/neynar/farcaster/casts/"}
{"content": "Skip to content\n          (#farcaster) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/community/neynar/farcaster/index.md) \n ", "url": "https://dune.com/docs/data-tables/community/neynar/farcaster/"}
{"content": "Skip to content\n          (#sandwiches) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/community/flashbots/sandwiches.md) \n ", "url": "https://dune.com/docs/data-tables/community/flashbots/sandwiches/"}
{"content": "Collection Floor Ask Events \u00b6 \n ", "url": "https://dune.com/docs/data-tables/community/reservoir/collection-floor-ask-events/#collection-floor-ask-events"}
{"content": "reservoir.collection_floor_ask_events \u00b6 \n This table contains records with information about each collection floor ask change. \n Query examples can be found here: \n https://dune.com/queries/1302799/2232083  (https://dune.com/queries/1302799/2232083) \n https://dune.com/queries/1302841/2232151  (https://dune.com/queries/1302841/2232151) \n \n \n \n Column name \n Type \n Description \n \n \n \n \n id \n bigint \n Internal event id \n \n \n kind \n string \n Event type (new-order, expiry, sale, cancel, balance-change, approval-change, bootstrap, revalidation, reprice) \n \n \n collection_id \n string \n Collection id \n \n \n contract \n string \n Contract address \n \n \n token_id \n string \n Id of the token in the collection \n \n \n order_id \n string \n Associated ask id \n \n \n maker \n string \n Associated ask maker wallet address \n \n \n price \n decimal \n Associated ask price (native currency) \n \n \n previous_price \n decimal \n previous floor ask price (native currency) \n \n \n valid_until \n bigint \n Associated ask validity expiration \n \n \n source \n string \n Source of the order (e.g. opensea.io) \n \n \n tx_hash \n string \n Associated transaction hash \n \n \n tx_timestamp \n bigint \n Associated transaction timestamp \n \n \n created_at \n timestamp \n Timestamp the event was recorded", "url": "https://dune.com/docs/data-tables/community/reservoir/collection-floor-ask-events/#reservoircollection_floor_ask_events"}
{"content": "Bids \u00b6 \n ", "url": "https://dune.com/docs/data-tables/community/reservoir/bids/#bids"}
{"content": "reservoir.bids \u00b6 \n This table contains records with information about each bid. \n \n \n \n Column name \n Type \n Description \n \n \n \n \n id \n string \n Internal order id \n \n \n kind \n string \n Protocol name (e.g. seaport) \n \n \n status \n string \n Order status (active, inactive) \n \n \n contract \n string \n Contract address \n \n \n token_set_id \n string \n Id of the token set \n \n \n maker \n string \n Maker wallet address \n \n \n taker \n string \n Taker wallet address \n \n \n price \n string \n The current price (native currency) \n \n \n value \n string \n The current value (native currency) \n \n \n currency_address \n string \n Currency address \n \n \n currency_symbol \n string \n Currency symbol \n \n \n currency_price \n string \n Currency price \n \n \n quantity \n bigint \n Amount of tokens that is listed \n \n \n quantity_filled \n bigint \n Amount of tokens that was filled \n \n \n quantity_remaining \n bigint \n Amount of tokens remaining \n \n \n valid_from \n bigint \n Listing start time \n \n \n valid_until \n bigint \n Listing end time \n \n \n nonce \n bigint \n The order nonce of the maker \n \n \n source \n string \n Source of the listing (e.g. opensea.io) \n \n \n fee_bps \n bigint \n Listing fee \n \n \n expiration \n bigint \n Associated transaction hash \n \n \n raw_data \n string \n Raw order data (format will vary per source) \n \n \n created_at \n timestamp \n Timestamp the listing was created \n \n \n updated_at \n timestamp \n Timestamp the listing was updated", "url": "https://dune.com/docs/data-tables/community/reservoir/bids/#reservoirbids"}
{"content": "Bid Events \u00b6 \n ", "url": "https://dune.com/docs/data-tables/community/reservoir/bid-events/#bid-events"}
{"content": "reservoir.bid_events \u00b6 \n This table contains records with information about each bid change. \n \n \n \n Column name \n Type \n Description \n \n \n \n \n id \n string \n Internal event id \n \n \n kind \n string \n Event type (new-order, expiry, sale, cancel, balance-change, approval-change, bootstrap, revalidation, reprice) \n \n \n status \n string \n Event status (active, expired) \n \n \n contract \n string \n Contract address \n \n \n token_set_id \n string \n Id of the token set \n \n \n order_id \n string \n Associated bid id \n \n \n maker \n string \n Associated bid maker wallet address \n \n \n price \n string \n Associated bid price (native currency) \n \n \n value \n string \n Associated bid value (native currency) \n \n \n quantity_remaining \n bigint \n Associated bid tokens remaining \n \n \n valid_from \n bigint \n Associated bid validity start \n \n \n valid_until \n bigint \n Associated bid validity expiration \n \n \n source \n string \n Source of the order (e.g. opensea.io) \n \n \n tx_hash \n string \n Associated transaction hash \n \n \n tx_timestamp \n bigint \n Associated transaction timestamp \n \n \n created_at \n timestamp \n Timestamp the event was recorded", "url": "https://dune.com/docs/data-tables/community/reservoir/bid-events/#reservoirbid_events"}
{"content": "Attributes \u00b6 \n ", "url": "https://dune.com/docs/data-tables/community/reservoir/attributes/#attributes"}
{"content": "reservoir.attributes \u00b6 \n This table contains records with information about each attribute. \n Query examples can be found here: \n https://dune.com/queries/1302927/2232298  (https://dune.com/queries/1302927/2232298) \n https://dune.com/queries/1302966/2232361  (https://dune.com/queries/1302966/2232361) \n \n \n \n Column name \n Type \n Description \n \n \n \n \n id \n bigint \n Internal attribute id \n \n \n attribute_key_id \n bigint \n Internal attribute key id \n \n \n value \n string \n Attribute value \n \n \n token_count \n bigint \n Amount of tokens that have the attribute \n \n \n on_sale_count \n bigint \n Amount of tokens that have the attribute which are on sale \n \n \n floor_sell_value \n decimal \n Current floor ask price \n \n \n sell_updated_at \n timestamp \n Timestamp the floor sale was last updated \n \n \n collection_id \n string \n Associated collection id \n \n \n kind \n string \n Value type (string, number, date, range) \n \n \n key \n string \n Associated key name \n \n \n created_at \n timestamp \n Timestamp the attribute was created \n \n \n updated_at \n timestamp \n Timestamp the attribute was updated", "url": "https://dune.com/docs/data-tables/community/reservoir/attributes/#reservoirattributes"}
{"content": "Skip to content\n          (#sandwiched-swaps) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/community/flashbots/sandwiched-swaps.md) \n ", "url": "https://dune.com/docs/data-tables/community/flashbots/sandwiched-swaps/"}
{"content": "Attribute Keys \u00b6 \n ", "url": "https://dune.com/docs/data-tables/community/reservoir/attribute-keys/#attribute-keys"}
{"content": "reservoir.attribute_keys \u00b6 \n This table contains records with information about each attribute key. \n Query examples can be found here: \n https://dune.com/queries/1302930/2232305  (https://dune.com/queries/1302930/2232305) \n \n \n \n Column name \n Type \n Description \n \n \n \n \n id \n string \n Internal attribute key id \n \n \n collection_id \n string \n Associated collection id \n \n \n key \n string \n The name of the attribute \n \n \n kind \n string \n Value type (string, number, date, range) \n \n \n rank \n string \n Sort order \n \n \n created_at \n timestamp \n Timestamp the attribute key was created \n \n \n updated_at \n timestamp \n Timestamp the attribute key was updated", "url": "https://dune.com/docs/data-tables/community/reservoir/attribute-keys/#reservoirattribute_keys"}
{"content": "Skip to content\n          (#mev-summary) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/community/flashbots/mev_summary.md) \n ", "url": "https://dune.com/docs/data-tables/community/flashbots/mev_summary/"}
{"content": "Skip to content\n          (#liquidations) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/community/flashbots/liquidations.md) \n ", "url": "https://dune.com/docs/data-tables/community/flashbots/liquidations/"}
{"content": "Skip to content\n          (#arbitrages) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/community/flashbots/arbitrages.md) \n ", "url": "https://dune.com/docs/data-tables/community/flashbots/arbitrages/"}
{"content": "Skip to content\n          (#flashbots) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/community/flashbots/index.md) \n ", "url": "https://dune.com/docs/data-tables/community/flashbots/"}
{"content": "Skip to content\n          (#flashbots) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/community/index.md) \n Community \n \n Note \n Community data is only available on V2 Engine. \n \n While Blockchain data is cool on it's own and we do our best to prepare, standardize and work with that data, sometimes a bit of off-chain data or augmented on-chain data is needed as well. Therefore, we are starting to partner with selected organizations that stream their data directly to Dune. \n We are still building out the infrastructure for this endeavor and can therefore not support more datasets at the current moment. \n \n \n \n Flashbots \u00b6  (#flashbots) \n \n Flashbots is a research and development organization formed to mitigate the negative externalities and existential risks posed by miner-extractable value (MEV) to smart-contract blockchains.   \n \u2192 Flashbots  (flashbots/) \n \n \n Reservoir \u00b6  (#reservoir) \n \n Reservoir is a developer platform that lets you interact with the NFT market using a single toolkit. Reservoir uploads additional NFT data to Dune.   \n \u2192 Reservoir  (reservoir/) \n \n \n Neynar \u00b6  (#neynar) \n \n Neynar is the development platform for web3 social protocols. Neynar makes social protocol data available on Dune.    \n \u2192 Farcaster  (neynar/farcaster/)", "url": "https://dune.com/docs/data-tables/community/"}
{"content": "Skip to content\n          (#transactions) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/raw/bitcoin/transactions.md) \n ", "url": "https://dune.com/docs/data-tables/raw/bitcoin/transactions/"}
{"content": "Skip to content\n          (#outputs) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/raw/bitcoin/outputs.md) \n ", "url": "https://dune.com/docs/data-tables/raw/bitcoin/outputs/"}
{"content": "Asks \u00b6 \n ", "url": "https://dune.com/docs/data-tables/community/reservoir/asks/#asks"}
{"content": "reservoir.asks \u00b6 \n This table contains records with information about each listing. \n Query examples can be found here: \n https://dune.com/queries/1302885/2232229  (https://dune.com/queries/1302885/2232229) \n https://dune.com/queries/1302904/2232257  (https://dune.com/queries/1302904/2232257) \n \n \n \n Column name \n Type \n Description \n \n \n \n \n id \n string \n Internal order id \n \n \n kind \n string \n Protocol name (e.g. seaport) \n \n \n status \n string \n Order status (active, inactive) \n \n \n contract \n string \n Contract address \n \n \n token_id \n string \n Id of the token in the collection \n \n \n maker \n string \n Maker wallet address \n \n \n taker \n string \n Taker wallet address \n \n \n price \n decimal \n The current price (native currency) \n \n \n start_price \n bigint \n Start Listing price (for dutch auctions) \n \n \n end_price \n bigint \n End Listing price (for dutch auctions) \n \n \n currency_address \n string \n Currency address \n \n \n currency_symbol \n string \n Currency symbol \n \n \n currency_price \n decimal \n Currency price \n \n \n dynamic \n boolean \n Is dutch auction? \n \n \n quantity \n bigint \n Amount of tokens that is listed \n \n \n quantity_filled \n bigint \n Amount of tokens that was filled \n \n \n quantity_remaining \n bigint \n Amount of tokens remaining \n \n \n valid_from \n bigint \n Listing start time \n \n \n valid_until \n bigint \n Listing end time \n \n \n nonce \n string \n The order nonce of the maker \n \n \n source \n string \n Source of the listing (e.g. opensea.io) \n \n \n fee_bps \n bigint \n Listing fee \n \n \n expiration \n bigint \n Associated transaction hash \n \n \n raw_data \n string \n Raw order data (format will vary per source) \n \n \n created_at \n timestamp \n Timestamp the listing was created \n \n \n updated_at \n timestamp \n Timestamp the listing was updated", "url": "https://dune.com/docs/data-tables/community/reservoir/asks/#reservoirasks"}
{"content": "Ask Events \u00b6 \n ", "url": "https://dune.com/docs/data-tables/community/reservoir/ask-events/#ask-events"}
{"content": "reservoir.ask_events \u00b6 \n This table contains records with information about each ask change. \n Query examples can be found here: \n https://dune.com/queries/1302858/2232178  (https://dune.com/queries/1302858/2232178) \n https://dune.com/queries/1302863/2232189  (https://dune.com/queries/1302863/2232189) \n \n \n \n Column name \n Type \n Description \n \n \n \n \n id \n bigint \n Internal event id \n \n \n kind \n string \n Event type (new-order, expiry, sale, cancel, balance-change, approval-change, bootstrap, revalidation, reprice) \n \n \n contract \n string \n Contract address \n \n \n token_id \n string \n Id of the token in the collection \n \n \n order_id \n string \n Associated ask id \n \n \n maker \n string \n Associated ask maker wallet address \n \n \n price \n decimal \n Associated ask price (native currency) \n \n \n quantity_remaining \n bigint \n Associated ask tokens remaining \n \n \n valid_from \n bigint \n Associated ask validity start \n \n \n valid_until \n bigint \n Associated ask validity expiration \n \n \n source \n string \n Source of the order (e.g. opensea.io) \n \n \n tx_hash \n string \n Associated transaction hash \n \n \n tx_timestamp \n bigint \n Associated transaction timestamp \n \n \n created_at \n timestamp \n Timestamp the event was recorded", "url": "https://dune.com/docs/data-tables/community/reservoir/ask-events/#reservoirask_events"}
{"content": "Reservoir \u00b6 \n Dashboard:   https://dune.com/reservoir0x/reservoir-dune-docs-dashboard  (https://dune.com/reservoir0x/reservoir-dune-docs-dashboard) \n Docs:   https://docs.reservoir.tools/docs  (https://docs.reservoir.tools/docs) \n Discord:   https://discord.gg/jbEUwrVx  (https://discord.gg/jbEUwrVx) \n Data available: \n \n \n \n Ask Events  (ask-events/) \u00b6  (#ask-events) \n Information about Ask events in a marketplace. \n \u2192 Ask Events  (ask-events/) \n \n \n Bid Events  (bid-events/) \u00b6  (#bid-events) \n Information about Bid events in a marketplace. \n \u2192 Bid Events  (bid-events/) \n \n \n Collections  (collections/) \u00b6  (#collections) \n Information about NFT collections. \n \u2192 Collections  (collections/) \n \n \n Token Floor Ask Events  (token-floor-ask-events/) \u00b6  (#token-floor-ask-events) \n Information about Token Floor Ask events in a marketplace. \n \u2192 Token Floor Ask Events  (token-floor-ask-events/) \n \n \n Asks  (asks/) \u00b6  (#asks) \n Information about Asks in a marketplace. \n \u2192 Asks  (asks/) \n \n \n Bids  (bids/) \u00b6  (#bids) \n Information about Bids in a marketplace. \n \u2192 Bids  (bids/) \n \n \n Tokens  (tokens/) \u00b6  (#tokens) \n Information about ERC-721 tokens. \n \u2192 Tokens  (tokens/) \n \n \n Attribute Keys  (attribute-keys/) \u00b6  (#attribute-keys) \n List of attributes or characteristics of a token. \n \u2192 Attribute Keys  (attribute-keys/) \n \n \n Collection Floor Ask Events  (collection-floor-ask-events/) \u00b6  (#collection-floor-ask-events) \n Information about Collection Floor Ask events in a marketplace. \n \u2192 Collection Floor Ask Events  (collection-floor-ask-events/) \n \n \n Sales  (sales/) \u00b6  (#sales) \n Information about sales in a marketplace. \n \u2192 Sales  (sales/) \n \n \n Attributes  (attributes/) \u00b6  (#attributes) \n Information about token attributes. \n \u2192 Attributes  (attributes/) \n \n \n Collection Top Bid Events  (collection-top-bid-events/) \u00b6  (#collection-top-bid-events) \n Information about Collection Top Bid events in a marketplace. \n \u2192 Collection Top Bid Events  (collection-top-bid-events/) \n \n \n Token Attributes  (token-attributes/) \u00b6  (#token-attributes) \n Information about token attributes and characteristics. \n \u2192 Token Attributes  (token-attributes/)", "url": "https://dune.com/docs/data-tables/community/reservoir/#reservoir"}
{"content": "Verifications \u00b6 \n ", "url": "https://dune.com/docs/data-tables/community/neynar/farcaster/verifications/#verifications"}
{"content": "dune.neynar.dataset_farcaster_verifications \u00b6 \n This table contains data about the Ethereum wallet addresses connected to Farcaster profiles. \n \n \n \n Column name \n Type \n Description \n \n \n \n \n id \n bigint \n Row id \n \n \n created_at \n timestamp without timezone \n Timestamp of creation within database \n \n \n updated_at \n timestamp without timezone \n Timestamp of update within database \n \n \n deleted_at \n timestamp without timezone \n Timestamp of deletion on Farcaster protocol \n \n \n timestamp \n timestamp without timezone \n Timestamp of creation on Farcaster protocol \n \n \n fid \n bigint \n User ID of user on Farcaster protocol \n \n \n hash \n bytea \n Hash of connecting address to profile on protocol \n \n \n claim \n jsonb \n Connected wallet addresses and proof of connection", "url": "https://dune.com/docs/data-tables/community/neynar/farcaster/verifications/#duneneynardataset_farcaster_verifications"}
{"content": "User Data \u00b6 \n ", "url": "https://dune.com/docs/data-tables/community/neynar/farcaster/user_data/#user-data"}
{"content": "dune.neynar.dataset_farcaster_user_data \u00b6 \n This table contains data about the user information on the Farcaster protocol. It can be joined with  fname  or  fid  for additional details. \n \n \n \n Column name \n Type \n Description \n \n \n \n \n id \n bigint \n Row id \n \n \n created_at \n timestamp without timezone \n Timestamp of creation within database \n \n \n updated_at \n timestamp without timezone \n Timestamp of update within database \n \n \n deleted_at \n timestamp without timezone \n Timestamp of deletion on Farcaster protocol \n \n \n timestamp \n timestamp without timezone \n Timestamp of creation on Farcaster protocol \n \n \n fid \n bigint \n User ID of user on Farcaster protocol \n \n \n hash \n bytea \n Hash of user data \n \n \n type \n smallint \n Type of user data: (1 = Avatar URL, 2 = Display name, 3 = Profile bio, 5 = URL of the user, 6 = Preferred fname)", "url": "https://dune.com/docs/data-tables/community/neynar/farcaster/user_data/#duneneynardataset_farcaster_user_data"}
{"content": "Storage \u00b6 \n ", "url": "https://dune.com/docs/data-tables/community/neynar/farcaster/storage/#storage"}
{"content": "dune.neynar.dataset_farcaster_storage \u00b6 \n This table contains data about the storage units available for users on the Farcaster protocol. \n \n \n \n Column name \n Type \n Description \n \n \n \n \n id \n bigint \n Row id \n \n \n created_at \n timestamp without timezone \n Timestamp of creation within database \n \n \n updated_at \n timestamp without timezone \n Timestamp of update within database \n \n \n deleted_at \n timestamp without timezone \n Timestamp of deletion on Farcaster protocol \n \n \n timestamp \n timestamp without timezone \n Timestamp of creation on Farcaster protocol \n \n \n fid \n bigint \n User ID of user on Farcaster protocol \n \n \n units \n bigint \n Units of storage available for the user on the protocol \n \n \n expiry \n timestamp without timezone \n Time when storage expires for user", "url": "https://dune.com/docs/data-tables/community/neynar/farcaster/storage/#duneneynardataset_farcaster_storage"}
{"content": "Signers \u00b6 \n ", "url": "https://dune.com/docs/data-tables/community/neynar/farcaster/signers/#signers"}
{"content": "dune.neynar.dataset_farcaster_signers \u00b6 \n This table contains data about signers associated with users on the Farcaster protocol. \n \n \n \n Column name \n Type \n Description \n \n \n \n \n id \n bigint \n Row id \n \n \n created_at \n timestamp without timezone \n Timestamp of creation within database \n \n \n updated_at \n timestamp without timezone \n Timestamp of update within database \n \n \n deleted_at \n timestamp without timezone \n Timestamp of deletion on Farcaster protocol \n \n \n timestamp \n timestamp without timezone \n Timestamp of creation on Farcaster protocol \n \n \n fid \n bigint \n User ID of user on Farcaster protocol \n \n \n hash \n bytea \n Hash of creating signer on the protocol \n \n \n signer \n bytea \n Signer created by user", "url": "https://dune.com/docs/data-tables/community/neynar/farcaster/signers/#duneneynardataset_farcaster_signers"}
{"content": "Reactions \u00b6 \n ", "url": "https://dune.com/docs/data-tables/community/neynar/farcaster/reactions/#reactions"}
{"content": "dune.neynar.dataset_farcaster_reactions \u00b6 \n This table contains data about likes and recast events on the Farcaster protocol. \n \n \n \n Column name \n Type \n Description \n \n \n \n \n id \n bigint \n Row id \n \n \n created_at \n timestamp without timezone \n Timestamp of creation within database \n \n \n updated_at \n timestamp without timezone \n Timestamp of update within database \n \n \n deleted_at \n timestamp without timezone \n Timestamp of deletion on Farcaster protocol \n \n \n timestamp \n timestamp without timezone \n Timestamp of creation on Farcaster protocol \n \n \n fid \n bigint \n User ID of user on Farcaster protocol \n \n \n reaction_type \n smallint \n Type of reaction: 1 = like, 2 = recast \n \n \n hash \n bytea \n Reaction hash \n \n \n target_hash \n bytea \n Hash of the cast that the user is reacting to \n \n \n target_fid \n bigint \n FID of the user who wrote the target_hash \n \n \n target_url \n text \n URL that the user is reacting to \n \n \n \n See more  here  (https://github.com/farcasterxyz/protocol/discussions/71)  for discussions on how Farcaster protocol handles flexible target URLs.", "url": "https://dune.com/docs/data-tables/community/neynar/farcaster/reactions/#duneneynardataset_farcaster_reactions"}
{"content": "Profile with addresses \u00b6 \n ", "url": "https://dune.com/docs/data-tables/community/neynar/farcaster/profile_with_addresses/#profile-with-addresses"}
{"content": "dune.neynar.dataset_farcaster_profile_with_addresses \u00b6 \n This table contains farcaster user's profile data and their connected addresses \n \n \n \n Column name \n type \n description \n \n \n \n \n fid \n bigint \n User ID of farcaster user \n \n \n fname \n text \n Username \n \n \n display_name \n text \n Display name of user \n \n \n avatar_url \n text \n Link to profile picture \n \n \n bio \n text \n User profile bio \n \n \n verified_addresses \n jsonb \n EVM wallet addresses connected to Farcaster profile", "url": "https://dune.com/docs/data-tables/community/neynar/farcaster/profile_with_addresses/#duneneynardataset_farcaster_profile_with_addresses"}
{"content": "Links \u00b6 \n ", "url": "https://dune.com/docs/data-tables/community/neynar/farcaster/links/#links"}
{"content": "dune.neynar.dataset_farcaster_links \u00b6 \n This table contains data about follower and following relationships on the Farcaster protocol. \n \n \n \n Column name \n Type \n Description \n \n \n \n \n id \n bigint \n Row id \n \n \n created_at \n timestamp without timezone \n Timestamp of creation within database \n \n \n updated_at \n timestamp without timezone \n Timestamp of update within database \n \n \n deleted_at \n timestamp without timezone \n Timestamp of deletion on Farcaster protocol \n \n \n timestamp \n timestamp without timezone \n Timestamp of creation on Farcaster protocol \n \n \n fid \n bigint \n User ID of user on Farcaster protocol \n \n \n target_fid \n bigint \n FID of the user who is link target \n \n \n hash \n bytea \n Link hash on the protocol \n \n \n type \n text \n Link type, usually this is a \u201cfollow\u201d", "url": "https://dune.com/docs/data-tables/community/neynar/farcaster/links/#duneneynardataset_farcaster_links"}
{"content": "Fnames \u00b6 \n ", "url": "https://dune.com/docs/data-tables/community/neynar/farcaster/fnames/#fnames"}
{"content": "dune.neynar.dataset_farcaster_fnames \u00b6 \n This table contains usernames associated with FIDs on the Farcaster protocol. \n \n \n \n Column name \n Type \n Description \n \n \n \n \n id \n bigint \n Row id \n \n \n created_at \n timestamp without timezone \n Timestamp of creation within database \n \n \n updated_at \n timestamp without timezone \n Timestamp of update within database \n \n \n deleted_at \n timestamp without timezone \n Timestamp of deletion on Farcaster protocol \n \n \n timestamp \n timestamp without timezone \n Timestamp of creation on Farcaster protocol \n \n \n fid \n bigint \n User ID of user on Farcaster protocol \n \n \n custody_address \n bytea \n Address that stores the FC profile for the user \n \n \n expires_at \n timestamp without timezone \n Timestamp when username expires for the user", "url": "https://dune.com/docs/data-tables/community/neynar/farcaster/fnames/#duneneynardataset_farcaster_fnames"}
{"content": "Fids \u00b6 \n ", "url": "https://dune.com/docs/data-tables/community/neynar/farcaster/fids/#fids"}
{"content": "dune.neynar.dataset_farcaster_fids \u00b6 \n This table contains all User IDs for Farcaster users \n \n \n \n Column name \n Type \n Description \n \n \n \n \n fid \n bigint \n User ID of user on Farcaster protocol \n \n \n created_at \n timestamp without timezone \n Timestamp of row creation \n \n \n updated_at \n timestamp without timezone \n Timestamp of last update \n \n \n custody_address \n bytea \n Address that stores user profile on the protocol", "url": "https://dune.com/docs/data-tables/community/neynar/farcaster/fids/#duneneynardataset_farcaster_fids"}
{"content": "Farcaster \u00b6 \n Farcaster  (https://farcaster.xyz)  - a protocol for decentralized social apps \n Note:  Neynar is the development platform for web3 social protocols. Neynar makes Farcaster protocol data available on Dune. Check out  neynar.com  (https://neynar.com)  for Farcaster hubs, APIs or other processed data. \n Website:   neynar.com  (https://neynar.com) \n Docs:   docs.neynar.com  (https://docs.neynar.com) \n Reach the team:   Telegram  (https://t.me/rishdoteth) \n Data available: \n \n \n \n casts \u00b6  (#casts) \n \n All casts on the Farcaster protocol. \n \u2192 Casts  (casts/) \n \n \n fids \u00b6  (#fids) \n \n User IDs associated with users on the Farcaster protocol. \n \u2192 FIDs  (fids/) \n \n \n fnames \u00b6  (#fnames) \n \n Usernames for FIDs on the protocol. \n \u2192 Fnames  (fnames/) \n \n \n links \u00b6  (#links) \n \n Follower and following graph on Farcaster. \n \u2192 Links  (links/) \n \n \n reactions \u00b6  (#reactions) \n \n Likes and recast events on Farcaster. \n \u2192 Reactions  (reactions/) \n \n \n signers \u00b6  (#signers) \n \n Signers for users on Farcaster. \n \u2192 Signers  (signers/) \n \n \n storage \u00b6  (#storage) \n \n Storage units for Farcaster users. \n \u2192 Storage  (storage/) \n \n \n user_data \u00b6  (#user_data) \n \n User information for Farcaster users. \n \u2192 User Data  (user_data/) \n \n \n verifications \u00b6  (#verifications) \n ---' \n Ethereum wallet addresses connected to Farcaster profiles. \n \u2192 Verifications  (verifications/) \n \n \n profile_with_addresses \u00b6  (#profile_with_addresses) \n \n Farcaster user's profile data and their connected addresses. \n \u2192 Profiles with Addresses  (profile_with_addresses/)", "url": "https://dune.com/docs/data-tables/community/neynar/farcaster/#farcaster"}
{"content": "Sandwiches \u00b6 \n ", "url": "https://dune.com/docs/data-tables/community/flashbots/sandwiches/#sandwiches"}
{"content": "sandwiches \u00b6 \n This table contains detailed information about executed sandwiches \n \n \n \n Column name \n Type \n Description \n \n \n \n \n created_at \n datetime \n Time of the records creation \n \n \n block_number \n bigint \n Block number \n \n \n backrun_swap_trace_address \n string \n address of the swap in the backrun transaction \n \n \n backrun_swap_transaction_hash \n string \n transaction_hash of backrun transaction of specified sandwich \n \n \n frontrun_swap_trace_address \n string \n address of the swap in the frontrun transaction \n \n \n frontrun_swap_transaction_hash \n string \n transaction_hash of frontrun transaction of specified sandwich \n \n \n id \n string \n Internal id of the sandwich \n \n \n profit_amount \n bigint \n Profit amount after the arbitrage \n \n \n profit_token_address \n string \n Address of the profit asset \n \n \n sandwicher_address \n string \n Address of the sandwicher \n \n \n timestamp \n timestamp \n Timestamp of the latest update of the file \n \n \n \n ", "url": "https://dune.com/docs/data-tables/community/flashbots/sandwiches/#sandwiches_1"}
{"content": "**** \u00b6", "url": "https://dune.com/docs/data-tables/community/flashbots/sandwiches/#_1"}
{"content": "Skip to content\n          (#inputs) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/raw/bitcoin/inputs.md) \n ", "url": "https://dune.com/docs/data-tables/raw/bitcoin/inputs/"}
{"content": "Sandwiched Swaps \u00b6 \n ", "url": "https://dune.com/docs/data-tables/community/flashbots/sandwiched-swaps/#sandwiched-swaps"}
{"content": "flashbots.sandwiched_swaps \u00b6 \n The sandwiched_swaps table contains additional data about one or more swaps that were sandwiched with a corresponding sandwich in the database. \n Query examples can be found here: \n \n \n \n Column name \n Type \n Description \n \n \n \n \n created_at \n string \n Time of the records creation \n \n \n block_number \n bigint \n Block number \n \n \n sandwich_id \n string \n Internal id of the sandwiched swap \n \n \n trace_address \n string \n Trace pattern related to the position of the swap in the chain of all swaps related to the arbitrage trade. \n \n \n transaction_hash \n string \n Transaction hash \n \n \n timestamp \n timestamp \n Timestamp of the latest update of the file", "url": "https://dune.com/docs/data-tables/community/flashbots/sandwiched-swaps/#flashbotssandwiched_swaps"}
{"content": "Skip to content\n          (#blocks) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/raw/bitcoin/blocks.md) \n ", "url": "https://dune.com/docs/data-tables/raw/bitcoin/blocks/"}
{"content": "Skip to content\n          (#data-available) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/raw/bitcoin/index.md) \n Bitcoin Overview \n Raw tables provide you raw, unfiltered and unedited data. \n Raw data tables are very useful to get raw scripts, inputs, and outputs from transactions. \n Bitcoin uses a UTXO transaction model, and has a heavy focus on signatures and scripts for \"locking\" and \"unlocking\" tokens. They are also most well known for being tied to a 21 million token supply, and halvenings. For a full guide on all Bitcoin concepts,  check out this one  (https://web3datadegens.substack.com/p/how-to-analyze-bitcoin-data-with) . \n ", "url": "https://dune.com/docs/data-tables/raw/bitcoin/"}
{"content": "Skip to content\n          (#vote-transactions) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/raw/solana/vote-transactions.md) \n ", "url": "https://dune.com/docs/data-tables/raw/solana/vote-transactions/"}
{"content": "Skip to content\n          (#transactions) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/raw/solana/transactions.md) \n ", "url": "https://dune.com/docs/data-tables/raw/solana/transactions/"}
{"content": "Skip to content\n          (#rewards) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/raw/solana/rewards.md) \n ", "url": "https://dune.com/docs/data-tables/raw/solana/rewards/"}
{"content": "Skip to content\n          (#account-activity) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/raw/solana/account-activity.md) \n ", "url": "https://dune.com/docs/data-tables/raw/solana/account-activity/"}
{"content": "Skip to content\n          (#data-available) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/raw/solana/index.md) \n Solana Overview \n Raw tables provide you raw, unfiltered and unedited data. \n Raw data tables are very useful to get transactions, pre and post balances, and instructions data. As a non-EVM chain, Solana Raw data looks quite different from other chains (largely due to it's account structure). You can learn to get started with Solana analysis  in this guide  (https://web3datadegens.substack.com/p/starter-guide-to-solana-data-analysis) . \n However, queries that have been written using raw data tables are notoriously hard to understand and audit due to the nature of the the encoded data commonly found in these tables. Furthermore, the raw data tables have a very large number of rows and hence can be slow to query. Most of the time you are better off working with  decoded data  (../../decoded/solana/idl-tables/) . \n ", "url": "https://dune.com/docs/data-tables/raw/solana/"}
{"content": "Skip to content\n          (#how-to-work-with-this-table) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/raw/evm/withdrawals.md) \n Withdrawals \n \n Warning \n This table is only relevant of Ethereum mainnet and does not exist for other EVM chains on Dune. \n \n \n Note \n Dune does not have beacon chain data yet. This table introduces the action of withdrawing from the beacon chain only.   \n \n The  Ethereum Improvement Proposal (EIP) 4895  (https://eips.ethereum.org/EIPS/eip-4895)  introduces a system-level \"operation\" to support validator withdrawals that are \"pushed\" from the beacon chain to the EVM. \n Withdrawals are represented as a new type of object in the execution payload, called an \"operation\", that cleanly separates this \"system-level\" operation from regular transactions. Withdrawals provide key information from the consensus layer such as a monotonically increasing index, validator index, recipient address, and the amount of ether given in Gwei. \n Using this table you can observe beacon chain withdrawals. \n ", "url": "https://dune.com/docs/data-tables/raw/evm/withdrawals/"}
{"content": "Skip to content\n          (#tables) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/raw/evm/transactions.md) \n Transactions \n Transactions are cryptographically signed instructions from accounts. An account will initiate a transaction to update the state of the Ethereum network. Transactions will always originate from externally owned accounts, a smart contract can not initiate a transaction. \n Transactions need to be broadcast to the whole network. Any node can broadcast a request for a transaction to be executed on the EVM; after this happens, a miner will execute the transaction and propagate the resulting state change to the rest of the network. \n Read more in the official Ethereum documentation  here  (https://ethereum.org/en/developers/docs/transactions) . \n ", "url": "https://dune.com/docs/data-tables/raw/evm/transactions/"}
{"content": "Skip to content\n          (#tables) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/raw/evm/traces.md) \n Traces \n Transactions can trigger smaller atomic actions that modify the internal state of an Ethereum Virtual Machine. Information about the execution of these actions is logged and can be found stored as an EVM execution trace, or just a  trace . In Etherscan these are referred to as \"internal transactions\". \n Read more  here  (https://medium.com/chainalysis/ethereum-traces-not-transactions-3f0533d26aa) . \n ", "url": "https://dune.com/docs/data-tables/raw/evm/traces/"}
{"content": "Skip to content\n          (#tables) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/raw/evm/event-logs.md) \n Event Logs \n Event Logs tables store all logs data that gets generated by smart contracts. \n This can be useful for querying contracts that are not yet decoded or are not able to be decoded since the code of the smart contract is not public. \n Logs are an elegant way to store tiny amounts of data on EVM blockchains for a small amount of gas. Specifically, event logs are useful to let other people know something has happened without them having to query contracts individually. \n For more on this topic read  this article  (https://medium.com/mycrypto/understanding-event-logs-on-the-ethereum-blockchain-f4ae7ba50378) . \n \n Note \n Our topic index counts from 1, so  topic0  shows up as  topic1 ,  topic1  shows up as  topic2  and so on. \n \n ", "url": "https://dune.com/docs/data-tables/raw/evm/event-logs/"}
{"content": "MEV Summary \u00b6 \n ", "url": "https://dune.com/docs/data-tables/community/flashbots/mev_summary/#mev-summary"}
{"content": "flashbots.mev_summary \u00b6 \n This table contains summary of all the classified transactions \n Query examples can be found here:  Miner Revenue from Liquidations and Arbitrages  (https://dune.com/queries/625974/1167301) \n \n \n \n Column name \n Type \n Description \n \n \n \n \n block_timestamp \n timestamp \n Block timestamp \n \n \n block_number \n bigint \n Block number \n \n \n base_fee_per_gas \n bigint \n Base fee per gas \n \n \n coinbase_transfer \n bigint \n Direct transfer to miner\u2019s address \n \n \n error \n string \n Error if exists \n \n \n gas_price \n bigint \n Price of the gas \n \n \n gas_price_with_coinbase_transfer \n bigint \n Amount of gas spent + direct transfer to miner address \n \n \n gas_used \n bigint \n Amount of gas used \n \n \n gross_profit_usd \n double \n Total profit from the transaction in usd \n \n \n miner_address \n string \n Address of the miner \n \n \n miner_payment_usd \n double \n Payment received by the miner in usd \n \n \n protocol \n string \n Main interacted protocol \n \n \n protocols \n string \n List of protocols involved in the transaction \n \n \n transaction_hash \n string \n Hash of the transaction \n \n \n type \n string \n Type of the MEV (e.g. arbitrage) \n \n \n timestamp \n timestamp \n Timestamp of the latest update of the file", "url": "https://dune.com/docs/data-tables/community/flashbots/mev_summary/#flashbotsmev_summary"}
{"content": "Liquidations \u00b6 \n ", "url": "https://dune.com/docs/data-tables/community/flashbots/liquidations/#liquidations"}
{"content": "flashbots.liquidations \u00b6 \n Liquidation is another MEV strategy. This table contains details related to executed liquidations. \n Query examples can be found here:  Liquidations by Protocol  (https://dune.com/queries/625715/1166880) \n \n \n \n Column name \n Type \n Description \n \n \n \n \n created_at \n string \n Time of the records creation \n \n \n transaction_hash \n string \n Transaction hash \n \n \n trace_address \n string \n Trace pattern related to the position of the transaction in the chain of all transactions related to the MEV trade. \n \n \n debt_token_address \n string \n Underlying token address of the debt to pay \n \n \n received_amount \n bigint \n Amount received from the liquidation \n \n \n protocol \n string \n Protocol name \n \n \n liquidated_user \n string \n Address of the liquidated user \n \n \n liquidator_user \n string \n Address of the liquidator user \n \n \n received_token_address \n string \n Address of the received asset \n \n \n block_number \n bigint \n Block number \n \n \n debt_purchase_amount \n bigint \n Amount of purchased debt \n \n \n timestamp \n timestamp \n Timestamp of the latest update of the file", "url": "https://dune.com/docs/data-tables/community/flashbots/liquidations/#flashbotsliquidations"}
{"content": "Arbitrages \u00b6 \n ", "url": "https://dune.com/docs/data-tables/community/flashbots/arbitrages/#arbitrages"}
{"content": "flashbots.arbitrages \u00b6 \n This table contains records with additional information about each arbitrage trade. \n Query examples can be found here:  Total Arb Protocols  (https://dune.com/queries/626076/1167481) \n \n \n \n Column name \n Type \n Description \n \n \n \n \n block_number \n bigint \n Block number \n \n \n account_address \n string \n Address of the searcher \n \n \n created_at \n string \n Time of the record creation \n \n \n end_amount \n bigint \n Available amount after the arbitrage \n \n \n error \n string \n Available amount after the arbitrage \n \n \n id \n string \n Internal id of the arbitrage \n \n \n profit_amount \n bigint \n Profit amount after the arbitrage \n \n \n profit_token_address \n string \n Address of the profit asset \n \n \n protocols \n string \n List of protocols involved in the transaction \n \n \n start_amount \n bigint \n Available amount before the arbitrage \n \n \n transaction_hash \n string \n Hash of the transaction \n \n \n timestamp \n timestamp \n Timestamp of the latest update of the file", "url": "https://dune.com/docs/data-tables/community/flashbots/arbitrages/#flashbotsarbitrages"}
{"content": "Flashbots \u00b6 \n Note:  mev-inspect-py, Flashbots\u2019 open source engine for generating MEV data, is used to power dashboards such as mev-explore and Dune\u2019s Flashbots integration. We\u2019re always looking to improve, fix bugs, cover edge cases, and add protocol coverage to the best of our ability with the help of our community and contributors. We encourage researchers and developers to report and help correct any found bugs, or implement any new features! Feel free to consult the documentation and join the Flashbots discord for more information and updates on our data and mev-inspect. \n Docs:   https://docs.flashbots.net/  (https://docs.flashbots.net) \n Discord:   https://discord.gg/7hvTycdNcK  (https://discord.gg/7hvTycdNcK) \n Data available: \n \n \n \n arbitrages \u00b6  (#arbitrages) \n \n \n \n Arbitrage opportunities found by mev-inspect-py. \n \u2192 Arbitrages  (arbitrages/) \n \n \n liquidations \u00b6  (#liquidations) \n \n \n \n Liquidations found by mev-inspect-py. \n \u2192 Liquidations  (liquidations/) \n \n \n sandwiched_swaps \u00b6  (#sandwiched_swaps) \n \n \n \n Sandwiched swaps found by mev-inspect-py. \n \u2192 Sandwiched Swaps  (sandwiched-swaps/) \n \n \n sandwiches \u00b6  (#sandwiches) \n \n \n \n Sandwiches found by mev-inspect-py. \n \u2192 Sandwiches  (sandwiches/) \n \n \n mev_summary \u00b6  (#mev_summary) \n \n \n \n Summary of MEV found by mev-inspect-py. \n \u2192 MEV Summary  (mev_summary/)", "url": "https://dune.com/docs/data-tables/community/flashbots/#flashbots"}
{"content": "Transactions \u00b6 \n ", "url": "https://dune.com/docs/data-tables/raw/bitcoin/transactions/#transactions"}
{"content": "bitcoin.transactions \u00b6 \n \n \n \n Column name \n Type \n Description \n \n \n \n \n block_time \n timestamp \n The block time \n \n \n block_date \n date \n The block date \n \n \n block_height \n bigint \n The block number \n \n \n block_hash \n string \n The hash of the block that contains this transaction \n \n \n index \n int \n The number of the transaction in the block. \n \n \n id \n string \n The id (hash) of this transaction \n \n \n input_value \n double \n Total value of inputs in the transaction \n \n \n output_value \n double \n Total value of outputs in the transaction \n \n \n fee \n double \n The transaction fee paid to the miner. = output_value - input_value \n \n \n input_count \n int \n The number of inputs in the transaction \n \n \n output_count \n int \n The number of outputs in the transaction \n \n \n size \n bigint \n The size of this transaction in bytes \n \n \n virtual_size \n bigint \n The virtual transaction size (differs from size for witness transactions) \n \n \n is_coinbase \n boolean \n The transaction is a coinbase transaction, which is the first transaction in a block \n \n \n coinbase \n string \n If the transaction is a coinbase transaction, contains the coinbase data. Otherwise, null. \n \n \n input \n struct \n Transaction inputs \n \n \n output \n struct \n Transaction outputs. See outputs table. \n \n \n lock_time \n bigint \n Earliest time that miners can include the transaction in their hashing of the Merkle root to attach it in the latest block of the blockchain \n \n \n hex \n string \n The transaction encoded as hexadecimal \n \n \n \n ", "url": "https://dune.com/docs/data-tables/raw/bitcoin/transactions/#bitcointransactions"}
{"content": "Struct definitions \u00b6 \n Within several of these columns is a data type of STRUCT which allows for representing nested hierarchical data and has key-value pairs. It's similar to a dictionary in python and can be used to group fields together to make them more accessible. \n Note that you can work with these columns with the syntax  input[1].witness_data[2]  or  input[3].script_pub_key.address  depending on lengths of arrays within each value. It is an  array(row(map))  type, and while it looks like just an array in the returned table - it is more than that! \n input \n \n \n \n Field \n Data type \n Description \n \n \n \n \n value \n double \n The number of Satoshis attached to this output \n \n \n height \n bigint \n The height of the output \n \n \n tx_id \n string \n The transaction id of the output that is here used as input \n \n \n output_number \n bigint \n The number (index) of the output in transaction  tx_id 's outputs \n \n \n coinbase \n string \n The data specified in this transaction, if it was a coinbase transaction \n \n \n sequence \n bigint \n Sequence number \n \n \n witness_data \n array \n Array of hex encoded witness data \n \n \n script_signature \n struct \n The script signature \n \n \n script_pub_key \n struct \n The script public key \n \n \n \n \n input.script_signature \n \n \n \n Field \n Data type \n Description \n \n \n \n \n hex \n string \n The transaction's script operations, in hex \n \n \n asm \n string \n The transaction's script operations, in symbolic representation \n \n \n \n \n input.script_pub_key \n \n \n \n Field \n Data type \n Description \n \n \n \n \n asm \n string \n The transaction's script operations, in symbolic representation \n \n \n desc \n string \n The transaction's script operations, in symbolic representation \n \n \n address \n string \n The transaction's script operations, in symbolic representation \n \n \n hex \n string \n The transaction's script operations, in hex \n \n \n type \n string \n The address type of the output \n \n \n \n \n output \n \n \n \n Field \n Data type \n Description \n \n \n \n \n index \n bigint \n 0-indexed number of an output within a transaction used by a later transaction to refer to that specific output \n \n \n value \n double \n The number of Satoshis attached to this output \n \n \n script_pub_key \n struct \n The public key \n \n \n \n \n output.script_pub_key \n \n \n \n Field \n Data type \n Description \n \n \n \n \n asm \n string \n The transaction's script operations, in symbolic representation \n \n \n hex \n string \n The transaction's script operations, in hex \n \n \n address \n string \n The address the BTC came from \n \n \n type \n string \n The address type of the output", "url": "https://dune.com/docs/data-tables/raw/bitcoin/transactions/#struct-definitions"}
{"content": "Outputs \u00b6 \n ", "url": "https://dune.com/docs/data-tables/raw/bitcoin/outputs/#outputs"}
{"content": "bitcoin.outputs \u00b6 \n \n \n \n Column name \n Type \n Description \n \n \n \n \n block_time \n timestamp \n The block time \n \n \n block_date \n date \n The block date \n \n \n block_height \n bigint \n The block number \n \n \n block_hash \n string \n The block hash \n \n \n tx_id \n string \n The id (hash) of the transaction this is from \n \n \n index \n int \n 0-indexed number of an output within a transaction. Used by inputs to identify outputs. \n \n \n value \n double \n The number of Satoshis attached to this output \n \n \n script_asm \n string \n Symbolic representation of the bitcoin's script language op-codes \n \n \n script_hex \n string \n Hexadecimal representation of the bitcoin's script language op-codes \n \n \n address \n string \n The address that owns this output \n \n \n type \n string \n The address type of the output", "url": "https://dune.com/docs/data-tables/raw/bitcoin/outputs/#bitcoinoutputs"}
{"content": "Skip to content\n          (#tables) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/raw/evm/blocks.md) \n Blocks \n Blocks are the building blocks of blockchains and rollups. A block contains transactions which will alter the state of an EVM system incrementally. Transaction within a block can only be executed one after the other, not in parallel. \n These tables are useful for identifying block activity and transaction changes over time. \n ", "url": "https://dune.com/docs/data-tables/raw/evm/blocks/"}
{"content": "Inputs \u00b6 \n ", "url": "https://dune.com/docs/data-tables/raw/bitcoin/inputs/#inputs"}
{"content": "bitcoin.inputs \u00b6 \n \n \n \n Column name \n Type \n Description \n \n \n \n \n block_time \n timestamp \n The block time \n \n \n block_date \n date \n The block date \n \n \n block_height \n bigint \n The block number \n \n \n index \n int \n The index of the input \n \n \n block_hash \n bigint \n The block hash of the output \n \n \n tx_id \n string \n The transaction id that this input was used \n \n \n spent_block_height \n bigint \n The block height of the output \n \n \n spent_tx_id \n string \n The transaction id of the output \n \n \n spent_output_number \n bigint \n The output number \n \n \n value \n double \n The number of Satoshis attached to this input \n \n \n address \n string \n The address that owned/owns the output used as input \n \n \n type \n string \n The address type of the input \n \n \n coinbase \n string \n This input was the coinbase input in the transaction \n \n \n is_coinbase \n boolean \n True if coinbase is not null, else false \n \n \n script_asm \n string \n Symbolic representation of the bitcoin's script language op-codes \n \n \n script_hex \n string \n Hexadecimal representation of the bitcoin's script language op-codes \n \n \n script_desc \n string \n The description \n \n \n script_signature_asm \n string \n Symbolic representation of the bitcoin's script language op-codes \n \n \n script_signature_hex \n string \n Hexadecimal representation of the bitcoin's script language op-codes \n \n \n sequence \n bigint \n A number intended to allow unconfirmed time-locked transactions to be updated before being finalized; not currently used except to disable locktime in a transaction \n \n \n witness_data \n array<string> \n Witness data", "url": "https://dune.com/docs/data-tables/raw/bitcoin/inputs/#bitcoininputs"}
{"content": "Skip to content\n          (#evm-raw-table-data) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/raw/evm/index.md) \n EVM Overview \n Raw tables provide you raw, unfiltered and unedited data. \n This allows you to query for any transaction, block, event log or trace across the blockchains Dune supports.  Raw data tables are very useful to get meta information about the blockchain, a transaction, traces or certain events. \n However, queries that have been written using raw data tables are notoriously hard to understand and audit due to the nature of the the encoded data commonly found in these tables. Furthermore, the raw data tables have a very large number of rows and hence can be slow to query. Most of the time you are better off  submitting contracts for decoding  (../../../app/decoding-contracts/)  and working with  decoded data  (../../decoded/) . \n ", "url": "https://dune.com/docs/data-tables/raw/evm/"}
{"content": "Skip to content\n          (#evm-raw-table-data) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/raw/index.md) \n Raw Tables Overview \n Raw tables provide you raw, unfiltered and unedited data. \n This allows you to query for any transaction, block, event log or trace across the blockchains Dune supports.  Raw data tables are very useful to get meta information about the blockchain, a transaction, traces or certain events. \n However, queries that have been written using raw data tables are notoriously hard to understand and audit due to the nature of the the encoded data commonly found in these tables. Furthermore, the raw data tables have a very large number of rows and hence can be slow to query. Most of the time you are better off  submitting contracts for decoding  (../../app/decoding-contracts/)  and working with  decoded data  (../decoded/) . \n ", "url": "https://dune.com/docs/data-tables/raw/"}
{"content": "Skip to content\n          (#example-idl-decoded-walkthrough) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/decoded/solana/idl-tables.md) \n IDL Decoded Tables \n \n Submissions \n You can submit any program for decoding that has a public IDL or github repo (anchor and native are both supported) like  this one  (https://solscan.io/account/JUP4Fb2cqiRUcaTHdrPC8h2gNsA2ETXiPDD33WcGuJB#anchorProgramIDL) . You can submit to  this form  (https://forms.gle/tbHZ6ZeEke5qwVjcA) . \n \n Decoded tables inherit all of the columns from  instruction_calls  (../../../raw/solana/instruction-calls/) , so you can refer there for most of the types. We only add columns for each argument in the function call  data  and each account that was required to be in  account_arguments .  These only decode from instructions, and not inner instructions. \n ", "url": "https://dune.com/docs/data-tables/decoded/solana/idl-tables/"}
{"content": "Skip to content\n          (#multiple-instances) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/decoded/evm/event-logs.md) \n Event Logs \n Smart Contracts emit  event logs  when certain predefined actions are completed. The structure published in these logs is predefined by the developer of the smart contract, the content is dynamically created during the transaction. \n Logs are useful for monitoring, alerting and in general keeping track of what happens inside of a smart contract. Logs are your best friend as a data analyst since they reliably present you with data that is intended to be analyzed post factum. If you ever want to see which logs  can  be emitted by a smart contract, you can simply search for the keyword  emit  in the source code of the smart contract. \n We will decode all event logs for smart contracts into tables named accordingly to this schema:  \n V2 Engine (Spark SQL)  (#__tabbed_1_1) V1 Engine (PosgreSQL)  (#__tabbed_1_2) \n \n \n [projectname_blockchain].[contractName]_evt_[eventName] \n \n \n [projectname].\"[contractName]_evt_[eventName]\" \n \n \n \n Let's stay in the context of the  uniswap v3 factory  (https://etherscan.io/address/0x1f98431c8ad98523631ae4a59f267346ea31f984#code)  and look at the event that gets emitted upon the creation of a new pool. The event is called  PoolCreated  and gets emitted every time somebody successfully deployed a new Uniswap V3 pool by calling the function  createPool . The event will readily give us information like the tokens in the pool, the fee tier of this pool and the tick spacing. In Etherscan, you can easily look at the event logs of transaction by opening the  logs tab  (https://etherscan.io/tx/0xdeb368592f3de0f2840754bce61d2c3f29cdb3407c63c699052e68a854c71eaa#eventlog) . In Dune, this particular event will be stored in the table: \n V2 Engine (Spark SQL)  (#__tabbed_2_1) V1 Engine (PosgreSQL)  (#__tabbed_2_2) \n \n \n uniswap_v3_ethereum.Factory_evt_PoolCreated \n \n \n \n uniswap_v3.\"Factory_evt_PoolCreated\" \n \n \n \n \n ", "url": "https://dune.com/docs/data-tables/decoded/evm/event-logs/"}
{"content": "Blocks \u00b6 \n ", "url": "https://dune.com/docs/data-tables/raw/bitcoin/blocks/#blocks"}
{"content": "bitcoin.blocks \u00b6 \n \n \n \n Column name \n Column type \n Description \n \n \n \n \n time \n timestamp \n The block time \n \n \n height \n bigint \n The block number \n \n \n date \n date \n The block date \n \n \n hash \n string \n The block hash \n \n \n transaction_count \n int \n The number of transactions in the block \n \n \n size \n bigint \n The size of the block \n \n \n mint_reward \n double \n The output paid out to the miner for minting the block \n \n \n total_fees \n double \n The fees paid out to the miner from transaction users. Each transaction's fee is what's left of output after input is subtracted from it. \n \n \n total_reward \n double \n The static reward given to the miner. It is the sum of the outputs in the coinbase transaction (the first transaction). \n \n \n stripped_size \n bigint \n The size of the block excluding witness data \n \n \n weight \n bigint \n The block weight as defined in BIP 141 \n \n \n chainwork \n string \n The expected number of hashes required to produce the current chain \n \n \n difficulty \n string \n The estimated amount of work done to find this block relative to the estimated amount of work done to find block 0 \n \n \n merkle_root \n string \n The root node of a Merkle tree, where leaves are transaction hashes \n \n \n nonce \n string \n The number of transactions made by the sender prior to this one \n \n \n coinbase \n string \n The data specified in the coinbase transaction of the block \n \n \n previous_block_hash \n string \n The hash of the previous block \n \n \n bits \n string \n The difficulty threshold specified in block header", "url": "https://dune.com/docs/data-tables/raw/bitcoin/blocks/#bitcoinblocks"}
{"content": "Data Available \u00b6 \n \n \n \n Blocks \u00b6  (#blocks) \n \n Blocks are the base unit that all transactions fit into.   \n \u2192 Blocks  (blocks/) \n \n \n Transactions \u00b6  (#transactions) \n \n Transactions contain all spent inputs and created outputs from a UTXO transaction.   \n \u2192 Transactions  (transactions/) \n \n \n Outputs \u00b6  (#outputs) \n \n Just the outputs, unnested.   \n \u2192 Outputs  (outputs/) \n \n \n Inputs \u00b6  (#inputs) \n \n Just the inputs, unnested. \n \u2192 Inputs  (inputs/)", "url": "https://dune.com/docs/data-tables/raw/bitcoin/#data-available"}
{"content": "Vote Transactions \u00b6 \n ", "url": "https://dune.com/docs/data-tables/raw/solana/vote-transactions/#vote-transactions"}
{"content": "Solana.vote_transactions \u00b6 \n This table contains the full set of vote transactions that are submitted by validators to vote on a block. It can be joined with the non-vote transactions table above to get a full breakdown of all transactions. It has the same schema as the main transactions table. \n An example query that demonstrates that is available here:  Solana transactions past 30 days  (https://dune.xyz/queries/389976/743760) \n \n \n \n Column Name \n Column Type \n Description \n \n \n \n \n block_slot \n bigint \n This block\u2019s slot index in the ledger \n \n \n block_time \n timestamp \n The (estimated) time this block was produced \n \n \n block_date \n date \n Event date \n \n \n index \n bigint \n Index into the block\u2019s transactions \n \n \n fee \n bigint \n Fee this transaction was charged, as paid by first account \n \n \n block_hash \n string \n The hash of this block, base-58 encoded \n \n \n error \n STRUCT error \n NULL if success is true. \n \n \n required_signatures \n bigint \n The total number of signatures required to make the transaction valid. \n \n \n readonly_signed___accounts \n bigint \n The last readonly_signed_accounts of the signed keys are read-only accounts. \n \n \n readonly_unsigned___accounts \n bigint \n The last readonly_unsigned_accounts of the unsigned keys are read-only accounts. \n \n \n id \n string \n The first signature in the transaction \n \n \n success \n boolean \n The transaction was valid and thus committed. \n \n \n recent_block___hash \n string \n The hash of a recent block in the ledger, used to prevent transaction duplication and to give transactions lifetimes \n \n \n instructions \n array<STRUCT instructions> \n Instructions to execute (in order) \n \n \n accountKeys \n array<string> \n The account keys used in the transaction \n \n \n log_messages \n array<string> \n The log messages emitted by the transaction \n \n \n pre_balances \n array<bigint> \n Array of account balances before the transaction was processed. The i-th balance is the balance of the i-th account key in account_keys \n \n \n post_balances \n array<bigint> \n Array of account balances after the transaction was processed. The i-th balance is the balance of the i-th account key in account_keys \n \n \n pre_token_balance \n array<STRUCT token_balance> \n List of  token balances  (https://docs.solana.com/developing/clients/jsonrpc-api#token-balances-structure)  from before the transaction was processed or omitted if token balance recording was not yet enabled during this transaction \n \n \n post_token_balance \n array<STRUCT token_balance> \n List of  token balances  (https://docs.solana.com/developing/clients/jsonrpc-api#token-balances-structure)  from after the transaction was processed or omitted if token balance recording was not yet enabled during this transaction \n \n \n signatures \n array<string> \n A list of base-58 encoded signatures applied to the transaction. Always of length numRequiredSignatures \n \n \n signer \n string \n The initial value from the account_keys array that initiates the transaction and pays the transaction fee", "url": "https://dune.com/docs/data-tables/raw/solana/vote-transactions/#solanavote_transactions"}
{"content": "Transactions \u00b6 \n ", "url": "https://dune.com/docs/data-tables/raw/solana/transactions/#transactions"}
{"content": "Solana.transactions \u00b6 \n This table contains the transaction data within Solana\u2019s blockchain. Most of the relevant data related to account, protocol, and program activity is available in this table. \n Query examples can be found here:  NFT transactions of popular programs past 7 days  (https://dune.xyz/queries/390720/745376)  and  drift-protocol overview  (https://dune.xyz/bigz/drift-\\(solana\\)) \n \n \n \n Column Name \n Column Type \n Description \n \n \n \n \n block_slot \n bigint \n This block\u2019s slot index in the ledger \n \n \n block_time \n timestamp \n The (estimated) time this block was produced \n \n \n block_date \n date \n Event date \n \n \n index \n bigint \n Index into the block\u2019s transactions \n \n \n fee \n bigint \n Fee this transaction was charged, as paid by first account \n \n \n block_hash \n string \n The hash of this block, base-58 encoded \n \n \n error \n STRUCT error \n NULL if success is true. \n \n \n required_signatures \n bigint \n The total number of signatures required to make the transaction valid. \n \n \n readonly_signed_accounts \n bigint \n The last readonly_signed_accounts of the signed keys are read-only accounts. \n \n \n readonly_unsigned_accounts \n bigint \n The last readonly_unsigned_accounts of the unsigned keys are read-only accounts. \n \n \n id \n string \n The first signature in the transaction \n \n \n success \n boolean \n The transaction was valid and thus committed. \n \n \n recent_block_hash \n string \n The hash of a recent block in the ledger, used to prevent transaction duplication and to give transactions lifetimes \n \n \n instructions \n array<STRUCT instructions> \n Instructions to execute (in order) \n \n \n accountKeys \n array<string> \n The account keys used in the transaction \n \n \n log_messages \n array<string> \n The log messages emitted by the transaction \n \n \n pre_balances \n array<bigint> \n Array of account balances before the transaction was processed. The i-th balance is the balance of the i-th account key in account_keys \n \n \n post_balances \n array<bigint> \n Array of account balances after the transaction was processed. The i-th balance is the balance of the i-th account key in account_keys \n \n \n pre_token_balance \n array<STRUCT token_balance> \n List of  token balances  (https://docs.solana.com/developing/clients/jsonrpc-api#token-balances-structure)  from before the transaction was processed or omitted if token balance recording was not yet enabled during this transaction \n \n \n post_token_balance \n array<STRUCT token_balance> \n List of  token balances  (https://docs.solana.com/developing/clients/jsonrpc-api#token-balances-structure)  from after the transaction was processed or omitted if token balance recording was not yet enabled during this transaction \n \n \n signatures \n array<string> \n A list of base-58 encoded signatures applied to the transaction. Always of length numRequiredSignatures \n \n \n signer \n string \n The initial value from the account_keys array that initiates the transaction and pays the transaction fee \n \n \n \n ", "url": "https://dune.com/docs/data-tables/raw/solana/transactions/#solanatransactions"}
{"content": "Struct definitions \u00b6 \n Within several of these columns is a data type of STRUCT which allows for representing nested hierarchical data and has key-value pairs. It's similar to a dictionary in python and can be used to group fields together to make them more accessible. \n An example of how these can be used to extract data:  # of Solana instructions by day for DEXes  (https://dune.xyz/queries/416358/794290) \n token_balance \n \n \n \n Field \n Data type \n Description \n \n \n \n \n account \n string \n The account key of the account that the token balance is provided for. \n \n \n mint \n string \n Public key of the token\u2019s mint. This is an account that stores metadata about the token: The supply, number of decimals, and various authorities with control over the mint. \n \n \n amount \n Decimal \n Derived from the token balance's raw amount (ui_token_amount.amount) and the number of decimals (ui_token_amount.decimals) \n \n \n \n \n instructions \n \n \n \n Field \n Data type \n Description \n \n \n \n \n account_arguments \n array<string> \n Ordered list of accounts to pass to the program \n \n \n data \n string \n Program input data in a base-58 string \n \n \n executing_account \n string \n The account key of the program that executed this instruction. \n \n \n inner_instructions \n array<STRUCT inner_instructions> \n The instructions invoked by this instruction. \n \n \n \n \n inner_instructions \n \n \n \n Field \n Data type \n Description \n \n \n \n \n account_arguments \n array<string> \n Ordered list of accounts to pass to the program \n \n \n data \n string \n Program input data in a base-58 string \n \n \n executing_account \n string \n The account key of the program that executed this instruction. \n \n \n \n \n error \n \n \n \n Field \n Data type \n Description \n \n \n \n \n instruction_index \n int \n The instruction number that failed \n \n \n message \n string \n The error message \n \n \n \n ", "url": "https://dune.com/docs/data-tables/raw/solana/transactions/#struct-definitions"}
{"content": "\u00b6", "url": "https://dune.com/docs/data-tables/raw/solana/transactions/#_1"}
{"content": "Rewards \u00b6 \n ", "url": "https://dune.com/docs/data-tables/raw/solana/rewards/#rewards"}
{"content": "Solana.rewards \u00b6 \n This table contains data about rewards paid out on Solana. One block may contain zero or more rewards, and each row corresponds to one reward. \n An example query can be found here:  Solana rewards fee per day  (https://dune.xyz/queries/391421/747012) \n \n \n \n Column Name \n Column Type \n Description \n \n \n \n \n block_slot \n bigint \n This block\u2019s slot index in the ledger \n \n \n block_hash \n string \n The hash of this block, base-58 encoded \n \n \n block_time \n timestamp \n The (estimated) time this block was produced \n \n \n block_date \n date \n Event date \n \n \n commission \n string \n Vote account commission when the reward was credited, only present for voting and staking rewards \n \n \n lamports \n bigint \n Number of reward lamports credited or debited by the account \n \n \n pre_balance \n bigint \n Account balance in lamports before the reward was applied \n \n \n post_balance \n bigint \n Account balance in lamports after the reward was applied \n \n \n recipient \n string \n The public key, as base-58 encoded string, of the account that received the reward \n \n \n reward_type \n string \n Type of reward: \"fee\", \"rent\", \"voting\", \"staking\"", "url": "https://dune.com/docs/data-tables/raw/solana/rewards/#solanarewards"}
{"content": "Account activity \u00b6 \n ", "url": "https://dune.com/docs/data-tables/raw/solana/account-activity/#account-activity"}
{"content": "Solana.account_activity \u00b6 \n This table contains information from the transactions table focused on account usage. Each row contains all information about an account's usage in a transaction. \n \n \n \n Column Name \n Column Type \n Description \n \n \n \n \n block_slot \n bigint \n The slot of the block this transaction was in. \n \n \n block_hash \n string \n The hash of the block this transaction was in \n \n \n block_time \n timestamp \n The timestamp that this account usage occurred \n \n \n block_date \n date \n The date this account usage occurred \n \n \n address \n string \n The address of the account, also referred to as public key \n \n \n tx_index \n int \n The index of this transaction in the block \n \n \n tx_id \n string \n The ID of the transaction in which this account usage occurred \n \n \n tx_success \n boolean \n The transaction succeeded and was committed \n \n \n signed \n boolean \n This account signed this transaction \n \n \n writeable \n boolean \n This account was granted read-write access in this transaction \n \n \n pre_balance \n bigint \n The balance of this account before the transaction was processed \n \n \n pre_token_balance \n decimal \n The token balance before the transaction was processed \n \n \n post_balance \n bigint \n The balance of this account after the transaction was processed \n \n \n post_token_balance \n decimal \n The token balance after the transaction was processed \n \n \n balance_change \n bigint \n The balance change that occurred as part of the transaction \n \n \n token_balance_change \n decimal \n The balance change that occurred as part of the transaction \n \n \n token_mint_address \n string \n The address the associated token address is minting from (i.e. the actual token address) \n \n \n token_owner_address \n string \n The address that owns this token address", "url": "https://dune.com/docs/data-tables/raw/solana/account-activity/#solanaaccount_activity"}
{"content": "Data Available \u00b6 \n \n \n \n Account Activity \u00b6  (#account-activity) \n \n This table contains information from the transactions table focused on account usage. \n \u2192 Account Activity  (account-activity/) \n \n \n Blocks \u00b6  (#blocks) \n \n Blocks are the base unit that all transactions fit into. \n \u2192 Blocks  (blocks/) \n \n \n Rewards \u00b6  (#rewards) \n \n This table contains data about rewards paid out on Solana. \n \u2192 Rewards  (rewards/) \n \n \n Transactions \u00b6  (#transactions) \n \n Transactions are cryptographically signed instructions from accounts. \n \u2192 Transactions  (transactions/) \n \n \n Instruction Calls \u00b6  (#instruction-calls) \n \n Transactions are unnested here such that each instruction gets its own row. \n \u2192 Instruction Calls  (instruction-calls/) \n \n \n Vote Transactions \u00b6  (#vote-transactions) \n \n This table contains the full set of vote transactions that are submitted by validators to vote on a block. \n \u2192 Vote Transactions  (vote-transactions/)", "url": "https://dune.com/docs/data-tables/raw/solana/#data-available"}
{"content": "How to work with this table \u00b6 \n In order to connect deposits and withdrawals, we must identify the  validator_index  of unique depositors. Since Dune doesn't have beacon chain data yet, we have to rely on a workaround using a query to obtain a list of valid and active deposits from the Ethereum deposit contract. \n This  query  (https://dune.com/queries/2364548)  returns a list of valid and active deposits, which we can use to identify the  validator_index  of unique depositors. We can use this query to match the  validator_index  of depositors with the  validator_index  of withdrawers in the withdrawals table. \n The Query is manually maintained and therefore may not always be up to date, but most historical data is available.   \n LINK TO QUERY  (https://dune.com/queries/2364548)   \n Using this query, we can for example take a look at how the exodus of Kraken's ETH staking pools from the beacon chain is going: \n \n We hope to integrate beacon chain data in the future, which will streamline the process of connecting deposits and withdrawals, and eliminate the need for the aforementioned workaround. \n ", "url": "https://dune.com/docs/data-tables/raw/evm/withdrawals/#how-to-work-with-this-table"}
{"content": "Column Data \u00b6 \n ", "url": "https://dune.com/docs/data-tables/raw/evm/withdrawals/#column-data"}
{"content": "Example \u00b6 \n \n ", "url": "https://dune.com/docs/data-tables/raw/evm/withdrawals/#example"}
{"content": "Description \u00b6 \n \n \n \n Column Name \n Datatype \n Description \n \n \n \n \n block_time \n timestamp \n The time the block was created \n \n \n block_number \n bigint \n The number of the block in the blockchain \n \n \n index \n bigint \n a monotonically increasing index, starting from 0, as a value that increments by 1 per withdrawal to uniquely identify each withdrawal \n \n \n validator_index \n bigint \n the validator_index of the validator, as a uint64 value, on the consensus layer the withdrawal corresponds to \n \n \n amount \n bigint \n a nonzero amount of ether given in Gwei (1e9 wei) \n \n \n address \n varbinary \n a recipient for the withdrawn ether. Note that depositor and recipient address are not necessarily the same \n \n \n withdrawals_root \n varbinary \n the 32 byte root of the trie committing to the list of withdrawals provided in a given execution payload \n \n \n block_hash \n varbinary \n The hash of the block", "url": "https://dune.com/docs/data-tables/raw/evm/withdrawals/#description"}
{"content": "Tables \u00b6 \n V2 Engine (Spark SQL)  (#__tabbed_1_1) V1 Engine (PosgreSQL)  (#__tabbed_1_2) \n \n \n \n \n \n Chain \n Table \n Notes \n \n \n \n \n Ethereum Mainnet \n ethereum.transactions \n \n \n \n Gnosis Chain \n gnosis.transactions \n \n \n \n Polygon \n polygon.transactions \n \n \n \n Optimism \n optimism.transactions \n No EIP1559 so does not contain   access_list ,  max_fee_per_gas , max_priority_fee_per_gas ,  priority_fee_per_gas  and  type  is always  Legacy \n \n \n Optimism (legacy) \n optimism_legacy_ovm1.transactions \n No EIP1559 so does not contain   access_list ,  max_fee_per_gas , max_priority_fee_per_gas ,  priority_fee_per_gas  and  type  is always  Legacy \n \n \n BNB Chain \n bnb.transactions \n No EIP1559 so does not contain   access_list ,  max_fee_per_gas , max_priority_fee_per_gas ,  priority_fee_per_gas  and  type  is always  Legacy \n \n \n Arbitrum \n arbitrum.transactions \n No EIP1559 so does not contain   access_list ,  max_fee_per_gas , max_priority_fee_per_gas ,  priority_fee_per_gas  and  type  is always  Legacy . Gas is measured in  ArbGas  instead of  wei \n \n \n Avalanche C-Chain \n avalanche_c.transactions \n Does not contain. Gas is measured in  nanoavax  instead of  wei \n \n \n \n \n \n \n \n \n Chain \n Table \n Notes \n \n \n \n \n Ethereum Mainnet \n ethereum.transactions \n \n \n \n Gnosis Chain (xDai) \n xdai.transactions \n \n \n \n Polygon \n polygon.transactions \n \n \n \n Optimism (OVM 1 & 2) \n optimism.transactions \n No EIP1559 so does not contain   access_list ,  max_fee_per_gas , max_priority_fee_per_gas ,  priority_fee_per_gas  and  type  is always  Legacy \n \n \n BNB Chain (BSC) \n bsc.transactions \n No EIP1559 so does not contain   access_list ,  max_fee_per_gas , max_priority_fee_per_gas ,  priority_fee_per_gas  and  type  is always  Legacy \n \n \n \n \n \n \n ", "url": "https://dune.com/docs/data-tables/raw/evm/transactions/#tables"}
{"content": "Column Data \u00b6 \n ", "url": "https://dune.com/docs/data-tables/raw/evm/transactions/#column-data"}
{"content": "Example \u00b6 \n \n ", "url": "https://dune.com/docs/data-tables/raw/evm/transactions/#example"}
{"content": "Description \u00b6 \n \n \n \n Column  ** \n Data type \n Description \n \n \n \n \n block_time \n timestamptz \n The time when the block was mined that includes this transaction \n \n \n block_number \n int8 \n The length of the blockchain in blocks \n \n \n value \n numeric \n The amount of  [chain_gas_token]  sent in this transaction in  wei . Note that ERC20 tokens do not show up here \n \n \n gas_limit \n numeric \n The gas limit in  wei  (ArbGas for Arbitrum) \n \n \n gas_price \n numeric \n The gas price in  wei \n \n \n gas_used \n numeric \n The gas consumed by the transaction in  wei \n \n \n max_fee_per_gas \n numeric \n The maximum fee per gas the transaction sender is willing to pay total (introduced by  EIP1559  (https://eips.ethereum.org/EIPS/eip-1559) ) \n \n \n max_priority_fee_per_gas \n numeric \n Maximum fee per gas the transaction sender is willing to give to miners to incentivize them to include their transaction (introduced by  EIP1559  (https://eips.ethereum.org/EIPS/eip-1559) ) \n \n \n priority_fee_per_gas \n numeric \n The priority fee paid out to the miner for this transaction (introduced by  EIP1559  (https://eips.ethereum.org/EIPS/eip-1559) ) \n \n \n nonce \n numeric \n The transaction nonce, unique to that wallet \n \n \n index \n numeric \n The transactions index position in the block \n \n \n success \n boolean \n A true/false value that shows if the transaction succeeded \n \n \n from \n bytea \n Address of the sender \n \n \n to \n bytea \n Address of the receiver.  null  when its a contract creation transaction \n \n \n block_hash \n bytea \n A unique identifier for that block \n \n \n data \n bytea \n Can either be empty, a hex encoded message or instructions for a smart contract call \n \n \n hash \n bytea \n The hash of the transaction \n \n \n type \n text \n The type of the transaction:  Legacy ,  AccessList , or  DynamicFee \n \n \n access_list \n jsonb \n A list of addresses and storage keys the transaction intends to access. See  EIP2930  (https://eips.ethereum.org/EIPS/eip-2930) . Applicable if the transaction is of type  AccessList  or  DynamicFee \n \n \n effective_gas_price \n numeric \n [Arbitrum and Avalanche C-Chain only] The gas price this transaction paid in  wei  (Arbitrum) or  nanoavax  (Avalanche) \n \n \n gas_used_for_l1 \n numeric \n [Arbitrum only] The gas consumed by the L1 resources used for this transaction in ArbGas \n \n \n l1_gas_used \n numeric \n [Optimism only] The costs to send the input  calldata  to L1 \n \n \n l1_gas_price \n numeric \n [Optimism only] The gas price on L1 \n \n \n l1_fee \n numeric \n [Optimism only] The amount in wei paid on L1 \n \n \n l1_fee_scalar \n numeric \n [Optimism only] Variable parameter that makes sure that gas costs on L1 get covered + profits \n \n \n l1_block_number \n numeric \n [Optimism only] The block_number of the block in which this transaction got batch settled on L1 \n \n \n l1_timestamp \n numeric \n [Optimism only] The timestamp of the block in which this transaction got batch settled on L1 \n \n \n l1_tx_origin \n numeric \n [Optimism only] ??", "url": "https://dune.com/docs/data-tables/raw/evm/transactions/#description"}
{"content": "Tables \u00b6 \n V2 Engine (Spark SQL)  (#__tabbed_1_1) V1 Engine (PosgreSQL)  (#__tabbed_1_2) \n \n \n \n \n \n Chain \n Table \n Notes \n \n \n \n \n Ethereum Mainnet \n ethereum.traces \n value  measured in  wei \n \n \n Gnosis Chain \n gnosis.traces \n value  measured in  wei \n \n \n Polygon \n polygon.traces \n value  measured in  wei , does not contain  gas \n \n \n Optimism \n optimism.traces \n value  measured in  wei \n \n \n Optimism (legacy) \n optimism_legacy_ovm1.traces \n value  measured in  wei \n \n \n BNB Chain \n bnb.traces \n value  measured in  wei \n \n \n Arbitrum \n arbitrum.traces \n value  measured in  ArbGas , does not contain  gas \n \n \n Avalanche C-Chain \n avalanche_c.traces \n value  measured in  nanoavax \n \n \n \n \n \n \n \n \n Chain \n Table \n Notes \n \n \n \n \n Ethereum Mainnet \n ethereum.traces \n value  measured in  wei \n \n \n Gnosis Chain (xDai) \n xdai.traces \n value  measured in  wei \n \n \n Polygon \n polygon.traces \n value  measured in  wei \n \n \n Optimism (OVM 1 & 2) \n optimism.traces \n value  measured in  wei \n \n \n BNB Chain (BSC) \n bsc.traces \n value  measured in  wei \n \n \n \n \n \n \n ", "url": "https://dune.com/docs/data-tables/raw/evm/traces/#tables"}
{"content": "Column Data \u00b6 \n ", "url": "https://dune.com/docs/data-tables/raw/evm/traces/#column-data"}
{"content": "Example \u00b6 \n \n ", "url": "https://dune.com/docs/data-tables/raw/evm/traces/#example"}
{"content": "Description \u00b6 \n \n \n \n Column name \n Data type \n Description \n \n \n \n \n block_time \n timestamptz \n The time when the block was mined \n \n \n block_number \n int8 \n The length of the blockchain in blocks \n \n \n value \n numeric \n The amount of  [chain_gas_token]  sent in this transaction \n \n \n gas \n numeric \n Gas provided with the message call \n \n \n gas_used \n numeric \n The gas consumed by the transaction in  wei \n \n \n block_hash \n bytea \n A unique identifier for that block \n \n \n success \n boolean \n A true/false value that shows if the trace action succeeded \n \n \n tx_index \n numeric \n The position of the transaction in a block \n \n \n sub_traces \n numeric \n Number of children of a trace \n \n \n error \n text \n The error message the EVM throws if the execution of one of a contract's instructions fails.  See a list of unique Ethereum Errors this past week here  (https://dune.com/queries/1582755) . \n \n \n tx_success \n boolean \n A true/false value that indicates if the transaction succeeded \n \n \n tx_hash \n bytea \n The transaction hash of the event \n \n \n from \n bytea \n Address of the sender \n \n \n to \n bytea \n Address of the receiver.  null  when its a contract creation transaction \n \n \n trace_address \n array \n Address of the trace within the call graph forest. E.g., [0, 2, 1] is the parent of [0, 2, 1, 0] \n \n \n type \n text \n Can be  reward ,  create ,  call  or  suicide . Describes the type of action taken in this trace. \n \n \n address \n bytea \n The contract that is called when the type is  suicide  or  create \n \n \n code \n bytea \n The bytecode to deploy a new contract, only contains data when type is  create . \n \n \n call_type \n bytea \n Can be  staticcall ,  delegatecall  or  call . Learn more  here  (https://medium.com/coinmonks/delegatecall-calling-another-contract-function-in-solidity-b579f804178c) \n \n \n input \n bytea \n The bytecode of the call that is made to another smart contract \n \n \n output \n bytea \n The bytecode answer the smart contract that was called gives back \n \n \n refund_address \n bytea \n Only contains data if  type  was  suicide . Specifies where to send the outstanding BNB balance. \n \n \n \n ", "url": "https://dune.com/docs/data-tables/raw/evm/traces/#description"}
{"content": "Gas used in  .traces \u00b6 \n The  gas_used  column in the  .traces  tables is a bit hard to understand, so here is some pointers: \n \n The  gas_used  of a trace will always include the gas consumed by the trace and all it's subtraces. \n The  gas_used  of the initial call will not contain the cost of making the call in the first place \n You need to add 21000 gas units + the cost of sending zero + non zero bytes to the  gas_used  value of the top trace to arrive at the \"true\"  gas_used  value. \n For more reading on this please refer to this  StackExchange entry  (https://ethereum.stackexchange.com/questions/31443/what-do-the-response-values-of-a-parity-trace-transaction-call-actually-repres) \n Here's an example query doing this in Dune  (https://dune.com/queries/895857) \n \n ", "url": "https://dune.com/docs/data-tables/raw/evm/traces/#gas-used-in-traces"}
{"content": "Creation Traces \u00b6 \n ", "url": "https://dune.com/docs/data-tables/raw/evm/traces/#creation-traces"}
{"content": "Tables \u00b6 \n \n \n \n Chain \n Table \n Notes \n \n \n \n \n Ethereum Mainnet \n ethereum.creation_traces \n \n \n \n Gnosis Chain \n gnosis.creation_traces \n \n \n \n Polygon \n polygon.creation_traces \n \n \n \n Optimism \n optimism.creation_traces \n \n \n \n Optimism (legacy) \n optimism_legacy_ovm1.creation_traces \n \n \n \n BNB Chain \n bnb.creation_traces \n \n \n \n Solana \n solana.creation_traces \n \n \n \n Arbitrum \n arbitrum.creation_traces \n \n \n \n Avalanche C-Chain \n avalanche_c.creation_traces \n \n \n \n \n ", "url": "https://dune.com/docs/data-tables/raw/evm/traces/#tables_1"}
{"content": "Example \u00b6 \n \n ", "url": "https://dune.com/docs/data-tables/raw/evm/traces/#example_1"}
{"content": "Description \u00b6 \n Transactions can trigger smaller atomic actions that modify the internal state of an Ethereum Virtual Machine.  \n One type of trace,  create , is used to create a smart contract then transfer ether to it. \n Read more  here  (https://medium.com/chainalysis/ethereum-traces-not-transactions-3f0533d26aa) . \n \n \n \n Column name \n Data type \n Description \n \n \n \n \n block_time \n timestamptz \n The time when the block was mined \n \n \n block_number \n long \n The length of the blockchain in blocks \n \n \n tx_hash \n string \n The transaction hash of the event \n \n \n address \n string \n The address of the created contract \n \n \n from \n string \n Address of the contract that generated the  create  trace \n \n \n code \n string \n The function executed", "url": "https://dune.com/docs/data-tables/raw/evm/traces/#description_1"}
{"content": "Tables \u00b6 \n V2 Engine (Spark SQL)  (#__tabbed_1_1) V1 Engine (PosgreSQL)  (#__tabbed_1_2) \n \n \n \n \n \n Chain \n Table \n Notes \n \n \n \n \n Ethereum Mainnet \n ethereum.logs \n \n \n \n Gnosis Chain \n gnosis.logs \n \n \n \n Polygon \n polygon.logs \n \n \n \n Optimism \n optimism.logs \n \n \n \n Optimism (legacy) \n optimism_legacy_ovm1.logs \n \n \n \n BNB Chain \n bnb.logs \n \n \n \n Arbitrum \n arbitrum.logs \n \n \n \n Avalanche C-Chain \n avalanche_c.logs \n \n \n \n \n \n \n \n \n \n Chain \n Table \n Notes \n \n \n \n \n Ethereum Mainnet \n ethereum.logs \n \n \n \n Gnosis Chain (xDai) \n xdai.logs \n \n \n \n Polygon \n polygon.logs \n \n \n \n Optimism (OVM 1 & 2) \n optimism.logs \n \n \n \n BNB Chain (BSC) \n bsc.logs \n \n \n \n \n \n \n \n ", "url": "https://dune.com/docs/data-tables/raw/evm/event-logs/#tables"}
{"content": "Column Data \u00b6 \n ", "url": "https://dune.com/docs/data-tables/raw/evm/event-logs/#column-data"}
{"content": "Example \u00b6 \n \n ", "url": "https://dune.com/docs/data-tables/raw/evm/event-logs/#example"}
{"content": "Description \u00b6 \n \n \n \n Column name \n Data type \n Description \n \n \n \n \n contract_address \n bytea \n The address of the contract that emitted the log \n \n \n topic1 \n bytea \n keccak256 hash of a flattened event declaration string \n \n \n topic2 \n bytea \n Second indexed  topic  of the event \n \n \n topic3 \n bytea \n Third indexed  topic  of the event \n \n \n topic4 \n bytea \n Fourth indexed  topic  of the event \n \n \n data \n bytea \n Unindexed data containing further information on the event \n \n \n tx_hash \n bytea \n The transaction hash of the transaction that produced this log \n \n \n block_hash \n bytea \n A unique identifier for that block \n \n \n block_number \n int8 \n The length of the blockchain in blocks \n \n \n block_time \n timestamptz \n The time when the block was mined that includes this log \n \n \n index \n numeric \n This logs index position in the block (cumulative amount of logs ordered by execution) \n \n \n tx_index \n numeric \n The index position of the transaction in this block (cumulative amount of transactions ordered by execution)", "url": "https://dune.com/docs/data-tables/raw/evm/event-logs/#description"}
{"content": "Skip to content\n          (#multiple-instances) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/decoded/evm/call-tables.md) \n Call Tables \n Smart contracts generally have functions that are able to be called by either an externally owned account(EOA) or other smart contracts. Functions can be anything from a simple state read and return to changing multiple states and invoking message calls to other smart contracts. \n On Dune, we parse all message calls and transactions made to smart contracts in their own tables. The tables are then accordingly named: \n V2 Engine (Spark SQL)  (#__tabbed_1_1) V1 Engine (PosgreSQL)  (#__tabbed_1_2) \n \n \n [projectname_blockchain].contractName_call_functionName \n \n \n [projectname].\"contractName_call_functionName\" \n \n \n \n This is either done on an individual contract level like for the uniswap v3 factory, or a class of contracts like the uniswap v3 pairs. \n For example, when a uniswap v3 pool gets created via the  uniswap v3 factory  (https://etherscan.io/address/0x1f98431c8ad98523631ae4a59f267346ea31f984#code)  (on Ethereum) function  createPool , Dune will record that transaction in the table: \n V2 Engine (Spark SQL)  (#__tabbed_2_1) V1 Engine (PosgreSQL)  (#__tabbed_2_2) \n \n \n uniswap_v3_ethereum.Factory_call_createPool \n \n \n \n [ uniswap_v3.\"Factory_call_createPool\" ] \n \n \n \n \n This will happen whether this was done by an externally owned account (EOA) through a transaction or a smart contract by the means of a message call. \n ", "url": "https://dune.com/docs/data-tables/decoded/evm/call-tables/"}
{"content": "Tables \u00b6 \n V2 Engine (Spark SQL)  (#__tabbed_1_1) V1 Engine (PosgreSQL)  (#__tabbed_1_2) \n \n \n \n \n \n Chain \n Table \n Notes \n \n \n \n \n Ethereum Mainnet \n ethereum.blocks \n \n \n \n Gnosis Chain \n gnosis.blocks \n Does not contain  nonce \n \n \n Polygon \n polygon.blocks \n \n \n \n Optimism \n optimism.blocks \n Does not contain  miner   nonce   base_fee_per_gas \n \n \n Optimism (legacy) \n optimism_legacy_ovm1.blocks \n Does not contain  miner   nonce   base_fee_per_gas \n \n \n BNB Chain \n bnb.blocks \n Does not contain  base_fee_per_gas \n \n \n Arbitrum \n arbitrum.blocks \n Does not contain  miner   difficulty   total_difficulty   nonce   size   base_fee_per_gas \n \n \n Avalanche C-Chain \n avalanche_c.blocks \n Does not contain  miner   difficulty \n \n \n \n \n \n \n \n \n Chain \n Table \n Notes \n \n \n \n \n Ethereum Mainnet \n ethereum.blocks \n \n \n \n Gnosis Chain (xDai) \n xdai.blocks \n Does not contain  nonce \n \n \n Polygon \n polygon.blocks \n \n \n \n Optimism (OVM 1 & 2) \n optimism.blocks \n Does not contain  miner   nonce   base_fee_per_gas \n \n \n BNB Chain (BSC) \n bsc.blocks \n Does not contain  base_fee_per_gas \n \n \n \n \n \n \n ", "url": "https://dune.com/docs/data-tables/raw/evm/blocks/#tables"}
{"content": "Column Data \u00b6 \n ", "url": "https://dune.com/docs/data-tables/raw/evm/blocks/#column-data"}
{"content": "Example \u00b6 \n \n ", "url": "https://dune.com/docs/data-tables/raw/evm/blocks/#example"}
{"content": "Description \u00b6 \n \n \n \n Column name \n Data type \n Description \n \n \n \n \n time \n timestamptz \n The time when the block was mined \n \n \n number \n numeric \n The length of the blockchain in blocks \n \n \n hash \n bytea \n A unique identifier for that block \n \n \n parent hash \n bytea \n The unique identifier for the prior block \n \n \n gas_limit \n numeric \n The gas limit of the current block \n \n \n gas_used \n numeric \n The gas used in this block \n \n \n miner \n bytea \n The address of the miner \n \n \n difficulty \n numeric \n The effort required to mine the block \n \n \n total_difficulty \n numeric \n Total difficulty of the chain until this block \n \n \n nonce \n bytea \n The block nonce is used to demonstrate the proof of work during mining \n \n \n size \n numeric \n This block's size in bytes (limited by gas limit) \n \n \n base_fee_per_gas \n numeric \n This block's base fee (introduced by  EIP1559  (https://eips.ethereum.org/EIPS/eip-1559) )", "url": "https://dune.com/docs/data-tables/raw/evm/blocks/#description"}
{"content": "Skip to content\n          (#call-tables) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/decoded/evm/index.md) \n Decoded Tables (EVM) \n To make it easier to work with smart contracts, Dune also provides decoded data as individual, human readable tables. We use the ABI for smart contracts and the interface standard for standardized token smart contracts (ERC20, ERC721 etc.). We've indexed over 280k contracts as of writing, and you can  submit new contracts  (../../../app/decoding-contracts/) . \n Instead of working with the transactions, logs, and traces in their raw states, on Dune we decode smart contract activity into nice human-readable tables. \n We create tables for each event and function defined in the smart contract's ABI(Application Binary Interface). Subsequently, every event, message call or transaction made to that contract is decoded and inserted as a row into these tables. \n The tables are named accordingly: \n events:   [projectname_blockchain].contractName_evt_eventName \n function calls:   [projectname_blockchain].contractName_call_eventName \n As an example, decoded data for the  swap -event of the Uniswap V2 pair contract on Ethereum is found in the table  uniswap_v2_ethereum.Pair_evt_Swap . \n \n If a contract has multiple instances, we will decode all of them into the same table, you will be able to identify the specific smart contract using the  contract_address  column. You can find unique contract names/addresses using the  labels.contracts  table. \n Since all chain's data resides in one database, but the multichain world is a reality, contracts on Dune have a meta attribute that describes which blockchain this specific table is pulling the data from. \n Read more about the difference between calls and events here: \n \n \n \n Call tables \u00b6  (#call-tables) \n \n Call tables provide a way to see all method calls that were made by contracts on the blockchain. \n \u2192 Call tables  (call-tables/) \n \n \n Event logs \u00b6  (#event-logs) \n \n Event logs are data that gets generated by smart contracts. \n \u2192 Event logs  (event-logs/) \n \n \n \n ", "url": "https://dune.com/docs/data-tables/decoded/evm/"}
{"content": "Skip to content\n          (#evm-decoded-tables) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/decoded/index.md) \n Decoded Tables \n \n Tip \n You can find information on how to submit a contract for decoding  here  (../../app/decoding-contracts/) . \n \n To make it easier to work with smart contracts and programs, Dune has decoded data from all transactions (all functions and logs) into human readable tables. This means you don't need to work with any of the raw data from the blockchain! \n \n Consider using spellbook tables first \n We highly recommend you use spellbook tables first, as many decoded tables have been further abstracted into tables like  nft.trades  (../spellbook/top-tables/nft.trades/)  and  dex.trades  (../spellbook/top-tables/dex.trades/) \n \n ", "url": "https://dune.com/docs/data-tables/decoded/"}
{"content": "Skip to content\n          (#metadata-tables) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/spellbook/top-tables/tokens.md) \n tokens \n You'll likely be working with tokens that are fungible (erc20) and nonfungible (erc721 and erc1155) a lot in your analysis. There are a couple tables that are must knows for this: \n ", "url": "https://dune.com/docs/data-tables/spellbook/top-tables/tokens/"}
{"content": "Skip to content\n          (#pricesusd) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/spellbook/top-tables/prices.md) \n prices \n We pull price data from the  coinpaprika  (https://coinpaprika.com)  API. \n The Price is the volume-weighted price based on real-time market data, translated to USD. \n ", "url": "https://dune.com/docs/data-tables/spellbook/top-tables/prices/"}
{"content": "Skip to content\n          (#how-it-works) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/spellbook/top-tables/nft.trades.md) \n nft.trades \n nft.trades  is an effort to make NFT trading data easily available to everyone on Dune. This table aggregates and standardizes the data between different data platforms and provides auxiliary information and metadata all in one table. \n The culmination of this is a dataset which makes it extremely easy to query for any NFT related trading data across all indexed platforms. \n You can find the specifications for nft.trades on our  Spellbook documentation  (https://dune.com/spellbook#!/model/model.spellbook.nft_trades) . \n So far we have indexed the data of the following platforms: \n \n OpenSea \n Rarible \n SuperRare \n CryptoPunks (They get traded in their own contracts) \n Foundation \n LooksRare \n \n ", "url": "https://dune.com/docs/data-tables/spellbook/top-tables/nft.trades/"}
{"content": "Skip to content\n          (#what-is-a-label) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/spellbook/top-tables/labels.md) \n labels \n Because of all the open data on blockchain, we can enhance our understanding of any given address by tagging it with different labels. This immediately give any analysis enhanced context.  \n labels.addresses  is a spell in Dune that allows you to add static or query labels to enhance your analysis. \n ", "url": "https://dune.com/docs/data-tables/spellbook/top-tables/labels/"}
{"content": "Skip to content\n          (#column-data) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/spellbook/top-tables/dex.trades.md) \n dex.trades \n Decentralized exchanges are the beating heart of the DeFi industry. You can swap any native (ETH) or ERC-20 token for any ERC-20 token through the magic of smart contracts. \n The problem here: there are so many decentralized exchanges out there that it's hardly possible for any single person to work with the smart contract data for all of them. \n That's why we created  dex.trades  (https://dune.com/spellbook#!/model/model.spellbook.dex_trades) . \n This table standardizes and normalizes the trading data across virtually all relevant decentralized exchanges. This in turn allows you to easily query for trading data for your favorite tokens without having to deal with all of the different DEX smart contracts yourself. \n The scripts that generate the table dex.trades can be found in this  public github  (https://github.com/duneanalytics/spellbook/tree/main/models/dex)  repo. \n ", "url": "https://dune.com/docs/data-tables/spellbook/top-tables/dex.trades/"}
{"content": "Skip to content\n          (#spell-categories) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/spellbook/top-tables/index.md) \n Top Spellbook Tables \n This section contains some of the most useful spells (abstracted tables) on Dune. You'll likely use these in many of your queries, from beginner to advanced. \n \n \n dex.trades  (dex.trades/) : The standardization and aggregation of all Decentralized Exchanges (DEX) across EVM chains. \n nft.trades  (nft.trades/) : The standardization and aggregation of all NFT marketplaces across chains (EVM + Solana) \n labels  (labels/) : Labels contain identifiers such as CEX wallets, ENS names, Top 1% NFT Traders, and many more for each address. \n tokens  (tokens/) : The tokens and transfers tables will be essential to calculating decimals, finding symbols, and tracking balances for ERC20s and NFTs \n prices  (prices/) : The  prices_usd  tables will help you assign values to volume, TVL, and many more token metrics. \n \n \n ", "url": "https://dune.com/docs/data-tables/spellbook/top-tables/"}
{"content": "Skip to content\n          (#github-repo) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/spellbook/index.md) \n Spellbook Tables \n Spellbook Tables are the easiest way to query blockchain data on Dune \n \n \n \n Github Repo \u00b6  (#github-repo) \n The Spellbook GitHub repository can be found here. \n \u2192 Spellbook Github Repo  (https://github.com/duneanalytics/spellbook) \n \n \n Model Docs \u00b6  (#model-docs) \n Visit the Spellbook Model Docs to see a complete list of Spellbook Spell tables. \n \u2192 Spellbook Model Docs  (https://dune.com/spellbook) \n \n \n \n ", "url": "https://dune.com/docs/data-tables/spellbook/"}
{"content": "Skip to content\n          (#the-four-kinds-of-tables) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/data-tables/index.md) \n Tables and Chains Overview \n ", "url": "https://dune.com/docs/data-tables/"}
{"content": "Skip to content\n          (#dune-api-faq) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/api/faq.md) \n ", "url": "https://dune.com/docs/api/faq/"}
{"content": "Skip to content\n          (#how-to-use-the-api) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/api/api-reference/upload-data/index.md) \n Uploading data \n Easily upload your own data to Dune \n The Dune write API allows you to upload CSV files into the Dune database. This API streamlines the process of importing data into the Dune platform and allows you to import off-chain data into Dune with ease. You can simply use your usual API key to authenticate with the API and upload your CSV file. \n Currently, the API only supports uploading CSV files with a maximum size of 200 MB. The API will return an error if the file size exceeds this limit.  \n The files you upload will be queryable via the schema  dune.team_name.dataset_name . For example, if you upload a file called  energy_data.csv  to the team  dune  and name the dataset  energy_data , you will be able to query the data via  dune.dune.energy_data . \n You'll be able to query for your data in any query. \n  (#__codelineno-0-1) Select   *   from   dune . dune . dataset_energy_data \n \n We automatically infer schemas (=detect datatypes) for all uploaded data. If in doubt, you can check the assumed datatypes in the information schema.  \n  (#__codelineno-1-1) SELECT   *   FROM   information_schema . columns   \n  (#__codelineno-1-2) WHERE   table_schema   =   'dune_upload'   \n  (#__codelineno-1-3) AND   table_name   =   'energy_data' ; \n \n Anything that represents a timestamp is especially tricky for automated systems to detect, if something is not working as intended, try coverting the timestamp to ISO time before uploading and use the applicable TrinoSQL function to convert it back. \n \n Info \n All data uploaded is public and can be accessed by anyone.  \nPrivate data uploads are available only on the  premium plan. \n \n \n Tip \n You can also upload data via the User Interface. Check out the  APP documentation  (../../../app/upload-data/)  for more information. \n \n ", "url": "https://dune.com/docs/api/api-reference/upload-data/"}
{"content": "Skip to content\n          (#example-parameters-with-different-types) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/api/api-reference/edit-queries/parameter-passing.md) \n How to Pass Parameters \n The parameters have to be passed in a specific format laid out here:   \n \n The  type  field can be one of  number ,  text ,  datetime ,  enum   \n The  key  and  type  fields are always mandatory, while the  value  and  enumOptions  fields can be omitted for some types.  \n The  value  represents the default value used by this parameter during execution and should  always  be passed in as a JSON string. \n \n Here are details about the four different type options: \n \n number  - numeric parameters, value is mandatory and must be a number wrapped in  \u201c \n text  - string parameters, including hex 0x-prefixed values.  value  can be empty and will use an empty string by default in that case \n datetime  - date and time parameters.  value  must be provided in the following format  YYYY-MM-DD hh:mm:ss \n enum  - used when there\u2019s a specific list of values that can be provided to the parameter. The  enumOptions  field is used only for this type and is mandatory. It must be a JSON list of strings that represent all the valid options for the enumeration. The value field is also mandatory and must be one of the values provided in the  enumOptions \n \n ", "url": "https://dune.com/docs/api/api-reference/edit-queries/parameter-passing/"}
{"content": "EVM Raw Table Data \u00b6 \n Ethereum Virtual Machine (EVM) powers all chains in Dune except Solana and Bitcoin - meaning they share the base structure for underlying data. \n \n \n \n Blocks \u00b6  (#blocks) \n \n Blocks are the base unit that all transactions fit into. \n \u2192 Blocks  (blocks/) \n \n \n Event Logs \u00b6  (#event-logs) \n Event Logs are data that gets generated by smart contracts. \n \u2192 Event Logs  (event-logs/) \n \n \n Traces \u00b6  (#traces) \n \n Traces contain information about the execution of smaller atomic actions generated by transactions. \n \u2192 Traces  (traces/) \n \n \n Transactions \u00b6  (#transactions) \n \n Transactions are cryptographically signed instructions from accounts.   \n \u2192 Transactions  (transactions/)", "url": "https://dune.com/docs/data-tables/raw/evm/#evm-raw-table-data"}
{"content": "EVM Raw Table Data \u00b6 \n Ethereum Virtual Machine (EVM) powers all chains in Dune except Solana and Bitcoin - meaning they share the base structure for underlying data. For a full written guide on getting started,  check out this one  (https://web3datadegens.substack.com/p/a-basic-wizard-guide-to-dune-sql) . \n \n \n \n Blocks \u00b6  (#blocks) \n \n Blocks are the base unit that all transactions fit into. \n \u2192 Blocks  (evm/blocks/) \n \n \n Event Logs \u00b6  (#event-logs) \n Event Logs are data that gets generated by smart contracts. \n \u2192 Event Logs  (evm/event-logs/) \n \n \n Traces \u00b6  (#traces) \n \n Traces contain information about the execution of smaller atomic actions generated by transactions. \n \u2192 Traces  (evm/traces/) \n \n \n Transactions \u00b6  (#transactions) \n \n Transactions are cryptographically signed instructions from accounts. \n \u2192 Transactions  (evm/transactions/) \n \n \n \n ", "url": "https://dune.com/docs/data-tables/raw/#evm-raw-table-data"}
{"content": "Bitcoin Raw Table Data \u00b6 \n Bitcoin data follows a UTXO model. For a full written guide on getting started,  check out this one  (https://web3datadegens.substack.com/p/how-to-analyze-bitcoin-data-with) . \n \n \n \n Blocks \u00b6  (#blocks_1) \n \n Blocks are the base unit that all transactions fit into. \n \u2192 Blocks  (bitcoin/blocks/) \n \n \n Transactions \u00b6  (#transactions_1) \n \n Transactions contain all spent inputs and created outputs from a UTXO transaction. \n \u2192 Transactions  (bitcoin/transactions/) \n \n \n Outputs \u00b6  (#outputs) \n \n Just the outputs, unnested. \n \u2192 Outputs  (bitcoin/outputs/) \n \n \n Inputs \u00b6  (#inputs) \n \n Just the inputs, unnested. \n \u2192 Inputs  (bitcoin/inputs/) \n \n \n \n ", "url": "https://dune.com/docs/data-tables/raw/#bitcoin-raw-table-data"}
{"content": "Solana Raw Table Data \u00b6 \n Solana data follows an instruction/program based model. You initiate a set of instruction calls (instead of just a single call), and those will set off a bunch of inner instruction calls during execution.. For a full written guide on getting started,  check out this one  (https://web3datadegens.substack.com/p/how-to-analyze-bitcoin-data-with) . \n \n \n \n Account Activity \u00b6  (#account-activity) \n \n This table contains information from the transactions table focused on account usage. \n \u2192 Account Activity  (solana/account-activity/) \n \n \n Blocks \u00b6  (#blocks_2) \n \n Blocks are the base unit that all transactions fit into. \n \u2192 Blocks  (solana/blocks/) \n \n \n Rewards \u00b6  (#rewards) \n \n This table contains data about rewards paid out on Solana. \n \u2192 Rewards  (solana/rewards/) \n \n \n Transactions \u00b6  (#transactions_2) \n \n Transactions are cryptographically signed instructions from accounts. \n \u2192 Transactions  (solana/transactions/) \n \n \n Instruction Calls \u00b6  (#instruction-calls) \n \n Transactions are unnested here such that each instruction gets its own row. \n \u2192 Instruction Calls  (solana/instruction-calls/) \n \n \n Vote Transactions \u00b6  (#vote-transactions) \n \n This table contains the full set of vote transactions that are submitted by validators to vote on a block. \n \u2192 Vote Transactions  (solana/vote-transactions/)", "url": "https://dune.com/docs/data-tables/raw/#solana-raw-table-data"}
{"content": "Example IDL Decoded Walkthrough \u00b6 \n Using an IDL, we decode the function data arguments and the required account arguments. Let's look at an example using Whirlpool - normally you can find the IDL  on Solscan  (https://solscan.io/account/whirLbMiicVdio4qvUfM5KAg6Ct8VwpYzGff3uctyCc#anchorProgramIDL) , but this time we had to dig  into the project repo  (https://github.com/orca-so/whirlpools/blob/main/sdk/src/artifacts/whirlpool.json) . IDLs are like ABIs on Ethereum, except they are created from the  Anchor lang  (https://www.anchor-lang.com/)  project instead of natively from every program. \n Here's a transaction  (https://solscan.io/tx/TGDKvM2E8mWYcsG2JBnb9axFcyEcKqs7yZLyayCmrV8p8SSdA8r9SLEC7EHQ4mcXQXpczEyaCBXvnmEi9yoKVJ9)  of a pool (a trading pair) being initialzed. \n You can see that the instruction data is decoded in \"Bumps\", \"TickSpacing\", and \"InitialSqrtPrice\" on the explorer. We have the same thing in a SQL table! You can also see all the account names are labelled clearly as well with an  account_  prefix. Raw table inherited columns like  tx_id ,  block_time ,  tx_index  get a  call_  prefix. \n The main thing to note is that we've exploded outer and inner instructions, where the index will match what you see on explorers. This example call is at the outer instruction level, so the inner instruction index is null. For Whirlpool swaps, often times it will happen in inner_instructions so then the top level outer instruction is inherited into the  call_outer_instruction_index  and the inner index is  call_inner_instruction_index  (same idea with the  call_outer_executing_account  and  call_inner_executing_acount ) \n \n Try it out for yourself in  this query  (https://dune.com/embeds/2352049/3851391)  below: \n  (#__codelineno-0-1) SELECT * FROM whirlpool_solana.whirlpool_call_initializePool\n  (#__codelineno-0-2) WHERE call_tx_id = 'TGDKvM2E8mWYcsG2JBnb9axFcyEcKqs7yZLyayCmrV8p8SSdA8r9SLEC7EHQ4mcXQXpczEyaCBXvnmEi9yoKVJ9'\n \n The table name follows the pattern  <namespace>_solana.<programName>_call_<instructionName> . We already have many of the top projects decoded, so go play around!", "url": "https://dune.com/docs/data-tables/decoded/solana/idl-tables/#example-idl-decoded-walkthrough"}
{"content": "Multiple Instances \u00b6 \n If there is multiple instances of a contract we will collect all event logs across all instances of this smart contract in one table. For example, all uniswap v3 pool  swap  events (on ethereum) are stored in the table: \n V2 Engine (Spark SQL)  (#__tabbed_3_1) V1 Engine (PosgreSQL)  (#__tabbed_3_2) \n \n \n uniswap_v3_ethereum.Pair_evt_Swap \n \n \n \n uniswap_v3.\"Pair_evt_Swap\" \n \n \n \n \n The column  contract_address  indicates as to which smart contract emitted this event. \n ", "url": "https://dune.com/docs/data-tables/decoded/evm/event-logs/#multiple-instances"}
{"content": "Further Reading \u00b6 \n \n \n Understanding event logs on the Ethereum blockchain  (https://medium.com/mycrypto/understanding-event-logs-on-the-ethereum-blockchain-f4ae7ba50378) \n Everything You Ever Wanted to Know About Events and Logs on Ethereum  (https://medium.com/linum-labs/everything-you-ever-wanted-to-know-about-events-and-logs-on-ethereum-fec84ea7d0a5)", "url": "https://dune.com/docs/data-tables/decoded/evm/event-logs/#further-reading"}
{"content": "Skip to content\n          (#example-request-in-python) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/api/api-reference/edit-queries/archive-query.md) \n Archive Query \n \n ENDPOINTS \n  (#__codelineno-0-1) POST /api/v1/query/{{query_id}}/archive\n  (#__codelineno-0-2) POST /api/v1/query/{{query_id}}/unarchive\n \n \n \n Note \n This endpoint is included only in our Premium subscription plans. \n \n THe Archive query endpoints allow archiving a query or vice verse (i.e. setting an archived query back to active state). Archiving removes the query from \"My Creation\" folder so in a way delete the query. They  do not accept a request body . They return query id after the operation. \n ", "url": "https://dune.com/docs/api/api-reference/edit-queries/archive-query/"}
{"content": "Multiple Instances \u00b6 \n For a contract where multiple instances exist, we will decode all calls to all instances of this smart contract into one table. If there is a transaction calling the  swap  function of any instance of a  Uniswap v3 pair  (https://etherscan.io/address/0x8f8ef111b67c04eb1641f5ff19ee54cda062f163#writeContract)  contract, we will collect this data in the table: \n V2 Engine (Spark SQL)  (#__tabbed_3_1) V1 Engine (PosgreSQL)  (#__tabbed_3_2) \n \n \n uniswap_v3_ethereum.Pair_call_swap \n \n \n \n uniswap_v3.\"Pair_call_swap\" \n \n \n \n \n ", "url": "https://dune.com/docs/data-tables/decoded/evm/call-tables/#multiple-instances"}
{"content": "Common misconceptions \u00b6 \n One thing to keep in mind here is that  web3.js  (https://web3js.readthedocs.io) ,  web3.py  (https://web3py.readthedocs.io/en/stable)  and all other methods of (locally) calling a  pure ,  read , or  constant  function do not broadcast or publish anything on the blockchain and are therefore not recorded in Dune. \n However, if one of these functions is invoked by another smart contract in the context of a transaction, this will be broadcast on the chain and therefore accessible in Dune. \n In short:  State data stored in the memory of a smart contract is not available on Dune! \n A good example of this is the function  decimals  of the  erc20 token contract  (https://etherscan.io/token/0x1f9840a85d5af5bf1d1762f925bdaddc4201f984#readContract)   Uni  which is a  constant  state variable that is able to be accessed through an automatically created \" getter function  (https://docs.soliditylang.org/en/v0.7.4/contracts.html#getter-functions) \". Should a smart contract invoke this function in the context of transaction, this message call will be recorded in the Dune table  uniswap.\"UNI_call_decimals\"  (https://dune.com/queries/741354) . \n This is in contrast to anyone calling this function locally using web3.py/web3.js or using the Etherscan frontend to access this state. These local calls are not recorded in Dune. \n ", "url": "https://dune.com/docs/data-tables/decoded/evm/call-tables/#common-misconceptions"}
{"content": "Further Reading \u00b6 \n \n \n What is the difference between a transaction and a call?  (https://ethereum.stackexchange.com/questions/765/what-is-the-difference-between-a-transaction-and-a-call) \n Soliditylang.org documentation  (https://docs.soliditylang.org/en/v0.8.13/contracts.html#function-visibility) \n How Calldata is Encoded  (https://degatchi.com/articles/reading-raw-evm-calldata)", "url": "https://dune.com/docs/data-tables/decoded/evm/call-tables/#further-reading"}
{"content": "Skip to content\n          (#example-request) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/api/api-reference/edit-queries/get-query.md) \n Retrieve or Get Query \n \n ENDPOINTS \n  (#__codelineno-0-1) GET /api/v1/query/{{query_id}}  \n \n \n \n Note \n This endpoint is included only in our Premium subscription plans. \n \n This endpoint will get details about a query (public, owned by the user, or a team the user belongs to), given the query ID. In the future we will likely also support getting a specific version, but for now, it returns data for the latest version. \n User will be permissioned to get any public queries, private queries user owns, and private queries owned by teams user belongs to. \n ", "url": "https://dune.com/docs/api/api-reference/edit-queries/get-query/"}
{"content": "Skip to content\n          (#example-request-in-python) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/api/api-reference/edit-queries/update-query.md) \n Update Query \n \n ENDPOINTS \n  (#__codelineno-0-1) PATCH /api/v1/query/{{query_id}}\n \n \n \n Note \n This endpoint is included only in our Premium subscription plans. \n \n This endpoint updates the query with the ID from the URL.  \n The request body should contain all fields that need to be updated.  Any omitted fields will be left untouched . If the  tags  or  parameters  are provided as an empty array, they will be deleted from the query. If they are sent with some values, the existing ones will be overwritten by the new ones. And as with the other fields, if those keys aren\u2019t set at all, they won\u2019t be updated.  \n The Update query endpoint does not allow setting a query as private or archived, please refer to  archive query  (../archive-query/)  and  make query private  (../private-query/)  pages respectively. \n ", "url": "https://dune.com/docs/api/api-reference/edit-queries/update-query/"}
{"content": "Skip to content\n          (#example-request-in-python) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/api/api-reference/edit-queries/create-query.md) \n Create Query \n \n ENDPOINTS \n  (#__codelineno-0-1) POST /api/v1/query/\n \n \n \n Note \n This endpoint is included only in our Premium subscription plans. \n \n This endpoint accepts a JSON body to create a new query. It returns just the new query ID.  The  name  and  query_sql  parameters are mandatory, the rest are optional.  All newly created queries are only created on our  DuneSQL  (../../../../query/)  query engine. \n ", "url": "https://dune.com/docs/api/api-reference/edit-queries/create-query/"}
{"content": "Skip to content\n          (#how-to-crud-queries) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  (https://github.com/duneanalytics/docs/edit/master/docs/api/api-reference/edit-queries/index.md) \n Editing (CRUD) Queries \n CRUD API endpoints enables users to create, read, update, or archive queries  beyond  the Dune IDE, enabling more flexible integration of Dune API into your workflow and freeing you from UI-exclusive query editing. Learn more about our CRUD queries feature: \n \n Note \n CRUD queries is an advanced feature included only in our Premium subscription plans. Please upgrade your plan to use it. \n \n \n What is CRUD \n \n CRUD operations, standing for Create, Read, Update, and Delete, are the four basic functions that a software application needs to interact with data. They are essential because they allow you to add new data (Create), view existing data (Read), modify existing data (Update), and remove data (Delete) in your database or other storage systems. \n In Dune context,  delete  aciton is replaced by  archive  as deletion of queries is not possible. \n Unlike endpoints in  query execution  (../execute-queries/)  group, endpoints in CRUD queries API  cannot  be cancelled, i.e. it is a sync call and there is no intermediary status. \n \n \n ", "url": "https://dune.com/docs/api/api-reference/edit-queries/"}
{"content": "404 - Not found", "url": "https://dune.com/docs/zh/reference/v2/community/reservoir/collections/"}
{"content": "Which contracts have decoded data? \u00b6 \n You can check if contracts are already decoded by querying  [blockchain].contracts  tables through our database or use  this dashboard  (https://dune.com/dune/is-my-contract-decoded-yet-v2) . \n  (#__codelineno-0-1) Select   *   from   ethereum . contracts   --you can change ethereum.contracts to the e.g. optimism.contracts \n  (#__codelineno-0-2) where   address   =   '0x429881672b9ae42b8eba0e26cd9c73711b891ca5' \n \n \n If the contract is not in our database yet, you can submit them here:  \n \n \n dune.com/contracts/new  (https://dune.com/contracts/new) . \n \n \n If you want to submit several contracts at the same time, there is also the possibility of submitting a batch of contracts. To do so, please use  this CSV  (https://gist.github.com/antonio-mendes/c6a43c22862581674c11462cae230e23)  as a template and fill it in with the appropriate information for the contracts you want to decode. Afterwards send the CSV to decoding@dune.com. \n It usually takes about 24 hours to initially decode smart contracts, and you can check to see if your contract has been decoded yet here: \n \n \n Is my Contract decoded yet?  (https://dune.com/0xBoxer/Is-my-Contract-decoded-yet) \n \n \n Once a contract has been added to our Decoded Contracts system, you can check this dashboard to see the current delays between block published to decoded data ready for querying: \n \n \n Dune Meta Monitoring  (https://dune.com/dune/Meta-Monitoring) \n \n \n Read more about submitting contracts for decoding in this section: \n \n \n Adding new contracts  (../../../app/decoding-contracts/) \n \n \n ", "url": "https://dune.com/docs/data-tables/decoded/evm/#which-contracts-have-decoded-data"}
{"content": "How does decoding work? \u00b6 \n Smart Contracts on any EVM blockchain are mostly written in high level languages like  Solidity  (https://docs.soliditylang.org/en/v0.8.2)  or  Vyper  (https://vyper.readthedocs.io/en/stable) . \n In order for them to be able to be deployed to an EVM execution environment, they need to be compiled to EVM executable bytecode. Once deployed, the bytecode gets associated to an address on the respective chain and is permanently stored in this chain's state storage. \n To be able to interact with this smart contract, which is now just bytecode, we need a guide to be able to call the functions which are defined in the high-level languages. This translation of names and arguments into byte representation is done using an  Application Binary Interface (ABI) . \n The ABI documents names, types, and arguments precisely which allows us to interact with the smart contract using a somewhat human readable format. The ABI can be compiled using the high level language source code. \n The ABI is used to call a smart contract or interpret the data it emits. \n \n ", "url": "https://dune.com/docs/data-tables/decoded/evm/#how-does-decoding-work"}
{"content": "An Example \u00b6 \n We are going to look at an event log of an ERC20 transfer event from the  smart contract  (https://etherscan.io/token/0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5#readContract)  that represents the $PICKLE token. \n On  Etherscan  (https://etherscan.io/tx/0x2bb7c8283b782355875fa37d05e4bd962519ea294678a3dcf2fdffbbd0761bc5#eventlog)  the undecoded event looks like this: \n \n If we query for this transaction in the  ethereum.logs  table in the Dune database, we will receive the same encoded bytecode as our result dataset. \n  (#__codelineno-1-1)      Select   * \n  (#__codelineno-1-2) from   ethereum . logs \n  (#__codelineno-1-3) where   tx_hash   =   '0x2bb7c8283b782355875fa37d05e4bd962519ea294678a3dcf2fdffbbd0761bc5' \n \n Result: \n \n Now this is not at all helpful to analyze data. \n Using the contract's ABI we can convert this encoded bytecode to decoded data. \n The event log we are looking at here is from the $PICKLE ERC20 token  transfer  event log. \n Since this table is decoded on Dune, we can query the table in Dune to receive the decoded information:  \n  (#__codelineno-2-1) SELECT   * \n  (#__codelineno-2-2) FROM   pickle_finance_ethereum . PickleToken_evt_Transfer \n  (#__codelineno-2-3) WHERE   evt_tx_hash   =   '0x2bb7c8283b782355875fa37d05e4bd962519ea294678a3dcf2fdffbbd0761bc5' \n \n Result: \n \n Now this is actually useful for analyzing this transaction! \n How exactly does this work? \n Since we know which event we are looking at here, we can simply convert the encoded bytecode to decoded data by decoding the bytecode according to it's datatype. \n The structure for the  Transfer  event log of an ERC20 token will always be: \n  (#__codelineno-3-1) Transfer ( address   from ,   address   to ,   uint256   value ) \n \n This basically tells us that topic2 and topic3 are of the type  address (32bytes) and are respectively the sender and recipient of the token transfer. An event log only has 3 indexed fields, so the  data  field is used to store the information about how much units of the token have been moved in this transaction. This field is called  value . \n Since  topic1  always is just the Keccak-256 hash of the signature of the event, we are left with decoding  topic2 ,  topic3  and  data . \n In this case, they map out like this: \n \n \n \n raw data field \n decoded data description \n raw data \n decoded data \n \n \n \n \n topic1 \n keccak256(\"Transfer(address,address,uint256)\") \n 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef \n not needed, this table only contains event logs from the  transfer  event log \n \n \n topic2 \n from \n 0x00000000000000000000000075e89d5979e4f6fba9f97c104c2f0afb3f1dcb88 \n 0x75e89d5979e4f6fba9f97c104c2f0afb3f1dcb88 \n \n \n topic3 \n to \n 0x00000000000000000000000087d9da48db6e1f925cb67d3b7d2a292846c24cf7 \n 0x87d9da48db6e1f925cb67d3b7d2a292846c24cf7 \n \n \n data \n value \n 0x00000000000000000000000000000000000000000000001a894d51f85cb08000 \n 489509000000000000000 \n \n \n \n In summary: \n We can use the contracts ABI to go from encoded bytecode to decoded data. This helps you run analysis fast and efficient as the decoded data is easy to work with. \n ", "url": "https://dune.com/docs/data-tables/decoded/evm/#an-example"}
{"content": "How do I understand decoded data? \u00b6 \n Decoded data is the high level programming language representation of two pieces of software talking to each other via the blockchain. \n It's not always easy for a human to understand what exactly is going on in these interactions, but most of the time, looking at column names and the data that is transmitted within them should help you to understand what is happening within that specific log or call. \n If you are not able to make sense of the data by just searching the tables, it usually helps to look at single transactions using the transaction hash and Etherscan. \n Furthermore, actually going into the smart contracts code (our favorite way to do this is  DethCode  (https://etherscan.deth.net) ) to read the comments or the actual logic can help to understand the smart contract's emitted data. \n If that also doesn't lead to satisfactory results, scouring the relevant docs and GitHub of the project can lead you to the desired answers. Furthermore, talking to the developers and core community of a project can also help you to get an understanding of the smart contracts. \n In Summary : \n Working with decoded data allows you deep access to information stored on the blockchain and is very information rich, but understanding that data sometimes takes a bit of effort on your side since you are interacting with the data of the contract in a direct way. \n ", "url": "https://dune.com/docs/data-tables/decoded/evm/#how-do-i-understand-decoded-data"}
{"content": "Which tables should I use? \u00b6 \n Events  are designed to be analyzed and stored on the blockchain to allow backward looking analysis of what is happening,  transactions  and  message calls  are made to pass information between smart contracts. \n Therefore, in most cases the easiest and most accessible way to analyze various things happening on the blockchain is by looking at events. \n However, there is some cases where the emitted events miss some crucial information or there is just no events that get emitted. In these cases you might have to fall back to transaction and message calls (found in call tables). \n Cases where no event gets emitted get rarer over time as developers now mostly understand that events are important enough to be emitted, but they still exist. In some cases, it might make sense to combine the decoded data with  raw data  (../../raw/)  in order to get metadata about the transaction or dive even deeper. \n ", "url": "https://dune.com/docs/data-tables/decoded/evm/#which-tables-should-i-use"}
{"content": "Queries to explore decoded Contracts \u00b6 \n ", "url": "https://dune.com/docs/data-tables/decoded/evm/#queries-to-explore-decoded-contracts"}
{"content": "See all projects we have decoded data for \u00b6 \n  (#__codelineno-4-1) SELECT   DISTINCT   namespace   FROM   [ blockchain ]. contracts ;   --change [blockchain] the chain you're interested in e.g. ethereum.contracts \n \n Example: \n \n ", "url": "https://dune.com/docs/data-tables/decoded/evm/#see-all-projects-we-have-decoded-data-for"}
{"content": "Check for multiple instances of a contract \u00b6 \n If you are working with an event or call table directly you can see if there are several instances of that contract with this query. \n  (#__codelineno-5-1) SELECT   DISTINCT   contract_address   \n  (#__codelineno-5-2) FROM   [ projectname_blockchain ].[ contractName ] _evt_ [ eventName ];   --change [projectname_blockchain] to the project name and blockchain you're interested in,[contractName] and [eventName] to the specific contract  e.g. uniswap_v2_ethereum.Factory_evt_PairCreated \n \n Example:", "url": "https://dune.com/docs/data-tables/decoded/evm/#check-for-multiple-instances-of-a-contract"}
{"content": "EVM decoded tables \u00b6 \n We support  decoded tables for Ethereum based chains (EVM)  (evm/)  like Ethereum, Optimism, Arbitrum. \n There are two types of EVM decoded tables, one that decodes functions and one that decodes event logs.  \n \n \n \n Call Tables  (evm/call-tables/) \u00b6  (#call-tables) \n \n These are decoded from traces, which contain every function call within a transaction (i.e. between contracts). \n \u2192 Call Tables  (evm/call-tables/) \n \n \n Event Log Tables  (evm/event-logs/) \u00b6  (#event-log-tables) \n \n These are decoded from event logs, which are data points emitted during a function call. \n \u2192 Event Log Tables  (evm/event-logs/) \n \n \n \n ", "url": "https://dune.com/docs/data-tables/decoded/#evm-decoded-tables"}
{"content": "Solana decoded tables \u00b6 \n We also support  decoded tables on Solana  (solana/idl-tables/) , for any program (Candy Machine, Whirlpool, Jupiter, SPL Token, System Program, Pyth, and many more). \n \n \n \n IDL Tables  (solana/idl-tables/) \u00b6  (#idl-tables) \n These are decoded from  instruction_calls , so all function calls at the first instruction level (not inner instructions) are decoded. \n \u2192 IDL Tables  (solana/idl-tables/)", "url": "https://dune.com/docs/data-tables/decoded/#solana-decoded-tables"}
{"content": "Metadata tables: \u00b6 \n \n \n tokens.erc20  (https://spellbook-docs.dune.com/#!/model/model.spellbook.tokens_erc20) : contains useful information such as the token  symbol  and the  decimals  for any given  contract_address , the latter of which is needed to get the actual amount from raw amounts in onchain data. \n \n \n tokens.nft  (https://spellbook-docs.dune.com/#!/model/model.spellbook.tokens_nft) : contains the collection  name  and  symbol  for any given  contract_address . \n \n \n These tables are usually joined on  contract_address  at the end of a query to make everything more human readable. \n ", "url": "https://dune.com/docs/data-tables/spellbook/top-tables/tokens/#metadata-tables"}
{"content": "Transfer tables: \u00b6 \n \n \n erc20_ethereum.evt_Transfer  (https://spellbook-docs.dune.com/#!/model/model.spellbook.transfers_ethereum_erc20) : all transfer events for every erc20 token. You can find how to get erc20 balances, mints, and burns using  this guide  (https://www.youtube.com/watch?v=LT_PB-Fso3M) . \n \n \n nft.transfers  (https://spellbook-docs.dune.com/#!/model/model.spellbook.nft_transfers) : all transfer events for every erc721 or erc1155 token. You can learn how to leverage this to find nft balances, transfers, and mints in  this guide  (https://web3datadegens.substack.com/p/web3-sql-weekly-3-finding-all-nfts) \n \n \n If you're looking for how to calculate native token balances like ethereum (ETH) balances then check out  this guide  (https://web3datadegens.substack.com/p/web3-sql-weekly-1-how-to-calculate)", "url": "https://dune.com/docs/data-tables/spellbook/top-tables/tokens/#transfer-tables"}
{"content": "prices.usd \u00b6 \n This table supports a range of erc20.tokens. \n ", "url": "https://dune.com/docs/data-tables/spellbook/top-tables/prices/#pricesusd"}
{"content": "adding a token to price tracking \u00b6 \n If the token you desire is not listed in here, please make a pull request to our  GitHub repository  (https://github.com/duneanalytics/spellbook/blob/main/models/prices/prices_tokens.sql) . (For V1 Engine, you can also use the decentralized price feed  dex.view_token_prices. ) \n \n \n \n Column name \n Data type \n Description \n \n \n \n \n contract_address \n varbinary \n string the contract address of the erc20 token \n \n \n symbol \n varchar \n the identifier of the asset (ticker, cashtag) \n \n \n price \n bigint \n The price of the asset in any given minute \n \n \n minute \n timestampz \n The resolution for this table is by minute \n \n \n \n Note that  WETH  can be used for ETH price as it trades at virtually the same price. \n ", "url": "https://dune.com/docs/data-tables/spellbook/top-tables/prices/#adding-a-token-to-price-tracking"}
{"content": "How we get prices from DEXs \u00b6 \n We created a table that creates price feeds based on decentralized exchange trading data. This table covers much more assets than  prices.usd , since it covers all assets that are traded on any  of the decentralized exchanges that are indexed in  dex.trades . \n Please keep in mind that this script can generate wrong prices in rare cases. \n This table is very resource intensive and can therefore only be updated every few hours, please keep that in mind when utilizing it. **** Also the resolution is only hourly, so if you need minutely prices do refer to  prices.usd  (./) . \n This table currently only exists for Ethereum on our old database architecture. \n The logic of how this table works can be accessed in our  public github  (https://github.com/duneanalytics/spellbook/tree/master/ethereum/prices)  repo. \n This script generates median hourly prices based on data from decentralized exchanges found in  dex.trades . It will assign asset prices based on a trading pair which has a pricefeed in  prices.usd . \n Let's take the $SPELL/ETH Pool for example. \n \n $ETH price is contained in  prices.usd \n $SPELL price is not contained in  prices.usd \n \n In order to get the $SPELL price, the script will dynamically calculate the price of $SPELL based on the price of $ETH that was exchanged for it. \n e.g. 5 $ETH were exchanged for 1,086,083 $SPELL. \n Dex.trades will assign a  usd_amount  to this trade based on the $ETH price data in  prices.usd . \n That  usd_amount  is $23,498. \n 5 * price of ETH (4.699,6) = $23,498 \n Calculating the price of $SPELL is now as simple as dividing the amount of tokens exchanged with the  usd_amount  recorded in  dex.trades . \n $23,498/1,086,083 \u2248 $0,02163 \n We now have successfully calculated the price of 1 $SPELL. \n In order to correct for extreme outliers and in order for this table to be performant the script then aggregates all recorded data into one  median_price  per hour. \n ", "url": "https://dune.com/docs/data-tables/spellbook/top-tables/prices/#how-we-get-prices-from-dexs"}
{"content": "Known issues \u00b6 \n In rare cases this script will generate price feeds that are based on illiquid pairs and therefore report wrong data. This happens when all liquid trading pools of this token do not have a price feed in  prices.usd . \n An example of this would be $PLAY, a metaverse index from PieDAO. The liquid trading pair for this asset is  P L A Y / DOUGH. The \"correct\" price of $PLAY is represented in this pool, but the combination of  dex.trades  and  prices.prices_from_dex_data  are not able to pick up this price. \n Instead,  dex.trades  will only have a  usd_amount  for illiquid pairs of this asset. In this case, the  P L A Y / ETH pool has trades once in a while and these will have a  usd_amount  in  dex.trades . The liquidity of the  P L A Y / ETH pool is very low and it pretty much only consists of arbitrage trades. Therefore, the resulting pricefeed in  prices.prices_from_dex_data  is faulty since it depends on the  usd_amount  in  dex.trades . \n In order to check for this, you should manually verify the results of  prices.prices_from_dex_data  in order to make sure arbitrage trades do not disturb the price feed constructed. A simple way of validating that the script is working with the right pools is checking the  sample_size  column. If the number seems suspiciously low, the script probably doesn't pick up the right price. \n In cases like this, you have to manually construct a price feed. \n We are always looking to improve this table, if you have any ideas or comments don't hesitate to open a PR or contact us in our Discord.", "url": "https://dune.com/docs/data-tables/spellbook/top-tables/prices/#known-issues"}
{"content": "How it works \u00b6 \n ", "url": "https://dune.com/docs/data-tables/spellbook/top-tables/nft.trades/#how-it-works"}
{"content": "Single Item Trade \u00b6 \n A trade occurs between a  buyer and a  seller . \n They exchange an item which is uniquely identified by the combination of  nft_contract_address  and  token_id . The Buyer will pay the Seller a given  original_amount of tokens in any given  original_currency . To make it easier, we have calculated the  usd_amount  that this was worth at the time of the trade for you. Most trades will be done in ETH or WETH, but especially non OpenSea trades often contain other currencies. \n The trade is committed on any of the indexed  platforms and will be facilitated through a smart contract of those platform's  exchange_contract_address . Each trade will have metadata like  block_time ,  tx_hash ,   block_number ,  platform version ,  evt_index  etc. \n Additionally, we also provide metadata about the traded NFT.  nft_project_name  and  erc_standard  will help you in analyzing your dataset more easily.  nft_project_name  data gets pulled from the  nft.tokens   table  (https://github.com/duneanalytics/spellbook/blob/master/ethereum/nft/tokens.sql) , if your NFT is missing in that table, you are welcome to make a PR to add it. \n ", "url": "https://dune.com/docs/data-tables/spellbook/top-tables/nft.trades/#single-item-trade"}
{"content": "Bundle Trade \u00b6 \n There can also be trades in which a single trade transaction contains multiple Items. Each of these Items is uniquely identified through a combination of  nft_contract_address  and  token_id . Unfortunately, in these trades there is not a clear way to determine a corresponding  usd_amount  for each of the items. \n A possible workaround is to divide the number of items by the payment made for the bundle, but this logic very quickly falls apart when Items that are not one in kind/value get sold in a bundle. \n We recommend removing bundle transfers from the dataset that you are working with since it can heavily influence the results in either direction. Note that  token_id  and ' erc_standard  will be null if tokens with different tokens IDs or erc type are transferred within the same transaction. \n ", "url": "https://dune.com/docs/data-tables/spellbook/top-tables/nft.trades/#bundle-trade"}
{"content": "Aggregator Trade \u00b6 \n There can also be trades in which a single trade transaction contains multiple items, especially when using NFT aggregator platforms. Our approach is to unravel aggregator trades so that each row correspond to a unique item that was traded, with its associated ID, price, collection, etc. \n Importantly, the  trade_type  will be indicated as  Aggregator Trade , and platform names and address can be found in the  nft.aggregators   table  (https://github.com/duneanalytics/spellbook/blob/master/ethereum/nft/aggregators.sql) . \n If your aggregator platform is missing in that table, you are welcome to make a PR to add it. \n ", "url": "https://dune.com/docs/data-tables/spellbook/top-tables/nft.trades/#aggregator-trade"}
{"content": "Platform and Royalty Fees \u00b6 \n In the most recent version of  nft.trades , information about the amount and percent of royalty fees in the original amount and in USD is available when this information was able to be retrieved. \n Royalty fees are going to the creator, and Platform fees are collected by the NFT platform. Note that royalty fees cannot always be retrieved, and are set to null by default. \n ", "url": "https://dune.com/docs/data-tables/spellbook/top-tables/nft.trades/#platform-and-royalty-fees"}
{"content": "Examples \u00b6 \n ", "url": "https://dune.com/docs/data-tables/spellbook/top-tables/nft.trades/#examples"}
{"content": "Queries \u00b6 \n All trades for a given NFT \u00b6  (#all-trades-for-a-given-nft) \n SQL \n  (#__codelineno-0-1) select   *   from   nft . trades   \n  (#__codelineno-0-2) \n  (#__codelineno-0-3) where   nft_contract_address   =   '\\xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb'   --this is the cryptopunks address \n \n Results \n \n Trades in the last 24 hour on a given platform \u00b6  (#trades-in-the-last-24-hour-on-a-given-platform) \n SQL \n  (#__codelineno-1-1) select   date_trunc ( 'day' ,   block_time ),   usd_amount ,   nft_contract_address ,   token_id   from   nft . trades   \n  (#__codelineno-1-2) \n  (#__codelineno-1-3) where   platform   =   'OpenSea'   --only shows trades on given Platform \n  (#__codelineno-1-4) \n  (#__codelineno-1-5) and   block_time   >   now ()   -   interval   '24hours' \n \n Results \n \n Platform volumes in the last year \u00b6  (#platform-volumes-in-the-last-year) \n SQL \n  (#__codelineno-2-1) select    sum ( usd_amount ),   \n  (#__codelineno-2-2)          date_trunc ( 'day' ,   block_time )   as   day ,   \n  (#__codelineno-2-3)          platform   \n  (#__codelineno-2-4) from   nft . trades   \n  (#__codelineno-2-5) where   block_time   >   now ()   -   interval   '365 days' \n  (#__codelineno-2-6) group   by   platform ,   day \n \n Results \n \n ", "url": "https://dune.com/docs/data-tables/spellbook/top-tables/nft.trades/#queries"}
{"content": "Dashboards \u00b6 \n That utilize parameters \u00b6  (#that-utilize-parameters) \n \n \n NFT by @0xBoxer  (https://dune.com/0xBoxer/NFT) \n NFT Sales Overview by Project by @rantum  (https://dune.com/rantum/NFT-Sales-Overview-by-Project) \n \n \n That look across the entire Ecosystem \u00b6  (#that-look-across-the-entire-ecosystem) \n \n \n NFT Collection Dashboard by @rantum  (https://dune.com/rantum/NFT-Collection-Dashboard) \n NFT by @sealaunch  (https://dune.com/sealaunch/NFT) \n \n \n ", "url": "https://dune.com/docs/data-tables/spellbook/top-tables/nft.trades/#dashboards"}
{"content": "Column Data \u00b6 \n \n \n \n Column name \n Data type \n Description \n \n \n \n \n block_time \n timestamp with time zone \n When was this trade executed \n \n \n block_time \n varchar \n NFT project name (e.g. \"the dudes\") \n \n \n nft_token_id \n varchar \n The token_id that was traded (e.g. 235) \n \n \n erc_standard \n varchar \n The Token Standard of the traded token  ERC-721  or  ERC-1155 \n \n \n platform \n varchar \n Which Platform the trade was executed on \n \n \n platform_version \n varchar \n Which version of this platform was utilized? \n \n \n trade_type \n varchar \n \"Single Item Sale\" or \"Bundle Sale\" \n \n \n number_of_items \n integer \n How many NFTs were included in this trade \n \n \n category \n varchar \n Was this an auction or a direct sale \n \n \n evt_type \n varchar \n Currently not in use, default 'Trade' \n \n \n aggregator \n varchar \n Was this trade made using an aggregator (Yes : Name of aggregator, No : Null) \n \n \n usd_amount \n numeric \n USD value of the trade at time of execution \n \n \n seller \n varbinary \n Seller of NFTs \n \n \n buyer \n varbinary \n Buyer of NFTs \n \n \n royalty_fees_percent \n numeric \n Royalty fees going to the creator (in %) \n \n \n original_royalty_fees \n numeric \n Royalty fees in the currency used for this trade \n \n \n usd_royalty_fees \n numeric \n USD value of royalty fees at time of execution \n \n \n platform_fees_percent \n numeric \n Platform fees (in %) \n \n \n original_platform_fees \n numeric \n Platform fees in the currency used for this trade \n \n \n usd_platform_fees \n numeric \n USD value of platform fees at time of execution \n \n \n original_currency \n varchar \n The Currency used for this trade \n \n \n original_currency_contract \n varbinary \n The ERC-20 address of the currency used in this trade (does not work with raw ETH) \n \n \n currency_contract \n varbinary \n The corrected currency contract \n \n \n nft_contract_address \n varbinary \n The contract address of the NFT traded \n \n \n exchange_contract_address \n varbinary \n The platform contract that facilitated this trade \n \n \n tx_hash \n varbinary \n The hash of this transaction \n \n \n block_number \n integer \n The block_number that this trade was done in \n \n \n tx_from \n varbinary \n Initiated this transaction \n \n \n tx_to \n varbinary \n Received this transaction \n \n \n trace_address \n ARRAY \n n/a \n \n \n evt_index \n integer \n Event index \n \n \n trade_id \n integer \n n/a \n \n \n \n ", "url": "https://dune.com/docs/data-tables/spellbook/top-tables/nft.trades/#column-data"}
{"content": "Ser, my platform is not indexed \u00b6 \n The SQL code that processes the data for every market place is open source and available in our  github repository  (https://github.com/duneanalytics/spellbook/tree/master/ethereum/nft/trades) . Everyone can review the code, make pull requests and submit code to add more marketplaces.", "url": "https://dune.com/docs/data-tables/spellbook/top-tables/nft.trades/#ser-my-platform-is-not-indexed"}
{"content": "What is a label? \u00b6 \n A label is  a piece of metadata about an address , a tag or metadata if you will. It comes in the form of a key-value pair. The key is the label  type , and the value the label  name . \n Browse addresses and and labels at the  labels page  (https://dune.com/dune/dune-v2-labels)  or contribute to the spell  starting with the readme  (https://github.com/duneanalytics/spellbook/tree/main/models/labels/addresses) . \n Here\u2019s a list of label types: \n \n Identifiers : Most static labels should be this label type, as well as common usernames such as Farcaster, ENS, and Lens names. As a rule of thumb, identifiers should usually specify a unique entity name. \n Usage : These are the existing top volume and frequency (or some other percentile-able metric) within a domain and the usage of specific protocols. There must be some sort of ranking/percentile involved! \n Personas : These are for on-chain curated behaviors (like common CT memes) or protocol user tagging. They should be easily understood to non-analysts, though the underlying calculation methods may be more subjective. \n \n To give a sense of examples, for the \"social\" category you would expect these labels: \n \n Identifier: Lens username (.lens) ENS reverse resolver (.eth), farcaster (_farcaster) \n Usage: top holders from ENS \n Usage: top posters from lens \n Persona: Lens User, ENS User \n Persona: Squatter (sitting on dozens of ENS names) \n \n ", "url": "https://dune.com/docs/data-tables/spellbook/top-tables/labels/#what-is-a-label"}
{"content": "What labels look like \u00b6 \n Check out  this dashboard  (https://dune.com/dune/dune-v2-labels)  for examples on what can be created with labels. \n The address  0xD551234Ae421e3BCBA99A0Da6d736074f22192FF  can be labeled like this: \n \n \n \n Type \n Name \n \n \n \n \n cex \n binance \n \n \n \n The address is controlled by the exchange Binance. \n The address  0xe65040f61701940b62e18da7a53126a58525588b  can be labeled like this: \n \n \n \n label_type \n Name \n \n \n \n \n persona \n uniswap user \n \n \n persona \n dex trader \n \n \n \n The address in the past interacted with Uniswap. \n You are free to come up with both new types and label names, as labels on Dune are open ended and  crowd sourced . \n ", "url": "https://dune.com/docs/data-tables/spellbook/top-tables/labels/#what-labels-look-like"}
{"content": "Adding labels \u00b6 \n Use Dune queries to label addresses. A very powerful and scalable way to add labels like \u201call these addresses used Uniswap\u201d, and much much more. \n Please see our  GitHub  (https://github.com/duneanalytics/spellbook/tree/main/models/labels)  for examples of labels created with queries and PR in your own! \n Examples of what you can do: \n \n Label all addresses that used a certain dapp \n Label all addresses that hold a certain amount of a token \n Label all addresses that use a dapp more than X times per month \n Label all addresses that sent money to Binance \n \n You could also do more novel and involved things around user patterns like who did arbitrage trades or profited from flash loans and so much more. \n Note that there might be a few minutes delay from adding the label on  dune.com  (http://dune.com)  until you can query it in SQL. \n ", "url": "https://dune.com/docs/data-tables/spellbook/top-tables/labels/#adding-labels"}
{"content": "The labels table \u00b6 \n Labels are stored in the new  labels.labels  table which has the following schema: \n \n \n \n Column name \n Data type \n Description \n \n \n \n \n id \n int \n incrementing integer \n \n \n address \n varbinary \n The address of a contract or wallet this label describes \n \n \n name \n varchar \n label name \n \n \n blockchain \n varchar \n the blockchain the label is meant for \n \n \n author \n varchar \n The username of the user who created this label \n \n \n source \n varchar \n The source of this label, autopopulated by Dune \n \n \n updated_at \n timestamptz \n The last time this label was changed \n \n \n label_type \n varchar \n The type of label, defined in the readme \n \n \n model_name \n varchar \n The name of the label model (filename) \n \n \n \n ", "url": "https://dune.com/docs/data-tables/spellbook/top-tables/labels/#the-labels-table"}
{"content": "Using labels \u00b6 \n \n Warning \n this section is currently under construction, stay tuned!", "url": "https://dune.com/docs/data-tables/spellbook/top-tables/labels/#using-labels"}
{"content": "Column Data \u00b6 \n \n \n \n Column name \n Data type \n Description \n \n \n \n \n block_time \n timestamptz \n The timestamp of the block that included this transaction \n \n \n token_a_symbol \n varchar \n The symbol of one of the two tokens that got traded \n \n \n token_b_symbol \n varchar \n The symbol of one of the two tokens that got traded \n \n \n token_a_amount \n numeric \n The amount of token A that got traded \n \n \n token_b_amount \n numeric \n The amount of token B that got traded \n \n \n project \n varchar \n The dex on which this trade was executed \n \n \n version \n varchar \n Which version of the dex got used? \n \n \n blockchain \n varchar \n Which blockchain did this occur on \n \n \n taker \n varbinary \n Which contract called the dex contract? \n \n \n maker \n varbinary \n In some special cases there actually is a counter party to transactions, this party will get displayed here if applicable \n \n \n token_a_amount_raw \n numeric \n The raw amount of token A that got traded \n \n \n token_b_amount_raw \n numeric \n The raw amount of token B that got traded \n \n \n amount_usd \n numeric \n The USD value of this trade \n \n \n token_a_address \n varbinary \n The ERC-20 token contract address of token A \n \n \n token_b_address \n varbinary \n The ERC-20 token contract address of token B \n \n \n exchange_contract_address \n varbinary \n The address of the decentralized exchange contract that made this trade possible \n \n \n tx_hash \n varbinary \n The hash of the transaction that contained this trade \n \n \n tx_from \n varbinary \n Which address initiated this transaction? \n \n \n tx_to \n varbinary \n What was the first smart contract that got called during this tx? \n \n \n trace_address \n ARRAY \n Which position in the graph tree does the execution of the trade have? \n \n \n evt_index \n integer \n This logs index position in the block (cumulative amount of logs ordered by execution) \n \n \n trade_id \n integer \n Just for database magic", "url": "https://dune.com/docs/data-tables/spellbook/top-tables/dex.trades/#column-data"}
{"content": "Spell Categories \u00b6 \n In general, there are two types of spell categories.  \n ", "url": "https://dune.com/docs/data-tables/spellbook/top-tables/#spell-categories"}
{"content": "Sector Spells \u00b6 \n Sector Spells are tables like dex.trades, erc20.stablecoins, lending.borrow, tokens.erc20, etc. \n These Spells take in data from multiple contracts and projects, standardize the data across them and therefore make it very easy to query for this data and compare the metrics of different projects with each other. \n Team Dune and the community are always improving on these sector spells, all new additions to existing ones are always welcome. \n ", "url": "https://dune.com/docs/data-tables/spellbook/top-tables/#sector-spells"}
{"content": "Project Spells \u00b6 \n Projects (Opensea, Uniswap, Aave, etc) can assemble their data into one neat table that has all the data they need in one place. To do this, you can construct views or tables in our spells. \n The main advantage here over just constructing a view is that you are able to deal with bigger amounts of data in our Spells since we can run them automatically in the background every few hours.", "url": "https://dune.com/docs/data-tables/spellbook/top-tables/#project-spells"}
{"content": "Abstraction and Aggregation Tables for Blockchain Data \u00b6 \n Spellbook is an open-source  dbt repository  (https://docs.getdbt.com/docs/introduction)  for creating and maintaining high-level blockchain data tables using SQL and  Jinja templating  (https://realpython.com/primer-on-jinja-templating/) . \n Spells are custom tables that are built and maintained by Dune and our community. \n It enables the community to build toward a standardized way to transform data into meaningful abstraction layers. With web3 data, we have a foundational layer of  Raw Data  (../raw/)  - blockchain transactions, traces, and logs. Spellbook lets us create abstracted data sets, like  dex.trades  (https://dune.com/spellbook#!/model/model.spellbook.dex_trades)  and  nft.trades  (https://dune.com/spellbook#!/model/model.spellbook.nft_trades) , which aggregate and organize raw data from multiple sources to make it much easier to query. \n dbt natively understands the dependencies between all models. In our old abstractions logic we were managing dependencies manually, which made deploying and maintaining them a mess. With dependency management, we can guarantee that all models are deployed in the correct order. \n \n We hope you are as excited as we are about this tool. You can add a view, seed file (excel/csv), or materialized table (incremental or not) by  contributing to spellbook  (./) . \n ", "url": "https://dune.com/docs/data-tables/spellbook/#abstraction-and-aggregation-tables-for-blockchain-data"}
{"content": "Contributing to Spellbook \u00b6 \n If you'd like to contribute to Dune spells, take a look at  Spellbook  (./) . \n These enable you to effortlessly aggregate lots of data with as little friction as possible. \n To view available Spells, take a look at our  Spellbook model documentation  (https://dune.com/spellbook)  and learn how to contribute new Spells  here  (./) \n Our Spells are managed via the public  Spellbook GitHub repository  (https://github.com/duneanalytics/spellbook/) . We welcome pull requests! \n ", "url": "https://dune.com/docs/data-tables/spellbook/#contributing-to-spellbook"}
{"content": "Why Spellbook? \u00b6 \n To better understand why we use Spellbook, let\u2019s see it in action. \n Once upon a time, crypto Twitter was alight with talk of a new NFT project called Renga. \n What\u2019s the project about? Is it something worth buying as an investment? \n If we want to do some on-chain analysis, we could start by going to OpenSea and finding the Renga collection ( here  (https://opensea.io/collection/renga) ). \n \n By viewing an item from this collection  (https://opensea.io/assets/ethereum/0x394e3d3044fc89fcdd966d3cb35ac0b32b0cda91/6294) , we can get the collection\u2019s contract address as well as the unique ID from its OpenSea URL. \n \n We can also scroll down and click on a transaction to  view it on the blockchain explorer  (https://etherscan.io/tx/0x96f158d75379057d95c1c562b9908603e543feee25a71ac420e21ecf0a0c643c)  and get more data like: \n \n The transaction block and hash \n The To/From addresses for the transfer \n How much ETH was transferred \n \n At a base level, blockchain data is packaged in blocks, which is one form of data we call \u201cRaw\u201d in Dune. \n So from our research, we could build a Query that pulls the data from the block in which this transaction happened. \n  (#__codelineno-0-1) SELECT   * \n  (#__codelineno-0-2) \n  (#__codelineno-0-3) FROM   ethereum . blocks \n  (#__codelineno-0-4) \n  (#__codelineno-0-5) WHERE   number   =   15661624   --the block number we found in etherscan \n \n That returns: \n \n A lot is going on in this block so this isn\u2019t very targeted. Also, the data here isn\u2019t very understandable. \n We could also search for this specific transaction to get closer to our target: \n  (#__codelineno-1-1) SELECT   * \n  (#__codelineno-1-2) \n  (#__codelineno-1-3) FROM   ethereum . transactions \n  (#__codelineno-1-4) \n  (#__codelineno-1-5) --the transaction hash we found in etherscan \n  (#__codelineno-1-6) \n  (#__codelineno-1-7) WHERE   where   block_number   =   15661624   AND   hash   =   '0x96f158d75379057d95c1c562b9908603e543feee25a71ac420e21ecf0a0c643c' \n \n Which gets us: \n \n Some more interesting info here like  gas_price  and  gas_used  but the juicy stuff is in the  data  column - but to understand that we\u2019d need to reference the contract\u2019s  Application Binary Interface  (https://www.quicknode.com/guides/smart-contract-development/what-is-an-abi)  ABI. \n Thankfully, Dune has  Decoded Data  (../decoded/) , which contains contract data that\u2019s been automatically decoded from the transaction\u2019s raw data using the ABI - the machines save us time. \n With Decoded Data, we can make a Query like this: \n  (#__codelineno-2-1) SELECT   * \n  (#__codelineno-2-2) \n  (#__codelineno-2-3)      ,   concat ( '0x' , substr ( get_json_object ( offer [ 0 ],   \"$.token\" ), 3 , 40 ))   as   token_contract_address \n  (#__codelineno-2-4) \n  (#__codelineno-2-5)      ,   get_json_object ( consideration [ 0 ],   \"$.identifier\" )   as   token_id \n  (#__codelineno-2-6) \n  (#__codelineno-2-7) FROM   seaport_ethereum . Seaport_evt_OrderFulfilled \n  (#__codelineno-2-8) \n  (#__codelineno-2-9) WHERE   evt_tx_hash   =   lower ( \"0x96f158d75379057d95c1c562b9908603e543feee25a71ac420e21ecf0a0c643c\" )   --sample tx \n \n Which would return data like this: \n \n What\u2019s happening here: \n \n We dug through Dune to find the  seaport_ethereum  contract set and the  Seaport_evt_OrderFulfilled  table which contains the data for our specific transaction. (which takes a lot of time in and of itself). \n To get closer to something we really want, token contract address and token ID, we had to: \n Know to look for the offer column and get the first position in that array \n Make it a JSON object, knowing token contracts are 20 bytes which means 40 characters. \n And do a similar amount of manual abstraction for the token ID \n \n \n \n Yet now we still don\u2019t have something interesting like how much money was this NFT sold for. \n If we want to get there, someone has to do this abstraction work. \n But what if, once that work was done the first time, the rest of the community could skip all that noise to get straight to the juicy insights? \n With the  nft.trades  (https://dune.com/spellbook#!/model/model.spellbook.nft_trades)  Spell, we can do this: \n  (#__codelineno-3-1) SELECT \n  (#__codelineno-3-2) \n  (#__codelineno-3-3)      seller \n  (#__codelineno-3-4) \n  (#__codelineno-3-5)      ,   buyer \n  (#__codelineno-3-6) \n  (#__codelineno-3-7)      ,   amount_original \n  (#__codelineno-3-8) \n  (#__codelineno-3-9)      ,   currency_symbol \n  (#__codelineno-3-10) \n  (#__codelineno-3-11)      ,   * \n  (#__codelineno-3-12) \n  (#__codelineno-3-13) FROM   nft . trades \n  (#__codelineno-3-14) \n  (#__codelineno-3-15) WHERE   tx_hash   =   lower ( \"0x96f158d75379057d95c1c562b9908603e543feee25a71ac420e21ecf0a0c643c\" )   --sample tx \n \n Which returns this: \n \n And right away, with a couple of lines of SQL we can see: \n \n The seller and buyer wallet addresses \n The amount that was paid in what cryptocurrency \n Which blockchain it was on \n \n And more! \n This illustrates how on a micro level, for one transaction, a ton of work was saved thanks to the Spell adding done by Wizards who came before us. \n This of course also scales to the macro. \n If we wanted to do a cross-chain NFT marketplace analysis, we might aim to build something like this dashboard: \n \n \n Cross Chain NFT Marketplace Metrics by @agaperste  (https://dune.com/agaperste/cross-chain-nft-marketplace-metrics) \n \n \n With the nft.trades spell, we can see industry-wide stats like: \n \n Total volume by # of txs and $USD \n 24-hr volume \n 24-hour and 7-day growth \n Market share by marketplace \n Volume by marketplace \n Transaction count by marketplace \n \n And we can query, visualize, and make a dashboard out of that data all in a couple of hours instead of dozens. \n And once a new NFT marketplace is launched, anyone in the community who knows how to add a Spell can do the data engineering for that marketplace, submit a Pull Request to Spellbook, and have the entire community benefit from their work. \n For the first time in history, we have access to an open dataset thanks to blockchains. \n Thanks to Spellbook, we can all build on top of that open data to make it more transparent, accessible, and meaningful together!", "url": "https://dune.com/docs/data-tables/spellbook/#why-spellbook"}
{"content": "The Four Kinds of Tables \u00b6 \n Dune ingests data from  node providers  (https://www.quicknode.com/case-study/dune-analytics)  to directly fill our  raw tables  for each chain. This data is then decoded using contract ABIs to provide easier to work with  decoded tables . Then we create abstracted tables that standardize and aggregate the data (from all other tables) - giving you the easiest to work with  spell tables .  \n We also ingest data from  community providers  like  Reservoir  (community/reservoir/) ,  Neynar  (community/neynar/farcaster/)  and  Flashbots  (community/flashbots/) , which you can think of as spell level abstractions. \n \n Easy Tables \n We highly recommend you use spellbook and decoded tables first, and then if you can't find the data you want try raw tables. \n \n In each section below, you'll find details on how the tables are created and some table definitions/descriptions. \n \n \n \n Raw data  (raw/) \u00b6  (#raw-data) \n \n Unedited, raw and encoded blockchain data. \n \u2192 Raw data  (raw/) \n \n \n Decoded data  (decoded/) \u00b6  (#decoded-data) \n \n View the decoded calls and events made to smart contracts. This data is still unedited. \n \u2192 Decoded data  (decoded/) \n \n \n Spellbook  (spellbook/) \u00b6  (#spellbook) \n \n Easy to work with aggregated tables that are maintained by Dune and our community. \n \u2192 Spellbook  (spellbook/) \n \n \n Community  (community/) \u00b6  (#community) \n \n Enhanced tables that combine onchain and offchain data together. \n \u2192 Community  (community/) \n \n \n \n ", "url": "https://dune.com/docs/data-tables/#the-four-kinds-of-tables"}
{"content": "Available Chains \u00b6 \n Here are the chains we have available to Query in Dune. \n Non-EVM Chains \n \n \n Solana \n \n \n Bitcoin \n \n \n EVM Chains \n \n \n Ethereum Mainnet \n \n \n Gnosis (previously xDai) \n \n \n Polygon (POS) \n \n \n Optimism \n \n \n Base \n \n \n BNB (Binance Smart Chain) \n \n \n Arbitrum \n \n \n Avalanche (c-chain) \n \n \n Goerli (Ethereum) \n \n \n Fantom \n \n \n Zksync Era \n \n \n Celo \n \n \n ", "url": "https://dune.com/docs/data-tables/#available-chains"}
{"content": "Non-EVM Chains \u00b6 \n Solana \u00b6  (#solana) \n Solana is a non-EVM blockchain that aims to have high transaction speeds without sacrificing decentralization. The chain employs a bunch of novel approaches, including the \u201cproof of history\u201d mechanism, which is why you'll find their data is quite different from EVM chains. \n You can learn to get started with Solana data analysis here  (https://web3datadegens.substack.com/p/starter-guide-to-solana-data-analysis) \n Bitcoin \u00b6  (#bitcoin) \n The original blockchain launched by Satoshi in 2009, using a UTXO and ledger structure. You can get started with Bitcoin analysis using  this guide  (https://web3datadegens.substack.com/p/how-to-analyze-bitcoin-data-with) \n ", "url": "https://dune.com/docs/data-tables/#non-evm-chains"}
{"content": "EVM Chains \u00b6 \n Ethereum Mainnet \u00b6  (#ethereum-mainnet) \n Ethereum was first launched in 2015 and is the original Blockchain that innovated and implemented the Ethereum Virtual Machine. Ethereum to this day remains a \"truly\" decentralized platform with many node operators all over the world securing the Blockchain. Ethereum is maintained and developed by independent developers all over the world. \n You can get started with EVM data analysis  with this guide  (https://web3datadegens.substack.com/p/a-basic-wizard-guide-to-dune-sql) . \n \n \n Ethereum Developer Docs  (https://ethereum.org/en/developers/docs) \n \n \n Gnosis Chain (xDai) \u00b6  (#gnosis-chain-xdai) \n Gnosis Chain is the predecessor of xDAI. It's a unique system in which the native fee currency is a bridged version of the stablecoin $DAI. The chain uses a unique dual-token model; $xDai is a stable token used for transactions, payments, and fees; Proof of Stake protection will be provided by $GNO with the consensus-layer Gnosis Beacon Chain. \n Gnosis Chain is yet to complete it's transition to an open proof of stake system, in the meanwhile the chain is being maintained by the POSDAO. You can read more about this transitional state  here  (https://developers.gnosischain.com/for-validators/consensus) . \n Gnosis Chain will continue xDai\u2019s intent to follow the Ethereum roadmap as closely as possible. Future goals include: \n \n Offer the highest degree of compatibility between Gnosis Chain and Ethereum \n Set up a Gnosis Beacon Chain (in preparation of a later merge) \n Develop over time a role similar to what Kusama is to Polkadot \n \n Gnosis Chain follows all standards and upgrades of Ethereum Mainnet, querying on Dune is exactly the same. \n Polygon POS \u00b6  (#polygon-pos) \n Polygon(formerly MATIC) is an Ethereum sidechain hosted and maintained by by Polygon Technology. Polygon PoS is a solution that achieves transaction speed and cost savings by utilizing a POS network. Polygon node requirements are significantly higher than Mainnet requirements as Polygon has a higher gas limit and shorter block time.  \n You can read more about Polygon and their approach to scaling an EVM in their  documentation  (https://docs.polygon.technology) . \n Polygon follows all the rules of ETH mainnet and querying on Dune works exactly the same. \n Optimism \u00b6  (#optimism) \n Optimism is a Layer 2 Optimistic Rollup network designed to utilize the strong security guarantees of Ethereum while reducing its cost and latency. Optimism processes transactions outside of Ethereum Mainnet, reducing congestion on the base layer and improving scalability. For a Deep Dive into Optimism, we recommend reading through their  Documentation  (https://community.optimism.io/docs/how-optimism-works) . \n Optimism differs in it's EVM implementation in the calculation of gas costs, since it also needs to pay for L1 resources. \n \n Optimism Regenesis \n We've included Optimism's OVM 1.0 base tables (blocks, logs, traces, transactions) in Dune V2, which can be found in the  optimism_legacy_ovm1  database. Data from these tables are labeled \"Optimism (Legacy)\" in the dropdown menu and use this icon:  \n \n These tables are no longer updated as Optimism made significant changes with their  OVM 2.0 update  (https://twitter.com/optimismFND/status/1458953238867165192) . \n Data for the current version of Optimism's blockchain (November 11th, 2021 to present), is contained in the  optimism  database, are labeled \"Optimism\" in the dropdown menu, and use this icon: \n \n \n Base \u00b6  (#base) \n Base is an Optimistic Rollup that is built on top of the OP stack. It is a Layer 2 solution that utilizes the strong security guarantees of Ethereum while reducing its cost and latency. Base processes transactions outside of Ethereum Mainnet, reducing congestion on the base layer and improving scalability. For a Deep Dive into Base, we recommend reading through their  Documentation  (https://docs.base.org/) . Base is launched an maintained by coinbase. It follows the Optimism EVM implementation. \n Zora \u00b6  (#zora) \n Zora is a decentralized protocol for media ownership, distribution, and monetization. Zora has launched an Optimistic Rollup that is built on top of the OP stack. It is a Layer 2 solution that utilizes the strong security guarantees of Ethereum while reducing its cost and latency. Zora processes transactions outside of Ethereum Mainnet, reducing congestion on the base layer and improving scalability. For a Deep Dive into Zora, we recommend reading through their  Documentation  (https://docs.zora.co/) . \n BNB Chain (BSC) \u00b6  (#bnb-chain-bsc) \n BNB Chain(formerly Binance Smart Chain, BSC) is an instance of the Ethereum Virtual Machine built and maintained by a team from the popular Crypto Exchange  Binance  (https://binance.com) . BNB Chain follows most of the rules of Ethereum Mainnet, but has not implemented EIP1559. Instead it relies on  BEP-95  (https://github.com/bnb-chain/BEPs/blob/master/BEP95.md)  to burn fees that accrue during usage of the platform. Furthermore, the gas limit per block is set to 100 mio, enabling more transactions to be processed in a given block. Transactions fees are paid in $BNB instead of $ETH. \n You can read more about BNB Chain in  the documentation  (https://docs.bnbchain.org/docs/bnbIntro) . \n On Dune, that means that the gas fields for EIP1559 transactions stay empty, everything else is the same. \n \n \n BNB Chain Documentation  (https://docs.bnbchain.org/docs/bnbIntro) \n \n \n Arbitrum \u00b6  (#arbitrum) \n Arbitrum is an optimistic rollup that settles it's transactions on Ethereum Mainnet. You can read all about Arbitrum's approach to scaling and building a rollup  in their docs  (https://developer.offchainlabs.com/docs/inside_arbitrum) . \n Arbitrum's execution environment differs from the Mainnet EVM implementation in it's calculation of gas costs. Since Arbitrum is an optimistic rollup that publishes it's transaction on Ethereum Mainnet, the gas calculations have to account for additional factors. \n Avalanche (C-Chain) \u00b6  (#avalanche-c-chain) \n C-Chain is an instance of the Ethereum Virtual Machine powered by the Avalanche network. It follows the rules of Ethereum Mainnet and only differs in it's consensus mechanism, all other technical specification are exactly the same. Gas is paid in $AVAX instead of $ETH. \n You can read more about Avalanche Network and C-Chain  in this article  (https://learn.figment.io/protocols/avalanche) . \n Working with the C-Chain on Dune works exactly like querying Ethereum mainnet data. Only  avalanche_c.blocks  has slightly different properties as Avalanche C-Chain is already in a proof of stake(POS) consensus algorithm. \n Ethereum's Goerli Testnet \u00b6  (#ethereums-goerli-testnet) \n Created in September 2018 during ETHBerlin,  Goerli Testnet  (https://goerli.net/)  was the first proof-of-authority cross-client testnet, synching Parity Ethereum, Geth, Nethermind, Hyperledger Besu (formerly Pantheon), and EthereumJS. \n This is the perfect solution for dapp developers looking to get stats before you launch on mainnet! \n Fantom \u00b6  (#fantom) \n Fantom  (https://fantom.foundation/)  is a layer 1 blockchain offering smart contract functionality. \n It uses a Directed Acyclic Graph, which involves the seamless interaction of nodes in the network to ensure fast and secure transactions. \n Zksync Era \u00b6  (#zksync-era) \n \n Warning \n Zksync Era's client is currently not returning all traces. Decoded tables, traces and creation traces tables may be incomplete. \n \n zkSync Era  (https://zksync.io/)  is a Layer 2 scaling solution for Ethereum, developed by  Matter Labs  (https://matter-labs.io/) . Zksync Era utilizes zero knowledge proofs to enable fast and cheap transactions that still benefit from the security of Ethereum Mainnet. \nTo learn more about zkSync Era, we recommend reading through their  documentation  (https://era.zksync.io/docs/) . \n Celo \u00b6  (#celo) \n Celo is a layer 1 EVM blockchain. Celo was designed to enable a new universe of financial solutions accessible for mobile users, creating a global financial ecosystem where an end-user can onboard into the Celo ecosystem with just a mobile number. Here are few of the key features of Celo:  \n \n Layer-1 protocol \n EVM compatible \n Proof-of-stake \n Carbon negative \n Mobile-first identity \n Ultra-light clients \n Localized stablecoins (cUSD, cEUR, cREAL) \n Gas payable in multiple currencies", "url": "https://dune.com/docs/data-tables/#evm-chains"}
{"content": "Dune API FAQ \u00b6 \n ", "url": "https://dune.com/docs/api/faq/#dune-api-faq"}
{"content": "FAQ: Functionality \u00b6 \n How many Requests Per Minute can I make? \u00b6  (#how-many-requests-per-minute-can-i-make) \n The API rate limit currently varies by  subscription plan  (https://dune.com/pricing) . This is an overall rate limit for any type of API call made.  \n Are there specified SLAs? \u00b6  (#are-there-specified-slas) \n SLAs will be available in the future on Enterprise pricing plans. \n How do I find a query id? \u00b6  (#how-do-i-find-a-query-id) \n When navigating to a query, it\u2019s the first number after \u201c/queries/\u201d in the URL. For example in  https://dune.com/queries/241/388 , \"241\" is the query id. \n Does the API support Query Parameters? \u00b6  (#does-the-api-support-query-parameters) \n The API does support Query Parameters! \n For Dune Queries that include Parameters, you can pass parameter data as part of the  Execute Query ID endpoint  (../api-reference/execute-queries/execute-query-id/) ! \n Learn more about  building Dune Queries with Parameters here  (../../app/query-editor/parameters/) . \n And learn how to pass parameter data using  cURL here  (../api-reference/execute-queries/execute-query-id/#curl-with-parameters)  and with  Python here  (../quick-start/api-py/#parameterized-queries) . \n What are the performance and overall differences between the Dune API and the Dune web app? What are the differences in what I can query? \u00b6  (#what-are-the-performance-and-overall-differences-between-the-dune-api-and-the-dune-web-app-what-are-the-differences-in-what-i-can-query) \n There are no major performance differences within a specific performance tier when used through the Dune API or Dune web app. \n The Dune API gives you programmatic access to the capabilities and data sets that can already be accessed from the Dune web app. \n What is the execution timeout limit and can I request a longer limit? \u00b6  (#what-is-the-execution-timeout-limit-and-can-i-request-a-longer-limit) \n The query execution timeout limit matches the Dune web app - 30 minutes. \n Which query engine should I use with the API? \u00b6  (#which-query-engine-should-i-use-with-the-api) \n We recommend using the API with v2 Dune SQL as we\u2019re slowly deprecating usage and support of the old v1 engine and v2 Spark SQL. \n What is the difference between the states \u201cExecuting\u201d and \u201cPending\u201d? \u00b6  (#what-is-the-difference-between-the-states-executing-and-pending) \n Pending means, the execution is waiting for an available execution connection slot. \n Executing means the query is currently executing against the database. \n Can I ingest data by getting a direct connection to the database instead? \u00b6  (#can-i-ingest-data-by-getting-a-direct-connection-to-the-database-instead) \n Not currently. In the interim we recommend periodically fetching from \u201cmax(latestBlockNumber) - 2\u201d to \u201clastFetchedBlockNumber\u201d in regular intervals. Fetching from 2 behind the latest block number ensures you receive full sets of data from each new request. \n Are query results data saved for faster retrieval? \u00b6  (#are-query-results-data-saved-for-faster-retrieval) \n Yes! \n How long are the results data from an execution stored for? \u00b6  (#how-long-are-the-results-data-from-an-execution-stored-for) \n The resutls storage period can be found on the API response on the \u201cexpires_at\u201d field in the execution status and results body. \n How much data can I retrieve in a single API result call? \u00b6  (#how-much-data-can-i-retrieve-in-a-single-api-result-call) \n There is currently a ~1GB limit. The API does not currently return an explicit error upon hitting this limit but will instead fail (timeout) when attempting to retrieve the results. \n ", "url": "https://dune.com/docs/api/faq/#faq-functionality"}
{"content": "FAQ: Billing & Pricing \u00b6 \n How will API Billing work with the new Team plans? \u00b6  (#how-will-api-billing-work-with-the-new-team-plans) \n Any API usage billing will be based on what account the API key is associated with. If you use your team api key to call a public query belonging to yourself, the billing will be associated to the team (and vice versa). \n What\u2019s a datapoint? \u00b6  (#whats-a-datapoint) \n A datapoint can in most cases be thought of rows * columns with an additional limit of 100 avg bytes per cell in a set of results. This can be expressed as: \n Datapoints = max(rows*columns, ceil(totalbytes/100)) \n Any other questions? \u00b6  (#any-other-questions) \n \ud83d\udcad If you have any questions or feedback, please reach out to our # dune-api  (https://discord.com/channels/757637422384283659/1019910980634939433)  Discord channel or  api-feedback@dune.com  (mailto:api-feedback@dune.com) ! \n \ud83d\udca1 Have an idea for additional Dune API features? Please  submit them here  (https://feedback.dune.com/) ! We value your input and are regularly implementing improvements based on user feedback. \n Find our API Terms of Service Here  (https://dune.com/api-terms)", "url": "https://dune.com/docs/api/faq/#faq-billing-pricing"}
{"content": "How to use the API \u00b6 \n The write API allows you to upload any .csv file into Dune. The only limitations are: \n \n File has to be < 200 MB \n Column names in the table can't start with a special character or digits.  \n \n Below are the specifics of how to work with the API. \n ", "url": "https://dune.com/docs/api/api-reference/upload-data/#how-to-use-the-api"}
{"content": "Authentication \u00b6 \n To authenticate with the API, you must include your API key in the request headers. The header should look like this:  \n X-Dune-Api-Key : <your-api-key> \n ", "url": "https://dune.com/docs/api/api-reference/upload-data/#authentication"}
{"content": "Endpoint \u00b6 \n The API endpoint for uploading a CSV file is: \n  (#__codelineno-2-1) POST https://api.dune.com/api/v1/table/upload/csv\n \n ", "url": "https://dune.com/docs/api/api-reference/upload-data/#endpoint"}
{"content": "Request Parameters \u00b6 \n The request payload should be a JSON object containing the following fields: \n \n table_name : (string) The target table in the database where the CSV data should be uploaded. \n description : (string, optional) A brief description of the uploaded data. Will be displayed in the Dune UI in the future. \n data : (string) The content of the CSV file, passed as a string. \n is_private : (boolean, optional) Whether the data should be private or not. Private data is only available to the team that uploaded it. Defaults to  false . \n \n ", "url": "https://dune.com/docs/api/api-reference/upload-data/#request-parameters"}
{"content": "Example Request \u00b6 \n  (#__codelineno-3-1) { \n  (#__codelineno-3-2)      \"table_name\" :   \"example_table\" , \n  (#__codelineno-3-3)      \"description\" :   \"Sample data for testing\" , \n  (#__codelineno-3-4)      \"data\" :   \"column1,column2\\nvalue1,value2\\nvalue3,value4\"   \n  (#__codelineno-3-5) } \n \n \"data\"  is simply the raw .csv data in this request. In \"real\" requests you would probably pass the data to this function inside of your local program instead. It might look something like this:  \"data\": str(data) .   \n ", "url": "https://dune.com/docs/api/api-reference/upload-data/#example-request"}
{"content": "Response \u00b6 \n The API will respond with a status code indicating the result of the upload. A successful upload will return a 200 status code. The response body may contain additional information about the result of the request. \n ", "url": "https://dune.com/docs/api/api-reference/upload-data/#response"}
{"content": "Example Usage \u00b6 \n You can test the API by forking this google colab notebook and bringing your own API key:  \n \n Google Colab Notebook  (https://colab.research.google.com/drive/1dJ9xTT5UfyylIUbMg9r-6FSeMD37HoZN?usp=sharing) \n \n Alternatively, you can use the following Python code to do the same locally: \n  (#__codelineno-4-1) # This example demonstrates how to use the new API to upload a CSV file \n  (#__codelineno-4-2) import   os \n  (#__codelineno-4-3) import   json \n  (#__codelineno-4-4) import   requests \n  (#__codelineno-4-5) \n  (#__codelineno-4-6) api_key   =   '<YOUR_API_KEY>' \n  (#__codelineno-4-7) csv_file_path   =   '<CSV_FILE_PATH>' \n  (#__codelineno-4-8) \n  (#__codelineno-4-9) url   =   'https://api.dune.com/api/v1/table/upload/csv' \n  (#__codelineno-4-10) \n  (#__codelineno-4-11) with   open ( csv_file_path )   as   open_file : \n  (#__codelineno-4-12)      data   =   open_file . read () \n  (#__codelineno-4-13) \n  (#__codelineno-4-14)      headers   =   { 'X-Dune-Api-Key' :   api_key } \n  (#__codelineno-4-15) \n  (#__codelineno-4-16)      payload   =   { \n  (#__codelineno-4-17)          \"table_name\" :   \"example_table\" , \n  (#__codelineno-4-18)          \"description\" :   \"test_description\" , \n  (#__codelineno-4-19)          \"is_private\" :   False , \n  (#__codelineno-4-20)          \"data\" :   str ( data ) \n  (#__codelineno-4-21)      } \n  (#__codelineno-4-22) \n  (#__codelineno-4-23)      response   =   requests . post ( url ,   data = json . dumps ( payload ),   headers = headers ) \n  (#__codelineno-4-24) \n  (#__codelineno-4-25)      print ( 'Response status code:' ,   response . status_code ) \n  (#__codelineno-4-26)      print ( 'Response content:' ,   response . content ) \n \n ", "url": "https://dune.com/docs/api/api-reference/upload-data/#example-usage"}
{"content": "Querying for the data in Dune \u00b6 \n Once the data has been uploaded, you can explore it in the my data section in the data explorer:  \n \n You can query for your data in any query. \n  (#__codelineno-5-1) Select   *   from   dune . dune . dataset_energy_data \n \n To check whether the datatypes are correctly inferred, you can use the following query: \n  (#__codelineno-6-1) SELECT   *   FROM   information_schema . columns   \n  (#__codelineno-6-2) WHERE   table_schema   =   'dune'   -- replace with your team name \n  (#__codelineno-6-3) AND   table_name   =   'energy_data' ;   -- replace with your dataset name \n \n ", "url": "https://dune.com/docs/api/api-reference/upload-data/#querying-for-the-data-in-dune"}
{"content": "Private data \u00b6 \n If you don't want to share your data with the world, you can also upload private data. Private data is only visible to you and your team members. To upload private data,  you need to be on the premium plan . If you are on the premium plan, you can upload private data by passing the  is_private  parameter in the request payload. \n  (#__codelineno-7-1) { \n  (#__codelineno-7-2)      \"table_name\" :   \"example_table\" , \n  (#__codelineno-7-3)      \"description\" :   \"Sample data for testing\" , \n  (#__codelineno-7-4)      \"data\" :   \"column1,column2\\nvalue1,value2\\nvalue3,value4\" , \n  (#__codelineno-7-5)      \"is_private\" :   true \n  (#__codelineno-7-6) } \n \n Data uploaded with the  is_private  parameter set to  true  will only be visible to you and your team members. You can query it in the same way as public data and use it in public queries. However, the raw data will not be visible to anyone outside of your team. \n You can also change the privacy settings of a dataset after it has been uploaded. To do so, go to settings -> data page and click on the three dots next to the dataset you want to change the privacy settings for. Then click on \"make table private\" to make the table private or \"make table public\" to make it public.  \n ", "url": "https://dune.com/docs/api/api-reference/upload-data/#private-data"}
{"content": "Deleting data \u00b6 \n You can delete your data via your settings page. \n \n \n Click on the \"settings\" button in the menu of the Dune UI. \n Click on \"data\". \n Find the dataset you want to delete. \n Click on the three dots to open the options for the dataset. \n Click on \"delete dataset\". \n confirm the deletion. \n The dataset is now deleted. \n \n ", "url": "https://dune.com/docs/api/api-reference/upload-data/#deleting-data"}
{"content": "Updating data \u00b6 \n Currently there is no way to update the data of an already existing .csv file.\nHowever, you can simply make a request to the API with the same  table_name  and replace the already existing file that way. \n Another way to do this would be to use the \"query a query\" feature to query multiple .csv files at once. \n For example: \n  (#__codelineno-8-1) --query_2441513 \n  (#__codelineno-8-2) \n  (#__codelineno-8-3) Select   *   from   dune . dune . dataset_energy_data_1 \n  (#__codelineno-8-4) \n  (#__codelineno-8-5) UNION   ALL \n  (#__codelineno-8-6) \n  (#__codelineno-8-7) Select   *   from   dune . dune . dataset_energy_data_2 \n  (#__codelineno-8-8) \n  (#__codelineno-8-9) -- add more as it becomes relevant \n \n In your main query, you could then simply refer to this query. \n  (#__codelineno-9-1) Select   *   from   ethereum . transactions   t \n  (#__codelineno-9-2) left   join   query_2441513   q   on   q . address   =   t . \"from\" \n \n ", "url": "https://dune.com/docs/api/api-reference/upload-data/#updating-data"}
{"content": "Large Amounts of Data \u00b6 \n If you want to share valuable off-chain data on Dune with your community, we are happy to discuss custom arrangements. Please reach indicate your interest via this  form  (https://bit.ly/dune-data-integration) . \n This is only applicable for datasets with positive externalities for the Dune community. Examples include: \n \n Farcaster  (../../../data-tables/community/neynar/farcaster/) \n Reservoir  (../../../data-tables/community/reservoir/) \n Flashbots  (../../../data-tables/community/flashbots/)", "url": "https://dune.com/docs/api/api-reference/upload-data/#large-amounts-of-data"}
{"content": "Example parameters with different types \u00b6 \n  (#__codelineno-0-1) [ \n  (#__codelineno-0-2)      { \n  (#__codelineno-0-3)          \"key\" :   \"block_time_start\" , \n  (#__codelineno-0-4)          \"type\" :   \"datetime\" , \n  (#__codelineno-0-5)          \"value\" :   \"2017-01-01 00:00:00\" \n  (#__codelineno-0-6)      }, \n  (#__codelineno-0-7)      { \n  (#__codelineno-0-8)          \"key\" :   \"from\" , \n  (#__codelineno-0-9)          \"type\" :   \"text\" , \n  (#__codelineno-0-10)          \"value\" :   \"0xae2fc483527b8ef99eb5d9b44875f005ba1fae13\" \n  (#__codelineno-0-11)      }, \n  (#__codelineno-0-12)      { \n  (#__codelineno-0-13)          \"key\" :   \"limit\" , \n  (#__codelineno-0-14)          \"type\" :   \"number\" , \n  (#__codelineno-0-15)          \"value\" :   \"20\" \n  (#__codelineno-0-16)      }, \n  (#__codelineno-0-17)      { \n  (#__codelineno-0-18)          \"key\" :   \"type\" , \n  (#__codelineno-0-19)          \"type\" :   \"enum\" , \n  (#__codelineno-0-20)          \"value\" :   \"DynamicFee\" , \n  (#__codelineno-0-21)          \"enumOptions\" :   [ \n  (#__codelineno-0-22)              \"DynamicFee\" , \n  (#__codelineno-0-23)              \"Legacy\" \n  (#__codelineno-0-24)          ] \n  (#__codelineno-0-25)      } \n  (#__codelineno-0-26) ]", "url": "https://dune.com/docs/api/api-reference/edit-queries/parameter-passing/#example-parameters-with-different-types"}
{"content": "404 - Not found", "url": "https://dune.com/docs/reference/tables/v1/abstractions/"}
{"content": "Example Request in Python \u00b6 \n  (#__codelineno-1-1) import   dotenv \n  (#__codelineno-1-2) import   os \n  (#__codelineno-1-3) import   json \n  (#__codelineno-1-4) import   requests \n  (#__codelineno-1-5) import   pandas   as   pd \n  (#__codelineno-1-6) import   time \n  (#__codelineno-1-7) \n  (#__codelineno-1-8) # load .env file \n  (#__codelineno-1-9) dotenv . load_dotenv ( '/Users/abc/Documents/Workspace/misc/.env' ) \n  (#__codelineno-1-10) # get API key \n  (#__codelineno-1-11) api_key   =   os . environ [ \"DUNE_API_KEY\" ] \n  (#__codelineno-1-12) # authentiction with api key \n  (#__codelineno-1-13) headers   =   { \"X-Dune-API-Key\" :   api_key } \n  (#__codelineno-1-14) \n  (#__codelineno-1-15) query_id   =   62608 \n  (#__codelineno-1-16) base_url   =   f \"https://api.dune.com/api/v1/query/ { query_id } /archive\" \n  (#__codelineno-1-17) result_response   =   requests . request ( \"POST\" ,   base_url ,   headers = headers ,   params = params ) \n \n ", "url": "https://dune.com/docs/api/api-reference/edit-queries/archive-query/#example-request-in-python"}
{"content": "Example Return \u00b6 \n  (#__codelineno-2-1) { \"query_id\" : 62608 } \n \n ", "url": "https://dune.com/docs/api/api-reference/edit-queries/archive-query/#example-return"}
{"content": "Error Codes \u00b6 \n \n 400 - Invalid request (e.g. invalid query ID in URL) \n 402 - Reached maximum number of private queries \n 403 - Not allowed to update this query", "url": "https://dune.com/docs/api/api-reference/edit-queries/archive-query/#error-codes"}
{"content": "Example Request \u00b6 \n ", "url": "https://dune.com/docs/api/api-reference/edit-queries/get-query/#example-request"}
{"content": "cURL \u00b6 \n  (#__codelineno-1-1) curl -X GET \"https://api.dune.com/api/v1/query/{{query_id}}\"   \\\n  (#__codelineno-1-2)   -H X-Dune-API-key: {{api_key}}\n \n ", "url": "https://dune.com/docs/api/api-reference/edit-queries/get-query/#curl"}
{"content": "Python \u00b6 \n  (#__codelineno-2-1) import   dotenv \n  (#__codelineno-2-2) import   os \n  (#__codelineno-2-3) import   json \n  (#__codelineno-2-4) import   requests \n  (#__codelineno-2-5) import   pandas   as   pd \n  (#__codelineno-2-6) import   time \n  (#__codelineno-2-7) \n  (#__codelineno-2-8) # load .env file \n  (#__codelineno-2-9) dotenv . load_dotenv ( '/Users/abc/Documents/Workspace/misc/.env' ) \n  (#__codelineno-2-10) # get API key \n  (#__codelineno-2-11) api_key   =   os . environ [ \"DUNE_API_KEY\" ] \n  (#__codelineno-2-12) # authentiction with api key \n  (#__codelineno-2-13) headers   =   { \"X-Dune-API-Key\" :   api_key } \n  (#__codelineno-2-14) \n  (#__codelineno-2-15) query_id   =   60066 \n  (#__codelineno-2-16) base_url   =   f \"https://api.dune.com/api/v1/query/ { query_id } \" \n  (#__codelineno-2-17) result_response   =   requests . request ( \"GET\" ,   base_url ,   headers = headers ) \n \n ", "url": "https://dune.com/docs/api/api-reference/edit-queries/get-query/#python"}
{"content": "Example Return \u00b6 \n  (#__codelineno-3-1) { \n  (#__codelineno-3-2)      \"query_id\" :   60066 , \n  (#__codelineno-3-3)      \"name\" :   \"Ethereum transactions\" , \n  (#__codelineno-3-4)      \"description\" :   \"Returns ethereum transactions starting from the oldest by block time\" , \n  (#__codelineno-3-5)      \"tags\" :   [ \n  (#__codelineno-3-6)          \"ethereum\" , \n  (#__codelineno-3-7)          \"transactions\" \n  (#__codelineno-3-8)      ], \n  (#__codelineno-3-9)      \"version\" :   15 , \n  (#__codelineno-3-10)      \"parameters\" :   [ \n  (#__codelineno-3-11)          { \n  (#__codelineno-3-12)              \"key\" :   \"limit\" , \n  (#__codelineno-3-13)              \"value\" :   \"5\" , \n  (#__codelineno-3-14)              \"type\" :   \"number\" \n  (#__codelineno-3-15)          } \n  (#__codelineno-3-16)      ], \n  (#__codelineno-3-17)      \"query_engine\" :   \"v2 Dune SQL\" , \n  (#__codelineno-3-18)      \"query_sql\" :   \"select block_number, block_hash, value from ethereum.transactions order by block_time asc limit {{limit}};\" , \n  (#__codelineno-3-19)      \"is_private\" :   false , \n  (#__codelineno-3-20)      \"is_archived\" :   false , \n  (#__codelineno-3-21)      \"is_unsaved\" :   false , \n  (#__codelineno-3-22)      \"owner\" :   \"dzebedaje\" \n  (#__codelineno-3-23) } \n \n ", "url": "https://dune.com/docs/api/api-reference/edit-queries/get-query/#example-return"}
{"content": "Error Codes \u00b6 \n \n 400 - Invalid query ID passed in URL (e.g. not a number) \n 404 - Query not found, or it\u2019s private and belongs to somebody else", "url": "https://dune.com/docs/api/api-reference/edit-queries/get-query/#error-codes"}
{"content": "Example Request in Python \u00b6 \n  (#__codelineno-1-1) import   dotenv \n  (#__codelineno-1-2) import   os \n  (#__codelineno-1-3) import   json \n  (#__codelineno-1-4) import   requests \n  (#__codelineno-1-5) import   pandas   as   pd \n  (#__codelineno-1-6) import   time \n  (#__codelineno-1-7) \n  (#__codelineno-1-8) # load .env file \n  (#__codelineno-1-9) dotenv . load_dotenv ( '/Users/abc/Documents/Workspace/misc/.env' ) \n  (#__codelineno-1-10) # get API key \n  (#__codelineno-1-11) api_key   =   os . environ [ \"DUNE_API_KEY\" ] \n  (#__codelineno-1-12) # authentiction with api key \n  (#__codelineno-1-13) headers   =   { \"X-Dune-API-Key\" :   api_key } \n  (#__codelineno-1-14) \n  (#__codelineno-1-15) query_id   =   62608 \n  (#__codelineno-1-16) base_url   =   f \"https://api.dune.com/api/v1/query/ { query_id } \" \n  (#__codelineno-1-17) params   =   { \n  (#__codelineno-1-18)      \"name\" :   \"test query\" , \n  (#__codelineno-1-19)      \"description\" :   \"this is the query description\" , \n  (#__codelineno-1-20)      \"tags\" :   [ \"any\" ,   \"number\" ,   \"of\" ,   \"string\" ,   \"tags\" ], \n  (#__codelineno-1-21)      \"query_sql\" :   \"SELECT block_number, block_hash from ethereum.transactions limit {{limit}}\" , \n  (#__codelineno-1-22)      \"parameters\" :   [ \n  (#__codelineno-1-23)          { \n  (#__codelineno-1-24)              \"key\" :   \"limit\" , \n  (#__codelineno-1-25)              \"type\" :   \"number\" , \n  (#__codelineno-1-26)              \"value\" :   \"5\" \n  (#__codelineno-1-27)          } \n  (#__codelineno-1-28)      ] \n  (#__codelineno-1-29) } \n  (#__codelineno-1-30) result_response   =   requests . request ( \"PATCH\" ,   base_url ,   headers = headers ,   params = params ) \n \n ", "url": "https://dune.com/docs/api/api-reference/edit-queries/update-query/#example-request-in-python"}
{"content": "Standalone Request Body \u00b6 \n  (#__codelineno-2-1) { \n  (#__codelineno-2-2)      \"name\" :   \"test query\" , \n  (#__codelineno-2-3)      \"description\" :   \"this is the query description\" , \n  (#__codelineno-2-4)      \"tags\" :   [ \"any\" ,   \"number\" ,   \"of\" ,   \"string\" ,   \"tags\" ], \n  (#__codelineno-2-5)      \"query_sql\" :   \"SELECT block_number, block_hash from ethereum.transactions limit {{limit}}\" , \n  (#__codelineno-2-6)      \"parameters\" :   [ \n  (#__codelineno-2-7)          { \n  (#__codelineno-2-8)              \"key\" :   \"limit\" , \n  (#__codelineno-2-9)              \"type\" :   \"number\" , \n  (#__codelineno-2-10)              \"value\" :   \"5\" \n  (#__codelineno-2-11)          } \n  (#__codelineno-2-12)      ] \n  (#__codelineno-2-13) } \n \n ", "url": "https://dune.com/docs/api/api-reference/edit-queries/update-query/#standalone-request-body"}
{"content": "Example Return \u00b6 \n  (#__codelineno-3-1) { \"query_id\" : 62608 } \n \n ", "url": "https://dune.com/docs/api/api-reference/edit-queries/update-query/#example-return"}
{"content": "Error Codes \u00b6 \n \n 400 - Invalid request (e.g. invalid query ID in URL, invalid JSON, params that don't match query, etc.) \n 402 - Reached maximum number of private queries \n 403 - Not allowed to update this query \n 409 - Query was updated in the meantime (this is currently never returned, but might be in the future if we add the version parameter or a nonce to the request)", "url": "https://dune.com/docs/api/api-reference/edit-queries/update-query/#error-codes"}
{"content": "Example Request in Python \u00b6 \n  (#__codelineno-1-1) import   dotenv \n  (#__codelineno-1-2) import   os \n  (#__codelineno-1-3) import   json \n  (#__codelineno-1-4) import   requests \n  (#__codelineno-1-5) import   pandas   as   pd \n  (#__codelineno-1-6) import   time \n  (#__codelineno-1-7) \n  (#__codelineno-1-8) # load .env file \n  (#__codelineno-1-9) dotenv . load_dotenv ( '/Users/abc/Documents/Workspace/misc/.env' ) \n  (#__codelineno-1-10) # get API key \n  (#__codelineno-1-11) api_key   =   os . environ [ \"DUNE_API_KEY\" ] \n  (#__codelineno-1-12) # authentiction with api key \n  (#__codelineno-1-13) headers   =   { \n  (#__codelineno-1-14)      \"X-Dune-API-Key\" :   api_key , \n  (#__codelineno-1-15)      \"Content-Type\" :   \"application/json\"    # Specify the content type as JSON \n  (#__codelineno-1-16) } \n  (#__codelineno-1-17) \n  (#__codelineno-1-18) base_url   =   f \"https://api.dune.com/api/v1/query/\" \n  (#__codelineno-1-19) params   =   { \n  (#__codelineno-1-20)      \"name\" :   \"test query\" , \n  (#__codelineno-1-21)      \"query_sql\" :   \"SELECT block_number, block_hash from ethereum.transactions limit {{limit}}\" , \n  (#__codelineno-1-22)      \"parameters\" :   [ \n  (#__codelineno-1-23)          { \n  (#__codelineno-1-24)              \"key\" :   \"limit\" , \n  (#__codelineno-1-25)              \"type\" :   \"number\" , \n  (#__codelineno-1-26)              \"value\" :   \"5\" \n  (#__codelineno-1-27)          } \n  (#__codelineno-1-28)      ], \n  (#__codelineno-1-29)      \"is_private\" :   False \n  (#__codelineno-1-30) } \n  (#__codelineno-1-31) result_response   =   requests . post ( base_url ,   headers = headers ,   json = data ) \n \n ", "url": "https://dune.com/docs/api/api-reference/edit-queries/create-query/#example-request-in-python"}
{"content": "Standalone Request Body \u00b6 \n  (#__codelineno-2-1) { \n  (#__codelineno-2-2)      \"name\" :   \"test query\" , \n  (#__codelineno-2-3)      \"query_sql\" :   \"SELECT block_number, block_hash from ethereum.transactions limit {{limit}}\" , \n  (#__codelineno-2-4)      \"parameters\" :   [ \n  (#__codelineno-2-5)          { \n  (#__codelineno-2-6)              \"key\" :   \"limit\" , \n  (#__codelineno-2-7)              \"type\" :   \"number\" , \n  (#__codelineno-2-8)              \"value\" :   \"5\" \n  (#__codelineno-2-9)          } \n  (#__codelineno-2-10)      ], \n  (#__codelineno-2-11)      \"is_private\" :   false \n  (#__codelineno-2-12) } \n \n ", "url": "https://dune.com/docs/api/api-reference/edit-queries/create-query/#standalone-request-body"}
{"content": "Example Return \u00b6 \n  (#__codelineno-3-1) { \"query_id\" : 62608 } \n \n ", "url": "https://dune.com/docs/api/api-reference/edit-queries/create-query/#example-return"}
{"content": "Error Codes \u00b6 \n \n 400 - Invalid request (e.g. invalid JSON, missing  name  or  query_sql  fields, params that don't match query, etc.) \n 402 - Reached maximum number of private queries \n 403 - Not allowed to create this query", "url": "https://dune.com/docs/api/api-reference/edit-queries/create-query/#error-codes"}
{"content": "How to CRUD Queries \u00b6 \n \n \n Create Query  (create-query/) \n Update Query  (update-query/) \n Retrieve or Get Query  (get-query/) \n Archive Query  (archive-query/) \n Make Query Private  (private-query/) \n How to Pass Parameters  (parameter-passing/) \n \n \n ", "url": "https://dune.com/docs/api/api-reference/edit-queries/#how-to-crud-queries"}
{"content": "Error Code Summary \u00b6 \n \n \n \n Method \n Description \n \n \n \n \n 400 \n Invalid request \n \n \n 402 \n Reached maximum number of private queries \n \n \n 403 \n Not allowed to create or update this query \n \n \n 404 \n Query not found, or it\u2019s private and belongs to somebody else \n \n \n 409 \n Query was updated in the meantime (this is currently never returned, but might be in the future if we add the version parameter or a nonce to the request)", "url": "https://dune.com/docs/api/api-reference/edit-queries/#error-code-summary"}
